{# Jinja2 Template: Schedule Tasks #}

Objective: Schedule the provided list of tasks, considering their dependencies, estimated durations, and existing calendar events. Assign start and end times (in ISO 8601 format, UTC) for each task.

Tasks to Schedule:
```json
{{ tasks_to_schedule | tojson(indent=2) }}
```

Existing Calendar Events (Already Scheduled):
```json
{{ existing_events | tojson(indent=2) }}
```

Constraints and Instructions:
1.  Analyze the `tasks_to_schedule`. Pay close attention to `task_id`, `description`, `dependencies`, and `estimated_time` (treat this as a guideline).
2.  Respect all `dependencies`. A task cannot start before all its dependencies are completed.
3.  Consider the `existing_events`. Do not schedule tasks that overlap with these events.
4.  Assume a standard working day (e.g., 09:00 to 17:00 UTC) unless otherwise implied.
5.  Attempt to schedule tasks as early as possible while respecting constraints.
6.  If a task cannot be scheduled due to conflicts or complex dependencies, mark its `scheduling_status` as 'Failed' or 'Conflict' and provide a brief reason if possible.
7.  Output the results as a single JSON array of task objects. Each object in the array MUST correspond to an *original* task from the input `tasks_to_schedule` list.
8.  Each output task object MUST include:
    *   `task_id`: The original task ID.
    *   `start_time`: The calculated start time in ISO 8601 format (e.g., "YYYY-MM-DDTHH:MM:SSZ") or `null` if scheduling failed.
    *   `end_time`: The calculated end time in ISO 8601 format or `null` if scheduling failed.
    *   `scheduling_status`: A status string (e.g., "Scheduled", "Conflict", "Failed: Dependency not met").
9.  Enclose the entire JSON array output in a markdown code block (```json ... ```).

Scheduled Tasks: 