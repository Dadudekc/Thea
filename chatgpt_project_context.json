{
    "project_root": "D:\\Dream.os",
    "num_files_analyzed": 371,
    "analysis_details": {
        "governance_scraper.py": {
            "language": ".py",
            "functions": [
                "load_recent_governance_events",
                "load_recent_reflections",
                "load_proposals",
                "get_rulebook_summary",
                "generate_governance_data"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5
        },
        "agents\\setup.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "agents\\chatgpt_commander_agent.py": {
            "language": ".py",
            "functions": [
                "save_log",
                "process_single_task",
                "run_chatgpt_commander_agent_loop",
                "log_event",
                "get_pending_tasks",
                "claim_task",
                "complete_task",
                "__init__",
                "login_via_cookies",
                "find_chat_by_title",
                "send_message",
                "get_latest_response",
                "close"
            ],
            "classes": {
                "AgentBus": {
                    "methods": [
                        "get_pending_tasks",
                        "claim_task",
                        "complete_task"
                    ],
                    "docstring": null,
                    "base_classes": []
                },
                "PerformanceLogger": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": []
                },
                "BrowserController": {
                    "methods": [
                        "__init__",
                        "login_via_cookies",
                        "find_chat_by_title",
                        "send_message",
                        "get_latest_response",
                        "close"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 22
        },
        "main.py": {
            "language": ".py",
            "functions": [
                "setup_environment",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "agents\\agents\\prompt_feedback_loop_agent.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "register_handler",
                "is_running"
            ],
            "classes": {
                "AgentStatus": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": []
                },
                "EventType": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": []
                },
                "Event": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": null,
                    "base_classes": []
                },
                "PlaceholderAgentBus": {
                    "methods": [
                        "register_handler",
                        "is_running"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 6
        },
        "setup.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "agents\\agents\\cursor_integration_agent.py": {
            "language": ".py",
            "functions": [
                "format_prompt_for_cursor",
                "parse_cursor_response",
                "parse_cursor_response",
                "__init__",
                "register_handler",
                "is_running"
            ],
            "classes": {
                "AgentStatus": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": []
                },
                "EventType": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": []
                },
                "Event": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": null,
                    "base_classes": []
                },
                "PlaceholderAgentBus": {
                    "methods": [
                        "register_handler",
                        "is_running"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 9
        },
        "agents\\agents\\AletheiaContentDispatcher.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "execute_full_dispatch"
            ],
            "classes": {
                "AletheiaContentDispatcher": {
                    "methods": [
                        "__init__",
                        "execute_full_dispatch"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 4
        },
        "agents\\agents\\setup.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "agents\\agents\\sim_cursor_chat_coordinator.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "register_handler",
                "is_running"
            ],
            "classes": {
                "AgentStatus": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": []
                },
                "EventType": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": []
                },
                "Event": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": null,
                    "base_classes": []
                },
                "PlaceholderAgentBus": {
                    "methods": [
                        "register_handler",
                        "is_running"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 6
        },
        "agents\\agents\\social_task_orchestrator.py": {
            "language": ".py",
            "functions": [
                "validate_task",
                "__init__",
                "register_handler",
                "is_running"
            ],
            "classes": {
                "AgentStatus": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": []
                },
                "EventType": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": []
                },
                "Event": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": null,
                    "base_classes": []
                },
                "PlaceholderAgentBus": {
                    "methods": [
                        "register_handler",
                        "is_running"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 7
        },
        "agents\\agents\\reflection_agent\\reflection_agent.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load_logs",
                "analyze_logs",
                "generate_insights",
                "suggest_improvements"
            ],
            "classes": {
                "ReflectionAgent": {
                    "methods": [
                        "__init__",
                        "_load_logs",
                        "analyze_logs",
                        "generate_insights",
                        "suggest_improvements"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 10
        },
        "agents\\agents\\workflow_agent.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_get_workflow_path",
                "create_workflow",
                "list_workflows",
                "delete_workflow",
                "execute_workflow"
            ],
            "classes": {
                "WorkflowAgent": {
                    "methods": [
                        "__init__",
                        "_get_workflow_path",
                        "create_workflow",
                        "list_workflows",
                        "delete_workflow",
                        "execute_workflow"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 12
        },
        "agents\\dreamforge\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "agents\\agents\\tests\\test_workflow_agent.py": {
            "language": ".py",
            "functions": [
                "setUp",
                "tearDown",
                "test_create_workflow_success",
                "test_create_workflow_duplicate",
                "test_execute_workflow_step_failure",
                "test_workflow_validation",
                "test_workflow_persistence_failure",
                "test_concurrent_workflow_execution",
                "test_workflow_timeout",
                "test_create_workflow_invalid_definition",
                "test_execute_workflow_success",
                "test_execute_workflow_not_found",
                "test_list_workflows_empty",
                "test_list_workflows_with_items",
                "test_delete_workflow_success",
                "test_delete_workflow_not_found",
                "test_workflow_persistence",
                "test_workflow_step_retry_mechanism",
                "test_workflow_conditional_execution",
                "test_workflow_parallel_execution",
                "test_workflow_resource_cleanup",
                "test_workflow_version_compatibility",
                "test_workflow_dynamic_step_generation",
                "test_workflow_rollback_mechanism",
                "test_workflow_state_persistence",
                "test_workflow_metrics_collection",
                "test_workflow_dependency_resolution",
                "mock_execute",
                "mock_execute_step",
                "mock_execute_step"
            ],
            "classes": {
                "TestWorkflowAgent": {
                    "methods": [
                        "setUp",
                        "tearDown",
                        "test_create_workflow_success",
                        "test_create_workflow_duplicate",
                        "test_execute_workflow_step_failure",
                        "test_workflow_validation",
                        "test_workflow_persistence_failure",
                        "test_concurrent_workflow_execution",
                        "test_workflow_timeout",
                        "test_create_workflow_invalid_definition",
                        "test_execute_workflow_success",
                        "test_execute_workflow_not_found",
                        "test_list_workflows_empty",
                        "test_list_workflows_with_items",
                        "test_delete_workflow_success",
                        "test_delete_workflow_not_found",
                        "test_workflow_persistence",
                        "test_workflow_step_retry_mechanism",
                        "test_workflow_conditional_execution",
                        "test_workflow_parallel_execution",
                        "test_workflow_resource_cleanup",
                        "test_workflow_version_compatibility",
                        "test_workflow_dynamic_step_generation",
                        "test_workflow_rollback_mechanism",
                        "test_workflow_state_persistence",
                        "test_workflow_metrics_collection",
                        "test_workflow_dependency_resolution"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "unittest.TestCase"
                    ]
                }
            },
            "routes": [],
            "complexity": 57
        },
        "agents\\calendar_agent.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "schedule_tasks",
                "find_available_slots",
                "_load_existing_schedule",
                "_parse_llm_schedule",
                "_parse_llm_slots",
                "log_event"
            ],
            "classes": {
                "CalendarAgent": {
                    "methods": [
                        "__init__",
                        "schedule_tasks",
                        "find_available_slots",
                        "_load_existing_schedule",
                        "_parse_llm_schedule",
                        "_parse_llm_slots"
                    ],
                    "docstring": "Agent responsible for scheduling tasks and managing time blocks.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 13
        },
        "agents\\architects_edge_agent.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "interpret_directive",
                "dispatch_to_dreamforge",
                "_parse_llm_action",
                "run_once",
                "log_event"
            ],
            "classes": {
                "ArchitectsEdgeAgent": {
                    "methods": [
                        "__init__",
                        "interpret_directive",
                        "dispatch_to_dreamforge",
                        "_parse_llm_action",
                        "run_once"
                    ],
                    "docstring": "The core intelligence interface for the user (The Architect).\nInterprets directives, interacts with DreamForge agents, and manages user interaction.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 11
        },
        "agents\\agents\\planner_agent.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "plan_from_goal",
                "refine_plan",
                "_parse_llm_plan"
            ],
            "classes": {
                "PlannerAgent": {
                    "methods": [
                        "__init__",
                        "plan_from_goal",
                        "refine_plan",
                        "_parse_llm_plan"
                    ],
                    "docstring": "Agent responsible for breaking down goals into actionable task lists.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 8
        },
        "agents\\agents\\tests\\test_reflection_agent.py": {
            "language": ".py",
            "functions": [
                "agent",
                "test_message_factory",
                "create_message",
                "setUp",
                "tearDown",
                "test_analyze_logs_with_date_range",
                "test_analyze_logs_invalid_date_range",
                "test_analyze_logs_corrupted_data"
            ],
            "classes": {
                "TestReflectionAgent": {
                    "methods": [
                        "setUp",
                        "tearDown",
                        "test_analyze_logs_with_date_range",
                        "test_analyze_logs_invalid_date_range",
                        "test_analyze_logs_corrupted_data"
                    ],
                    "docstring": "Unit tests for ReflectionAgent.",
                    "base_classes": [
                        "unittest.TestCase"
                    ]
                },
                "TestReflectionAgentAsync": {
                    "methods": [],
                    "docstring": "Async tests for ReflectionAgent.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 13
        },
        "agents\\dreamforge\\agents\\planner_agent.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_estimate_duration"
            ],
            "classes": {
                "PlannerAgent": {
                    "methods": [
                        "__init__",
                        "_estimate_duration"
                    ],
                    "docstring": "Agent responsible for planning and coordinating tasks.",
                    "base_classes": [
                        "BaseAgent"
                    ]
                }
            },
            "routes": [],
            "complexity": 4
        },
        "agents\\dreamforge\\agents\\workflow_agent.py": {
            "language": ".py",
            "functions": [
                "_get_value_from_context",
                "__init__",
                "_parse_llm_workflow",
                "_interpolate_params",
                "_recursive_render"
            ],
            "classes": {
                "WorkflowAgent": {
                    "methods": [
                        "__init__",
                        "_parse_llm_workflow",
                        "_interpolate_params"
                    ],
                    "docstring": "Agent responsible for managing and executing workflows.",
                    "base_classes": [
                        "BaseAgent"
                    ]
                }
            },
            "routes": [],
            "complexity": 8
        },
        "agents\\dreamforge\\agents\\agent_monitor_agent.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "__init__",
                "__init__",
                "register_handler",
                "is_running"
            ],
            "classes": {
                "AgentMonitorAgent": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Monitors the status of other agents in the system.\n\nListens for AGENT_STATUS events on the AgentBus and logs them.\nThis is a basic stub implementation fulfilling the requirement from\ntask 'fill_missing_placeholders_001'.",
                    "base_classes": [
                        "BaseAgent"
                    ]
                },
                "AgentStatus": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": []
                },
                "EventType": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": []
                },
                "Event": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": null,
                    "base_classes": []
                },
                "BaseAgent": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": null,
                    "base_classes": []
                },
                "PlaceholderAgentBus": {
                    "methods": [
                        "register_handler",
                        "is_running"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 10
        },
        "agents\\dreamforge\\agents\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "agents\\dreamforge\\core\\cursor_dispatcher.py": {
            "language": ".py",
            "functions": [
                "__init__"
            ],
            "classes": {
                "CursorDispatcher": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Cursor dispatcher agent for handling cursor-related tasks.",
                    "base_classes": [
                        "BaseAgent"
                    ]
                }
            },
            "routes": [],
            "complexity": 2
        },
        "agents\\dreamforge\\core\\agent_protocols.py": {
            "language": ".py",
            "functions": [
                "__post_init__",
                "to_dict",
                "from_dict"
            ],
            "classes": {
                "ErrorDetail": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": []
                },
                "MetricsData": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": []
                },
                "FeedbackEventMessage": {
                    "methods": [
                        "__post_init__",
                        "to_dict",
                        "from_dict"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 6
        },
        "agents\\dreamforge\\core\\config.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "agents\\dreamforge\\core\\feedback_consumer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_extract_metadata",
                "__init__"
            ],
            "classes": {
                "FeedbackProcessingError": {
                    "methods": [],
                    "docstring": "Raised when feedback processing fails.",
                    "base_classes": [
                        "Exception"
                    ]
                },
                "FeedbackConsumerService": {
                    "methods": [
                        "__init__",
                        "_extract_metadata"
                    ],
                    "docstring": null,
                    "base_classes": []
                },
                "FeedbackConsumer": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Consumes feedback events and potentially triggers prompt refinement.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 6
        },
        "agents\\dreamforge\\core\\chatgpt_commander_agent.py": {
            "language": ".py",
            "functions": [
                "__init__"
            ],
            "classes": {
                "ChatGPTCommander": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Agent for commanding and interacting with ChatGPT.",
                    "base_classes": [
                        "BaseAgent"
                    ]
                }
            },
            "routes": [],
            "complexity": 2
        },
        "agents\\dreamforge\\core\\llm_parser.py": {
            "language": ".py",
            "functions": [
                "extract_json_from_response",
                "extract_code_from_response",
                "extract_list_from_response"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "agents\\dreamforge\\core\\prompt_staging_service.py": {
            "language": ".py",
            "functions": [
                "render_prompt",
                "stage_prompt_for_cursor",
                "write_to_cursor_input",
                "read_from_cursor_output"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "agents\\dreamforge\\core\\template_engine.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_ensure_template_dir",
                "_setup_environment",
                "render",
                "add_filter",
                "add_global"
            ],
            "classes": {
                "TemplateEngine": {
                    "methods": [
                        "__init__",
                        "_ensure_template_dir",
                        "_setup_environment",
                        "render",
                        "add_filter",
                        "add_global"
                    ],
                    "docstring": "Engine for rendering Jinja2 templates.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 12
        },
        "agents\\dreamforge\\core\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "agents\\dreamforge\\core\\coordination\\agent_bus.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "get_subscriber_count",
                "is_running"
            ],
            "classes": {
                "MessageType": {
                    "methods": [],
                    "docstring": "Types of messages that can be sent through the bus.",
                    "base_classes": [
                        "Enum"
                    ]
                },
                "BusError": {
                    "methods": [],
                    "docstring": "Base exception for agent bus errors.",
                    "base_classes": [
                        "Exception"
                    ]
                },
                "Message": {
                    "methods": [],
                    "docstring": "Message structure for agent bus communication.",
                    "base_classes": []
                },
                "Subscription": {
                    "methods": [],
                    "docstring": "Subscription details.",
                    "base_classes": []
                },
                "AgentBus": {
                    "methods": [
                        "__init__",
                        "get_subscriber_count",
                        "is_running"
                    ],
                    "docstring": "Message bus for inter-agent communication.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 6
        },
        "agents\\dreamforge\\core\\coordination\\base_agent.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "register_command_handler",
                "_get_priority_value"
            ],
            "classes": {
                "BaseAgent": {
                    "methods": [
                        "__init__",
                        "register_command_handler",
                        "_get_priority_value"
                    ],
                    "docstring": "Base class for all Dream.OS agents providing common functionality.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 6
        },
        "agents\\dreamforge\\core\\coordination\\message_patterns.py": {
            "language": ".py",
            "functions": [
                "create_task_message",
                "update_task_status",
                "to_message_content",
                "from_message_content"
            ],
            "classes": {
                "TaskStatus": {
                    "methods": [],
                    "docstring": "Task execution status.",
                    "base_classes": [
                        "Enum"
                    ]
                },
                "TaskPriority": {
                    "methods": [],
                    "docstring": "Task priority levels.",
                    "base_classes": [
                        "Enum"
                    ]
                },
                "TaskMessage": {
                    "methods": [
                        "to_message_content",
                        "from_message_content"
                    ],
                    "docstring": "Standard task message format.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 6
        },
        "agents\\dreamforge\\core\\coordination\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "agents\\dreamforge\\core\\feedback\\consumer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_setup_metrics",
                "_validate_feedback",
                "_record_metrics",
                "_apply_refinement"
            ],
            "classes": {
                "FeedbackConsumerService": {
                    "methods": [
                        "__init__",
                        "_setup_metrics",
                        "_validate_feedback",
                        "_record_metrics",
                        "_apply_refinement"
                    ],
                    "docstring": "Service for consuming and processing feedback from various sources.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 10
        },
        "agents\\dreamforge\\core\\feedback\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "agents\\dreamforge\\core\\memory\\governance_memory_engine.py": {
            "language": ".py",
            "functions": [
                "log_event",
                "_store_event",
                "get_events",
                "_event_matches",
                "clear_events"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5
        },
        "agents\\dreamforge\\core\\memory\\memory_manager.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_ensure_storage_exists",
                "store_feedback",
                "get_feedback_history",
                "_save_feedback",
                "_load_feedback",
                "clear_feedback"
            ],
            "classes": {
                "MemoryManager": {
                    "methods": [
                        "__init__",
                        "_ensure_storage_exists",
                        "store_feedback",
                        "get_feedback_history",
                        "_save_feedback",
                        "_load_feedback",
                        "clear_feedback"
                    ],
                    "docstring": "Manages persistent memory storage for agents.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 14
        },
        "agents\\dreamforge\\core\\models\\workflow.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "to_dict",
                "from_dict",
                "start",
                "complete",
                "fail",
                "__init__",
                "add_step",
                "get_step",
                "update_step",
                "_update",
                "to_dict",
                "from_dict"
            ],
            "classes": {
                "WorkflowStep": {
                    "methods": [
                        "__init__",
                        "to_dict",
                        "from_dict",
                        "start",
                        "complete",
                        "fail"
                    ],
                    "docstring": "A single step in a workflow.",
                    "base_classes": []
                },
                "WorkflowDefinition": {
                    "methods": [
                        "__init__",
                        "add_step",
                        "get_step",
                        "update_step",
                        "_update",
                        "to_dict",
                        "from_dict"
                    ],
                    "docstring": "A complete workflow definition.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 26
        },
        "agents\\dreamforge\\core\\tests\\test_governance_memory_engine.py": {
            "language": ".py",
            "functions": [
                "setUp",
                "tearDown",
                "test_store_event_success",
                "test_store_event_validation",
                "test_query_events_by_type",
                "test_query_events_by_agent",
                "test_query_events_with_time_range",
                "test_event_persistence",
                "test_event_aggregation",
                "test_event_cleanup",
                "test_concurrent_event_storage",
                "test_query_with_complex_filters",
                "test_event_persistence_error_handling",
                "test_event_aggregation_advanced",
                "test_memory_management",
                "test_event_batching",
                "store_events"
            ],
            "classes": {
                "TestGovernanceMemoryEngine": {
                    "methods": [
                        "setUp",
                        "tearDown",
                        "test_store_event_success",
                        "test_store_event_validation",
                        "test_query_events_by_type",
                        "test_query_events_by_agent",
                        "test_query_events_with_time_range",
                        "test_event_persistence",
                        "test_event_aggregation",
                        "test_event_cleanup",
                        "test_concurrent_event_storage",
                        "test_query_with_complex_filters",
                        "test_event_persistence_error_handling",
                        "test_event_aggregation_advanced",
                        "test_memory_management",
                        "test_event_batching"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "unittest.TestCase"
                    ]
                }
            },
            "routes": [],
            "complexity": 33
        },
        "agents\\dreamforge\\core\\tests\\test_template_engine.py": {
            "language": ".py",
            "functions": [
                "setUp",
                "tearDown",
                "test_render_valid_template",
                "test_render_missing_template",
                "test_render_missing_variables",
                "test_template_caching",
                "test_template_reload",
                "test_nested_template_rendering",
                "test_template_inheritance",
                "test_template_filters",
                "test_template_error_handling",
                "mock_load",
                "mock_load",
                "mock_load",
                "custom_trim"
            ],
            "classes": {
                "TestTemplateEngine": {
                    "methods": [
                        "setUp",
                        "tearDown",
                        "test_render_valid_template",
                        "test_render_missing_template",
                        "test_render_missing_variables",
                        "test_template_caching",
                        "test_template_reload",
                        "test_nested_template_rendering",
                        "test_template_inheritance",
                        "test_template_filters",
                        "test_template_error_handling"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "unittest.TestCase"
                    ]
                }
            },
            "routes": [],
            "complexity": 26
        },
        "agents\\dreamforge\\core\\utils\\agent_utils.py": {
            "language": ".py",
            "functions": [
                "with_error_handling",
                "with_performance_tracking",
                "log_task_performance",
                "decorator",
                "decorator"
            ],
            "classes": {
                "AgentError": {
                    "methods": [],
                    "docstring": "Base exception for agent-related errors.",
                    "base_classes": [
                        "Exception"
                    ]
                },
                "TaskProcessingError": {
                    "methods": [],
                    "docstring": "Error during task processing.",
                    "base_classes": [
                        "AgentError"
                    ]
                },
                "MessageHandlingError": {
                    "methods": [],
                    "docstring": "Error during message handling.",
                    "base_classes": [
                        "AgentError"
                    ]
                }
            },
            "routes": [],
            "complexity": 5
        },
        "agents\\dreamforge\\tests\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "agents\\dreamforge\\tests\\conftest.py": {
            "language": ".py",
            "functions": [
                "mock_agent_bus",
                "mock_perf_logger",
                "create_test_message",
                "create_test_task"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "agents\\dreamforge\\tests\\agents\\test_planner_agent.py": {
            "language": ".py",
            "functions": [
                "planner_agent",
                "test_plan_from_goal_success",
                "test_plan_from_goal_render_fails",
                "test_plan_from_goal_llm_fails",
                "test_plan_from_goal_parsing_fails_no_json",
                "test_plan_from_goal_parsing_fails_bad_json",
                "test_plan_from_goal_parsing_fails_wrong_type",
                "test_plan_from_goal_parsing_fails_bad_item",
                "test_refine_plan_success",
                "test_refine_plan_render_fails",
                "test_refine_plan_llm_fails",
                "test_refine_plan_parsing_fails"
            ],
            "classes": {},
            "routes": [],
            "complexity": 12
        },
        "agents\\dreamforge\\tests\\agents\\test_utils.py": {
            "language": ".py",
            "functions": [
                "create_llm_response",
                "create_mock_llm_chain",
                "validate_plan",
                "validate_plan_refinement",
                "validate_llm_call",
                "setup_mock_llm_chain"
            ],
            "classes": {},
            "routes": [],
            "complexity": 6
        },
        "agents\\dreamforge\\tests\\agents\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "agents\\dreamforge\\tests\\agents\\test_workflow_agent.py": {
            "language": ".py",
            "functions": [
                "_setup_and_cleanup",
                "workflow_agent_instance",
                "sample_workflow_dict",
                "test_system_health",
                "test_generate_workflow_success",
                "test_generate_workflow_llm_fails",
                "test_generate_workflow_parsing_fails",
                "test_generate_workflow_save_fails",
                "test_execute_workflow_success",
                "test_execute_workflow_step_fails",
                "test_list_workflows_success",
                "test_list_workflows_empty",
                "test_list_workflows_dir_not_found"
            ],
            "classes": {
                "TestWorkflowGeneration": {
                    "methods": [
                        "test_generate_workflow_success",
                        "test_generate_workflow_llm_fails",
                        "test_generate_workflow_parsing_fails",
                        "test_generate_workflow_save_fails"
                    ],
                    "docstring": "Tests for workflow generation functionality.",
                    "base_classes": []
                },
                "TestWorkflowExecution": {
                    "methods": [
                        "test_execute_workflow_success",
                        "test_execute_workflow_step_fails"
                    ],
                    "docstring": "Tests for workflow execution functionality.",
                    "base_classes": []
                },
                "TestWorkflowManagement": {
                    "methods": [
                        "test_list_workflows_success",
                        "test_list_workflows_empty",
                        "test_list_workflows_dir_not_found"
                    ],
                    "docstring": "Tests for workflow management functionality.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 22
        },
        "agents\\dreamforge\\tests\\core\\test_cursor_dispatcher.py": {
            "language": ".py",
            "functions": [
                "mock_agent_bus",
                "dispatcher",
                "test_execute_cursor_task_generate_code",
                "test_execute_cursor_task_edit_file",
                "test_execute_cursor_task_failure"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5
        },
        "agents\\dreamforge\\tests\\core\\test_agent_bus.py": {
            "language": ".py",
            "functions": [
                "error_logger"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "agents\\dreamforge\\tests\\core\\test_cursor_listener.py": {
            "language": ".py",
            "functions": [
                "cursor_listener",
                "mock_message_queue"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "agents\\dreamforge\\tests\\core\\test_feedback_consumer.py": {
            "language": ".py",
            "functions": [
                "memory_manager",
                "feedback_consumer"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "agents\\dreamforge\\tests\\core\\test_llm_parser.py": {
            "language": ".py",
            "functions": [
                "sample_json_response",
                "sample_code_response",
                "sample_list_response",
                "test_setup",
                "test_with_backticks",
                "test_without_language_tag",
                "test_with_curly_braces",
                "test_invalid_json",
                "test_no_json",
                "test_with_language",
                "test_any_language",
                "test_no_code",
                "test_multiple_blocks",
                "test_bullet_points",
                "test_numbered_list",
                "test_json_array",
                "test_no_list",
                "test_invalid_json_array",
                "demonstrate_llm_parsing_with_kickoff"
            ],
            "classes": {
                "TestJSONExtraction": {
                    "methods": [
                        "test_with_backticks",
                        "test_without_language_tag",
                        "test_with_curly_braces",
                        "test_invalid_json",
                        "test_no_json"
                    ],
                    "docstring": "Tests for JSON extraction functionality.",
                    "base_classes": []
                },
                "TestCodeExtraction": {
                    "methods": [
                        "test_with_language",
                        "test_any_language",
                        "test_no_code",
                        "test_multiple_blocks"
                    ],
                    "docstring": "Tests for code extraction functionality.",
                    "base_classes": []
                },
                "TestListExtraction": {
                    "methods": [
                        "test_bullet_points",
                        "test_numbered_list",
                        "test_json_array",
                        "test_no_list",
                        "test_invalid_json_array"
                    ],
                    "docstring": "Tests for list extraction functionality.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 33
        },
        "agents\\dreamforge\\tests\\core\\test_prompt_staging_service.py": {
            "language": ".py",
            "functions": [
                "mock_template_engine",
                "mock_config",
                "test_render_prompt_success",
                "test_render_prompt_failure",
                "test_stage_prompt_for_cursor_success",
                "test_stage_prompt_for_cursor_render_failure",
                "test_write_to_cursor_input_success",
                "test_write_to_cursor_input_failure",
                "test_read_from_cursor_output_success",
                "test_read_from_cursor_output_file_not_exists",
                "test_read_from_cursor_output_empty_file",
                "test_read_from_cursor_output_invalid_json"
            ],
            "classes": {},
            "routes": [],
            "complexity": 12
        },
        "agents\\dreamforge\\tests\\core\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "agents\\dreamforge\\tests\\core\\test_template_engine.py": {
            "language": ".py",
            "functions": [
                "template_engine",
                "test_template_engine_initialization",
                "test_render_valid_template",
                "test_render_template_with_filters",
                "test_render_template_with_includes",
                "test_render_template_with_loops",
                "test_render_template_with_conditionals",
                "test_render_missing_template",
                "test_render_invalid_template_syntax",
                "test_render_with_undefined_variable",
                "test_render_with_custom_undefined_behavior",
                "test_render_with_nested_context",
                "test_template_cache",
                "mock_open_wrapper"
            ],
            "classes": {},
            "routes": [],
            "complexity": 14
        },
        "agents\\dreamforge\\tests\\core\\test_workflow_models.py": {
            "language": ".py",
            "functions": [
                "test_workflow_step_initialization",
                "test_workflow_step_lifecycle",
                "test_workflow_step_serialization",
                "test_workflow_definition_initialization",
                "test_workflow_definition_step_management",
                "test_workflow_definition_status_updates",
                "test_workflow_definition_serialization"
            ],
            "classes": {},
            "routes": [],
            "complexity": 7
        },
        "agents\\dreamforge\\tests\\core\\coordination\\test_base_agent.py": {
            "language": ".py",
            "functions": [
                "mock_agent_bus",
                "test_agent",
                "__init__"
            ],
            "classes": {
                "TestAgent": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Test agent implementation.",
                    "base_classes": [
                        "BaseAgent"
                    ]
                }
            },
            "routes": [],
            "complexity": 4
        },
        "agents\\dreamforge\\tests\\core\\utils\\test_agent_utils.py": {
            "language": ".py",
            "functions": [
                "test_log_task_performance",
                "test_log_task_performance_error_handling",
                "test_log_task_performance_with_missing_fields",
                "__init__"
            ],
            "classes": {
                "TestClass": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 5
        },
        "agents\\dreamforge\\tests\\core\\utils\\llm_test_utils.py": {
            "language": ".py",
            "functions": [
                "create_llm_test_chain",
                "patch_llm_chain",
                "with_json",
                "with_code",
                "with_list",
                "with_error",
                "__init__",
                "setup_response",
                "verify_call",
                "verify_not_called",
                "decorator"
            ],
            "classes": {
                "LLMTestResponse": {
                    "methods": [
                        "with_json",
                        "with_code",
                        "with_list",
                        "with_error"
                    ],
                    "docstring": "Test response formats for LLM outputs.",
                    "base_classes": []
                },
                "LLMChainMock": {
                    "methods": [
                        "__init__",
                        "setup_response",
                        "verify_call",
                        "verify_not_called"
                    ],
                    "docstring": "Mock for LLM chain testing.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 19
        },
        "agents\\dreamforge\\tests\\core\\utils\\test_data.py": {
            "language": ".py",
            "functions": [
                "create_test_response",
                "validate_json_response",
                "validate_code_response",
                "validate_list_response"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "agents\\dreamforge\\tests\\core\\utils\\test_utils.py": {
            "language": ".py",
            "functions": [
                "setup_test_imports",
                "init_test_suite",
                "validate_agent_files",
                "cleanup_stale_test_files",
                "check_system_health",
                "mock_agent_bus",
                "temp_workspace",
                "cleanup_test_env",
                "run_system_validation"
            ],
            "classes": {},
            "routes": [],
            "complexity": 9
        },
        "agents\\meta_architect\\architect_agent.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load_performance_logs",
                "_load_reflection_logs",
                "detect_failure_clusters",
                "detect_rule_gaps",
                "generate_system_report",
                "propose_rule_updates",
                "apply_accepted_proposals",
                "broadcast_directives",
                "run_analysis_cycle",
                "start",
                "_run",
                "stop",
                "log_governance_event",
                "dummy_log_event"
            ],
            "classes": {
                "ArchitectAgent": {
                    "methods": [
                        "__init__",
                        "_load_performance_logs",
                        "_load_reflection_logs",
                        "detect_failure_clusters",
                        "detect_rule_gaps",
                        "generate_system_report",
                        "propose_rule_updates",
                        "apply_accepted_proposals",
                        "broadcast_directives",
                        "run_analysis_cycle",
                        "start",
                        "_run",
                        "stop"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 28
        },
        "agents\\meta_architect\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "agents\\reflection_agent\\reflection_agent.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_parse_md_file",
                "_decide_response"
            ],
            "classes": {
                "ReflectionAgent": {
                    "methods": [
                        "__init__",
                        "_parse_md_file",
                        "_decide_response"
                    ],
                    "docstring": "Agent responsible for reflecting on and responding to governance alerts.",
                    "base_classes": [
                        "BaseAgent"
                    ]
                }
            },
            "routes": [],
            "complexity": 6
        },
        "agents\\services\\cursor_shadow_controller.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "send_prompt_to_cursor",
                "monitor_output",
                "run_prompt_cycle"
            ],
            "classes": {
                "CursorShadowController": {
                    "methods": [
                        "__init__",
                        "send_prompt_to_cursor",
                        "monitor_output",
                        "run_prompt_cycle"
                    ],
                    "docstring": "Shadow controller that allows background execution of prompts in Cursor\nwithout requiring visible GUI interaction, using a file-based inbox/outbox.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 8
        },
        "agents\\social\\strategies\\facebook_strategy.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "generate_content",
                "dispatch_content",
                "post_update",
                "post_comment",
                "_extract_post_id"
            ],
            "classes": {
                "FacebookStrategy": {
                    "methods": [
                        "__init__",
                        "generate_content",
                        "dispatch_content",
                        "post_update",
                        "post_comment",
                        "_extract_post_id"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "SocialStrategy"
                    ]
                }
            },
            "routes": [],
            "complexity": 12
        },
        "agents\\social\\strategies\\instagram_strategy.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "generate_content",
                "dispatch_content",
                "_generate_image",
                "post_photo",
                "post_comment"
            ],
            "classes": {
                "InstagramStrategy": {
                    "methods": [
                        "__init__",
                        "generate_content",
                        "dispatch_content",
                        "_generate_image",
                        "post_photo",
                        "post_comment"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "SocialStrategy"
                    ]
                }
            },
            "routes": [],
            "complexity": 12
        },
        "agents\\social\\strategies\\linkedin_strategy.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "generate_content",
                "dispatch_content",
                "post_update",
                "post_comment"
            ],
            "classes": {
                "LinkedInStrategy": {
                    "methods": [
                        "__init__",
                        "generate_content",
                        "dispatch_content",
                        "post_update",
                        "post_comment"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "SocialStrategy"
                    ]
                }
            },
            "routes": [],
            "complexity": 10
        },
        "agents\\social\\strategies\\__init__.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "generate_content",
                "dispatch_content"
            ],
            "classes": {
                "SocialStrategy": {
                    "methods": [
                        "__init__",
                        "generate_content",
                        "dispatch_content"
                    ],
                    "docstring": "Base class for all social media platform strategies.",
                    "base_classes": [
                        "ABC"
                    ]
                }
            },
            "routes": [],
            "complexity": 6
        },
        "agents\\social\\strategies\\twitter_strategy.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "generate_content",
                "dispatch_content",
                "post_update",
                "post_comment"
            ],
            "classes": {
                "TwitterStrategy": {
                    "methods": [
                        "__init__",
                        "generate_content",
                        "dispatch_content",
                        "post_update",
                        "post_comment"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "SocialStrategy"
                    ]
                }
            },
            "routes": [],
            "complexity": 10
        },
        "agents\\tests\\test_architects_edge_agent.py": {
            "language": ".py",
            "functions": [
                "mock_agent_bus_instance",
                "architects_edge_agent_instance",
                "test_interpret_directive_success",
                "test_interpret_directive_render_fails",
                "test_interpret_directive_llm_fails",
                "test_interpret_directive_parsing_fails_no_json",
                "test_interpret_directive_parsing_fails_bad_json",
                "test_interpret_directive_parsing_fails_missing_keys",
                "test_dispatch_to_dreamforge_success",
                "test_dispatch_to_dreamforge_no_params",
                "test_dispatch_to_dreamforge_invalid_action_none",
                "test_dispatch_to_dreamforge_invalid_action_dict",
                "test_dispatch_to_dreamforge_invalid_params"
            ],
            "classes": {},
            "routes": [],
            "complexity": 13
        },
        "analysis\\log_analyzer.py": {
            "language": ".py",
            "functions": [
                "load_logs",
                "analyze"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "agents\\tests\\test_calendar_agent.py": {
            "language": ".py",
            "functions": [
                "sample_tasks_input",
                "mock_llm_schedule_response",
                "mock_llm_slots_response",
                "calendar_agent_instance",
                "test_schedule_tasks_success",
                "test_schedule_tasks_missing_in_response",
                "test_schedule_tasks_render_fails",
                "test_schedule_tasks_llm_fails",
                "test_schedule_tasks_parsing_fails",
                "test_find_available_slots_success",
                "test_find_available_slots_render_fails",
                "test_find_available_slots_llm_fails",
                "test_find_available_slots_parsing_fails",
                "test_find_available_slots_complex_constraints"
            ],
            "classes": {},
            "routes": [],
            "complexity": 14
        },
        "coordination\\agent_bus.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_lock_file",
                "_unlock_file",
                "_read_tasks",
                "_write_tasks",
                "send_task",
                "get_pending_tasks",
                "claim_task",
                "complete_task"
            ],
            "classes": {
                "AgentBus": {
                    "methods": [
                        "__init__",
                        "_lock_file",
                        "_unlock_file",
                        "_read_tasks",
                        "_write_tasks",
                        "send_task",
                        "get_pending_tasks",
                        "claim_task",
                        "complete_task"
                    ],
                    "docstring": "Manages task communication between agents via a shared JSON file.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 18
        },
        "core\\config.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\llm_parser.py": {
            "language": ".py",
            "functions": [
                "extract_json_from_response",
                "log_event"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "core\\coordination\\agent_bus.py": {
            "language": ".py",
            "functions": [
                "__new__",
                "__init__",
                "register_agent",
                "unregister_agent",
                "get_agent",
                "dispatch",
                "log_event",
                "__init__",
                "process_message"
            ],
            "classes": {
                "AgentBus": {
                    "methods": [
                        "__new__",
                        "__init__",
                        "register_agent",
                        "unregister_agent",
                        "get_agent",
                        "dispatch"
                    ],
                    "docstring": "A Singleton message bus for inter-agent communication.",
                    "base_classes": []
                },
                "MockAgent": {
                    "methods": [
                        "__init__",
                        "process_message"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 17
        },
        "core\\prompt_staging_service.py": {
            "language": ".py",
            "functions": [
                "_load_project_analysis",
                "render_prompt",
                "stage_prompt_for_cursor",
                "fetch_cursor_response",
                "stage_and_execute_prompt",
                "log_event",
                "write_to_cursor_input",
                "read_from_cursor_output"
            ],
            "classes": {},
            "routes": [],
            "complexity": 8
        },
        "core\\template_engine.py": {
            "language": ".py",
            "functions": [
                "_log_engine_message",
                "render_template",
                "log_event"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "core\\coordination\\cursor\\cursor_chat_coordinator.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "interpret_response",
                "handle_feedback",
                "stop_loop"
            ],
            "classes": {
                "CursorChatCoordinator": {
                    "methods": [
                        "__init__",
                        "interpret_response",
                        "handle_feedback",
                        "stop_loop"
                    ],
                    "docstring": "Manages Cursor chat interactions, interprets responses, and guides multi-agent execution based on the conversation flow.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 8
        },
        "core\\coordination\\cursor\\bridge_adapter.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "translate_goal_to_plan",
                "_build_refactor_plan",
                "_build_generate_tests_plan",
                "_build_execute_prompt_plan"
            ],
            "classes": {
                "CursorGoal": {
                    "methods": [],
                    "docstring": "Represents a high-level goal for Cursor automation.",
                    "base_classes": []
                },
                "CursorBridgeAdapter": {
                    "methods": [
                        "__init__",
                        "translate_goal_to_plan",
                        "_build_refactor_plan",
                        "_build_generate_tests_plan",
                        "_build_execute_prompt_plan"
                    ],
                    "docstring": "Translates high-level Cursor-related goals into executable TaskExecutionPlans.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 10
        },
        "core\\coordination\\cursor\\cursor_element_locator.py": {
            "language": ".py",
            "functions": [
                "create_locator",
                "center",
                "area",
                "to_dict",
                "__init__",
                "_load_templates",
                "detect_element",
                "detect_all_elements",
                "verify_element_state"
            ],
            "classes": {
                "BoundingBox": {
                    "methods": [
                        "center",
                        "area",
                        "to_dict"
                    ],
                    "docstring": "Represents a detected UI element's location.",
                    "base_classes": []
                },
                "CursorElementLocator": {
                    "methods": [
                        "__init__",
                        "_load_templates",
                        "detect_element",
                        "detect_all_elements",
                        "verify_element_state"
                    ],
                    "docstring": "Detects UI elements in Cursor window screenshots.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 17
        },
        "core\\coordination\\cursor\\cursor_instance_controller.py": {
            "language": ".py",
            "functions": [
                "to_dict",
                "__init__",
                "has_next",
                "chain",
                "can_retry",
                "increment_retry",
                "__init__",
                "capture",
                "__init__",
                "_init_instances",
                "get_available_instance",
                "get_instance_states",
                "chain_commands"
            ],
            "classes": {
                "CommandResult": {
                    "methods": [
                        "to_dict"
                    ],
                    "docstring": "Result of an automated command execution.",
                    "base_classes": []
                },
                "CursorCommand": {
                    "methods": [
                        "__init__",
                        "has_next",
                        "chain",
                        "can_retry",
                        "increment_retry"
                    ],
                    "docstring": "Represents a command to be executed on a Cursor instance.",
                    "base_classes": []
                },
                "CursorInstance": {
                    "methods": [
                        "__init__",
                        "capture"
                    ],
                    "docstring": "Controls a single Cursor window instance.",
                    "base_classes": []
                },
                "CursorInstanceController": {
                    "methods": [
                        "__init__",
                        "_init_instances",
                        "get_available_instance",
                        "get_instance_states",
                        "chain_commands"
                    ],
                    "docstring": "Controls multiple Cursor instances for fleet automation.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 26
        },
        "core\\coordination\\cursor\\cursor_ui_trainer.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "setup_data_dirs",
                "setup_ui",
                "refresh_windows",
                "on_window_selected",
                "prepare_capture",
                "capture_element"
            ],
            "classes": {
                "CursorUITrainer": {
                    "methods": [
                        "__init__",
                        "setup_data_dirs",
                        "setup_ui",
                        "refresh_windows",
                        "on_window_selected",
                        "prepare_capture",
                        "capture_element"
                    ],
                    "docstring": "Training UI for capturing Cursor interface elements.",
                    "base_classes": [
                        "QWidget"
                    ]
                }
            },
            "routes": [],
            "complexity": 15
        },
        "core\\coordination\\cursor\\cursor_window_controller.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_setup_os_specific_handlers",
                "detect_all_instances",
                "activate_window",
                "get_window_by_id",
                "print_window_map",
                "enum_callback",
                "get_window_info"
            ],
            "classes": {
                "WindowWrapper": {
                    "methods": [],
                    "docstring": "Cross-platform window handle wrapper.",
                    "base_classes": []
                },
                "CursorWindowController": {
                    "methods": [
                        "__init__",
                        "_setup_os_specific_handlers",
                        "detect_all_instances",
                        "activate_window",
                        "get_window_by_id",
                        "print_window_map"
                    ],
                    "docstring": "Controls multiple Cursor window instances.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 14
        },
        "core\\coordination\\cursor\\task_execution_monitor.py": {
            "language": ".py",
            "functions": [
                "create_monitor",
                "__init__",
                "_get_state_style",
                "__init__",
                "_get_state_style",
                "__init__",
                "_update_task",
                "_update_stats",
                "handle_feedback"
            ],
            "classes": {
                "TaskStepWidget": {
                    "methods": [
                        "__init__",
                        "_get_state_style"
                    ],
                    "docstring": "Widget displaying a single task step's status.",
                    "base_classes": [
                        "QFrame"
                    ]
                },
                "TaskWidget": {
                    "methods": [
                        "__init__",
                        "_get_state_style"
                    ],
                    "docstring": "Widget displaying a complete task's execution status.",
                    "base_classes": [
                        "QFrame"
                    ]
                },
                "TaskMonitorSignals": {
                    "methods": [],
                    "docstring": "Signals for task monitor updates.",
                    "base_classes": [
                        "QObject"
                    ]
                },
                "TaskExecutionMonitor": {
                    "methods": [
                        "__init__",
                        "_update_task",
                        "_update_stats",
                        "handle_feedback"
                    ],
                    "docstring": "Main window for monitoring task execution.",
                    "base_classes": [
                        "QMainWindow"
                    ]
                }
            },
            "routes": [],
            "complexity": 17
        },
        "core\\coordination\\cursor\\task_execution_state_machine.py": {
            "language": ".py",
            "functions": [
                "to_dict",
                "from_dict",
                "to_dict",
                "__init__",
                "_emit_feedback",
                "_step_to_commands",
                "get_task_state",
                "monitor_callback"
            ],
            "classes": {
                "TaskState": {
                    "methods": [],
                    "docstring": "States for task execution lifecycle.",
                    "base_classes": [
                        "Enum"
                    ]
                },
                "StepState": {
                    "methods": [],
                    "docstring": "States for individual step execution.",
                    "base_classes": [
                        "Enum"
                    ]
                },
                "TaskStep": {
                    "methods": [
                        "to_dict"
                    ],
                    "docstring": "Individual step in a task execution plan.",
                    "base_classes": []
                },
                "TaskExecutionPlan": {
                    "methods": [
                        "from_dict",
                        "to_dict"
                    ],
                    "docstring": "Complete plan for executing a task.",
                    "base_classes": []
                },
                "TaskExecutionStateMachine": {
                    "methods": [
                        "__init__",
                        "_emit_feedback",
                        "_step_to_commands",
                        "get_task_state"
                    ],
                    "docstring": "Orchestrates task execution across Cursor instances.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 15
        },
        "core\\coordination\\cursor\\test_cursor_element_locator.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "add_capture_time",
                "add_detection_time",
                "avg_capture_ms",
                "avg_detection_ms",
                "fps",
                "__str__",
                "__init__",
                "capture_window",
                "draw_detection",
                "visualize_detections"
            ],
            "classes": {
                "PerformanceMetrics": {
                    "methods": [
                        "__init__",
                        "add_capture_time",
                        "add_detection_time",
                        "avg_capture_ms",
                        "avg_detection_ms",
                        "fps",
                        "__str__"
                    ],
                    "docstring": "Tracks performance metrics for window capture and element detection.",
                    "base_classes": []
                },
                "ElementDetectionVisualizer": {
                    "methods": [
                        "__init__",
                        "capture_window",
                        "draw_detection",
                        "visualize_detections"
                    ],
                    "docstring": "Visualizes element detection results on live Cursor window screenshots.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 23
        },
        "core\\coordination\\cursor\\test_window_controller.py": {
            "language": ".py",
            "functions": [
                "test_window_detection"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "core\\coordination\\dispatchers\\base_dispatcher.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "execute_task",
                "run_dispatcher_loop",
                "stop",
                "add_task",
                "_handle_task_result",
                "get_status"
            ],
            "classes": {
                "BaseDispatcher": {
                    "methods": [
                        "__init__",
                        "execute_task",
                        "run_dispatcher_loop",
                        "stop",
                        "add_task",
                        "_handle_task_result",
                        "get_status"
                    ],
                    "docstring": "Abstract base class for all dispatchers.",
                    "base_classes": [
                        "ABC"
                    ]
                }
            },
            "routes": [],
            "complexity": 14
        },
        "core\\coordination\\dispatchers\\cursor_dispatcher.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "execute_task",
                "_handle_test_generation",
                "_handle_code_fix",
                "_handle_file_analysis",
                "_handle_ui_interaction",
                "_generate_prompt_from_context",
                "_ensure_cursor_running",
                "_get_default_cursor_path"
            ],
            "classes": {
                "CursorDispatcher": {
                    "methods": [
                        "__init__",
                        "execute_task",
                        "_handle_test_generation",
                        "_handle_code_fix",
                        "_handle_file_analysis",
                        "_handle_ui_interaction",
                        "_generate_prompt_from_context",
                        "_ensure_cursor_running",
                        "_get_default_cursor_path"
                    ],
                    "docstring": "Handles execution of Cursor tasks and communication with the agent bus.\nSupports both automated API calls and UI-based interactions.",
                    "base_classes": [
                        "BaseDispatcher"
                    ]
                }
            },
            "routes": [],
            "complexity": 18
        },
        "core\\coordination\\dispatchers\\prompt_dispatcher.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "execute_task",
                "_handle_file_prompt",
                "_handle_direct_prompt",
                "_dispatch_prompt",
                "list_available_prompts",
                "_get_default_library_dir"
            ],
            "classes": {
                "PromptDispatcher": {
                    "methods": [
                        "__init__",
                        "execute_task",
                        "_handle_file_prompt",
                        "_handle_direct_prompt",
                        "_dispatch_prompt",
                        "list_available_prompts",
                        "_get_default_library_dir"
                    ],
                    "docstring": "Handles dispatching of prompts to various targets (UI, files, etc).",
                    "base_classes": [
                        "BaseDispatcher"
                    ]
                }
            },
            "routes": [],
            "complexity": 14
        },
        "core\\gui\\base_window.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "toggleMaximized",
                "toggleFullscreen",
                "apply_theme"
            ],
            "classes": {
                "DreamOSWindow": {
                    "methods": [
                        "__init__",
                        "toggleMaximized",
                        "toggleFullscreen",
                        "apply_theme"
                    ],
                    "docstring": "Base window class for Dream.OS GUI components.",
                    "base_classes": [
                        "QMainWindow"
                    ]
                }
            },
            "routes": [],
            "complexity": 8
        },
        "core\\gui\\main_window.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_setup_ui",
                "_setup_status_bar",
                "_setup_shutdown_manager",
                "_update_status",
                "set_error_state",
                "clear_error_state",
                "_auto_save_state",
                "_manual_save_state",
                "_load_state",
                "_save_state",
                "_initiate_shutdown",
                "_handle_shutdown_complete",
                "closeEvent"
            ],
            "classes": {
                "DreamOSMainWindow": {
                    "methods": [
                        "__init__",
                        "_setup_ui",
                        "_setup_status_bar",
                        "_setup_shutdown_manager",
                        "_update_status",
                        "set_error_state",
                        "clear_error_state",
                        "_auto_save_state",
                        "_manual_save_state",
                        "_load_state",
                        "_save_state",
                        "_initiate_shutdown",
                        "_handle_shutdown_complete",
                        "closeEvent"
                    ],
                    "docstring": "Main window for Dream.OS application.",
                    "base_classes": [
                        "QMainWindow"
                    ]
                }
            },
            "routes": [],
            "complexity": 28
        },
        "core\\gui\\tab_manager.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_setup_tabs",
                "_setup_signals",
                "_handle_tab_change",
                "_handle_feedback",
                "refresh_tab",
                "refresh_all",
                "_log_event",
                "apply_theme",
                "closeEvent"
            ],
            "classes": {
                "DreamOSTabManager": {
                    "methods": [
                        "__init__",
                        "_setup_tabs",
                        "_setup_signals",
                        "_handle_tab_change",
                        "_handle_feedback",
                        "refresh_tab",
                        "refresh_all",
                        "_log_event",
                        "apply_theme",
                        "closeEvent"
                    ],
                    "docstring": "Main tab manager for Dream.OS.",
                    "base_classes": [
                        "QTabWidget"
                    ]
                }
            },
            "routes": [],
            "complexity": 20
        },
        "core\\gui\\tab_system_shutdown.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "initiate_shutdown",
                "_broadcast_shutdown_event",
                "_persist_tab_states",
                "_generate_mailbox",
                "_generate_task_list",
                "_emit_shutdown_ready",
                "_count_pending_tasks",
                "_handle_shutdown_error",
                "_log_pre_shutdown_check",
                "_commit_state_files"
            ],
            "classes": {
                "TabSystemShutdownManager": {
                    "methods": [
                        "__init__",
                        "initiate_shutdown",
                        "_broadcast_shutdown_event",
                        "_persist_tab_states",
                        "_generate_mailbox",
                        "_generate_task_list",
                        "_emit_shutdown_ready",
                        "_count_pending_tasks",
                        "_handle_shutdown_error",
                        "_log_pre_shutdown_check",
                        "_commit_state_files"
                    ],
                    "docstring": "Manages graceful shutdown of the Dream.OS tab system.",
                    "base_classes": [
                        "QObject"
                    ]
                }
            },
            "routes": [],
            "complexity": 22
        },
        "core\\gui\\task_monitor_window.py": {
            "language": ".py",
            "functions": [
                "create_monitor_window",
                "__init__",
                "_setup_ui",
                "_setup_menubar",
                "_setup_statusbar",
                "_setup_dock_widgets",
                "apply_theme",
                "_update_stats",
                "_save_log",
                "_clear_history",
                "_toggle_details",
                "_toggle_auto_scroll",
                "handle_task_update"
            ],
            "classes": {
                "TaskMonitorWindow": {
                    "methods": [
                        "__init__",
                        "_setup_ui",
                        "_setup_menubar",
                        "_setup_statusbar",
                        "_setup_dock_widgets",
                        "apply_theme",
                        "_update_stats",
                        "_save_log",
                        "_clear_history",
                        "_toggle_details",
                        "_toggle_auto_scroll",
                        "handle_task_update"
                    ],
                    "docstring": "Dream.OS Task Monitor Window.",
                    "base_classes": [
                        "DreamOSWindow"
                    ]
                }
            },
            "routes": [],
            "complexity": 25
        },
        "core\\gui\\theme.py": {
            "language": ".py",
            "functions": [
                "get_button_style",
                "get_input_style",
                "get_card_style",
                "get_header_style",
                "get_tab_style"
            ],
            "classes": {
                "DreamTheme": {
                    "methods": [
                        "get_button_style",
                        "get_input_style",
                        "get_card_style",
                        "get_header_style",
                        "get_tab_style"
                    ],
                    "docstring": "Dream.OS color and style constants.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 10
        },
        "core\\gui\\tabs\\cycle_execution_tab.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "update",
                "reset",
                "__init__",
                "_setup_ui",
                "_setup_stats_table",
                "_setup_signals",
                "_load_templates",
                "_template_selected",
                "_start_cycle",
                "_stop_cycle",
                "_update_stats",
                "_update_stats_table",
                "_update_task_table",
                "_handle_task_completion",
                "_handle_task_failure",
                "_show_error",
                "_log_event",
                "refresh_state",
                "get_state",
                "restore_state",
                "prepare_for_shutdown",
                "_update_ui_state"
            ],
            "classes": {
                "CycleStats": {
                    "methods": [
                        "__init__",
                        "update",
                        "reset"
                    ],
                    "docstring": "Statistics for a task execution cycle.",
                    "base_classes": []
                },
                "CycleExecutionTab": {
                    "methods": [
                        "__init__",
                        "_setup_ui",
                        "_setup_stats_table",
                        "_setup_signals",
                        "_load_templates",
                        "_template_selected",
                        "_start_cycle",
                        "_stop_cycle",
                        "_update_stats",
                        "_update_stats_table",
                        "_update_task_table",
                        "_handle_task_completion",
                        "_handle_task_failure",
                        "_show_error",
                        "_log_event",
                        "refresh_state",
                        "get_state",
                        "restore_state",
                        "prepare_for_shutdown",
                        "_update_ui_state"
                    ],
                    "docstring": "Tab for managing automated task cycles.",
                    "base_classes": [
                        "QWidget"
                    ]
                }
            },
            "routes": [],
            "complexity": 46
        },
        "core\\gui\\tabs\\feedback_tab.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_setup_ui",
                "_setup_signals",
                "_refresh_events",
                "_filter_events",
                "_update_events_table",
                "_get_severity_color",
                "_update_source_filter",
                "_handle_source_change",
                "_handle_severity_change",
                "_handle_search_change",
                "_handle_selection_change",
                "_update_selected_event",
                "_show_context_menu",
                "_copy_event_details",
                "_retry_event_action",
                "_clear_events",
                "_manual_refresh",
                "_handle_new_event",
                "_show_error",
                "refresh_events",
                "get_state",
                "restore_state",
                "prepare_for_shutdown"
            ],
            "classes": {
                "EventSeverity": {
                    "methods": [],
                    "docstring": "Event severity levels.",
                    "base_classes": []
                },
                "FeedbackTab": {
                    "methods": [
                        "__init__",
                        "_setup_ui",
                        "_setup_signals",
                        "_refresh_events",
                        "_filter_events",
                        "_update_events_table",
                        "_get_severity_color",
                        "_update_source_filter",
                        "_handle_source_change",
                        "_handle_severity_change",
                        "_handle_search_change",
                        "_handle_selection_change",
                        "_update_selected_event",
                        "_show_context_menu",
                        "_copy_event_details",
                        "_retry_event_action",
                        "_clear_events",
                        "_manual_refresh",
                        "_handle_new_event",
                        "_show_error",
                        "refresh_events",
                        "get_state",
                        "restore_state",
                        "prepare_for_shutdown"
                    ],
                    "docstring": "Tab for displaying system feedback and events.",
                    "base_classes": [
                        "QWidget"
                    ]
                }
            },
            "routes": [],
            "complexity": 48
        },
        "core\\gui\\tabs\\task_monitor_tab.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_setup_ui",
                "_setup_signals",
                "_refresh_tasks",
                "_filter_tasks",
                "_update_task_table",
                "_get_status_color",
                "_handle_filter_change",
                "_handle_search_change",
                "_handle_selection_change",
                "_update_selected_task",
                "_show_context_menu",
                "_cancel_selected_task",
                "_retry_selected_task",
                "_manual_refresh",
                "_handle_task_started",
                "_handle_task_completed",
                "_handle_task_failed",
                "_handle_task_cancelled",
                "_show_error",
                "_log_event",
                "refresh_state",
                "get_state",
                "restore_state",
                "prepare_for_shutdown"
            ],
            "classes": {
                "TaskStatus": {
                    "methods": [],
                    "docstring": "Task status constants.",
                    "base_classes": []
                },
                "TaskMonitorTab": {
                    "methods": [
                        "__init__",
                        "_setup_ui",
                        "_setup_signals",
                        "_refresh_tasks",
                        "_filter_tasks",
                        "_update_task_table",
                        "_get_status_color",
                        "_handle_filter_change",
                        "_handle_search_change",
                        "_handle_selection_change",
                        "_update_selected_task",
                        "_show_context_menu",
                        "_cancel_selected_task",
                        "_retry_selected_task",
                        "_manual_refresh",
                        "_handle_task_started",
                        "_handle_task_completed",
                        "_handle_task_failed",
                        "_handle_task_cancelled",
                        "_show_error",
                        "_log_event",
                        "refresh_state",
                        "get_state",
                        "restore_state",
                        "prepare_for_shutdown"
                    ],
                    "docstring": "Tab for monitoring and managing tasks.",
                    "base_classes": [
                        "QWidget"
                    ]
                }
            },
            "routes": [],
            "complexity": 50
        },
        "core\\gui\\widgets\\task_widgets.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_setup_ui",
                "apply_theme",
                "update_data",
                "__init__",
                "_setup_ui",
                "apply_theme",
                "update_data"
            ],
            "classes": {
                "TaskStepWidget": {
                    "methods": [
                        "__init__",
                        "_setup_ui",
                        "apply_theme",
                        "update_data"
                    ],
                    "docstring": "Widget displaying a single task step's status.",
                    "base_classes": [
                        "QFrame"
                    ]
                },
                "TaskWidget": {
                    "methods": [
                        "__init__",
                        "_setup_ui",
                        "apply_theme",
                        "update_data"
                    ],
                    "docstring": "Widget displaying a complete task's execution status.",
                    "base_classes": [
                        "QFrame"
                    ]
                }
            },
            "routes": [],
            "complexity": 16
        },
        "core\\memory\\governance_memory_engine.py": {
            "language": ".py",
            "functions": [
                "log_event"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "core\\models\\plan.py": {
            "language": ".py",
            "functions": [
                "__post_init__",
                "add_task",
                "get_task_by_id",
                "get_tasks_by_status",
                "calculate_total_estimated_time",
                "reorder_tasks",
                "log_event"
            ],
            "classes": {
                "Plan": {
                    "methods": [
                        "__post_init__",
                        "add_task",
                        "get_task_by_id",
                        "get_tasks_by_status",
                        "calculate_total_estimated_time",
                        "reorder_tasks"
                    ],
                    "docstring": "Represents a collection of tasks designed to achieve a specific goal.\n\nAttributes:\n    plan_id (str): A unique identifier for the plan.\n    goal (Optional[str]): The high-level goal this plan aims to achieve.\n    tasks (List[Task]): A list of Task objects comprising the plan.\n    created_at (datetime): Timestamp (UTC) when the plan object was created.\n    status (str): Overall status of the plan (e.g., \"Active\", \"Completed\", \"Aborted\").\n                 Consider using an Enum for more robust status management in the future.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 13
        },
        "core\\memory\\supervisor_memory.py": {
            "language": ".py",
            "functions": [
                "_get_default_state",
                "_ensure_runtime_dir",
                "load_state",
                "save_state",
                "update_state",
                "get_active_tasks",
                "log_current_focus"
            ],
            "classes": {},
            "routes": [],
            "complexity": 7
        },
        "core\\models\\workflow.py": {
            "language": ".py",
            "functions": [
                "__post_init__",
                "__post_init__",
                "log_event"
            ],
            "classes": {
                "WorkflowStep": {
                    "methods": [
                        "__post_init__"
                    ],
                    "docstring": "Represents a single, executable step within a workflow.\n\nAttributes:\n    step_id (int): A unique sequential identifier for the step within the workflow.\n    name (str): A human-readable name for the step.\n    agent (str): The ID of the agent responsible for executing this step.\n    command (str): The specific method/command to be invoked on the target agent.\n    params (Dict[str, Any]): Parameters to pass to the agent command, potentially containing template strings for interpolation (e.g., `{{ input.value }}`).\n    output_var (Optional[str]): If provided, the result of this step will be stored in the workflow context under this variable name for use in subsequent steps.\n    description (Optional[str]): A more detailed description of the step's purpose.\n    max_retries (int): Number of times to retry this step upon failure. Defaults to 0.\n    retry_delay_seconds (int): Number of seconds to wait before retrying. Defaults to 5.",
                    "base_classes": []
                },
                "WorkflowDefinition": {
                    "methods": [
                        "__post_init__"
                    ],
                    "docstring": "Defines a structured, repeatable workflow composed of multiple steps.\n\nAttributes:\n    name (str): A human-readable name for the workflow.\n    workflow_id (str): A unique identifier for the workflow, typically auto-generated.\n    description (Optional[str]): A more detailed description of the workflow's purpose.\n    input_schema (Optional[Dict[str, Any]]): A schema (e.g., JSON Schema draft) describing the expected input data structure for the workflow.\n    steps (List[WorkflowStep]): An ordered list of steps that constitute the workflow.\n    created_at (datetime): Timestamp (UTC) when the workflow definition was created.\n    version (int): Version number of the workflow definition.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 5
        },
        "core\\models\\task.py": {
            "language": ".py",
            "functions": [
                "__post_init__",
                "update_status",
                "log_event"
            ],
            "classes": {
                "TaskStatus": {
                    "methods": [],
                    "docstring": "Enumeration for the possible statuses of a Task.",
                    "base_classes": [
                        "Enum"
                    ]
                },
                "Task": {
                    "methods": [
                        "__post_init__",
                        "update_status"
                    ],
                    "docstring": "Represents a single, trackable unit of work within the system.\n\nAttributes:\n    description (str): A clear, concise description of what the task entails.\n    task_id (str): A unique identifier for the task, typically auto-generated.\n    status (TaskStatus): The current state of the task (e.g., Pending, Completed).\n    priority (int): Numerical priority (lower number means higher priority).\n    dependencies (List[str]): A list of `task_id`s that must be completed before this task can start.\n    estimated_time (Optional[str]): A human-readable estimate of duration (e.g., \"2h\", \"30m\").\n    actual_time (Optional[str]): A human-readable record of the actual time spent.\n    assigned_to (Optional[str]): The ID of the agent or user currently responsible for the task.\n    created_at (datetime): Timestamp (UTC) when the task object was created.\n    updated_at (datetime): Timestamp (UTC) when the task object was last modified.\n    details (Dict[str, Any]): A dictionary for storing task-specific metadata or parameters.\n    result (Optional[Any]): Stores the output or outcome of the task upon completion or failure.\n    notes: (Optional[str]): Human-readable notes or comments about the task.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 5
        },
        "core\\models\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\tests\\test_core_services.py": {
            "language": ".py",
            "functions": [
                "temp_template_dir",
                "setup_template_engine",
                "test_template_rendering_simple",
                "test_template_rendering_missing_variable",
                "test_template_rendering_with_filter",
                "test_template_rendering_file_not_found",
                "test_render_template_module_function",
                "test_prompt_staging_success",
                "test_prompt_staging_write_fails",
                "test_prompt_staging_read_timeout",
                "test_prompt_staging_read_malformed",
                "test_prompt_staging_with_supervisor_state"
            ],
            "classes": {},
            "routes": [],
            "complexity": 12
        },
        "core\\tests\\test_agent_bus.py": {
            "language": ".py",
            "functions": [
                "clean_bus",
                "test_singleton_pattern",
                "test_singleton_thread_safety",
                "test_register_agent_success",
                "test_register_agent_overwrite",
                "test_register_agent_no_id",
                "test_unregister_agent_success",
                "test_unregister_agent_non_existent",
                "test_dispatch_success",
                "test_dispatch_no_params",
                "test_dispatch_target_agent_not_found",
                "test_dispatch_method_not_found",
                "test_dispatch_attribute_not_callable",
                "test_dispatch_method_raises_exception",
                "__init__",
                "simple_method",
                "method_that_raises",
                "_not_callable_attribute",
                "get_instance"
            ],
            "classes": {
                "MockAgent": {
                    "methods": [
                        "__init__",
                        "simple_method",
                        "method_that_raises",
                        "_not_callable_attribute"
                    ],
                    "docstring": null,
                    "base_classes": []
                },
                "NoIdAgent": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 23
        },
        "core\\tests\\test_models.py": {
            "language": ".py",
            "functions": [
                "test_task_creation_minimal",
                "test_task_creation_all_fields",
                "test_task_update_status",
                "test_plan_creation_empty",
                "test_plan_creation_with_tasks",
                "test_workflow_step_creation",
                "test_workflow_definition_creation",
                "test_plan_methods",
                "test_workflow_structure"
            ],
            "classes": {},
            "routes": [],
            "complexity": 9
        },
        "dreamforge\\main.py": {
            "language": ".py",
            "functions": [
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "dreamforge\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "dreamforge\\agents\\calendar_agent.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_parse_llm_schedule_response",
                "schedule_tasks",
                "add_event",
                "get_availability",
                "render_template",
                "stage_and_execute_prompt",
                "log_event"
            ],
            "classes": {
                "CalendarAgent": {
                    "methods": [
                        "__init__",
                        "_parse_llm_schedule_response",
                        "schedule_tasks",
                        "add_event",
                        "get_availability"
                    ],
                    "docstring": "Responsible for scheduling tasks onto a calendar, considering dependencies,\ndurations, and existing commitments.\nCommunicates with the LLM via the Prompt Staging Service for complex scheduling logic.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 13
        },
        "dreamforge\\agents\\cursor_dispatcher.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "execute_cursor_task",
                "_handle_test_generation",
                "_handle_code_fix",
                "_handle_file_analysis",
                "run_dispatcher_loop",
                "stop"
            ],
            "classes": {
                "CursorDispatcher": {
                    "methods": [
                        "__init__",
                        "execute_cursor_task",
                        "_handle_test_generation",
                        "_handle_code_fix",
                        "_handle_file_analysis",
                        "run_dispatcher_loop",
                        "stop"
                    ],
                    "docstring": "Handles execution of Cursor tasks and communication with the agent bus.\nActs as a bridge between ChatGPT and Cursor operations.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 14
        },
        "dreamforge\\agents\\chatgpt_commander.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "send_generate_tests_task",
                "send_code_fix_task",
                "send_analysis_task",
                "wait_for_task_completion",
                "get_task_status",
                "get_pending_tasks",
                "cleanup_old_tasks"
            ],
            "classes": {
                "ChatGPTCommander": {
                    "methods": [
                        "__init__",
                        "send_generate_tests_task",
                        "send_code_fix_task",
                        "send_analysis_task",
                        "wait_for_task_completion",
                        "get_task_status",
                        "get_pending_tasks",
                        "cleanup_old_tasks"
                    ],
                    "docstring": "Dispatches tasks to Cursor from ChatGPT inputs or system goals.\nHandles task creation, dispatch, and response management.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 16
        },
        "dreamforge\\agents\\workflow_agent.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "plan_task",
                "assign_agent",
                "check_status",
                "route_feedback",
                "receive_message",
                "start_workflow",
                "update_task_status",
                "_execute_next_tasks",
                "_check_workflow_completion",
                "_find_capable_agents",
                "_select_optimal_agent",
                "_estimate_task_duration",
                "_calculate_resource_requirements",
                "_should_retry",
                "_retry_task",
                "__init__",
                "receive_message"
            ],
            "classes": {
                "WorkflowAgent": {
                    "methods": [
                        "__init__",
                        "plan_task",
                        "assign_agent",
                        "check_status",
                        "route_feedback",
                        "receive_message",
                        "start_workflow",
                        "update_task_status",
                        "_execute_next_tasks",
                        "_check_workflow_completion",
                        "_find_capable_agents",
                        "_select_optimal_agent",
                        "_estimate_task_duration",
                        "_calculate_resource_requirements",
                        "_should_retry",
                        "_retry_task"
                    ],
                    "docstring": "Orchestrates the execution of tasks defined in a plan. \nReceives plan details from PlannerAgent, routes tasks to specialist agents,\nand manages workflow progress with integrated feedback loops.\n\nCore Responsibilities:\n- Task planning and dependency management\n- Agent assignment and load balancing\n- Status tracking and progress monitoring\n- Feedback collection and routing",
                    "base_classes": []
                },
                "MockExecutorAgent": {
                    "methods": [
                        "__init__",
                        "receive_message"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 36
        },
        "dreamforge\\agents\\planner_agent.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_parse_llm_plan_response",
                "plan_from_goal",
                "refine_plan",
                "_parse_llm_response",
                "_log_task_info",
                "_validate_task",
                "dummy_stage_prompt",
                "render_template",
                "stage_and_execute_prompt",
                "log_event"
            ],
            "classes": {
                "PlannerAgent": {
                    "methods": [
                        "__init__",
                        "_parse_llm_plan_response",
                        "plan_from_goal",
                        "refine_plan",
                        "_parse_llm_response",
                        "_log_task_info",
                        "_validate_task"
                    ],
                    "docstring": "Responsible for creating and refining task plans based on user goals or requests.\nCommunicates with the LLM via the Prompt Staging Service.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 18
        },
        "dreamforge\\core\\feedback_engine.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "process_feedback",
                "get_retry_count",
                "should_retry",
                "get_task_history"
            ],
            "classes": {
                "FeedbackEngine": {
                    "methods": [
                        "__init__",
                        "process_feedback",
                        "get_retry_count",
                        "should_retry",
                        "get_task_history"
                    ],
                    "docstring": "Processes and routes feedback from task executions.\nIntegrates with memory systems and prompt refinement.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 10
        },
        "dreamforge\\core\\prompt_staging_service.py": {
            "language": ".py",
            "functions": [
                "stage_and_execute_prompt",
                "log_event",
                "call_llm"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "dreamforge\\core\\governance_memory_engine.py": {
            "language": ".py",
            "functions": [
                "log_event",
                "get_events"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "dreamforge\\core\\llm_bridge.py": {
            "language": ".py",
            "functions": [
                "call_llm",
                "log_event"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "dreamforge\\core\\template_engine.py": {
            "language": ".py",
            "functions": [
                "render",
                "log_event"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "dreamforge\\core\\coordination\\agent_bus.py": {
            "language": ".py",
            "functions": [
                "__new__",
                "__init__",
                "register_agent",
                "unregister_agent",
                "send_message",
                "get_agent",
                "list_agents",
                "log_event",
                "__init__",
                "receive_message",
                "__str__"
            ],
            "classes": {
                "AgentBus": {
                    "methods": [
                        "__new__",
                        "__init__",
                        "register_agent",
                        "unregister_agent",
                        "send_message",
                        "get_agent",
                        "list_agents"
                    ],
                    "docstring": "A Singleton class responsible for routing messages between registered agents.\nEnsures that only one instance of the bus exists.",
                    "base_classes": []
                },
                "MockAgent": {
                    "methods": [
                        "__init__",
                        "receive_message",
                        "__str__"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 21
        },
        "dreamforge\\core\\enums\\task_types.py": {
            "language": ".py",
            "functions": [],
            "classes": {
                "TaskType": {
                    "methods": [],
                    "docstring": "Task types for inter-agent communication.",
                    "base_classes": [
                        "str",
                        "Enum"
                    ]
                }
            },
            "routes": [],
            "complexity": 0
        },
        "dreamforge\\tests\\conftest.py": {
            "language": ".py",
            "functions": [
                "mock_log_event",
                "mock_file_ops",
                "mock_web_driver",
                "mock_wait",
                "assert_event_structure",
                "test_data_dir",
                "snapshot_dir"
            ],
            "classes": {},
            "routes": [],
            "complexity": 7
        },
        "dreamforge\\services\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "dreamforge\\services\\discord_service.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_register_events",
                "_register_commands",
                "load_config",
                "save_config",
                "run",
                "stop",
                "send_message",
                "send_file",
                "send_template",
                "get_status",
                "set_log_callback",
                "_log",
                "map_prompt_to_channel",
                "unmap_prompt_channel",
                "get_channel_for_prompt",
                "send_dreamscape_episode",
                "send_prompt_response",
                "update_status",
                "get_prompt_status",
                "run_bot"
            ],
            "classes": {
                "UnifiedDiscordService": {
                    "methods": [
                        "__init__",
                        "_register_events",
                        "_register_commands",
                        "load_config",
                        "save_config",
                        "run",
                        "stop",
                        "send_message",
                        "send_file",
                        "send_template",
                        "get_status",
                        "set_log_callback",
                        "_log",
                        "map_prompt_to_channel",
                        "unmap_prompt_channel",
                        "get_channel_for_prompt",
                        "send_dreamscape_episode",
                        "send_prompt_response",
                        "update_status",
                        "get_prompt_status"
                    ],
                    "docstring": "Centralized Discord integration service that handles:\n- Bot lifecycle management\n- Message/file dispatch\n- Template rendering\n- Channel mapping\n- Status monitoring\n- Event notifications\n- Dreamscape episode management\n- Prompt response handling",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 41
        },
        "dreamforge\\tests\\agents\\test_calendar_agent.py": {
            "language": ".py",
            "functions": [
                "calendar_agent",
                "original_tasks",
                "assert_list_of_dicts_equal",
                "test_parse_schedule_partial",
                "test_parse_schedule_full_success",
                "test_parse_schedule_invalid_item",
                "test_parse_schedule_invalid_json",
                "test_parse_schedule_non_json",
                "test_parse_schedule_wrong_type",
                "test_parse_schedule_empty_response",
                "test_parse_schedule_empty_input_tasks"
            ],
            "classes": {},
            "routes": [],
            "complexity": 11
        },
        "dreamforge\\tests\\agents\\test_chatgpt_commander.py": {
            "language": ".py",
            "functions": [
                "mock_agent_bus",
                "commander",
                "test_send_generate_tests_task",
                "test_send_code_fix_task",
                "test_send_analysis_task",
                "test_wait_for_task_completion",
                "test_wait_for_task_timeout",
                "test_get_task_status",
                "test_cleanup_old_tasks"
            ],
            "classes": {},
            "routes": [],
            "complexity": 9
        },
        "dreamforge\\tests\\agents\\test_cursor_dispatcher.py": {
            "language": ".py",
            "functions": [
                "mock_agent_bus",
                "cursor_dispatcher",
                "test_execute_cursor_task_test_generation",
                "test_execute_cursor_task_code_fix",
                "test_execute_cursor_task_file_analysis",
                "test_dispatcher_loop_integration",
                "test_error_handling"
            ],
            "classes": {},
            "routes": [],
            "complexity": 7
        },
        "dreamforge\\tests\\agents\\test_planner_agent.py": {
            "language": ".py",
            "functions": [
                "planner_agent",
                "test_parse_valid_json_list",
                "test_parse_valid_json_in_markdown",
                "test_parse_valid_json_dict_wrapper",
                "test_parse_invalid_json",
                "test_parse_non_json_text",
                "test_parse_json_wrong_type",
                "test_parse_empty_string",
                "test_parse_none_input",
                "test_plan_from_goal_mocked_llm",
                "test_plan_from_goal_template_render_fails",
                "mock_stage_prompt",
                "mock_stage_prompt_should_not_run"
            ],
            "classes": {},
            "routes": [],
            "complexity": 13
        },
        "dreamforge\\tests\\agents\\test_workflow_agent.py": {
            "language": ".py",
            "functions": [
                "mock_agent_bus",
                "mock_feedback_engine",
                "mock_prompt_staging",
                "workflow_agent",
                "test_plan_task_capable_agent_selection",
                "test_plan_task_no_capable_agents",
                "test_plan_task_load_balancing",
                "test_assign_agent_success",
                "test_assign_agent_fallback",
                "test_assign_agent_all_fail",
                "test_check_status_metrics_format",
                "test_check_status_unknown_task",
                "test_route_feedback_success_case",
                "test_route_feedback_failure_and_retry",
                "test_route_feedback_prompt_update",
                "test_find_capable_agents",
                "test_select_optimal_agent",
                "test_full_task_lifecycle"
            ],
            "classes": {},
            "routes": [],
            "complexity": 18
        },
        "dreamforge\\tests\\coordination\\test_agent_bus.py": {
            "language": ".py",
            "functions": [
                "clean_agent_bus",
                "agent_a",
                "agent_b",
                "test_singleton_instance",
                "test_register_agent_success",
                "test_register_agent_no_receive_method",
                "test_register_agent_overwrite",
                "test_unregister_agent_success",
                "test_unregister_agent_not_found",
                "test_send_message_success",
                "test_send_message_recipient_not_found",
                "test_send_message_recipient_error",
                "test_list_agents",
                "test_get_agent",
                "__init__",
                "receive_message",
                "__str__"
            ],
            "classes": {
                "MockAgent": {
                    "methods": [
                        "__init__",
                        "receive_message",
                        "__str__"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 20
        },
        "dreamforge\\tests\\core\\test_feedback_engine.py": {
            "language": ".py",
            "functions": [
                "feedback_engine",
                "test_process_feedback_success",
                "test_process_feedback_failure_with_retry",
                "test_max_retries_exceeded",
                "test_process_multiple_feedback_entries",
                "test_get_nonexistent_feedback",
                "test_clear_feedback",
                "test_invalid_feedback_data",
                "test_feedback_timestamp_tracking"
            ],
            "classes": {},
            "routes": [],
            "complexity": 9
        },
        "dreamforge\\tests\\core\\test_governance_memory_engine.py": {
            "language": ".py",
            "functions": [
                "mock_file_ops",
                "test_log_event_success",
                "test_log_event_makedirs_error",
                "test_log_event_write_error",
                "test_log_event_invalid_params",
                "test_get_events_empty_file",
                "test_get_events_with_filter",
                "test_get_events_with_limit",
                "test_get_events_invalid_json",
                "test_get_events_file_not_found",
                "test_source_id_constant",
                "test_governance_log_file_path"
            ],
            "classes": {},
            "routes": [],
            "complexity": 12
        },
        "dreamforge\\tests\\core\\test_llm_bridge.py": {
            "language": ".py",
            "functions": [
                "mock_log_event",
                "test_call_llm_task_list_response",
                "test_call_llm_default_response",
                "test_call_llm_with_custom_model",
                "test_call_llm_with_temperature",
                "test_call_llm_invalid_prompts",
                "test_call_llm_example_prompts",
                "test_call_llm_error_handling",
                "test_source_id_constant"
            ],
            "classes": {},
            "routes": [],
            "complexity": 9
        },
        "dreamforge\\tests\\core\\test_prompt_staging_service.py": {
            "language": ".py",
            "functions": [
                "mock_log_event",
                "mock_call_llm_success",
                "mock_call_llm_failure",
                "setup_mocks",
                "test_stage_and_execute_success",
                "test_stage_and_execute_llm_failure",
                "test_stage_and_execute_no_config",
                "test_stage_and_execute_invalid_inputs",
                "test_stage_and_execute_invalid_config",
                "test_stage_and_execute_logging_failure",
                "test_stage_and_execute_long_prompt",
                "test_stage_and_execute_retry_logic",
                "test_stage_and_execute_outbox_error",
                "test_stage_and_execute_memory_pressure",
                "test_stage_and_execute_transaction_rollback",
                "test_stage_and_execute_cleanup_on_success",
                "test_stage_and_execute_rate_limiting",
                "test_stage_and_execute_partial_failure_recovery",
                "test_stage_and_execute_prompt_validation",
                "test_stage_and_execute_file_permissions",
                "test_stage_and_execute_disk_full",
                "test_stage_and_execute_integration_llm",
                "test_stage_and_execute_malformed_response",
                "test_stage_and_execute_unicode_handling",
                "mock_log_event_failure",
                "mock_llm_with_retry",
                "mock_write_failure",
                "mock_stage_failure",
                "mock_cleanup",
                "mock_partial_success",
                "mock_disk_full_write",
                "mock_malformed_response"
            ],
            "classes": {},
            "routes": [],
            "complexity": 32
        },
        "dreamforge\\tests\\core\\test_template_engine.py": {
            "language": ".py",
            "functions": [
                "mock_log_event",
                "setup_mocks",
                "test_render_template_success",
                "test_render_template_not_found",
                "test_render_template_render_error",
                "test_render_template_complex_context",
                "test_render_template_io_error",
                "test_gme_ready_fallback",
                "test_environment_configuration",
                "test_render_empty_context",
                "test_main_execution_with_sample_data",
                "test_main_execution_fallback_context",
                "test_main_execution_json_error"
            ],
            "classes": {},
            "routes": [],
            "complexity": 13
        },
        "dreamforge\\tests\\services\\test_discord_service.py": {
            "language": ".py",
            "functions": [
                "mock_bot",
                "mock_channel",
                "service",
                "test_init_with_config",
                "test_run_bot_already_running",
                "test_run_bot_no_token",
                "test_send_message_not_running",
                "test_send_file_not_found",
                "test_send_template",
                "test_get_status",
                "test_logging_with_callback",
                "test_prompt_channel_mapping",
                "test_status_management",
                "test_prompt_channel_mapping_extended",
                "callback"
            ],
            "classes": {},
            "routes": [],
            "complexity": 15
        },
        "dreamforge\\utils\\browser_utils.py": {
            "language": ".py",
            "functions": [
                "get_undetected_driver",
                "wait_and_click",
                "wait_and_send_keys",
                "log_event"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "dreamforge\\utils\\common_utils.py": {
            "language": ".py",
            "functions": [
                "random_delay",
                "retry_on_failure",
                "get_random_user_agent",
                "parse_cursor_result_file",
                "decorator_retry",
                "get_social_logger",
                "wrapper_retry"
            ],
            "classes": {},
            "routes": [],
            "complexity": 7
        },
        "dreamforge\\utils\\image_utils.py": {
            "language": ".py",
            "functions": [
                "some_image_function"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "dreamforge\\utils\\text_utils.py": {
            "language": ".py",
            "functions": [
                "some_text_function"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "execution\\prompt_executor_chatgpt.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "execute_prompt",
                "log_event",
                "send_task",
                "_read_tasks"
            ],
            "classes": {
                "ChatGPTExecutor": {
                    "methods": [
                        "__init__",
                        "execute_prompt"
                    ],
                    "docstring": "Handles sending prompts to the ChatGPT Commander agent via AgentBus\nand retrieving the results.",
                    "base_classes": []
                },
                "AgentBus": {
                    "methods": [
                        "send_task",
                        "_read_tasks"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 9
        },
        "execution\\prompt_executor.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "execute",
                "log_event"
            ],
            "classes": {
                "PromptExecutor": {
                    "methods": [
                        "__init__",
                        "execute"
                    ],
                    "docstring": "Unified interface to execute prompts using different backends (Cursor, ChatGPT).",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 5
        },
        "execution\\prompt_executor_cursor.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_generate_prompt_file",
                "_trigger_cursor_processing",
                "_wait_for_response",
                "_cleanup_temp_files",
                "execute_prompt",
                "log_event"
            ],
            "classes": {
                "CursorExecutor": {
                    "methods": [
                        "__init__",
                        "_generate_prompt_file",
                        "_trigger_cursor_processing",
                        "_wait_for_response",
                        "_cleanup_temp_files",
                        "execute_prompt"
                    ],
                    "docstring": "Handles generating prompt files and attempting to trigger local Cursor\nto process them, then retrieving the results.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 13
        },
        "scripts\\run_qa.py": {
            "language": ".py",
            "functions": [
                "load_checklist",
                "save_checklist",
                "find_item",
                "list_items",
                "update_item_status",
                "show_summary",
                "generate_markdown_report",
                "save_report",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 9
        },
        "social\\setup.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "social\\config\\settings.py": {
            "language": ".py",
            "functions": [
                "get_all_config"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "social\\core\\constants.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "social\\core\\agent_bus.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "register_agent",
                "deregister_agent",
                "send_message",
                "broadcast_message",
                "process_messages",
                "get_agent_status",
                "get_all_agent_statuses"
            ],
            "classes": {
                "AgentBus": {
                    "methods": [
                        "__init__",
                        "register_agent",
                        "deregister_agent",
                        "send_message",
                        "broadcast_message",
                        "process_messages",
                        "get_agent_status",
                        "get_all_agent_statuses"
                    ],
                    "docstring": "Central message bus for agent coordination and communication.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 16
        },
        "social\\core\\mailbox.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "create_mailbox",
                "send_message",
                "get_messages",
                "clear_mailbox",
                "delete_mailbox",
                "broadcast_message"
            ],
            "classes": {
                "MailboxHandler": {
                    "methods": [
                        "__init__",
                        "create_mailbox",
                        "send_message",
                        "get_messages",
                        "clear_mailbox",
                        "delete_mailbox",
                        "broadcast_message"
                    ],
                    "docstring": "Handles inter-service communication through file-based mailboxes.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 14
        },
        "social\\core\\main.py": {
            "language": ".py",
            "functions": [
                "signal_handler",
                "setup_task_list",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "social\\core\\template_engine.py": {
            "language": ".py",
            "functions": [
                "render_template"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "social\\core\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "social\\core\\agents\\agent_monitor_agent.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_log_event",
                "handle_event_message",
                "shutdown",
                "__init__",
                "register_agent",
                "register_handler",
                "send_message",
                "get_handler",
                "register_agent",
                "register_handler"
            ],
            "classes": {
                "AgentMonitorAgent": {
                    "methods": [
                        "__init__",
                        "_log_event",
                        "handle_event_message",
                        "shutdown"
                    ],
                    "docstring": "Listens to the AgentBus and logs significant events.",
                    "base_classes": []
                },
                "DummyMessage": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": null,
                    "base_classes": []
                },
                "DummyBus": {
                    "methods": [
                        "register_agent",
                        "register_handler",
                        "send_message",
                        "get_handler"
                    ],
                    "docstring": null,
                    "base_classes": []
                },
                "AgentBus": {
                    "methods": [
                        "register_agent",
                        "register_handler"
                    ],
                    "docstring": null,
                    "base_classes": []
                },
                "Message": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": []
                },
                "TaskStatus": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 22
        },
        "social\\core\\agents\\prompt_feedback_loop_agent.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load_tasks",
                "_save_tasks",
                "_mark_repair_triggered",
                "_create_diagnostic_task",
                "_log_injection_event",
                "handle_potential_failure",
                "trigger_repair_task_injection",
                "shutdown",
                "handle_event_message",
                "register_agent",
                "register_handler",
                "send_message",
                "register_agent",
                "send_message"
            ],
            "classes": {
                "PromptFeedbackLoopAgent": {
                    "methods": [
                        "__init__",
                        "_load_tasks",
                        "_save_tasks",
                        "_mark_repair_triggered",
                        "_create_diagnostic_task",
                        "_log_injection_event",
                        "handle_potential_failure",
                        "trigger_repair_task_injection",
                        "shutdown"
                    ],
                    "docstring": "Monitors for failed tasks via AgentBus messages and injects repair/diagnostic tasks.",
                    "base_classes": []
                },
                "DummyMonitor": {
                    "methods": [
                        "handle_event_message"
                    ],
                    "docstring": null,
                    "base_classes": []
                },
                "DummyBus": {
                    "methods": [
                        "register_agent",
                        "register_handler",
                        "send_message"
                    ],
                    "docstring": null,
                    "base_classes": []
                },
                "AgentBus": {
                    "methods": [
                        "register_agent",
                        "send_message"
                    ],
                    "docstring": null,
                    "base_classes": []
                },
                "Message": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": []
                },
                "TaskStatus": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": []
                },
                "Msg": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 30
        },
        "social\\core\\agents\\cursor_control_agent.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "handle_message",
                "shutdown"
            ],
            "classes": {
                "CursorControlAgent": {
                    "methods": [
                        "__init__",
                        "handle_message",
                        "shutdown"
                    ],
                    "docstring": "Agent that controls Cursor UI interactions based on bus messages.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 6
        },
        "social\\core\\agents\\social_media_agent.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load_config",
                "_initialize_driver",
                "_get_or_load_strategy",
                "_execute_strategy_action",
                "login",
                "_generate_post_content",
                "post",
                "check_login_status",
                "scrape_mentions",
                "scrape_trends",
                "scrape_community",
                "_send_bus_response",
                "handle_bus_message",
                "_handle_post_command",
                "_handle_get_analytics_command",
                "_handle_login_command",
                "_handle_check_login_status_command",
                "_handle_agent_status_command",
                "_handle_request_cursor_action_command",
                "_handle_process_feedback_item_command",
                "shutdown",
                "deep_merge_dicts"
            ],
            "classes": {
                "SocialMediaAgent": {
                    "methods": [
                        "__init__",
                        "_load_config",
                        "_initialize_driver",
                        "_get_or_load_strategy",
                        "_execute_strategy_action",
                        "login",
                        "_generate_post_content",
                        "post",
                        "check_login_status",
                        "scrape_mentions",
                        "scrape_trends",
                        "scrape_community",
                        "_send_bus_response",
                        "handle_bus_message",
                        "_handle_post_command",
                        "_handle_get_analytics_command",
                        "_handle_login_command",
                        "_handle_check_login_status_command",
                        "_handle_agent_status_command",
                        "_handle_request_cursor_action_command",
                        "_handle_process_feedback_item_command",
                        "shutdown"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 45
        },
        "social\\core\\agents\\task_executor_agent.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_normalize_status",
                "_load_tasks",
                "_save_tasks",
                "_update_task_status",
                "handle_response",
                "_check_dependencies",
                "run_cycle",
                "_run_loop",
                "start",
                "stop",
                "sort_key",
                "register_agent",
                "send_message",
                "register_agent",
                "send_message"
            ],
            "classes": {
                "TaskStatus": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": []
                },
                "TaskExecutorAgent": {
                    "methods": [
                        "__init__",
                        "_normalize_status",
                        "_load_tasks",
                        "_save_tasks",
                        "_update_task_status",
                        "handle_response",
                        "_check_dependencies",
                        "run_cycle",
                        "_run_loop",
                        "start",
                        "stop"
                    ],
                    "docstring": "Reads tasks from a file and dispatches them via the AgentBus.",
                    "base_classes": []
                },
                "AgentBus": {
                    "methods": [
                        "register_agent",
                        "send_message"
                    ],
                    "docstring": null,
                    "base_classes": []
                },
                "Message": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": []
                },
                "DummyBus": {
                    "methods": [
                        "register_agent",
                        "send_message"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 31
        },
        "social\\core\\agents\\task_injector.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_validate_and_prepare_task",
                "run_cycle",
                "_run_loop",
                "start",
                "stop",
                "shutdown",
                "register_agent",
                "send_message"
            ],
            "classes": {
                "TaskInjector": {
                    "methods": [
                        "__init__",
                        "_validate_and_prepare_task",
                        "run_cycle",
                        "_run_loop",
                        "start",
                        "stop",
                        "shutdown"
                    ],
                    "docstring": "Watches an input file and injects tasks via AgentBus messages.",
                    "base_classes": []
                },
                "TaskStatus": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": []
                },
                "DummyBusForInjector": {
                    "methods": [
                        "register_agent",
                        "send_message"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 18
        },
        "social\\core\\agents\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "social\\core\\coordination\\cursor\\cursor_editor_controller.py": {
            "language": ".py",
            "functions": [
                "_log_tool_action",
                "_update_status_file",
                "_append_to_task_list",
                "_update_project_board",
                "__init__",
                "_validate_pos",
                "get_text",
                "set_text",
                "insert_text",
                "get_cursor_position",
                "set_cursor_position",
                "get_selection",
                "set_selection",
                "get_current_file"
            ],
            "classes": {
                "CursorEditorController": {
                    "methods": [
                        "__init__",
                        "_validate_pos",
                        "get_text",
                        "set_text",
                        "insert_text",
                        "get_cursor_position",
                        "set_cursor_position",
                        "get_selection",
                        "set_selection",
                        "get_current_file"
                    ],
                    "docstring": "Manages interactions with the Cursor editor pane (Placeholders).",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 24
        },
        "social\\core\\coordination\\cursor\\cursor_terminal_controller.py": {
            "language": ".py",
            "functions": [
                "_log_tool_action",
                "_update_status_file",
                "_append_to_task_list",
                "_update_project_board",
                "__init__",
                "_read_output",
                "_update_output_buffer",
                "_handle_cd",
                "run_command",
                "get_output",
                "get_current_directory",
                "send_input",
                "is_busy"
            ],
            "classes": {
                "CursorTerminalController": {
                    "methods": [
                        "__init__",
                        "_read_output",
                        "_update_output_buffer",
                        "_handle_cd",
                        "run_command",
                        "get_output",
                        "get_current_directory",
                        "send_input",
                        "is_busy"
                    ],
                    "docstring": "Manages interactions with the Cursor integrated terminal (using subprocess).",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 22
        },
        "social\\core\\coordination\\cursor\\cursor_instance_controller.py": {
            "language": ".py",
            "functions": [
                "_log_tool_action",
                "_update_status_file",
                "_append_to_task_list",
                "_update_project_board",
                "__init__",
                "_find_cursor_executable",
                "launch_instance",
                "find_existing_instances",
                "focus_instance",
                "close_instance"
            ],
            "classes": {
                "CursorInstanceController": {
                    "methods": [
                        "__init__",
                        "_find_cursor_executable",
                        "launch_instance",
                        "find_existing_instances",
                        "focus_instance",
                        "close_instance"
                    ],
                    "docstring": "Manages Cursor application instances using subprocess and psutil (if available).",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 16
        },
        "social\\core\\coordination\\cursor\\cursor_ui_trainer.py": {
            "language": ".py",
            "functions": [
                "_log_tool_action",
                "_update_status_file",
                "_append_to_task_list",
                "_update_project_board",
                "__init__",
                "start_recording_session",
                "_capture_ui_event",
                "stop_recording_session",
                "train_model_from_session"
            ],
            "classes": {
                "CursorUITrainer": {
                    "methods": [
                        "__init__",
                        "start_recording_session",
                        "_capture_ui_event",
                        "stop_recording_session",
                        "train_model_from_session"
                    ],
                    "docstring": "Placeholder class for training Cursor UI interaction models.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 14
        },
        "social\\core\\coordination\\cursor\\cursor_window_controller.py": {
            "language": ".py",
            "functions": [
                "_log_tool_action",
                "_update_status_file",
                "_append_to_task_list",
                "_update_project_board",
                "__init__",
                "focus",
                "move",
                "resize",
                "close",
                "get_title",
                "get_position",
                "get_size",
                "is_visible"
            ],
            "classes": {
                "CursorWindowController": {
                    "methods": [
                        "__init__",
                        "focus",
                        "move",
                        "resize",
                        "close",
                        "get_title",
                        "get_position",
                        "get_size",
                        "is_visible"
                    ],
                    "docstring": "Manages interactions with the Cursor application window (Placeholders).",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 22
        },
        "social\\core\\coordination\\cursor\\task_execution_state_machine.py": {
            "language": ".py",
            "functions": [
                "_log_tool_action",
                "_update_status_file",
                "_append_to_task_list",
                "_update_project_board",
                "__init__",
                "state",
                "_log_transition",
                "_trigger_callbacks",
                "register_callback",
                "transition_to",
                "set_received",
                "set_running",
                "set_paused",
                "set_completed",
                "set_failed",
                "set_error",
                "set_cancelled",
                "example_completion_callback"
            ],
            "classes": {
                "TaskState": {
                    "methods": [],
                    "docstring": "Enumeration of possible task states.",
                    "base_classes": [
                        "Enum"
                    ]
                },
                "TaskExecutionStateMachine": {
                    "methods": [
                        "__init__",
                        "state",
                        "_log_transition",
                        "_trigger_callbacks",
                        "register_callback",
                        "transition_to",
                        "set_received",
                        "set_running",
                        "set_paused",
                        "set_completed",
                        "set_failed",
                        "set_error",
                        "set_cancelled"
                    ],
                    "docstring": "Manages the state transitions for a single agent task.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 31
        },
        "social\\core\\coordination\\cursor\\task_execution_monitor.py": {
            "language": ".py",
            "functions": [
                "_log_tool_action",
                "_update_status_file",
                "_append_to_task_list",
                "_update_project_board",
                "__init__",
                "start_monitoring_task",
                "update_task_status",
                "_check_tasks",
                "_monitor_loop",
                "_start_monitor_thread",
                "stop_monitoring",
                "get_task_summary"
            ],
            "classes": {
                "TaskExecutionMonitor": {
                    "methods": [
                        "__init__",
                        "start_monitoring_task",
                        "update_task_status",
                        "_check_tasks",
                        "_monitor_loop",
                        "_start_monitor_thread",
                        "stop_monitoring",
                        "get_task_summary"
                    ],
                    "docstring": "Placeholder class for monitoring agent task execution.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 20
        },
        "social\\core\\exceptions\\strategy_exceptions.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "__init__",
                "__init__",
                "__init__",
                "__init__",
                "__init__",
                "__init__"
            ],
            "classes": {
                "StrategyError": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Base class for strategy-related errors.",
                    "base_classes": [
                        "Exception"
                    ]
                },
                "LoginError": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Error during platform login.",
                    "base_classes": [
                        "StrategyError"
                    ]
                },
                "PostError": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Error during posting content.",
                    "base_classes": [
                        "StrategyError"
                    ]
                },
                "ScrapeError": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Error during scraping content.",
                    "base_classes": [
                        "StrategyError"
                    ]
                },
                "RateLimitError": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Error due to hitting API rate limits.",
                    "base_classes": [
                        "StrategyError"
                    ]
                },
                "AuthenticationError": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Error specifically related to invalid credentials or auth failure.",
                    "base_classes": [
                        "LoginError"
                    ]
                },
                "ContentError": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Error related to invalid or rejected content.",
                    "base_classes": [
                        "StrategyError"
                    ]
                }
            },
            "routes": [],
            "complexity": 14
        },
        "social\\core\\exceptions\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "social\\core\\strategies\\base_strategy.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "login",
                "create_post",
                "get_analytics",
                "check_login_status",
                "upload_media",
                "add_tags",
                "schedule_post",
                "navigate_to",
                "wait_for_element",
                "_validate_media_files",
                "_wait_for_element",
                "_handle_verification",
                "_handle_email_verification",
                "_handle_phone_verification",
                "_extract_error_details",
                "log_agent_task",
                "update_agent_mailbox",
                "sync_task_board",
                "run_strategy_demo_task"
            ],
            "classes": {
                "BaseSocialStrategy": {
                    "methods": [
                        "__init__",
                        "login",
                        "create_post",
                        "get_analytics",
                        "check_login_status",
                        "upload_media",
                        "add_tags",
                        "schedule_post",
                        "navigate_to",
                        "wait_for_element",
                        "_validate_media_files",
                        "_wait_for_element",
                        "_handle_verification",
                        "_handle_email_verification",
                        "_handle_phone_verification",
                        "_extract_error_details"
                    ],
                    "docstring": "Abstract base class for social media platform interactions.",
                    "base_classes": [
                        "ABC"
                    ]
                }
            },
            "routes": [],
            "complexity": 36
        },
        "social\\core\\strategies\\facebook_strategy.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "login",
                "create_post",
                "get_analytics",
                "demo_facebook_capabilities",
                "_get_demo_config"
            ],
            "classes": {
                "FacebookStrategy": {
                    "methods": [
                        "__init__",
                        "login",
                        "create_post",
                        "get_analytics"
                    ],
                    "docstring": "Strategy for interacting with Facebook platform.",
                    "base_classes": [
                        "BaseSocialStrategy"
                    ]
                }
            },
            "routes": [],
            "complexity": 10
        },
        "social\\core\\strategies\\twitter_strategy.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "login",
                "create_post",
                "get_analytics",
                "post_update",
                "post_thread",
                "_get_bearer_token",
                "_split_into_tweets"
            ],
            "classes": {
                "TwitterStrategy": {
                    "methods": [
                        "__init__",
                        "login",
                        "create_post",
                        "get_analytics",
                        "post_update",
                        "post_thread",
                        "_get_bearer_token",
                        "_split_into_tweets"
                    ],
                    "docstring": "Strategy for interacting with Twitter platform.",
                    "base_classes": [
                        "BaseSocialStrategy"
                    ]
                }
            },
            "routes": [],
            "complexity": 16
        },
        "social\\core\\strategies\\linkedin_strategy.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "login",
                "create_post",
                "get_analytics",
                "post_update",
                "post_article",
                "_get_user_id",
                "_get_blog_url",
                "demo_linkedin_capabilities",
                "_get_demo_config"
            ],
            "classes": {
                "LinkedInStrategy": {
                    "methods": [
                        "__init__",
                        "login",
                        "create_post",
                        "get_analytics",
                        "post_update",
                        "post_article",
                        "_get_user_id",
                        "_get_blog_url"
                    ],
                    "docstring": "Strategy for interacting with LinkedIn platform.",
                    "base_classes": [
                        "BaseSocialStrategy"
                    ]
                }
            },
            "routes": [],
            "complexity": 18
        },
        "social\\core\\strategies\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "social\\digital_dreamscape\\app.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "run",
                "__init__",
                "init_ui",
                "refresh_chats",
                "update_progress",
                "update_chat_list",
                "show_error",
                "update_selection",
                "select_all_chats",
                "clear_selection",
                "export_selected"
            ],
            "classes": {
                "ChatScraperWorker": {
                    "methods": [
                        "__init__",
                        "run"
                    ],
                    "docstring": "Worker thread for running the ChatGPT scraper.",
                    "base_classes": [
                        "QThread"
                    ]
                },
                "DigitalDreamscapeWindow": {
                    "methods": [
                        "__init__",
                        "init_ui",
                        "refresh_chats",
                        "update_progress",
                        "update_chat_list",
                        "show_error",
                        "update_selection",
                        "select_all_chats",
                        "clear_selection",
                        "export_selected"
                    ],
                    "docstring": "Main window for the Digital Dreamscape Chronicles application.",
                    "base_classes": [
                        "QMainWindow"
                    ]
                }
            },
            "routes": [],
            "complexity": 25
        },
        "social\\scripts\\debug_imports.py": {
            "language": ".py",
            "functions": [
                "print_python_path",
                "check_module_structure"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "social\\scripts\\engagement_dashboard.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "update_metrics",
                "get_aggregated_metrics",
                "calculate_unified_score",
                "display_dashboard",
                "log_event"
            ],
            "classes": {
                "EngagementDashboard": {
                    "methods": [
                        "__init__",
                        "update_metrics",
                        "get_aggregated_metrics",
                        "calculate_unified_score",
                        "display_dashboard"
                    ],
                    "docstring": "A simple class to aggregate and display social engagement metrics.\n    Now includes a basic weighted unified engagement score calculation.\n    ",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 11
        },
        "social\\tests\\conftest.py": {
            "language": ".py",
            "functions": [
                "pytest_configure"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "social\\scripts\\inject_task.py": {
            "language": ".py",
            "functions": [
                "parse_arguments",
                "main"
            ],
            "classes": {
                "TaskStatus": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 2
        },
        "social\\tests\\test_agent_load.py": {
            "language": ".py",
            "functions": [
                "generate_message_file",
                "run_load_test"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "social\\tests\\test_devlog_analyzer.py": {
            "language": ".py",
            "functions": [
                "test_db",
                "sample_post_data",
                "sample_metrics",
                "test_track_post",
                "test_update_metrics",
                "test_get_best_posting_times",
                "test_get_top_performing_tags",
                "test_get_content_insights"
            ],
            "classes": {},
            "routes": [],
            "complexity": 8
        },
        "social\\tests\\test_devlog_generator.py": {
            "language": ".py",
            "functions": [
                "mock_chat_data",
                "generator",
                "test_process_conversation",
                "test_generate_blog_post",
                "test_generate_social_content",
                "test_content_block_processing",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 7
        },
        "social\\tests\\test_devlog_dispatcher.py": {
            "language": ".py",
            "functions": [
                "mock_twitter",
                "mock_linkedin",
                "test_content_dir",
                "dispatcher",
                "test_handle_new_blog_post",
                "test_handle_new_twitter_content",
                "test_handle_new_linkedin_content",
                "test_content_handler",
                "test_schedule_post",
                "test_duplicate_handling",
                "__init__"
            ],
            "classes": {
                "MockEvent": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 12
        },
        "social\\tests\\test_linkedin_strategy.py": {
            "language": ".py",
            "functions": [
                "mock_setup_logging",
                "setUp",
                "start_patch",
                "tearDown",
                "test_login_success",
                "test_login_token_exchange_fails",
                "test_post_text_success",
                "test_post_requires_login",
                "test_post_handles_api_error",
                "test_register_image_upload_success",
                "test_upload_image_binary_success",
                "test_post_with_image_success"
            ],
            "classes": {
                "TestLinkedInStrategy": {
                    "methods": [
                        "setUp",
                        "start_patch",
                        "tearDown",
                        "test_login_success",
                        "test_login_token_exchange_fails",
                        "test_post_text_success",
                        "test_post_requires_login",
                        "test_post_handles_api_error",
                        "test_register_image_upload_success",
                        "test_upload_image_binary_success",
                        "test_post_with_image_success"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "unittest.TestCase"
                    ]
                }
            },
            "routes": [],
            "complexity": 23
        },
        "social\\tests\\test_reddit_strategy.py": {
            "language": ".py",
            "functions": [
                "mock_setup_logging",
                "setUp",
                "test_login_success",
                "test_post_text_success",
                "test_scrape_mentions_success",
                "test_post_praw_api_exception",
                "test_scrape_mentions_no_mentions"
            ],
            "classes": {
                "TestRedditStrategy": {
                    "methods": [
                        "setUp",
                        "test_login_success",
                        "test_post_text_success",
                        "test_scrape_mentions_success",
                        "test_post_praw_api_exception",
                        "test_scrape_mentions_no_mentions"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "unittest.TestCase"
                    ]
                }
            },
            "routes": [],
            "complexity": 13
        },
        "social\\tests\\test_social_agent_e2e.py": {
            "language": ".py",
            "functions": [
                "setUp",
                "tearDown",
                "test_cycle_post_success",
                "test_cycle_post_error",
                "test_cycle_unknown_command"
            ],
            "classes": {
                "TestSocialAgentE2E": {
                    "methods": [
                        "setUp",
                        "tearDown",
                        "test_cycle_post_success",
                        "test_cycle_post_error",
                        "test_cycle_unknown_command"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "unittest.TestCase"
                    ]
                }
            },
            "routes": [],
            "complexity": 10
        },
        "social\\tests\\test_social_media_agent.py": {
            "language": ".py",
            "functions": [
                "setUp",
                "test_agent_initialization_loads_config",
                "test_agent_initialization_initializes_mailbox",
                "test_process_incoming_message_valid_login",
                "test_process_incoming_message_unknown_command",
                "test_process_incoming_message_valid_post",
                "test_process_incoming_message_missing_command",
                "test_process_incoming_message_scrape_mentions",
                "test_process_incoming_message_check_login_status",
                "test_process_incoming_message_scrape_trends",
                "test_process_incoming_message_scrape_community",
                "test_process_incoming_message_agent_status",
                "test_initialize_driver_success",
                "test_initialize_driver_failure",
                "test_get_or_load_strategy_success_first_time",
                "test_get_or_load_strategy_already_loaded",
                "test_get_or_load_strategy_module_not_found",
                "test_agent_post_method_success",
                "test_agent_post_method_strategy_load_fails",
                "test_agent_post_method_strategy_post_fails",
                "test_agent_scrape_mentions_success",
                "test_agent_scrape_mentions_strategy_missing_method",
                "test_agent_scrape_mentions_strategy_fails",
                "test_agent_scrape_trends_success",
                "test_agent_scrape_community_success"
            ],
            "classes": {
                "TestSocialMediaAgent": {
                    "methods": [
                        "setUp",
                        "test_agent_initialization_loads_config",
                        "test_agent_initialization_initializes_mailbox",
                        "test_process_incoming_message_valid_login",
                        "test_process_incoming_message_unknown_command",
                        "test_process_incoming_message_valid_post",
                        "test_process_incoming_message_missing_command",
                        "test_process_incoming_message_scrape_mentions",
                        "test_process_incoming_message_check_login_status",
                        "test_process_incoming_message_scrape_trends",
                        "test_process_incoming_message_scrape_community",
                        "test_process_incoming_message_agent_status",
                        "test_initialize_driver_success",
                        "test_initialize_driver_failure",
                        "test_get_or_load_strategy_success_first_time",
                        "test_get_or_load_strategy_already_loaded",
                        "test_get_or_load_strategy_module_not_found",
                        "test_agent_post_method_success",
                        "test_agent_post_method_strategy_load_fails",
                        "test_agent_post_method_strategy_post_fails",
                        "test_agent_scrape_mentions_success",
                        "test_agent_scrape_mentions_strategy_missing_method",
                        "test_agent_scrape_mentions_strategy_fails",
                        "test_agent_scrape_trends_success",
                        "test_agent_scrape_community_success"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "unittest.TestCase"
                    ]
                }
            },
            "routes": [],
            "complexity": 50
        },
        "social\\tests\\test_twitter_strategy.py": {
            "language": ".py",
            "functions": [
                "setUp",
                "test_login_timeout_exception_handling",
                "test_post_element_not_found_handling",
                "find_element_side_effect"
            ],
            "classes": {
                "TestTwitterStrategyErrorHandling": {
                    "methods": [
                        "setUp",
                        "test_login_timeout_exception_handling",
                        "test_post_element_not_found_handling"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "unittest.TestCase"
                    ]
                }
            },
            "routes": [],
            "complexity": 7
        },
        "social\\tests\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "social\\tests\\core\\test_template_engine.py": {
            "language": ".py",
            "functions": [
                "setUp",
                "tearDown",
                "test_render_generic_event_success",
                "test_render_proposal_update_success",
                "test_render_template_not_found",
                "test_render_template_syntax_error",
                "test_render_engine_unavailable",
                "test_render_complex_template",
                "test_render_with_undefined_variables",
                "test_render_with_custom_filters",
                "test_render_with_general_exception",
                "custom_upper"
            ],
            "classes": {
                "TestRenderTemplateFunction": {
                    "methods": [
                        "setUp",
                        "tearDown",
                        "test_render_generic_event_success",
                        "test_render_proposal_update_success",
                        "test_render_template_not_found",
                        "test_render_template_syntax_error",
                        "test_render_engine_unavailable",
                        "test_render_complex_template",
                        "test_render_with_undefined_variables",
                        "test_render_with_custom_filters",
                        "test_render_with_general_exception"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "unittest.TestCase"
                    ]
                }
            },
            "routes": [],
            "complexity": 23
        },
        "social\\tests\\core\\test_prompt_staging_service.py": {
            "language": ".py",
            "functions": [
                "test_render_prompt_success",
                "test_render_prompt_state_load_failure",
                "test_render_prompt_analysis_load_failure",
                "test_render_prompt_engine_unavailable",
                "test_render_prompt_render_itself_fails"
            ],
            "classes": {
                "TestPromptStagingServiceRender": {
                    "methods": [
                        "test_render_prompt_success",
                        "test_render_prompt_state_load_failure",
                        "test_render_prompt_analysis_load_failure",
                        "test_render_prompt_engine_unavailable",
                        "test_render_prompt_render_itself_fails"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "unittest.TestCase"
                    ]
                }
            },
            "routes": [],
            "complexity": 10
        },
        "social\\tests\\core\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "social\\tests\\core\\memory\\test_governance_memory_engine.py": {
            "language": ".py",
            "functions": [
                "setUp",
                "tearDown",
                "test_log_single_event",
                "test_log_multiple_events_consistency_and_order",
                "test_log_event_write_failure"
            ],
            "classes": {
                "TestGovernanceMemoryEngine": {
                    "methods": [
                        "setUp",
                        "tearDown",
                        "test_log_single_event",
                        "test_log_multiple_events_consistency_and_order",
                        "test_log_event_write_failure"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "unittest.TestCase"
                    ]
                }
            },
            "routes": [],
            "complexity": 10
        },
        "social\\tests\\integration\\test_error_recovery.py": {
            "language": ".py",
            "functions": [
                "social_agent",
                "mock_log_event",
                "test_login_failure_authentication",
                "test_post_failure_rate_limit",
                "test_scrape_failure_timeout"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5
        },
        "social\\tests\\integration\\test_full_prompt_cycle.py": {
            "language": ".py",
            "functions": [
                "test_simulated_prompt_cycle"
            ],
            "classes": {
                "TestFullPromptCycleSimulation": {
                    "methods": [
                        "test_simulated_prompt_cycle"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "unittest.TestCase"
                    ]
                }
            },
            "routes": [],
            "complexity": 2
        },
        "social\\tests\\integration\\test_posting_workflow.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "get_platform_name",
                "login",
                "post",
                "check_login_status",
                "quit",
                "setUp",
                "_create_post_message",
                "test_post_twitter_success",
                "test_post_reddit_success",
                "test_post_linkedin_success",
                "test_post_strategy_returns_false",
                "test_post_strategy_raises_post_error",
                "test_post_strategy_raises_auth_error",
                "test_post_with_image",
                "side_effect_import"
            ],
            "classes": {
                "MockPostingStrategy": {
                    "methods": [
                        "__init__",
                        "get_platform_name",
                        "login",
                        "post",
                        "check_login_status",
                        "quit"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "BaseSocialStrategy"
                    ]
                },
                "TestPostingWorkflow": {
                    "methods": [
                        "setUp",
                        "_create_post_message",
                        "test_post_twitter_success",
                        "test_post_reddit_success",
                        "test_post_linkedin_success",
                        "test_post_strategy_returns_false",
                        "test_post_strategy_raises_post_error",
                        "test_post_strategy_raises_auth_error",
                        "test_post_with_image"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "unittest.TestCase"
                    ]
                }
            },
            "routes": [],
            "complexity": 31
        },
        "social\\tests\\integration\\test_social_agent_loop.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "get_platform_name",
                "login",
                "post",
                "check_login_status",
                "scrape_mentions",
                "scrape_trends",
                "scrape_community",
                "quit",
                "setUp",
                "test_01_process_valid_post_message",
                "test_02_process_valid_scrape_message",
                "test_03_process_message_strategy_fails",
                "test_04_process_invalid_command",
                "test_05_process_post_not_logged_in",
                "test_06_process_post_with_governance_context",
                "test_07_loop_runs_multiple_cycles_empty_inbox",
                "test_08_loop_processes_message_then_empty",
                "test_09_loop_handles_check_messages_error",
                "test_10_loop_shutdown_called_on_interrupt",
                "side_effect_import",
                "shutdown_wrapper"
            ],
            "classes": {
                "MockStrategy": {
                    "methods": [
                        "__init__",
                        "get_platform_name",
                        "login",
                        "post",
                        "check_login_status",
                        "scrape_mentions",
                        "scrape_trends",
                        "scrape_community",
                        "quit"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "BaseSocialStrategy"
                    ]
                },
                "TestSocialAgentLoop": {
                    "methods": [
                        "setUp",
                        "test_01_process_valid_post_message",
                        "test_02_process_valid_scrape_message",
                        "test_03_process_message_strategy_fails",
                        "test_04_process_invalid_command",
                        "test_05_process_post_not_logged_in",
                        "test_06_process_post_with_governance_context",
                        "test_07_loop_runs_multiple_cycles_empty_inbox",
                        "test_08_loop_processes_message_then_empty",
                        "test_09_loop_handles_check_messages_error",
                        "test_10_loop_shutdown_called_on_interrupt"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "unittest.TestCase"
                    ]
                }
            },
            "routes": [],
            "complexity": 42
        },
        "social\\tests\\integration\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "social\\tests\\social\\test_facebook_strategy.py": {
            "language": ".py",
            "functions": [
                "mock_config",
                "facebook_strategy",
                "test_reply_posting_success",
                "test_reply_posting_failure",
                "test_reward_mechanism",
                "test_missing_credentials",
                "test_end_to_end_post_and_reply",
                "test_sentiment_integration"
            ],
            "classes": {
                "TestFacebookStrategy": {
                    "methods": [
                        "test_reply_posting_success",
                        "test_reply_posting_failure",
                        "test_reward_mechanism",
                        "test_missing_credentials",
                        "test_end_to_end_post_and_reply",
                        "test_sentiment_integration"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 14
        },
        "social\\tests\\social\\test_linkedin_strategy.py": {
            "language": ".py",
            "functions": [
                "mock_config",
                "linkedin_strategy",
                "test_post_creation_success",
                "test_metric_gathering_success",
                "test_metric_gathering_failure",
                "test_connection_growth_tracking",
                "test_sentiment_analysis_integration",
                "test_missing_credentials",
                "test_end_to_end_post_workflow",
                "test_post_template_snapshot"
            ],
            "classes": {
                "TestLinkedInStrategy": {
                    "methods": [
                        "test_post_creation_success",
                        "test_metric_gathering_success",
                        "test_metric_gathering_failure",
                        "test_connection_growth_tracking",
                        "test_sentiment_analysis_integration",
                        "test_missing_credentials",
                        "test_end_to_end_post_workflow",
                        "test_post_template_snapshot"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "unittest.TestCase"
                    ]
                }
            },
            "routes": [],
            "complexity": 18
        },
        "social\\tests\\social\\test_twitter_strategy.py": {
            "language": ".py",
            "functions": [
                "mock_config",
                "twitter_strategy",
                "test_tweet_posting_success",
                "test_reply_posting_success",
                "test_rate_limit_handling",
                "test_intermediate_screen_handling",
                "test_sentiment_analysis_integration",
                "test_missing_credentials",
                "test_end_to_end_tweet_workflow",
                "test_tweet_template_snapshot"
            ],
            "classes": {
                "TestTwitterStrategy": {
                    "methods": [
                        "test_tweet_posting_success",
                        "test_reply_posting_success",
                        "test_rate_limit_handling",
                        "test_intermediate_screen_handling",
                        "test_sentiment_analysis_integration",
                        "test_missing_credentials",
                        "test_end_to_end_tweet_workflow",
                        "test_tweet_template_snapshot"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 18
        },
        "social\\tests\\social\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "social\\tests\\social\\strategies\\test_twitter_strategy.py": {
            "language": ".py",
            "functions": [
                "mock_config",
                "mock_api",
                "strategy",
                "snapshot_dir",
                "save_snapshot",
                "load_snapshot",
                "test_init_with_valid_credentials",
                "test_init_with_missing_credentials",
                "test_feedback_on_rate_limit",
                "test_post_tweet_success",
                "test_post_tweet_rate_limit",
                "test_post_reply_success",
                "test_analyze_tweet_sentiment",
                "test_detect_and_handle_intermediate_screens_phone",
                "test_detect_and_handle_intermediate_screens_email",
                "test_detect_and_handle_intermediate_screens_no_screens",
                "test_render_tweet_template",
                "test_render_tweet_template_no_hashtags",
                "test_render_tweet_template_empty_content",
                "test_render_tweet_template_missing_content",
                "test_post_tweet_with_max_length"
            ],
            "classes": {
                "TestTwitterStrategy": {
                    "methods": [
                        "test_post_tweet_success",
                        "test_post_tweet_rate_limit",
                        "test_post_reply_success",
                        "test_analyze_tweet_sentiment",
                        "test_detect_and_handle_intermediate_screens_phone",
                        "test_detect_and_handle_intermediate_screens_email",
                        "test_detect_and_handle_intermediate_screens_no_screens",
                        "test_render_tweet_template",
                        "test_render_tweet_template_no_hashtags",
                        "test_render_tweet_template_empty_content",
                        "test_render_tweet_template_missing_content",
                        "test_post_tweet_with_max_length"
                    ],
                    "docstring": "Test suite for Twitter platform strategy.",
                    "base_classes": [
                        "BaseStrategyTest"
                    ]
                }
            },
            "routes": [],
            "complexity": 33
        },
        "social\\tests\\social\\strategies\\base_strategy_test.py": {
            "language": ".py",
            "functions": [
                "mock_config",
                "mock_api",
                "strategy",
                "snapshot_dir",
                "save_snapshot",
                "load_snapshot",
                "test_init_with_valid_credentials",
                "test_init_with_missing_credentials",
                "test_feedback_on_rate_limit",
                "verify_template_rendering"
            ],
            "classes": {
                "BaseStrategyTest": {
                    "methods": [
                        "mock_config",
                        "mock_api",
                        "strategy",
                        "snapshot_dir",
                        "save_snapshot",
                        "load_snapshot",
                        "test_init_with_valid_credentials",
                        "test_init_with_missing_credentials",
                        "test_feedback_on_rate_limit",
                        "verify_template_rendering"
                    ],
                    "docstring": "Base test class for all social media strategy tests.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 20
        },
        "social\\tests\\strategies\\base_strategy_test.py": {
            "language": ".py",
            "functions": [
                "login",
                "post_content",
                "scrape_mentions",
                "mock_config",
                "mock_driver",
                "strategy",
                "test_init_with_valid_config",
                "test_init_with_missing_config",
                "test_validate_media_files_success",
                "test_validate_media_files_missing",
                "test_wait_for_element_success",
                "test_wait_for_element_timeout",
                "test_safe_click_success",
                "test_safe_click_retry_success",
                "test_safe_click_failure",
                "test_safe_send_keys_success",
                "test_safe_send_keys_retry_success",
                "test_safe_send_keys_failure",
                "test_extract_error_details_success",
                "test_extract_error_details_failure"
            ],
            "classes": {
                "MockStrategy": {
                    "methods": [
                        "login",
                        "post_content",
                        "scrape_mentions"
                    ],
                    "docstring": "Mock strategy for testing base functionality.",
                    "base_classes": [
                        "BaseStrategy"
                    ]
                },
                "BaseStrategyTest": {
                    "methods": [
                        "mock_config",
                        "mock_driver",
                        "strategy",
                        "test_init_with_valid_config",
                        "test_init_with_missing_config",
                        "test_validate_media_files_success",
                        "test_validate_media_files_missing",
                        "test_wait_for_element_success",
                        "test_wait_for_element_timeout",
                        "test_safe_click_success",
                        "test_safe_click_retry_success",
                        "test_safe_click_failure",
                        "test_safe_send_keys_success",
                        "test_safe_send_keys_retry_success",
                        "test_safe_send_keys_failure",
                        "test_extract_error_details_success",
                        "test_extract_error_details_failure"
                    ],
                    "docstring": "Base test class for all strategy tests.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 40
        },
        "social\\tests\\strategies\\base_test.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "find_element",
                "find_elements",
                "get",
                "quit",
                "__init__",
                "click",
                "send_keys",
                "is_displayed",
                "get_attribute",
                "setUp",
                "tearDown",
                "assert_logged_event",
                "simulate_element_present",
                "simulate_element_not_found",
                "simulate_login_success",
                "simulate_login_failure",
                "simulate_post_success",
                "simulate_post_failure"
            ],
            "classes": {
                "MockWebDriver": {
                    "methods": [
                        "__init__",
                        "find_element",
                        "find_elements",
                        "get",
                        "quit"
                    ],
                    "docstring": "Mock Selenium WebDriver for testing.",
                    "base_classes": []
                },
                "MockElement": {
                    "methods": [
                        "__init__",
                        "click",
                        "send_keys",
                        "is_displayed",
                        "get_attribute"
                    ],
                    "docstring": "Mock Selenium WebElement for testing.",
                    "base_classes": []
                },
                "BaseStrategyTest": {
                    "methods": [
                        "setUp",
                        "tearDown",
                        "assert_logged_event",
                        "simulate_element_present",
                        "simulate_element_not_found",
                        "simulate_login_success",
                        "simulate_login_failure",
                        "simulate_post_success",
                        "simulate_post_failure"
                    ],
                    "docstring": "Base test class for all social media strategy tests.",
                    "base_classes": [
                        "unittest.TestCase"
                    ]
                }
            },
            "routes": [],
            "complexity": 38
        },
        "social\\tests\\strategies\\test_facebook_strategy.py": {
            "language": ".py",
            "functions": [
                "mock_setup_logging",
                "strategy",
                "test_validate_api_credentials_success",
                "test_validate_api_credentials_missing",
                "test_login_success",
                "test_login_failure_email",
                "test_login_failure_password",
                "test_post_content_success",
                "test_post_content_with_media",
                "test_post_content_failure",
                "test_scrape_mentions_success",
                "test_scrape_mentions_with_since",
                "test_scrape_mentions_empty",
                "test_post_reply_success",
                "test_analyze_post_sentiment",
                "test_calculate_engagement_reward",
                "test_render_post_template"
            ],
            "classes": {
                "TestFacebookStrategy": {
                    "methods": [
                        "strategy",
                        "test_validate_api_credentials_success",
                        "test_validate_api_credentials_missing",
                        "test_login_success",
                        "test_login_failure_email",
                        "test_login_failure_password",
                        "test_post_content_success",
                        "test_post_content_with_media",
                        "test_post_content_failure",
                        "test_scrape_mentions_success",
                        "test_scrape_mentions_with_since",
                        "test_scrape_mentions_empty",
                        "test_post_reply_success",
                        "test_analyze_post_sentiment",
                        "test_calculate_engagement_reward",
                        "test_render_post_template"
                    ],
                    "docstring": "Test cases for FacebookStrategy.",
                    "base_classes": [
                        "BaseStrategyTest"
                    ]
                }
            },
            "routes": [],
            "complexity": 33
        },
        "social\\tests\\strategies\\test_linkedin_strategy.py": {
            "language": ".py",
            "functions": [
                "mock_driver",
                "mock_wait",
                "strategy",
                "test_initialize_success",
                "test_initialize_failure",
                "test_login_success",
                "test_login_without_init",
                "test_login_failure",
                "test_post_update_success",
                "test_post_update_not_logged_in",
                "test_post_update_with_media",
                "test_post_update_failure",
                "test_close",
                "test_close_with_error",
                "test_context_manager",
                "strategy",
                "test_validate_api_credentials_success",
                "test_validate_api_credentials_missing",
                "test_login_success",
                "test_login_failure_username",
                "test_login_failure_password",
                "test_post_content_success",
                "test_post_content_with_media",
                "test_post_content_failure",
                "test_scrape_mentions_success",
                "test_scrape_mentions_with_since",
                "test_scrape_mentions_empty",
                "test_gather_post_metrics_success",
                "test_gather_post_metrics_failure",
                "test_track_connection_growth_success",
                "test_track_connection_growth_threshold",
                "test_analyze_post_sentiment",
                "test_render_post_template"
            ],
            "classes": {
                "TestLinkedInStrategy": {
                    "methods": [
                        "strategy",
                        "test_validate_api_credentials_success",
                        "test_validate_api_credentials_missing",
                        "test_login_success",
                        "test_login_failure_username",
                        "test_login_failure_password",
                        "test_post_content_success",
                        "test_post_content_with_media",
                        "test_post_content_failure",
                        "test_scrape_mentions_success",
                        "test_scrape_mentions_with_since",
                        "test_scrape_mentions_empty",
                        "test_gather_post_metrics_success",
                        "test_gather_post_metrics_failure",
                        "test_track_connection_growth_success",
                        "test_track_connection_growth_threshold",
                        "test_analyze_post_sentiment",
                        "test_render_post_template"
                    ],
                    "docstring": "Test cases for LinkedInStrategy.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 51
        },
        "social\\tests\\strategies\\test_sentiment_analysis.py": {
            "language": ".py",
            "functions": [
                "setUp",
                "test_direct_sentiment_analysis_benchmarks",
                "test_twitter_strategy_sentiment_integration",
                "find_element_side_effect"
            ],
            "classes": {
                "TestSentimentAnalysisIntegration": {
                    "methods": [
                        "setUp",
                        "test_direct_sentiment_analysis_benchmarks",
                        "test_twitter_strategy_sentiment_integration"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "unittest.TestCase"
                    ]
                }
            },
            "routes": [],
            "complexity": 7
        },
        "social\\tests\\strategies\\test_twitter_strategy.py": {
            "language": ".py",
            "functions": [
                "strategy",
                "test_validate_api_credentials_success",
                "test_validate_api_credentials_missing",
                "test_login_success",
                "test_login_failure_username",
                "test_login_failure_password",
                "test_post_content_success",
                "test_post_content_with_media",
                "test_post_content_rate_limit",
                "test_scrape_mentions_success",
                "test_scrape_mentions_with_since",
                "test_scrape_mentions_empty",
                "test_post_reply_success",
                "test_analyze_tweet_sentiment",
                "test_detect_and_handle_intermediate_screens",
                "test_render_tweet_template"
            ],
            "classes": {
                "TestTwitterStrategy": {
                    "methods": [
                        "strategy",
                        "test_validate_api_credentials_success",
                        "test_validate_api_credentials_missing",
                        "test_login_success",
                        "test_login_failure_username",
                        "test_login_failure_password",
                        "test_post_content_success",
                        "test_post_content_with_media",
                        "test_post_content_rate_limit",
                        "test_scrape_mentions_success",
                        "test_scrape_mentions_with_since",
                        "test_scrape_mentions_empty",
                        "test_post_reply_success",
                        "test_analyze_tweet_sentiment",
                        "test_detect_and_handle_intermediate_screens",
                        "test_render_tweet_template"
                    ],
                    "docstring": "Test cases for TwitterStrategy.",
                    "base_classes": [
                        "BaseStrategyTest"
                    ]
                }
            },
            "routes": [],
            "complexity": 32
        },
        "social\\tests\\strategies\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "social\\tests\\tools\\test_chat_cursor_bridge.py": {
            "language": ".py",
            "functions": [
                "test_write_success",
                "test_write_io_error",
                "test_read_file_not_found",
                "test_read_success_valid_json",
                "test_read_invalid_json",
                "test_read_io_error"
            ],
            "classes": {
                "TestChatCursorBridge": {
                    "methods": [
                        "test_write_success",
                        "test_write_io_error",
                        "test_read_file_not_found",
                        "test_read_success_valid_json",
                        "test_read_invalid_json",
                        "test_read_io_error"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "unittest.TestCase"
                    ]
                }
            },
            "routes": [],
            "complexity": 12
        },
        "social\\tests\\tools\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "social\\tests\\utils\\test_browser_utils.py": {
            "language": ".py",
            "functions": [
                "mock_uc",
                "mock_options",
                "test_get_undetected_driver_headless",
                "test_get_undetected_driver_with_proxy",
                "test_get_undetected_driver_with_user_agent",
                "test_get_undetected_driver_all_options",
                "test_get_undetected_driver_import_error",
                "test_get_undetected_driver_chrome_error",
                "test_get_undetected_driver_options_error"
            ],
            "classes": {},
            "routes": [],
            "complexity": 9
        },
        "social\\tests\\utils\\test_chatgpt_scraper.py": {
            "language": ".py",
            "functions": [
                "mock_driver",
                "mock_webdriver",
                "temp_cookie_file",
                "valid_cookies",
                "test_initialization",
                "test_context_manager",
                "test_setup_browser_success",
                "test_setup_browser_failure",
                "test_cleanup_success",
                "test_cleanup_failure",
                "test_save_cookies_success",
                "test_save_cookies_failure",
                "test_load_cookies_success",
                "test_load_cookies_missing_file",
                "test_inject_jquery_success",
                "test_inject_jquery_failure",
                "test_scroll_and_capture_chats_success",
                "test_scroll_and_capture_chats_empty",
                "test_run_scraper_success",
                "test_run_scraper_navigation_error",
                "test_integration_full_workflow"
            ],
            "classes": {
                "TestChatGPTScraper": {
                    "methods": [
                        "test_initialization",
                        "test_context_manager",
                        "test_setup_browser_success",
                        "test_setup_browser_failure",
                        "test_cleanup_success",
                        "test_cleanup_failure",
                        "test_save_cookies_success",
                        "test_save_cookies_failure",
                        "test_load_cookies_success",
                        "test_load_cookies_missing_file",
                        "test_inject_jquery_success",
                        "test_inject_jquery_failure",
                        "test_scroll_and_capture_chats_success",
                        "test_scroll_and_capture_chats_empty",
                        "test_run_scraper_success",
                        "test_run_scraper_navigation_error",
                        "test_integration_full_workflow"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 38
        },
        "social\\tests\\utils\\test_cursor_utils.py": {
            "language": ".py",
            "functions": [
                "valid_prompt_payload",
                "temp_cursor_dir",
                "test_export_prompt_success",
                "test_export_prompt_invalid_payload",
                "test_export_prompt_none_payload",
                "test_export_prompt_directory_creation",
                "test_export_prompt_os_error",
                "test_export_prompt_json_error",
                "test_export_prompt_write_error",
                "test_export_prompt_filename_generation",
                "test_export_prompt_special_chars_in_id",
                "test_export_prompt_no_prompt_id",
                "test_integration_file_persistence"
            ],
            "classes": {
                "TestCursorUtils": {
                    "methods": [
                        "test_export_prompt_success",
                        "test_export_prompt_invalid_payload",
                        "test_export_prompt_none_payload",
                        "test_export_prompt_directory_creation",
                        "test_export_prompt_os_error",
                        "test_export_prompt_json_error",
                        "test_export_prompt_write_error",
                        "test_export_prompt_filename_generation",
                        "test_export_prompt_special_chars_in_id",
                        "test_export_prompt_no_prompt_id",
                        "test_integration_file_persistence"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 24
        },
        "social\\tests\\utils\\test_devlog_analyzer.py": {
            "language": ".py",
            "functions": [
                "create_sample_data",
                "test_track_post_with_publish_time",
                "test_get_best_posting_times_no_data"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "social\\tests\\utils\\test_mailbox_handler.py": {
            "language": ".py",
            "functions": [
                "mailbox_dirs",
                "test_mailbox_init_creates_dirs",
                "test_check_for_messages_empty_inbox",
                "test_check_for_messages_valid_message",
                "test_check_for_messages_invalid_json",
                "test_check_for_messages_not_dict",
                "test_check_for_messages_inbox_not_found",
                "test_send_message_success",
                "test_send_message_write_fails",
                "mock_logging",
                "test_init_dir_creation_fails",
                "test_check_messages_read_io_error",
                "test_move_file_fails",
                "test_check_messages_empty_file",
                "test_check_messages_file_disappears_before_open",
                "setUp",
                "tearDown",
                "test_01_initialization_creates_directories",
                "test_02_send_message_creates_file",
                "test_03_check_messages_empty_inbox",
                "test_04_check_messages_valid_json",
                "test_05_check_messages_invalid_json",
                "test_06_check_messages_non_dict_json",
                "test_07_check_messages_non_json_file",
                "test_08_check_messages_mixed_files"
            ],
            "classes": {
                "TestMailboxHandler": {
                    "methods": [
                        "setUp",
                        "tearDown",
                        "test_01_initialization_creates_directories",
                        "test_02_send_message_creates_file",
                        "test_03_check_messages_empty_inbox",
                        "test_04_check_messages_valid_json",
                        "test_05_check_messages_invalid_json",
                        "test_06_check_messages_non_dict_json",
                        "test_07_check_messages_non_json_file",
                        "test_08_check_messages_mixed_files"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "unittest.TestCase"
                    ]
                },
                "TestMailboxHandlerUnittestStyle": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "unittest.TestCase"
                    ]
                }
            },
            "routes": [],
            "complexity": 35
        },
        "social\\tests\\utils\\test_performance_logger.py": {
            "language": ".py",
            "functions": [
                "test_log_successful_outcome",
                "test_log_failed_outcome",
                "test_log_file_write_error"
            ],
            "classes": {
                "TestPerformanceLogger": {
                    "methods": [
                        "test_log_successful_outcome",
                        "test_log_failed_outcome",
                        "test_log_file_write_error"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "unittest.TestCase"
                    ]
                }
            },
            "routes": [],
            "complexity": 6
        },
        "social\\tests\\utils\\test_utils.py": {
            "language": ".py",
            "functions": [
                "create_mock_strategy_config",
                "simulate_timeout_exception",
                "setup_driver",
                "create_mock_agent_config",
                "initialize_mock_strategy",
                "__init__",
                "get",
                "find_element",
                "find_elements",
                "add_mock_element",
                "clear_mock_elements",
                "quit",
                "__init__",
                "click",
                "send_keys",
                "is_displayed",
                "get_attribute",
                "clear",
                "__init__",
                "json",
                "raise_for_status",
                "__init__",
                "_log_call",
                "login",
                "create_post",
                "get_analytics",
                "check_login_status",
                "upload_media",
                "add_tags",
                "schedule_post",
                "set_mock_login",
                "set_mock_create_post",
                "set_mock_analytics",
                "reset_call_log",
                "get_call_log"
            ],
            "classes": {
                "MockWebDriver": {
                    "methods": [
                        "__init__",
                        "get",
                        "find_element",
                        "find_elements",
                        "add_mock_element",
                        "clear_mock_elements",
                        "quit"
                    ],
                    "docstring": "Mock Selenium WebDriver for testing.",
                    "base_classes": []
                },
                "MockElement": {
                    "methods": [
                        "__init__",
                        "click",
                        "send_keys",
                        "is_displayed",
                        "get_attribute",
                        "clear"
                    ],
                    "docstring": "Mock Selenium WebElement for testing.",
                    "base_classes": []
                },
                "MockResponse": {
                    "methods": [
                        "__init__",
                        "json",
                        "raise_for_status"
                    ],
                    "docstring": "Mock requests.Response for testing.",
                    "base_classes": []
                },
                "MockBaseSocialStrategy": {
                    "methods": [
                        "__init__",
                        "_log_call",
                        "login",
                        "create_post",
                        "get_analytics",
                        "check_login_status",
                        "upload_media",
                        "add_tags",
                        "schedule_post",
                        "set_mock_login",
                        "set_mock_create_post",
                        "set_mock_analytics",
                        "reset_call_log",
                        "get_call_log"
                    ],
                    "docstring": "Mock implementation of BaseSocialStrategy for testing purposes.",
                    "base_classes": [
                        "BaseSocialStrategy"
                    ]
                }
            },
            "routes": [],
            "complexity": 65
        },
        "social\\tests\\utils\\test_retry_utils.py": {
            "language": ".py",
            "functions": [
                "test_successful_execution_no_retry",
                "test_retry_on_timeout_exception",
                "test_retry_on_stale_element",
                "test_retry_on_element_intercepted",
                "test_max_retries_exceeded",
                "test_custom_retry_parameters",
                "test_exponential_backoff",
                "test_preserve_function_metadata",
                "test_mixed_exceptions",
                "test_args_kwargs_passing",
                "test_integration_with_selenium",
                "test_func",
                "click_element",
                "__init__",
                "click"
            ],
            "classes": {
                "TestRetryUtils": {
                    "methods": [
                        "test_successful_execution_no_retry",
                        "test_retry_on_timeout_exception",
                        "test_retry_on_stale_element",
                        "test_retry_on_element_intercepted",
                        "test_max_retries_exceeded",
                        "test_custom_retry_parameters",
                        "test_exponential_backoff",
                        "test_preserve_function_metadata",
                        "test_mixed_exceptions",
                        "test_args_kwargs_passing",
                        "test_integration_with_selenium"
                    ],
                    "docstring": null,
                    "base_classes": []
                },
                "MockWebElement": {
                    "methods": [
                        "__init__",
                        "click"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 28
        },
        "social\\tests\\utils\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "social\\utils\\chatgpt_scraper.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "__enter__",
                "__exit__",
                "setup_browser",
                "cleanup",
                "save_cookies",
                "load_cookies",
                "inject_jquery",
                "scroll_and_capture_chats",
                "run_scraper"
            ],
            "classes": {
                "ChatGPTScraper": {
                    "methods": [
                        "__init__",
                        "__enter__",
                        "__exit__",
                        "setup_browser",
                        "cleanup",
                        "save_cookies",
                        "load_cookies",
                        "inject_jquery",
                        "scroll_and_capture_chats",
                        "run_scraper"
                    ],
                    "docstring": "Manages ChatGPT web scraping operations with session persistence.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 21
        },
        "social\\utils\\common.py": {
            "language": ".py",
            "functions": [
                "retry_on_exception",
                "decorator",
                "wrapper"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "social\\utils\\cursor.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "update_context",
                "add_to_history",
                "set_current_file",
                "record_command",
                "get_file_context",
                "clear_history",
                "_save_state",
                "_load_state",
                "__init__",
                "add_message",
                "get_context",
                "clear"
            ],
            "classes": {
                "CursorState": {
                    "methods": [
                        "__init__",
                        "update_context",
                        "add_to_history",
                        "set_current_file",
                        "record_command",
                        "get_file_context",
                        "clear_history",
                        "_save_state",
                        "_load_state"
                    ],
                    "docstring": "Manages cursor state and context for chat interactions.",
                    "base_classes": []
                },
                "ChatContext": {
                    "methods": [
                        "__init__",
                        "add_message",
                        "get_context",
                        "clear"
                    ],
                    "docstring": "Manages chat context and history for conversations.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 26
        },
        "social\\utils\\devlog_analyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_get_connection",
                "_init_db",
                "track_post",
                "update_metrics",
                "get_best_posting_times",
                "get_top_performing_tags",
                "get_content_insights"
            ],
            "classes": {
                "DevLogAnalyzer": {
                    "methods": [
                        "__init__",
                        "_get_connection",
                        "_init_db",
                        "track_post",
                        "update_metrics",
                        "get_best_posting_times",
                        "get_top_performing_tags",
                        "get_content_insights"
                    ],
                    "docstring": "Analyzes post performance and provides optimization insights.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 16
        },
        "social\\utils\\devlog_dispatcher.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "on_created",
                "__init__",
                "_initialize_strategies",
                "start",
                "handle_new_blog_post",
                "handle_new_social_content",
                "schedule_post",
                "_generate_post_id",
                "_extract_tags",
                "_get_next_optimal_time",
                "publish_job"
            ],
            "classes": {
                "ContentHandler": {
                    "methods": [
                        "__init__",
                        "on_created"
                    ],
                    "docstring": "Handles file system events for new content.",
                    "base_classes": [
                        "FileSystemEventHandler"
                    ]
                },
                "DevLogDispatcher": {
                    "methods": [
                        "__init__",
                        "_initialize_strategies",
                        "start",
                        "handle_new_blog_post",
                        "handle_new_social_content",
                        "schedule_post",
                        "_generate_post_id",
                        "_extract_tags",
                        "_get_next_optimal_time"
                    ],
                    "docstring": "Autonomous agent that watches for new content and publishes it\nto appropriate platforms using configured strategies.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 24
        },
        "social\\utils\\devlog_generator.py": {
            "language": ".py",
            "functions": [
                "initialize_strategies",
                "main",
                "__init__",
                "process_conversation",
                "_process_message",
                "generate_blog_post",
                "generate_social_content",
                "_generate_title",
                "_generate_description",
                "_extract_tags",
                "_detect_language",
                "_extract_metadata",
                "auto_publish"
            ],
            "classes": {
                "ContentBlock": {
                    "methods": [],
                    "docstring": "Represents a block of content from the conversation.",
                    "base_classes": []
                },
                "DevLogPost": {
                    "methods": [],
                    "docstring": "Represents a structured blog post from a conversation.",
                    "base_classes": []
                },
                "DevLogGenerator": {
                    "methods": [
                        "__init__",
                        "process_conversation",
                        "_process_message",
                        "generate_blog_post",
                        "generate_social_content",
                        "_generate_title",
                        "_generate_description",
                        "_extract_tags",
                        "_detect_language",
                        "_extract_metadata",
                        "auto_publish"
                    ],
                    "docstring": "Transforms ChatGPT conversations into various content formats.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 24
        },
        "social\\utils\\feedback_processor.py": {
            "language": ".py",
            "functions": [
                "_extract_potential_suggestions",
                "_create_task_message",
                "process_feedback",
                "log_event",
                "__init__",
                "send_message"
            ],
            "classes": {
                "DummyMailboxHandler": {
                    "methods": [
                        "__init__",
                        "send_message"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 8
        },
        "social\\utils\\logging_utils.py": {
            "language": ".py",
            "functions": [
                "log_event",
                "get_logger"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "social\\utils\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "social\\utils\\selenium_utils.py": {
            "language": ".py",
            "functions": [
                "wait_for_element",
                "safe_click",
                "safe_send_keys",
                "navigate_to"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "social\\utils\\content\\post_context_generator.py": {
            "language": ".py",
            "functions": [
                "generate_context_from_governance"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "tests\\test_apply_proposals.py": {
            "language": ".py",
            "functions": [
                "temp_rulebook",
                "temp_proposals_file",
                "test_get_existing_rule_ids_success",
                "test_get_existing_rule_ids_empty",
                "test_get_existing_rule_ids_no_file",
                "test_parse_proposal_valid",
                "test_parse_proposal_already_accepted",
                "test_parse_proposal_already_rejected",
                "test_parse_proposal_bad_yaml",
                "test_parse_proposal_no_yaml",
                "test_parse_proposal_invalid_structure",
                "test_parse_proposal_missing_id",
                "test_update_proposal_block_status_add_accepted",
                "test_update_proposal_block_status_add_rejected",
                "test_update_proposal_block_status_replace_status",
                "empty_rulebook_path",
                "test_append_rule_creates_header",
                "test_append_rule_uses_existing_header",
                "test_main_logic"
            ],
            "classes": {},
            "routes": [],
            "complexity": 19
        },
        "tests\\test_governance_memory_engine.py": {
            "language": ".py",
            "functions": [
                "setUp",
                "tearDown",
                "test_log_single_event",
                "test_log_multiple_events",
                "test_log_event_error_handling"
            ],
            "classes": {
                "TestGovernanceMemoryEngine": {
                    "methods": [
                        "setUp",
                        "tearDown",
                        "test_log_single_event",
                        "test_log_multiple_events",
                        "test_log_event_error_handling"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "unittest.TestCase"
                    ]
                }
            },
            "routes": [],
            "complexity": 10
        },
        "tests\\test_governance_scraper.py": {
            "language": ".py",
            "functions": [
                "setUp",
                "tearDown",
                "test_load_recent_governance_events",
                "test_load_recent_reflections",
                "test_load_proposals_proposed",
                "test_load_proposals_all",
                "test_get_rulebook_summary",
                "test_generate_governance_data"
            ],
            "classes": {
                "TestGovernanceScraper": {
                    "methods": [
                        "setUp",
                        "tearDown",
                        "test_load_recent_governance_events",
                        "test_load_recent_reflections",
                        "test_load_proposals_proposed",
                        "test_load_proposals_all",
                        "test_get_rulebook_summary",
                        "test_generate_governance_data"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "unittest.TestCase"
                    ]
                }
            },
            "routes": [],
            "complexity": 16
        },
        "tests\\test_gpt_command_router.py": {
            "language": ".py",
            "functions": [
                "setUp",
                "tearDown",
                "test_parse_accept_command",
                "test_parse_reject_command_with_reason",
                "test_parse_multiple_commands",
                "test_parse_no_commands",
                "test_parse_case_insensitivity",
                "test_update_status_accept",
                "test_update_status_reject_with_reason",
                "test_update_status_proposal_not_found",
                "test_update_status_file_not_found",
                "test_update_status_bad_format_proposal",
                "test_execute_accept_command",
                "test_execute_reject_command",
                "test_main_flow"
            ],
            "classes": {
                "TestGptCommandRouter": {
                    "methods": [
                        "setUp",
                        "tearDown",
                        "test_parse_accept_command",
                        "test_parse_reject_command_with_reason",
                        "test_parse_multiple_commands",
                        "test_parse_no_commands",
                        "test_parse_case_insensitivity",
                        "test_update_status_accept",
                        "test_update_status_reject_with_reason",
                        "test_update_status_proposal_not_found",
                        "test_update_status_file_not_found",
                        "test_update_status_bad_format_proposal",
                        "test_execute_accept_command",
                        "test_execute_reject_command",
                        "test_main_flow"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "unittest.TestCase"
                    ]
                }
            },
            "routes": [],
            "complexity": 30
        },
        "tests\\test_monitor_analyzer.py": {
            "language": ".py",
            "functions": [
                "temp_rulebook_for_monitor",
                "temp_task_pool_empty",
                "temp_logs_path",
                "temp_agent_dirs_root",
                "temp_proposals_path",
                "test_load_rules",
                "test_load_tasks_file_not_found",
                "sample_rules",
                "test_halt_unnecessary_keyword_match",
                "test_halt_necessary_no_match",
                "test_halt_agent_specific_match",
                "test_halt_agent_specific_no_match",
                "test_log_unnecessary_halt",
                "test_broadcast_alert",
                "test_request_rulebook_update",
                "test_halt_status_handler"
            ],
            "classes": {},
            "routes": [],
            "complexity": 16
        },
        "tests\\test_prompt_staging_service.py": {
            "language": ".py",
            "functions": [
                "setUpClass",
                "tearDownClass",
                "setUp",
                "test_render_prompt_injects_state_and_scan",
                "test_stage_prompt_for_cursor_success",
                "test_stage_prompt_for_cursor_render_fails",
                "test_fetch_cursor_response_success",
                "test_fetch_cursor_response_no_file",
                "test_fetch_cursor_response_invalid_json"
            ],
            "classes": {
                "TestPromptStagingService": {
                    "methods": [
                        "setUpClass",
                        "tearDownClass",
                        "setUp",
                        "test_render_prompt_injects_state_and_scan",
                        "test_stage_prompt_for_cursor_success",
                        "test_stage_prompt_for_cursor_render_fails",
                        "test_fetch_cursor_response_success",
                        "test_fetch_cursor_response_no_file",
                        "test_fetch_cursor_response_invalid_json"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "unittest.TestCase"
                    ]
                }
            },
            "routes": [],
            "complexity": 18
        },
        "tests\\test_reflection_agent.py": {
            "language": ".py",
            "functions": [
                "setUp",
                "tearDown",
                "test_parse_md_file",
                "test_decide_response_disagree_rule",
                "test_decide_response_disagree_monitor_halt",
                "test_decide_response_disagree_monitor_valid",
                "test_decide_response_agree",
                "test_process_alert_file_success",
                "test_process_alert_file_no_alert_id"
            ],
            "classes": {
                "TestReflectionAgent": {
                    "methods": [
                        "setUp",
                        "tearDown",
                        "test_parse_md_file",
                        "test_decide_response_disagree_rule",
                        "test_decide_response_disagree_monitor_halt",
                        "test_decide_response_disagree_monitor_valid",
                        "test_decide_response_agree",
                        "test_process_alert_file_success",
                        "test_process_alert_file_no_alert_id"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "unittest.TestCase"
                    ]
                }
            },
            "routes": [],
            "complexity": 18
        },
        "tests\\test_template_engine.py": {
            "language": ".py",
            "functions": [
                "setUpClass",
                "tearDownClass",
                "test_render_valid_template",
                "test_render_with_tojson_filter",
                "test_render_template_not_found",
                "test_render_with_missing_variable"
            ],
            "classes": {
                "TestTemplateEngine": {
                    "methods": [
                        "setUpClass",
                        "tearDownClass",
                        "test_render_valid_template",
                        "test_render_with_tojson_filter",
                        "test_render_template_not_found",
                        "test_render_with_missing_variable"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "unittest.TestCase"
                    ]
                }
            },
            "routes": [],
            "complexity": 12
        },
        "tests\\coordination\\cursor\\test_cursor_chat_coordinator.py": {
            "language": ".py",
            "functions": [
                "setUp",
                "test_interpret_response_code_block",
                "test_interpret_response_accept_prompt",
                "test_interpret_response_task_complete",
                "test_interpret_response_no_action"
            ],
            "classes": {
                "TestCursorChatCoordinator": {
                    "methods": [
                        "setUp",
                        "test_interpret_response_code_block",
                        "test_interpret_response_accept_prompt",
                        "test_interpret_response_task_complete",
                        "test_interpret_response_no_action"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "unittest.TestCase"
                    ]
                }
            },
            "routes": [],
            "complexity": 10
        },
        "tests\\core\\coordination\\test_base_dispatcher.py": {
            "language": ".py",
            "functions": [
                "test_base_dispatcher_initialization",
                "test_add_task",
                "test_run_dispatcher_loop",
                "test_stop_dispatcher",
                "test_get_status",
                "__init__",
                "execute_task"
            ],
            "classes": {
                "MockDispatcher": {
                    "methods": [
                        "__init__",
                        "execute_task"
                    ],
                    "docstring": "Mock dispatcher for testing.",
                    "base_classes": [
                        "BaseDispatcher"
                    ]
                }
            },
            "routes": [],
            "complexity": 9
        },
        "tests\\core\\gui\\test_tab_system_shutdown.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "log_event",
                "__init__",
                "get_state",
                "prepare_for_shutdown",
                "setUp",
                "tearDown",
                "test_01_initiate_shutdown_happy_path",
                "test_02_shutdown_with_failing_prepare",
                "test_03_shutdown_persisted_state_error"
            ],
            "classes": {
                "MockFeedbackEngine": {
                    "methods": [
                        "__init__",
                        "log_event"
                    ],
                    "docstring": null,
                    "base_classes": []
                },
                "MockTab": {
                    "methods": [
                        "__init__",
                        "get_state",
                        "prepare_for_shutdown"
                    ],
                    "docstring": null,
                    "base_classes": []
                },
                "TestTabSystemShutdown": {
                    "methods": [
                        "setUp",
                        "tearDown",
                        "test_01_initiate_shutdown_happy_path",
                        "test_02_shutdown_with_failing_prepare",
                        "test_03_shutdown_persisted_state_error"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "unittest.TestCase"
                    ]
                }
            },
            "routes": [],
            "complexity": 20
        },
        "tests\\scripts\\test_run_qa.py": {
            "language": ".py",
            "functions": [
                "setUp",
                "test_generate_markdown_report_structure",
                "test_generate_markdown_report_cat_one_table",
                "test_generate_markdown_report_cat_two_table",
                "test_generate_markdown_report_summary_table",
                "test_generate_markdown_report_empty_checklist",
                "generate_markdown_report",
                "load_checklist",
                "save_checklist",
                "update_item_status",
                "list_items",
                "show_summary",
                "main"
            ],
            "classes": {
                "TestRunQAScript": {
                    "methods": [
                        "setUp",
                        "test_generate_markdown_report_structure",
                        "test_generate_markdown_report_cat_one_table",
                        "test_generate_markdown_report_cat_two_table",
                        "test_generate_markdown_report_summary_table",
                        "test_generate_markdown_report_empty_checklist"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "unittest.TestCase"
                    ]
                }
            },
            "routes": [],
            "complexity": 19
        },
        "tools\\chat_cursor_bridge.py": {
            "language": ".py",
            "functions": [
                "write_to_cursor_input",
                "read_from_cursor_output",
                "log_event"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "tools\\state_viewer.py": {
            "language": ".py",
            "functions": [
                "print_raw_json",
                "print_focus",
                "print_summary",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "utils\\browser_controller.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_initialize_driver",
                "_load_cookies",
                "login_to_chatgpt",
                "find_and_click_chat",
                "send_message",
                "get_latest_response",
                "close",
                "dummy_log_event",
                "dummy_log_event"
            ],
            "classes": {
                "BrowserController": {
                    "methods": [
                        "__init__",
                        "_initialize_driver",
                        "_load_cookies",
                        "login_to_chatgpt",
                        "find_and_click_chat",
                        "send_message",
                        "get_latest_response",
                        "close"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 18
        },
        "utils\\performance_logger.py": {
            "language": ".py",
            "functions": [
                "log_outcome"
            ],
            "classes": {
                "PerformanceLogger": {
                    "methods": [
                        "log_outcome"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 2
        },
        "_agent_coordination\\apply_proposals.py": {
            "language": ".py",
            "functions": [
                "parse_proposals",
                "apply_proposal_to_rulebook",
                "update_proposal_status"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "_agent_coordination\\config.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "_agent_coordination\\reflection_agent.py": {
            "language": ".py",
            "functions": [
                "load_rules_from_rulebook",
                "generate_reflection",
                "save_reflection",
                "submit_proposal",
                "start_monitoring",
                "__init__",
                "on_created"
            ],
            "classes": {
                "AlertHandler": {
                    "methods": [
                        "__init__",
                        "on_created"
                    ],
                    "docstring": "Handles new alert files in the inbox directory.",
                    "base_classes": [
                        "FileSystemEventHandler"
                    ]
                }
            },
            "routes": [],
            "complexity": 9
        },
        "_agent_coordination\\mailbox_utils.py": {
            "language": ".py",
            "functions": [
                "process_directory_loop"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "_agent_coordination\\template_engine.py": {
            "language": ".py",
            "functions": [
                "render_template",
                "generate_post_from_template",
                "__init__",
                "visit_Name",
                "visit_Filter",
                "visit_Getattr"
            ],
            "classes": {
                "VariableFinder": {
                    "methods": [
                        "__init__",
                        "visit_Name",
                        "visit_Filter",
                        "visit_Getattr"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "NodeVisitor"
                    ]
                }
            },
            "routes": [],
            "complexity": 10
        },
        "_agent_coordination\\agents\\cursor_control_agent.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_handle_resume_operation",
                "_handle_generate_task",
                "_handle_diagnose_loop",
                "_handle_confirmation_check",
                "_handle_context_reload",
                "_handle_clarify_objective",
                "_handle_generic_recovery",
                "_handle_generate_code",
                "_process_mailbox_message",
                "start_listening",
                "stop",
                "run_command",
                "get_output",
                "get_current_directory",
                "send_input",
                "is_busy",
                "process_directory_loop",
                "update_task_status",
                "send_prompt_to_chat"
            ],
            "classes": {
                "CursorControlAgent": {
                    "methods": [
                        "__init__",
                        "_handle_resume_operation",
                        "_handle_generate_task",
                        "_handle_diagnose_loop",
                        "_handle_confirmation_check",
                        "_handle_context_reload",
                        "_handle_clarify_objective",
                        "_handle_generic_recovery",
                        "_handle_generate_code",
                        "_process_mailbox_message",
                        "start_listening",
                        "stop"
                    ],
                    "docstring": null,
                    "base_classes": []
                },
                "CursorTerminalController": {
                    "methods": [
                        "run_command",
                        "get_output",
                        "get_current_directory",
                        "send_input",
                        "is_busy"
                    ],
                    "docstring": null,
                    "base_classes": []
                },
                "CursorPromptController": {
                    "methods": [
                        "send_prompt_to_chat"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 38
        },
        "_agent_coordination\\agents\\stall_recovery_agent.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_is_system_busy",
                "check_for_stall",
                "log_stall_event",
                "dispatch_recovery_task",
                "attempt_recovery",
                "run",
                "read_tasks"
            ],
            "classes": {
                "StallRecoveryAgent": {
                    "methods": [
                        "__init__",
                        "_is_system_busy",
                        "check_for_stall",
                        "log_stall_event",
                        "dispatch_recovery_task",
                        "attempt_recovery",
                        "run"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 15
        },
        "_agent_coordination\\agents\\agent_1\\worker.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_ensure_dirs",
                "_create_default_context",
                "_validate_task",
                "_handle_signal"
            ],
            "classes": {
                "AgentWorker": {
                    "methods": [
                        "__init__",
                        "_ensure_dirs",
                        "_create_default_context",
                        "_validate_task",
                        "_handle_signal"
                    ],
                    "docstring": "Manages the lifecycle and task execution for a specific agent.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 10
        },
        "_agent_coordination\\agents\\agent_2\\worker.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_ensure_dirs",
                "_create_default_context",
                "_validate_task",
                "_handle_signal"
            ],
            "classes": {
                "AgentWorker": {
                    "methods": [
                        "__init__",
                        "_ensure_dirs",
                        "_create_default_context",
                        "_validate_task",
                        "_handle_signal"
                    ],
                    "docstring": "Manages the lifecycle and task execution for Agent 2 (Cursor Executor - LIVE MODE).",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 10
        },
        "_agent_coordination\\agents\\agent_3\\worker.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_ensure_dirs",
                "_create_default_context",
                "_validate_task",
                "_handle_signal"
            ],
            "classes": {
                "AgentWorker": {
                    "methods": [
                        "__init__",
                        "_ensure_dirs",
                        "_create_default_context",
                        "_validate_task",
                        "_handle_signal"
                    ],
                    "docstring": "Manages the lifecycle and task execution for Agent 3 (Feedback Verifier).",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 10
        },
        "_agent_coordination\\agents\\core\\agent_command_handler.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "handle_command",
                "handle_initial_onboarding",
                "start_main_loop"
            ],
            "classes": {
                "CommandHandler": {
                    "methods": [
                        "__init__",
                        "handle_command",
                        "handle_initial_onboarding",
                        "start_main_loop"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 8
        },
        "_agent_coordination\\agents\\agent_4\\worker.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_ensure_dirs",
                "_create_default_context",
                "_handle_signal"
            ],
            "classes": {
                "AgentWorker": {
                    "methods": [
                        "__init__",
                        "_ensure_dirs",
                        "_create_default_context",
                        "_handle_signal"
                    ],
                    "docstring": "Manages the lifecycle and task execution for Agent 4 (Task Orchestrator).",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 8
        },
        "_agent_coordination\\core\\agent_registry.py": {
            "language": ".py",
            "functions": [
                "__init__"
            ],
            "classes": {
                "AgentRegistry": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Handles the lifecycle and state management of registered agents.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 2
        },
        "_agent_coordination\\coordinators\\cursor_chat_coordinator.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "interpret_response"
            ],
            "classes": {
                "CursorChatCoordinator": {
                    "methods": [
                        "__init__",
                        "interpret_response"
                    ],
                    "docstring": "Agent responsible for managing high-level conversational task execution inside a Cursor instance.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 4
        },
        "_agent_coordination\\core\\agent_bus.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load_shutdown_directive",
                "register_handler",
                "handle_shutdown_signal"
            ],
            "classes": {
                "AgentBus": {
                    "methods": [
                        "__init__",
                        "_load_shutdown_directive",
                        "register_handler",
                        "handle_shutdown_signal"
                    ],
                    "docstring": "Centralized agent coordination hub, orchestrating modular components.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 8
        },
        "_agent_coordination\\core\\bus_types.py": {
            "language": ".py",
            "functions": [],
            "classes": {
                "AgentStatus": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "Enum"
                    ]
                }
            },
            "routes": [],
            "complexity": 0
        },
        "_agent_coordination\\core\\shutdown_coordinator.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load_shutdown_directive",
                "_create_phase_directive"
            ],
            "classes": {
                "ShutdownCoordinator": {
                    "methods": [
                        "__init__",
                        "_load_shutdown_directive",
                        "_create_phase_directive"
                    ],
                    "docstring": "Orchestrates the agent and system shutdown process.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 6
        },
        "_agent_coordination\\core\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "_agent_coordination\\core\\system_diagnostics.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_validate_state_file"
            ],
            "classes": {
                "SystemDiagnostics": {
                    "methods": [
                        "__init__",
                        "_validate_state_file"
                    ],
                    "docstring": "Performs various health checks before system shutdown.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 4
        },
        "_agent_coordination\\core\\coordination\\config_service.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "add_source",
                "_load_json",
                "_load_yaml",
                "_load_env",
                "_merge_config",
                "load",
                "get",
                "set",
                "get_namespace",
                "get_all",
                "save"
            ],
            "classes": {
                "ConfigFormat": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "Enum"
                    ]
                },
                "ConfigSource": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": []
                },
                "ConfigService": {
                    "methods": [
                        "__init__",
                        "add_source",
                        "_load_json",
                        "_load_yaml",
                        "_load_env",
                        "_merge_config",
                        "load",
                        "get",
                        "set",
                        "get_namespace",
                        "get_all",
                        "save"
                    ],
                    "docstring": "Unified configuration management service.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 24
        },
        "_agent_coordination\\core\\coordination\\dispatcher.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "__init__",
                "register_handler"
            ],
            "classes": {
                "EventType": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "Enum"
                    ]
                },
                "Event": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Base event class for agent coordination.",
                    "base_classes": []
                },
                "EventDispatcher": {
                    "methods": [
                        "__init__",
                        "register_handler"
                    ],
                    "docstring": "Unified dispatcher for cursor and chat events.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 6
        },
        "_agent_coordination\\core\\coordination\\path_manager.py": {
            "language": ".py",
            "functions": [
                "name",
                "is_dir",
                "__init__",
                "_get_file_type",
                "_create_node",
                "scan",
                "find",
                "walk",
                "get_relative_path",
                "get_absolute_path",
                "invalidate_cache",
                "watch",
                "unwatch",
                "_walk"
            ],
            "classes": {
                "FileType": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "Enum"
                    ]
                },
                "FileNode": {
                    "methods": [
                        "name",
                        "is_dir"
                    ],
                    "docstring": null,
                    "base_classes": []
                },
                "PathManager": {
                    "methods": [
                        "__init__",
                        "_get_file_type",
                        "_create_node",
                        "scan",
                        "find",
                        "walk",
                        "get_relative_path",
                        "get_absolute_path",
                        "invalidate_cache",
                        "watch",
                        "unwatch"
                    ],
                    "docstring": "Unified path management and file system traversal.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 27
        },
        "_agent_coordination\\core\\coordination\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "_agent_coordination\\core\\execution\\cursor_stub.py": {
            "language": ".py",
            "functions": [
                "__init__"
            ],
            "classes": {
                "CursorExecutorStub": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Simulates interaction with the Cursor backend for code tasks.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 2
        },
        "_agent_coordination\\core\\utils\\agent_helpers.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "_agent_coordination\\core\\utils\\base.py": {
            "language": ".py",
            "functions": [
                "generate_id",
                "load_json_file",
                "save_json_file",
                "validate_required_fields",
                "validate_field_type",
                "__call__",
                "__init__",
                "__init__",
                "__init__"
            ],
            "classes": {
                "Singleton": {
                    "methods": [
                        "__call__"
                    ],
                    "docstring": "Metaclass for creating singleton classes.",
                    "base_classes": [
                        "type"
                    ]
                },
                "AsyncLockManager": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Context manager for async locks with timeout.",
                    "base_classes": []
                },
                "Cache": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Generic cache with TTL support.",
                    "base_classes": [
                        null
                    ]
                },
                "RetryManager": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Utility for handling retries with exponential backoff.",
                    "base_classes": []
                },
                "ValidationError": {
                    "methods": [],
                    "docstring": "Base exception for validation errors.",
                    "base_classes": [
                        "Exception"
                    ]
                }
            },
            "routes": [],
            "complexity": 13
        },
        "_agent_coordination\\core\\utils\\logging.py": {
            "language": ".py",
            "functions": [
                "get_logger",
                "format",
                "__init__",
                "configure",
                "get_logger",
                "set_level"
            ],
            "classes": {
                "LogFormatter": {
                    "methods": [
                        "format"
                    ],
                    "docstring": "Custom log formatter that includes timestamp, level, component, and structured data.",
                    "base_classes": [
                        "logging.Formatter"
                    ]
                },
                "LogManager": {
                    "methods": [
                        "__init__",
                        "configure",
                        "get_logger",
                        "set_level"
                    ],
                    "docstring": "Manages logging configuration and provides helper functions for logging.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 11
        },
        "_agent_coordination\\core\\utils\\metrics.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "register_collector",
                "unregister_collector",
                "set_collection_interval",
                "update",
                "average_time",
                "__init__"
            ],
            "classes": {
                "MetricPoint": {
                    "methods": [],
                    "docstring": "Single metric data point.",
                    "base_classes": []
                },
                "MetricCollector": {
                    "methods": [
                        "__init__",
                        "register_collector",
                        "unregister_collector",
                        "set_collection_interval"
                    ],
                    "docstring": "Collector for system metrics and telemetry data.",
                    "base_classes": []
                },
                "TimingStats": {
                    "methods": [
                        "update",
                        "average_time"
                    ],
                    "docstring": "Statistics for timing measurements.",
                    "base_classes": []
                },
                "Timer": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Context manager for timing operations.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 14
        },
        "_agent_coordination\\core\\utils\\system.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "__init__",
                "_move_file",
                "__init__"
            ],
            "classes": {
                "CommandResult": {
                    "methods": [],
                    "docstring": "Result of a command execution.",
                    "base_classes": []
                },
                "CommandExecutor": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Utility for executing system commands with retry support.",
                    "base_classes": []
                },
                "DirectoryMonitor": {
                    "methods": [
                        "__init__",
                        "_move_file"
                    ],
                    "docstring": "Utility for monitoring directory changes.",
                    "base_classes": []
                },
                "FileManager": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Utility for file system operations with retry support.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 8
        },
        "_agent_coordination\\deployment\\agents\\deploy_agent.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load_config"
            ],
            "classes": {
                "DeploymentAgent": {
                    "methods": [
                        "__init__",
                        "_load_config"
                    ],
                    "docstring": "Orchestrates the deployment of the Cursor Result Listener.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 4
        },
        "_agent_coordination\\dreamos\\boot.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "start_monitoring",
                "_check_monitoring_health",
                "start_core_services",
                "shutdown"
            ],
            "classes": {
                "DreamOSBoot": {
                    "methods": [
                        "__init__",
                        "start_monitoring",
                        "_check_monitoring_health",
                        "start_core_services",
                        "shutdown"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 11
        },
        "_agent_coordination\\dispatchers\\task_dispatcher.py": {
            "language": ".py",
            "functions": [
                "acquire_lock",
                "release_lock",
                "__init__",
                "_read_task_list",
                "_write_task_list",
                "_update_task_status",
                "_infer_target_agent",
                "stop",
                "__init__"
            ],
            "classes": {
                "TaskDispatcherAgent": {
                    "methods": [
                        "__init__",
                        "_read_task_list",
                        "_write_task_list",
                        "_update_task_status",
                        "_infer_target_agent",
                        "stop"
                    ],
                    "docstring": null,
                    "base_classes": []
                },
                "DummyAgentBus": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": []
                },
                "EventType": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": []
                },
                "Event": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 16
        },
        "_agent_coordination\\dreamos\\agents\\cursor_executor.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_read_files",
                "_apply_changes",
                "_validate_changes",
                "_save_result",
                "get_result"
            ],
            "classes": {
                "CursorExecutorAgent": {
                    "methods": [
                        "__init__",
                        "_read_files",
                        "_apply_changes",
                        "_validate_changes",
                        "_save_result",
                        "get_result"
                    ],
                    "docstring": "Agent responsible for executing prompts through Cursor.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 12
        },
        "_agent_coordination\\dreamos\\agents\\feedback_verifier.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_check_syntax",
                "_run_linter",
                "_run_tests",
                "_check_success_criteria",
                "_save_verification",
                "get_verification",
                "generate_summary"
            ],
            "classes": {
                "FeedbackVerifierAgent": {
                    "methods": [
                        "__init__",
                        "_check_syntax",
                        "_run_linter",
                        "_run_tests",
                        "_check_success_criteria",
                        "_save_verification",
                        "get_verification",
                        "generate_summary"
                    ],
                    "docstring": "Agent responsible for validating changes and providing feedback.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 16
        },
        "_agent_coordination\\dreamos\\agents\\prompt_planner.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "create_prompt_plan",
                "_save_prompt_plan",
                "load_prompt_plan",
                "get_next_prompt",
                "update_prompt_status",
                "get_prompt_dependencies"
            ],
            "classes": {
                "PromptPlannerAgent": {
                    "methods": [
                        "__init__",
                        "create_prompt_plan",
                        "_save_prompt_plan",
                        "load_prompt_plan",
                        "get_next_prompt",
                        "update_prompt_status",
                        "get_prompt_dependencies"
                    ],
                    "docstring": "Agent responsible for planning and structuring prompts for tasks.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 14
        },
        "_agent_coordination\\dreamos\\agents\\task_orchestrator.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load_queue",
                "_save_queue",
                "add_task",
                "get_next_task",
                "update_task_status",
                "_are_dependencies_met",
                "_estimate_complexity",
                "get_task_by_id",
                "get_queue_status"
            ],
            "classes": {
                "TaskOrchestratorAgent": {
                    "methods": [
                        "__init__",
                        "_load_queue",
                        "_save_queue",
                        "add_task",
                        "get_next_task",
                        "update_task_status",
                        "_are_dependencies_met",
                        "_estimate_complexity",
                        "get_task_by_id",
                        "get_queue_status"
                    ],
                    "docstring": "Agent responsible for managing and orchestrating task execution.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 20
        },
        "_agent_coordination\\dreamos\\agents\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {
                "TaskMetadata": {
                    "methods": [],
                    "docstring": "Metadata for task tracking and execution.",
                    "base_classes": []
                },
                "PromptPlan": {
                    "methods": [],
                    "docstring": "Structure for planned prompts and their execution context.",
                    "base_classes": []
                },
                "ExecutionResult": {
                    "methods": [],
                    "docstring": "Results from Cursor execution of prompts.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 0
        },
        "_agent_coordination\\dreamos\\coordinator\\agent_coordinator.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load_task_definitions",
                "_handle_status_update",
                "_are_domain_tasks_complete"
            ],
            "classes": {
                "AgentCoordinator": {
                    "methods": [
                        "__init__",
                        "_load_task_definitions",
                        "_handle_status_update",
                        "_are_domain_tasks_complete"
                    ],
                    "docstring": "Master coordinator for managing agent interactions and workflow.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 8
        },
        "_agent_coordination\\dreamos\\coordinator\\cli.py": {
            "language": ".py",
            "functions": [
                "setup_logging",
                "cli",
                "cleanup",
                "status",
                "__init__",
                "create_progress_table",
                "_get_domain_dependencies"
            ],
            "classes": {
                "CleanupProgress": {
                    "methods": [
                        "__init__",
                        "create_progress_table",
                        "_get_domain_dependencies"
                    ],
                    "docstring": "Manages and visualizes cleanup progress.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 10
        },
        "_agent_coordination\\dreamos\\coordinator\\cleanup.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load_tasks",
                "_get_domain_dependencies"
            ],
            "classes": {
                "CleanupTask": {
                    "methods": [],
                    "docstring": "Represents a cleanup task with its metadata.",
                    "base_classes": []
                },
                "CleanupManager": {
                    "methods": [
                        "__init__",
                        "_load_tasks",
                        "_get_domain_dependencies"
                    ],
                    "docstring": "Manages system-wide cleanup operations.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 6
        },
        "_agent_coordination\\dreamos\\coordinator\\__init__.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "update_agent",
                "get_domain_agents",
                "add_message",
                "add_event",
                "update_domain_state",
                "assign_task_to_agent",
                "resolve_message",
                "tick",
                "to_dict",
                "serialize_agent",
                "serialize_message",
                "serialize_event"
            ],
            "classes": {
                "AgentDomain": {
                    "methods": [],
                    "docstring": "Domains of responsibility for agents.",
                    "base_classes": [
                        "str",
                        "Enum"
                    ]
                },
                "AgentState": {
                    "methods": [],
                    "docstring": "Possible states for an agent.",
                    "base_classes": [
                        "str",
                        "Enum"
                    ]
                },
                "AgentContext": {
                    "methods": [],
                    "docstring": "Context information for agent operations.",
                    "base_classes": []
                },
                "AgentMessage": {
                    "methods": [],
                    "docstring": "Message passed between agents.",
                    "base_classes": []
                },
                "CoordinationEvent": {
                    "methods": [],
                    "docstring": "Event representing a coordination action.",
                    "base_classes": []
                },
                "CoordinationStatus": {
                    "methods": [
                        "__init__",
                        "update_agent",
                        "get_domain_agents",
                        "add_message",
                        "add_event",
                        "update_domain_state",
                        "assign_task_to_agent",
                        "resolve_message",
                        "tick",
                        "to_dict"
                    ],
                    "docstring": "Status tracking for coordination activities.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 23
        },
        "_agent_coordination\\runtime\\agent_entrypoint.py": {
            "language": ".py",
            "functions": [
                "load_json_safe",
                "write_json_safe",
                "claim_mailbox",
                "release_mailbox",
                "run_agent_loop",
                "handle_signal"
            ],
            "classes": {},
            "routes": [],
            "complexity": 6
        },
        "_agent_coordination\\monitors\\mailbox_monitor_agent.py": {
            "language": ".py",
            "functions": [
                "acquire_lock",
                "release_lock",
                "__init__",
                "_read_mailbox",
                "_write_mailbox",
                "_add_task_to_list",
                "_process_unread_messages",
                "_transform_message_to_task",
                "stop"
            ],
            "classes": {
                "MailboxMonitorAgent": {
                    "methods": [
                        "__init__",
                        "_read_mailbox",
                        "_write_mailbox",
                        "_add_task_to_list",
                        "_process_unread_messages",
                        "_transform_message_to_task",
                        "stop"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 16
        },
        "_agent_coordination\\scripts\\debug_tests.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "pytest_sessionstart",
                "pytest_runtest_protocol",
                "pytest_runtest_logreport",
                "pytest_sessionfinish",
                "_print_debug_summary"
            ],
            "classes": {
                "TestDebugPlugin": {
                    "methods": [
                        "__init__",
                        "pytest_sessionstart",
                        "pytest_runtest_protocol",
                        "pytest_runtest_logreport",
                        "pytest_sessionfinish",
                        "_print_debug_summary"
                    ],
                    "docstring": "Pytest plugin for detailed test debugging and analysis.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 12
        },
        "_agent_coordination\\social\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "_agent_coordination\\social\\utils\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "_agent_coordination\\src\\trinity\\core\\gpt_command_router.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "_agent_coordination\\social\\utils\\chatgpt_scraper.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "render",
                "__init__",
                "register_template",
                "load_template_file",
                "render",
                "__init__",
                "_init_data_files",
                "_load_json_file",
                "_save_json_file",
                "_register_default_templates",
                "_setup_session",
                "register_template",
                "get_template",
                "parse_dev_log_response",
                "login",
                "verify_session",
                "get_conversation_history",
                "get_conversation_messages",
                "send_message",
                "_process_single_conversation",
                "_save_conversation_result",
                "cleanup",
                "export_dev_log",
                "_export_markdown"
            ],
            "classes": {
                "PromptTemplate": {
                    "methods": [
                        "__init__",
                        "render"
                    ],
                    "docstring": "Simple wrapper around Jinja2 Template for easier usage.",
                    "base_classes": []
                },
                "DevLogEntry": {
                    "methods": [],
                    "docstring": "Structure for MMORPG development log entries.",
                    "base_classes": []
                },
                "TemplateManager": {
                    "methods": [
                        "__init__",
                        "register_template",
                        "load_template_file",
                        "render"
                    ],
                    "docstring": "Manages template loading and rendering with file system support.",
                    "base_classes": []
                },
                "ChatGPTScraper": {
                    "methods": [
                        "__init__",
                        "_init_data_files",
                        "_load_json_file",
                        "_save_json_file",
                        "_register_default_templates",
                        "_setup_session",
                        "register_template",
                        "get_template",
                        "parse_dev_log_response",
                        "login",
                        "verify_session",
                        "get_conversation_history",
                        "get_conversation_messages",
                        "send_message",
                        "_process_single_conversation",
                        "_save_conversation_result",
                        "cleanup",
                        "export_dev_log",
                        "_export_markdown"
                    ],
                    "docstring": "Enhanced scraper for ChatGPT conversations with advanced templating and logging.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 50
        },
        "_agent_coordination\\supervisor_tools\\aggregate_task_lists.py": {
            "language": ".py",
            "functions": [
                "parse_markdown_tasks",
                "aggregate_tasks"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "_agent_coordination\\supervisor_tools\\check_project_structure.py": {
            "language": ".py",
            "functions": [
                "check_structure"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "_agent_coordination\\supervisor_tools\\generate_module_task_list_template.py": {
            "language": ".py",
            "functions": [
                "generate_task_list"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "_agent_coordination\\supervisor_tools\\generate_task_list_from_code.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "_agent_coordination\\supervisor_tools\\send_shared_mailbox_message.py": {
            "language": ".py",
            "functions": [
                "load_json_safe",
                "write_json_safe",
                "find_agent_mailbox",
                "inject_message"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "_agent_coordination\\supervisor_tools\\summarize_agent_status.py": {
            "language": ".py",
            "functions": [
                "summarize_status"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "_agent_coordination\\supervisor_tools\\validate_agent_onboarding.py": {
            "language": ".py",
            "functions": [
                "validate_onboarding"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "_agent_coordination\\supervisor_tools\\view_shared_mailboxes.py": {
            "language": ".py",
            "functions": [
                "load_json_safe",
                "parse_utc_timestamp",
                "format_time_delta",
                "display_mailbox_status"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "_agent_coordination\\tests\\test_apply_proposals.py": {
            "language": ".py",
            "functions": [
                "temp_dirs",
                "sample_rulebook_content",
                "sample_proposals_content",
                "run_apply_proposals",
                "test_apply_proposal_unlocked_rule",
                "test_apply_proposal_locked_rule_blocked",
                "test_apply_proposal_locked_rule_override",
                "test_apply_proposal_only_accepted_status",
                "setUp",
                "test_apply_proposal_to_existing_rule",
                "test_append_new_rule",
                "test_update_proposal_status"
            ],
            "classes": {
                "TestApplyProposals": {
                    "methods": [
                        "setUp",
                        "test_apply_proposal_to_existing_rule",
                        "test_append_new_rule",
                        "test_update_proposal_status"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "unittest.TestCase"
                    ]
                }
            },
            "routes": [],
            "complexity": 16
        },
        "_agent_coordination\\tests\\test_common_utils.py": {
            "language": ".py",
            "functions": [
                "log_event",
                "valid_proposal_args",
                "mock_config",
                "test_add_proposal_valid",
                "test_add_proposal_invalid_category",
                "test_add_proposal_invalid_priority",
                "test_add_proposal_file_creation",
                "test_add_proposal_file_append",
                "test_add_proposal_file_error",
                "test_add_proposal_minimal"
            ],
            "classes": {},
            "routes": [],
            "complexity": 10
        },
        "_agent_coordination\\tests\\test_config.py": {
            "language": ".py",
            "functions": [
                "log_event",
                "test_workspace_root_exists",
                "test_directory_paths",
                "test_file_paths",
                "test_log_file_paths",
                "test_mailbox_subdirs",
                "test_message_format",
                "test_status_constants"
            ],
            "classes": {},
            "routes": [],
            "complexity": 8
        },
        "_agent_coordination\\tests\\test_cursor_dispatcher.py": {
            "language": ".py",
            "functions": [
                "log_event",
                "sample_context",
                "test_generate_cursor_prompt_basic",
                "test_generate_cursor_prompt_missing_fields",
                "test_generate_cursor_prompt_empty_context",
                "context_file",
                "test_dispatch_to_cursor_file_not_found",
                "test_dispatch_to_cursor_invalid_json",
                "test_dispatch_to_cursor_success",
                "test_dispatch_to_cursor_cursor_not_found",
                "test_dispatch_to_cursor_pyperclip_import_error",
                "test_dispatch_to_cursor_gui_automation_error"
            ],
            "classes": {},
            "routes": [],
            "complexity": 12
        },
        "_agent_coordination\\tests\\test_mailbox_utils.py": {
            "language": ".py",
            "functions": [
                "log_event",
                "test_dirs",
                "create_test_file",
                "test_directory_creation",
                "test_successful_processing",
                "test_failed_processing",
                "test_process_func_exception",
                "test_wrong_file_suffix",
                "test_stop_event_handling",
                "process_func",
                "process_func",
                "process_func",
                "process_func",
                "process_func"
            ],
            "classes": {},
            "routes": [],
            "complexity": 14
        },
        "_agent_coordination\\tests\\test_cursor_sync_loop.py": {
            "language": ".py",
            "functions": [
                "setup_test_environment",
                "create_test_prompt",
                "start_listener_subprocess",
                "stop_listener_subprocess",
                "test_full_sync_loop"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5
        },
        "_agent_coordination\\tests\\test_template_engine.py": {
            "language": ".py",
            "functions": [
                "log_event",
                "mock_template_env",
                "setup_env",
                "test_render_valid_template",
                "test_render_missing_template",
                "test_render_invalid_context",
                "test_generate_twitter_post",
                "test_generate_post_invalid_platform",
                "test_env_initialization_no_template_dirs",
                "test_template_whitespace_handling",
                "test_variable_detection_simple",
                "test_variable_detection_with_filters",
                "test_variable_detection_nested",
                "test_malformed_template"
            ],
            "classes": {},
            "routes": [],
            "complexity": 14
        },
        "_agent_coordination\\tests\\test_reflection_agent.py": {
            "language": ".py",
            "functions": [
                "temp_rulebook_for_reflection",
                "temp_proposals_path",
                "test_dirs",
                "alert_data_no_rule",
                "alert_data_rule_found",
                "alert_data_ambiguous",
                "test_generate_reflection_no_proposal",
                "test_generate_reflection_proposes_on_no_rule",
                "test_generate_reflection_proposes_on_ambiguity",
                "test_save_reflection",
                "test_submit_proposal",
                "test_submit_proposal_no_content",
                "test_alert_handler_integration"
            ],
            "classes": {},
            "routes": [],
            "complexity": 13
        },
        "_agent_coordination\\tests\\agents\\test_stall_recovery_agent.py": {
            "language": ".py",
            "functions": [
                "temp_project",
                "recovery_agent",
                "test_stall_detection_and_context",
                "test_recovery_task_injection",
                "test_stall_logging",
                "test_task_fields_populated",
                "test_specific_stall_category_no_input"
            ],
            "classes": {},
            "routes": [],
            "complexity": 7
        },
        "_agent_coordination\\tests\\core\\test_agent_bus.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "_agent_coordination\\tests\\core\\test_base_utils.py": {
            "language": ".py",
            "functions": [
                "test_singleton",
                "test_generate_id",
                "test_json_file_operations",
                "test_validation",
                "__init__"
            ],
            "classes": {
                "TestSingleton": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 6
        },
        "_agent_coordination\\tests\\core\\test_config_service.py": {
            "language": ".py",
            "functions": [
                "config_dir",
                "config_service",
                "sample_configs",
                "test_config_source_creation",
                "test_add_source",
                "test_load_json_config",
                "test_load_yaml_config",
                "test_load_env_config",
                "test_config_namespaces",
                "test_config_save",
                "test_missing_required_config",
                "test_missing_optional_config",
                "test_get_with_default"
            ],
            "classes": {},
            "routes": [],
            "complexity": 13
        },
        "_agent_coordination\\tests\\core\\test_dispatcher.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "_agent_coordination\\tests\\core\\test_logging.py": {
            "language": ".py",
            "functions": [
                "log_dir",
                "log_manager",
                "test_log_formatter",
                "test_log_formatter_with_exception",
                "test_log_manager_configuration",
                "test_get_logger_with_component",
                "test_get_logger_without_component",
                "test_log_manager_singleton",
                "test_logging_output",
                "test_set_level",
                "test_log_rotation"
            ],
            "classes": {},
            "routes": [],
            "complexity": 11
        },
        "_agent_coordination\\tests\\core\\test_metrics.py": {
            "language": ".py",
            "functions": [
                "metric_collector",
                "test_timing_stats",
                "failing_collector"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "_agent_coordination\\tests\\core\\test_path_manager.py": {
            "language": ".py",
            "functions": [
                "temp_dir",
                "path_manager",
                "test_init",
                "test_get_file_type",
                "test_create_node",
                "test_scan",
                "test_find",
                "test_walk",
                "test_path_conversion",
                "test_cache_operations",
                "test_watch_operations"
            ],
            "classes": {},
            "routes": [],
            "complexity": 11
        },
        "_agent_coordination\\tests\\core\\test_system.py": {
            "language": ".py",
            "functions": [
                "temp_dir",
                "command_executor",
                "directory_monitor",
                "file_manager",
                "__init__"
            ],
            "classes": {
                "TestDirectoryMonitor": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Test implementation of DirectoryMonitor.",
                    "base_classes": [
                        "DirectoryMonitor"
                    ]
                },
                "ErrorMonitor": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "DirectoryMonitor"
                    ]
                }
            },
            "routes": [],
            "complexity": 6
        },
        "_agent_coordination\\tests\\social\\utils\\test_chatgpt_scraper.py": {
            "language": ".py",
            "functions": [
                "mock_session",
                "scraper",
                "test_initialization",
                "test_login_success",
                "test_login_failure",
                "test_verify_session",
                "test_get_conversation_history",
                "test_get_conversation_messages",
                "test_send_message",
                "test_rate_limit_handling",
                "test_error_response_handling",
                "test_retry_mechanism",
                "test_cleanup"
            ],
            "classes": {
                "TestChatGPTScraper": {
                    "methods": [
                        "test_initialization",
                        "test_login_success",
                        "test_login_failure",
                        "test_verify_session",
                        "test_get_conversation_history",
                        "test_get_conversation_messages",
                        "test_send_message",
                        "test_rate_limit_handling",
                        "test_error_response_handling",
                        "test_retry_mechanism",
                        "test_cleanup"
                    ],
                    "docstring": "Test suite for ChatGPT scraping functionality.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 24
        },
        "_agent_coordination\\tests\\social\\utils\\test_chatgpt_templating.py": {
            "language": ".py",
            "functions": [
                "mock_session",
                "scraper",
                "sample_dev_log_entry",
                "test_template_rendering",
                "test_template_with_multiple_variables",
                "test_register_custom_template",
                "test_parse_dev_log_response",
                "test_export_dev_log_markdown",
                "test_export_dev_log_json",
                "test_invalid_export_format"
            ],
            "classes": {
                "TestPromptTemplate": {
                    "methods": [
                        "test_template_rendering",
                        "test_template_with_multiple_variables"
                    ],
                    "docstring": "Test suite for prompt template functionality.",
                    "base_classes": []
                },
                "TestDevLogGeneration": {
                    "methods": [
                        "test_register_custom_template",
                        "test_parse_dev_log_response",
                        "test_export_dev_log_markdown",
                        "test_export_dev_log_json",
                        "test_invalid_export_format"
                    ],
                    "docstring": "Test suite for dev log generation functionality.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 17
        },
        "_agent_coordination\\tests\\tools\\test_cursor_metrics.py": {
            "language": ".py",
            "functions": [
                "mock_directories",
                "clean_registry",
                "test_execution_metrics_success",
                "test_execution_metrics_failure",
                "test_error_metrics",
                "test_queue_metrics",
                "test_processing_time_tracking",
                "test_multiple_error_types",
                "test_queue_metrics_error_handling",
                "test_execution_metrics_default_agent",
                "test_concurrent_metric_updates",
                "random_update"
            ],
            "classes": {
                "TestCursorMetrics": {
                    "methods": [
                        "test_execution_metrics_success",
                        "test_execution_metrics_failure",
                        "test_error_metrics",
                        "test_queue_metrics",
                        "test_processing_time_tracking",
                        "test_multiple_error_types",
                        "test_queue_metrics_error_handling",
                        "test_execution_metrics_default_agent",
                        "test_concurrent_metric_updates"
                    ],
                    "docstring": "Test suite for cursor metrics functionality.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 21
        },
        "_agent_coordination\\tests\\tools\\test_cursor_result_listener.py": {
            "language": ".py",
            "functions": [
                "mock_config_service",
                "mock_log_event",
                "test_dirs",
                "listener",
                "sample_prompt_file",
                "test_listener_initialization",
                "test_metrics_registration",
                "test_update_queue_metrics",
                "test_production_config_validation"
            ],
            "classes": {},
            "routes": [],
            "complexity": 9
        },
        "_agent_coordination\\tests\\tools\\test_monitoring_stack.py": {
            "language": ".py",
            "functions": [
                "monitoring_stack",
                "_check_services_health",
                "test_prometheus_metrics",
                "test_grafana_datasource",
                "test_grafana_dashboard",
                "is_service_ready",
                "test_prometheus_ready",
                "test_grafana_healthy",
                "test_prometheus_metrics_endpoint",
                "test_grafana_datasource",
                "test_dashboard_provisioned",
                "test_metric_exists"
            ],
            "classes": {
                "TestMonitoringStack": {
                    "methods": [
                        "test_prometheus_ready",
                        "test_grafana_healthy",
                        "test_prometheus_metrics_endpoint",
                        "test_grafana_datasource",
                        "test_dashboard_provisioned",
                        "test_metric_exists"
                    ],
                    "docstring": "Test suite for monitoring stack functionality.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 18
        },
        "_agent_coordination\\tools\\agent_cursor_bridge.py": {
            "language": ".py",
            "functions": [
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "_agent_coordination\\tools\\analyze_file_structure.py": {
            "language": ".py",
            "functions": [
                "analyze_structure",
                "__init__",
                "_format_args",
                "visit_Import",
                "visit_ImportFrom",
                "visit_FunctionDef",
                "visit_AsyncFunctionDef",
                "visit_ClassDef"
            ],
            "classes": {
                "StructureAnalyzer": {
                    "methods": [
                        "__init__",
                        "_format_args",
                        "visit_Import",
                        "visit_ImportFrom",
                        "visit_FunctionDef",
                        "visit_AsyncFunctionDef",
                        "visit_ClassDef"
                    ],
                    "docstring": "NodeVisitor to extract structural information from Python code.",
                    "base_classes": [
                        "ast.NodeVisitor"
                    ]
                }
            },
            "routes": [],
            "complexity": 15
        },
        "_agent_coordination\\tools\\apply_structured_template.py": {
            "language": ".py",
            "functions": [
                "_log_tool_action",
                "_update_status_file",
                "load_template",
                "render_template",
                "write_output_file"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5
        },
        "_agent_coordination\\tools\\auto_recovery_runner.py": {
            "language": ".py",
            "functions": [
                "run_command",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "_agent_coordination\\tools\\check_component_integration.py": {
            "language": ".py",
            "functions": [
                "check_import_present",
                "check_instantiation",
                "check_method_call"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "_agent_coordination\\tools\\check_confirmation_state.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "_agent_coordination\\tools\\cursor_dispatcher.py": {
            "language": ".py",
            "functions": [
                "generate_cursor_prompt_from_context",
                "dispatch_to_cursor"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "_agent_coordination\\tools\\code_applicator.py": {
            "language": ".py",
            "functions": [
                "apply_code",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "_agent_coordination\\tools\\diagnostics.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "_agent_coordination\\tools\\find_dead_code.py": {
            "language": ".py",
            "functions": [
                "_log_tool_action",
                "_update_status_file",
                "analyze_directory_for_dead_code"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "_agent_coordination\\tools\\find_duplicate_code.py": {
            "language": ".py",
            "functions": [
                "_log_tool_action",
                "_update_status_file",
                "analyze_directory_for_duplicates"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "_agent_coordination\\tools\\find_todos.py": {
            "language": ".py",
            "functions": [
                "_is_test_or_sandbox_file",
                "_extract_line_context",
                "find_todos",
                "generate_report",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5
        },
        "_agent_coordination\\tools\\generate_agent_worker.py": {
            "language": ".py",
            "functions": [
                "load_template",
                "generate_worker"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "_agent_coordination\\tools\\gpt_command_router.py": {
            "language": ".py",
            "functions": [
                "read_gpt_response",
                "parse_commands",
                "update_proposal_status",
                "execute_command",
                "main",
                "log_event"
            ],
            "classes": {},
            "routes": [],
            "complexity": 6
        },
        "_agent_coordination\\tools\\identify_refactor_candidates.py": {
            "language": ".py",
            "functions": [
                "find_symbols_for_refactor",
                "__init__",
                "visit_ClassDef",
                "visit_FunctionDef",
                "visit_AsyncFunctionDef"
            ],
            "classes": {
                "SymbolFinder": {
                    "methods": [
                        "__init__",
                        "visit_ClassDef",
                        "visit_FunctionDef",
                        "visit_AsyncFunctionDef"
                    ],
                    "docstring": "AST Visitor to find top-level class and function definitions.",
                    "base_classes": [
                        "ast.NodeVisitor"
                    ]
                }
            },
            "routes": [],
            "complexity": 9
        },
        "_agent_coordination\\tools\\project_context_producer.py": {
            "language": ".py",
            "functions": [
                "categorize_stall",
                "produce_project_context"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "_agent_coordination\\tools\\project_scannerV2.py": {
            "language": ".py",
            "functions": [
                "main",
                "log_security_finding",
                "scan_proposal_block",
                "__init__",
                "_init_tree_sitter_language",
                "analyze_file",
                "_analyze_python",
                "_analyze_rust",
                "_analyze_javascript",
                "__init__",
                "run",
                "__init__",
                "add_task",
                "wait_for_completion",
                "stop_workers",
                "__init__",
                "hash_file",
                "should_exclude",
                "process_file",
                "__init__",
                "load_existing_report",
                "save_report",
                "generate_init_files",
                "load_existing_chatgpt_context",
                "export_chatgpt_context",
                "__init__",
                "load_cache",
                "save_cache",
                "scan_project",
                "_process_file",
                "generate_init_files",
                "export_chatgpt_context",
                "categorize_agents",
                "_maturity_level",
                "_agent_type",
                "_traverse",
                "get_node_text",
                "_traverse"
            ],
            "classes": {
                "LanguageAnalyzer": {
                    "methods": [
                        "__init__",
                        "_init_tree_sitter_language",
                        "analyze_file",
                        "_analyze_python",
                        "_analyze_rust",
                        "_analyze_javascript"
                    ],
                    "docstring": "Handles language-specific code analysis for different programming languages.",
                    "base_classes": []
                },
                "BotWorker": {
                    "methods": [
                        "__init__",
                        "run"
                    ],
                    "docstring": "A background worker that pulls file tasks from a queue,\nprocesses them, and appends results to results_list.",
                    "base_classes": [
                        "threading.Thread"
                    ]
                },
                "MultibotManager": {
                    "methods": [
                        "__init__",
                        "add_task",
                        "wait_for_completion",
                        "stop_workers"
                    ],
                    "docstring": "Manages a pool of BotWorker threads.",
                    "base_classes": []
                },
                "FileProcessor": {
                    "methods": [
                        "__init__",
                        "hash_file",
                        "should_exclude",
                        "process_file"
                    ],
                    "docstring": "Handles file hashing, ignoring, caching checks, etc.",
                    "base_classes": []
                },
                "ReportGenerator": {
                    "methods": [
                        "__init__",
                        "load_existing_report",
                        "save_report",
                        "generate_init_files",
                        "load_existing_chatgpt_context",
                        "export_chatgpt_context"
                    ],
                    "docstring": "Handles merging new analysis into existing project_analysis.json and chatgpt context.",
                    "base_classes": []
                },
                "ProjectScanner": {
                    "methods": [
                        "__init__",
                        "load_cache",
                        "save_cache",
                        "scan_project",
                        "_process_file",
                        "generate_init_files",
                        "export_chatgpt_context",
                        "categorize_agents",
                        "_maturity_level",
                        "_agent_type"
                    ],
                    "docstring": "A universal project scanner that:\n  - Identifies Python, Rust, JS, TS files.\n  - Extracts functions, classes, routes, complexity.\n  - Caches file hashes to skip unchanged files.\n  - Detects moved files by matching file hashes.\n  - Merges new analysis into existing project_analysis.json (preserving old entries).\n  - Exports a merged ChatGPT context if requested (preserving old context data).\n  - Processes files asynchronously with BotWorker threads.\n  - Auto-generates __init__.py files for Python packages.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 70
        },
        "_agent_coordination\\tools\\prompt_dispatcher.py": {
            "language": ".py",
            "functions": [
                "list_available_prompts",
                "click_button_if_found",
                "dispatch_prompt"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "_agent_coordination\\tools\\recovery_context_generator.py": {
            "language": ".py",
            "functions": [
                "categorize_stall",
                "generate_recovery_context",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "_agent_coordination\\tools\\refactor_move_symbol.py": {
            "language": ".py",
            "functions": [
                "extract_block",
                "remove_block",
                "add_block_to_target",
                "refactor_move_symbol"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "_agent_coordination\\tools\\reload_agent_context.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "_agent_coordination\\tools\\rulebook_stats.py": {
            "language": ".py",
            "functions": [
                "parse_rulebook",
                "get_commit_history",
                "generate_summary",
                "output_json_stats"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "_agent_coordination\\tools\\rulebook_git_committer.py": {
            "language": ".py",
            "functions": [
                "run_git_command",
                "commit_rulebook"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "_agent_coordination\\tools\\rulebook_utils.py": {
            "language": ".py",
            "functions": [
                "format_rule",
                "add_rule",
                "parse_yaml_block",
                "load_rules"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "_agent_coordination\\tools\\run_agent_swarm.py": {
            "language": ".py",
            "functions": [
                "launch_component",
                "terminate_component",
                "signal_handler"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "_agent_coordination\\tools\\send_mailbox_message.py": {
            "language": ".py",
            "functions": [
                "create_message_file"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "_agent_coordination\\tools\\task_list_validator.py": {
            "language": ".py",
            "functions": [
                "validate_task_list"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "_agent_coordination\\tools\\usage_block_prompter.py": {
            "language": ".py",
            "functions": [
                "agent_mailbox",
                "now_str",
                "file_has_main_block",
                "init_mailbox_if_needed",
                "add_task_to_mailbox",
                "add_project_board_update",
                "enqueue_tasks_to_all_agents",
                "scan_for_usage_block_tasks"
            ],
            "classes": {},
            "routes": [],
            "complexity": 8
        },
        "_agent_coordination\\ui\\task_visualizer_app.py": {
            "language": ".py",
            "functions": [
                "load_task_data",
                "read_tasks"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "_agent_coordination\\utils\\common_utils.py": {
            "language": ".py",
            "functions": [
                "add_proposal"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "_agent_coordination\\_agent_coordination\\task_utils.py": {
            "language": ".py",
            "functions": [
                "read_tasks",
                "write_tasks",
                "update_task_status"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "_agent_coordination\\_agent_coordination\\dispatchers\\task_dispatcher.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_dispatch_message_to_agent",
                "handle_task",
                "process_pending_tasks",
                "run",
                "read_tasks",
                "write_tasks",
                "update_task_status"
            ],
            "classes": {
                "TaskDispatcher": {
                    "methods": [
                        "__init__",
                        "_dispatch_message_to_agent",
                        "handle_task",
                        "process_pending_tasks",
                        "run"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 13
        },
        "_agent_coordination\\_agent_coordination\\runtime\\agent_entrypoint.py": {
            "language": ".py",
            "functions": [
                "claim_shared_mailbox",
                "release_shared_mailbox",
                "process_mailbox_messages",
                "main_agent_loop",
                "exists",
                "read_file",
                "list_dir",
                "write_file",
                "__init__",
                "set",
                "get"
            ],
            "classes": {
                "PlaceholderFilesystem": {
                    "methods": [
                        "exists",
                        "read_file",
                        "list_dir",
                        "write_file"
                    ],
                    "docstring": null,
                    "base_classes": []
                },
                "PlaceholderMemory": {
                    "methods": [
                        "__init__",
                        "set",
                        "get"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 18
        },
        "_agent_coordination\\_agent_coordination\\ui_controllers\\cursor_prompt_controller.py": {
            "language": ".py",
            "functions": [
                "_activate_cursor_window",
                "_focus_chat_input",
                "send_prompt_to_chat"
            ],
            "classes": {
                "CursorPromptController": {
                    "methods": [
                        "_activate_cursor_window",
                        "_focus_chat_input",
                        "send_prompt_to_chat"
                    ],
                    "docstring": "Uses pyautogui to send prompts to the Cursor chat interface.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 6
        },
        "_core\\coordination\\cursor\\bridge_adapter.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "translate_goal_to_plan",
                "_build_refactor_plan",
                "_build_generate_tests_plan",
                "_build_execute_prompt_plan",
                "_build_type_text_plan"
            ],
            "classes": {
                "CursorGoal": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": []
                },
                "CursorBridgeAdapter": {
                    "methods": [
                        "__init__",
                        "translate_goal_to_plan",
                        "_build_refactor_plan",
                        "_build_generate_tests_plan",
                        "_build_execute_prompt_plan",
                        "_build_type_text_plan"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 12
        },
        "_agent_coordination\\_agent_coordination\\utils\\onboarding_message_injector.py": {
            "language": ".py",
            "functions": [
                "inject_initial_onboarding_message"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "_core\\coordination\\cursor\\cursor_instance_controller.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "capture",
                "__init__",
                "_init_instances",
                "get_available_instance",
                "get_instance_states",
                "chain_commands",
                "get_instance_by_id"
            ],
            "classes": {
                "CursorInstance": {
                    "methods": [
                        "__init__",
                        "capture"
                    ],
                    "docstring": "Controls a single Cursor window instance.",
                    "base_classes": []
                },
                "CursorInstanceController": {
                    "methods": [
                        "__init__",
                        "_init_instances",
                        "get_available_instance",
                        "get_instance_states",
                        "chain_commands",
                        "get_instance_by_id"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 16
        },
        "_core\\coordination\\cursor\\task_execution_state_machine.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_step_to_commands"
            ],
            "classes": {
                "StepState": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "Enum"
                    ]
                },
                "TaskStep": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": []
                },
                "TaskExecutionPlan": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": []
                },
                "TaskExecutionStateMachine": {
                    "methods": [
                        "__init__",
                        "_step_to_commands"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 4
        }
    }
}