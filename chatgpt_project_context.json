{
    "project_root": "D:\\Dream.os",
    "num_files_analyzed": 284,
    "analysis_details": {
        "scripts\\auditing\\find_orphaned_files.py": {
            "language": ".py",
            "functions": [
                "find_orphaned_modules",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "apps\\browser\\main.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "navigate_to_url"
            ],
            "classes": {
                "BrowserMainWindow": {
                    "methods": [
                        "__init__",
                        "navigate_to_url"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "QMainWindow"
                    ]
                }
            },
            "routes": [],
            "complexity": 4
        },
        "apps\\examples\\onboarding_message_injector.py": {
            "language": ".py",
            "functions": [
                "inject_initial_onboarding_message"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "apps\\examples\\reflection_agent.py": {
            "language": ".py",
            "functions": [
                "load_rules_from_rulebook",
                "generate_reflection",
                "save_reflection",
                "submit_proposal",
                "start_monitoring",
                "__init__",
                "on_created"
            ],
            "classes": {
                "AlertHandler": {
                    "methods": [
                        "__init__",
                        "on_created"
                    ],
                    "docstring": "Handles new alert files in the inbox directory.",
                    "base_classes": [
                        "FileSystemEventHandler"
                    ]
                }
            },
            "routes": [],
            "complexity": 9,
            "agent_role": "potential_agent"
        },
        "docs\\examples\\fix_tenacity_example.py": {
            "language": ".py",
            "functions": [
                "might_fail"
            ],
            "classes": {
                "TransientError": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "Exception"
                    ]
                }
            },
            "routes": [],
            "complexity": 1
        },
        "apps\\examples\\stubs\\agent_1_stub.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_handle_plan"
            ],
            "classes": {
                "Agent1Stub": {
                    "methods": [
                        "__init__",
                        "_handle_plan"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 4,
            "agent_role": "potential_agent"
        },
        "htmlcov\\coverage_html_cb_497bf287.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "scripts\\auditing\\find_unused_assets.py": {
            "language": ".py",
            "functions": [
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "apps\\sky_viewer\\sky_viewer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "send_fullscreen_toggle",
                "toggle_fullscreen",
                "open_splash"
            ],
            "classes": {
                "SkyViewer": {
                    "methods": [
                        "__init__",
                        "send_fullscreen_toggle",
                        "toggle_fullscreen",
                        "open_splash"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "QMainWindow"
                    ]
                }
            },
            "routes": [],
            "complexity": 8
        },
        "scripts\\auditing\\classify_domains.py": {
            "language": ".py",
            "functions": [
                "classify_path",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "scripts\\auditing\\analyze_asset_usage.py": {
            "language": ".py",
            "functions": [
                "find_code_files",
                "get_asset_files",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "scripts\\auditing\\generate_import_graph.py": {
            "language": ".py",
            "functions": [
                "find_python_files",
                "get_imports_from_file",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "scripts\\cli.py": {
            "language": ".py",
            "functions": [
                "configure_logging",
                "run",
                "log_stats",
                "validate_config",
                "version"
            ],
            "classes": {
                "ConfigError": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "Exception"
                    ]
                }
            },
            "routes": [],
            "complexity": 5
        },
        "scripts\\maintenance\\archive_agent_comms.py": {
            "language": ".py",
            "functions": [
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1,
            "agent_role": "potential_agent"
        },
        "scripts\\maintenance\\deduplicate_tasks.py": {
            "language": ".py",
            "functions": [
                "load_tasks",
                "deduplicate_tasks",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "scripts\\maintenance\\archive_agent_mailboxes.py": {
            "language": ".py",
            "functions": [
                "archive_mailbox",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2,
            "agent_role": "potential_agent"
        },
        "scripts\\auditing\\generate_summary.py": {
            "language": ".py",
            "functions": [
                "read_json_file",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "scripts\\maintenance\\move_uncomplete_tasks.py": {
            "language": ".py",
            "functions": [
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "scripts\\testing\\_internal_test_loop.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "scripts\\maintenance\\find_duplicate_tasks.py": {
            "language": ".py",
            "functions": [
                "is_excluded",
                "parse_json_file",
                "parse_md_file",
                "find_task_files",
                "normalize",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 6
        },
        "scripts\\maintenance\\run_memory_summarizer.py": {
            "language": ".py",
            "functions": [
                "summarize_memory_file"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "scripts\\maintenance\\validate_logs.py": {
            "language": ".py",
            "functions": [
                "load_schema_map",
                "find_jsonl_files"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "scripts\\maintenance\\validate_onboarding_prompts.py": {
            "language": ".py",
            "functions": [
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "scripts\\maintenance\\chunk_tasks.py": {
            "language": ".py",
            "functions": [
                "dedupe_and_chunk"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "scripts\\testing\\auto_claim_tasks_agent_002.py": {
            "language": ".py",
            "functions": [
                "auto_claim_tasks"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1,
            "agent_role": "potential_agent"
        },
        "scripts\\testing\\load_generator_recovery_test.py": {
            "language": ".py",
            "functions": [
                "create_fail_test_task"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "scripts\\testing\\claim_one_task_agent_002.py": {
            "language": ".py",
            "functions": [
                "claim_one_task"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1,
            "agent_role": "potential_agent"
        },
        "scripts\\testing\\test_cursor_orchestrator.py": {
            "language": ".py",
            "functions": [],
            "classes": {
                "CursorOrchestrator": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 0
        },
        "scripts\\testing\\test_task_timeout.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\dreamos\\agents\\agent9_response_injector.py": {
            "language": ".py",
            "functions": [
                "__init__"
            ],
            "classes": {
                "Agent9ResponseInjector": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Listens for CHATGPT_RESPONSE_SCRAPED events and triggers Cursor injection tasks.",
                    "base_classes": [
                        "BaseAgent"
                    ]
                }
            },
            "routes": [],
            "complexity": 2,
            "agent_role": "potential_agent"
        },
        "scripts\\utility\\hello_world_script.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "scripts\\utils\\simple_task_updater.py": {
            "language": ".py",
            "functions": [
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "scripts\\utils\\affirm_onboarding_contract.py": {
            "language": ".py",
            "functions": [
                "calculate_sha256",
                "get_current_utc_iso",
                "update_contract_yaml",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "scripts\\utils\\claim_task.py": {
            "language": ".py",
            "functions": [
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "src\\dreamos\\agents\\agents\\tool_executor_agent.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "execute_plan"
            ],
            "classes": {
                "ToolExecutionAgent": {
                    "methods": [
                        "__init__",
                        "execute_plan"
                    ],
                    "docstring": "Executes a plan (list of tool call steps) sequentially.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 4,
            "agent_role": "potential_agent"
        },
        "src\\dreamos\\agents\\chatgpt_web_agent.py": {
            "language": ".py",
            "functions": [
                "run_loop",
                "__init__",
                "_load_pending_responses",
                "_save_pending_responses",
                "_initialize_browser",
                "_is_result_injected",
                "_mark_result_injected",
                "inject_response",
                "_get_and_cache_results",
                "run_cycle",
                "close"
            ],
            "classes": {
                "ChatGPTWebAgent": {
                    "methods": [
                        "__init__",
                        "_load_pending_responses",
                        "_save_pending_responses",
                        "_initialize_browser",
                        "_is_result_injected",
                        "_mark_result_injected",
                        "inject_response",
                        "_get_and_cache_results",
                        "run_cycle",
                        "close"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 21,
            "agent_role": "potential_agent"
        },
        "src\\dreamos\\agents\\agents\\task_executor_agent.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load_tasks",
                "_check_dependencies",
                "handle_response",
                "run_cycle"
            ],
            "classes": {
                "TaskStatus": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": []
                },
                "TaskExecutorAgent": {
                    "methods": [
                        "__init__",
                        "_load_tasks",
                        "_check_dependencies",
                        "handle_response",
                        "run_cycle"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 10,
            "agent_role": "potential_agent"
        },
        "src\\dreamos\\agents\\agents\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\dreamos\\agents\\agent2_infra_surgeon.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0,
            "agent_role": "potential_agent"
        },
        "src\\dreamos\\agents\\cursor_dispatcher.py": {
            "language": ".py",
            "functions": [
                "render_task_prompt",
                "load_queue",
                "save_queue",
                "dispatch_tasks",
                "run_loop"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5,
            "agent_role": "potential_agent"
        },
        "src\\dreamos\\agents\\cursor_worker.py": {
            "language": ".py",
            "functions": [
                "run",
                "click_button",
                "wait_for_idle",
                "process_task_ui"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4,
            "agent_role": "potential_agent"
        },
        "src\\dreamos\\agents\\context_router_agent.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load_routing_rules"
            ],
            "classes": {
                "ContextRouterAgent": {
                    "methods": [
                        "__init__",
                        "_load_routing_rules"
                    ],
                    "docstring": "Dynamically routes incoming requests (e.g., scraped prompts) \nto specific target agents based on context metadata.",
                    "base_classes": [
                        "BaseAgent"
                    ]
                },
                "EventType": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 4,
            "agent_role": "potential_agent"
        },
        "src\\dreamos\\agents\\utils\\agent1_taskboard_workaround.py": {
            "language": ".py",
            "functions": [
                "_acquire_lock_local",
                "_read_board_local",
                "_rewrite_memory_safely_local",
                "update_global_task_local",
                "__init__",
                "__enter__",
                "__exit__",
                "acquire",
                "release",
                "is_locked"
            ],
            "classes": {
                "_DummyLock": {
                    "methods": [
                        "__init__",
                        "__enter__",
                        "__exit__",
                        "acquire",
                        "release",
                        "is_locked"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 16,
            "agent_role": "potential_agent"
        },
        "src\\dreamos\\agents\\utils\\agent_utils.py": {
            "language": ".py",
            "functions": [
                "with_error_handling",
                "with_performance_tracking",
                "log_task_performance",
                "format_agent_report",
                "validate_mailbox_message_schema",
                "create_mailbox_message",
                "get_agent_mailbox_path",
                "validate_agent_mailbox_path",
                "decorator",
                "decorator"
            ],
            "classes": {
                "AgentError": {
                    "methods": [],
                    "docstring": "Base exception for agent-related errors.",
                    "base_classes": [
                        "Exception"
                    ]
                },
                "TaskProcessingError": {
                    "methods": [],
                    "docstring": "Error during task processing.",
                    "base_classes": [
                        "AgentError"
                    ]
                },
                "MessageHandlingError": {
                    "methods": [],
                    "docstring": "Error during message handling.",
                    "base_classes": [
                        "AgentError"
                    ]
                }
            },
            "routes": [],
            "complexity": 10,
            "agent_role": "potential_agent"
        },
        "src\\dreamos\\agents\\mixins\\voting.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "decide_vote"
            ],
            "classes": {
                "AgentVoterMixin": {
                    "methods": [
                        "__init__",
                        "decide_vote"
                    ],
                    "docstring": "A mixin for Agents to automatically participate in voting sessions using standard pub/sub.\n\nAgents using this mixin should have `agent_id`, `agent_bus` attributes.\nSubscribes to VOTE_INITIATED_TOPIC and publishes votes to VOTE_CAST_TOPIC.\nProvides a default handler to cast a simple vote.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 4
        },
        "src\\dreamos\\agents\\task_feedback_router.py": {
            "language": ".py",
            "functions": [
                "find_task_file",
                "route_feedback",
                "run_loop"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "src\\dreamos\\apps\\dreamscape\\dreamscape_generator\\src\\core\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\dreamos\\apps\\dreamscape\\dreamscape_generator\\main.py": {
            "language": ".py",
            "functions": [
                "run_generation"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "src\\dreamos\\agents\\supervisor_agent.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "load_directives",
                "dispatch_tasks",
                "gather_results",
                "save_results",
                "run_loop"
            ],
            "classes": {
                "SupervisorAgent": {
                    "methods": [
                        "__init__",
                        "load_directives",
                        "dispatch_tasks",
                        "gather_results",
                        "save_results",
                        "run_loop"
                    ],
                    "docstring": "Orchestrates tasks between ChatGPT WebAgents and Cursor workers.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 12,
            "agent_role": "potential_agent"
        },
        "src\\dreamos\\agents\\utils\\onboarding_utils.py": {
            "language": ".py",
            "functions": [
                "calculate_file_sha256",
                "_get_current_utc_iso",
                "update_onboarding_contract"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "src\\dreamos\\apps\\dreamscape\\dreamscape_generator\\src\\core\\monitoring\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\dreamos\\agents\\utils.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\dreamos\\agents\\recovery_coordinator.py": {
            "language": ".py",
            "functions": [
                "__init__"
            ],
            "classes": {
                "RecoveryCoordinatorAgent": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Monitors for failed and timed-out tasks.\nAttempts retries for failed tasks based on a configured strategy.\nMarks tasks as permanently failed if retries are exhausted or critical errors occur.\nMarks tasks as failed if they run longer than the configured timeout.",
                    "base_classes": [
                        "BaseAgent"
                    ]
                }
            },
            "routes": [],
            "complexity": 2,
            "agent_role": "potential_agent"
        },
        "src\\dreamos\\agents\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\dreamos\\apps\\dreamscape\\dreamscape_generator\\src\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\dreamos\\automation\\cursor_injector.py": {
            "language": ".py",
            "functions": [
                "get_next_prompt",
                "mark_prompt_processed",
                "inject_prompt",
                "run_injection_loop"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "src\\dreamos\\apps\\dreamscape\\dreamscape_generator\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\dreamos\\automation\\execution\\cursor_fleet_launcher.py": {
            "language": ".py",
            "functions": [
                "launch_cursor_instance",
                "move_window",
                "get_cursor_windows",
                "assign_windows_to_monitors",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5
        },
        "src\\dreamos\\automation\\cursor_orchestrator.py": {
            "language": ".py",
            "functions": [
                "__new__",
                "__init__",
                "_load_all_coordinates",
                "_initialize_agent_status",
                "_perform_injection_sequence",
                "_perform_copy_sequence",
                "_perform_health_check_click",
                "_log_retry_attempt"
            ],
            "classes": {
                "CursorOrchestratorError": {
                    "methods": [],
                    "docstring": "Custom exception for Cursor Orchestrator errors.",
                    "base_classes": [
                        "CoreToolError"
                    ]
                },
                "CursorOrchestrator": {
                    "methods": [
                        "__new__",
                        "__init__",
                        "_load_all_coordinates",
                        "_initialize_agent_status",
                        "_perform_injection_sequence",
                        "_perform_copy_sequence",
                        "_perform_health_check_click",
                        "_log_retry_attempt"
                    ],
                    "docstring": "Manages interaction with multiple Cursor UI instances.\n\nProvides methods to inject prompts, retrieve responses, and manage the state\nof Cursor windows associated with specific agent IDs. Operates as a singleton.\nHandles coordinate loading and orchestrates UI automation via pyautogui/pyperclip.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 16
        },
        "src\\dreamos\\apps\\dreamscape\\dreamscape_generator\\threads\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\dreamos\\automation\\execution\\dream_mode_sleep.py": {
            "language": ".py",
            "functions": [
                "run_chatgpt_web_agent",
                "run_cursor_dispatcher",
                "run_task_feedback_router"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "src\\dreamos\\automation\\prompt_dispatcher.py": {
            "language": ".py",
            "functions": [
                "scrape_new_prompts",
                "determine_prompt_priority",
                "route_prompt_to_agent"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3,
            "agent_role": "potential_agent"
        },
        "src\\dreamos\\apps\\dreamscape\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\dreamos\\automation\\execution\\virtual_desktop_runner.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "launch_cursor_headless",
                "inject_keystrokes",
                "teardown"
            ],
            "classes": {
                "VirtualDesktopController": {
                    "methods": [
                        "__init__",
                        "launch_cursor_headless",
                        "inject_keystrokes",
                        "teardown"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 8
        },
        "src\\dreamos\\automation\\response_retriever.py": {
            "language": ".py",
            "functions": [
                "get_response",
                "__init__",
                "retrieve_agent_response"
            ],
            "classes": {
                "ResponseRetriever": {
                    "methods": [
                        "__init__",
                        "retrieve_agent_response"
                    ],
                    "docstring": "Handles retrieving agent responses by clicking 'Copy' and reading the clipboard.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 5
        },
        "src\\dreamos\\automation\\execution\\swarm_controller.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "start",
                "_worker_loop",
                "_route_loop",
                "_handle_result",
                "shutdown",
                "_start_stats_autologger",
                "_stats_loop"
            ],
            "classes": {
                "SwarmController": {
                    "methods": [
                        "__init__",
                        "start",
                        "_worker_loop",
                        "_route_loop",
                        "_handle_result",
                        "shutdown",
                        "_start_stats_autologger",
                        "_stats_loop"
                    ],
                    "docstring": "Controls a fleet of Cursor agents using LocalBlobChannel for task/result exchange.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 16
        },
        "src\\dreamos\\automation\\utils\\gui_bridge_utils.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\dreamos\\channels\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\dreamos\\channels\\azure_eventhub_channel.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\dreamos\\automation\\utils\\gui_automation.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\dreamos\\channels\\channel_loader.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\dreamos\\automation\\run_loop.py": {
            "language": ".py",
            "functions": [
                "main",
                "chatgpt_loop"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "src\\dreamos\\chat_engine\\base_chat_adapter.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\dreamos\\chat_engine\\chat_scraper_service.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "get_all_chats",
                "get_filtered_chats",
                "validate_login",
                "manual_login_flow"
            ],
            "classes": {
                "ChatScraperService": {
                    "methods": [
                        "__init__",
                        "get_all_chats",
                        "get_filtered_chats",
                        "validate_login",
                        "manual_login_flow"
                    ],
                    "docstring": "ChatScraperService retrieves available chat titles and links from the chat UI.\nIt handles exclusions and filtering for downstream execution cycles.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 10
        },
        "src\\dreamos\\channels\\azure_blob_channel.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\dreamos\\chat_engine\\feedback_engine.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load_memory",
                "_save_memory",
                "save_memory_async",
                "parse_and_update_memory",
                "apply_memory_updates",
                "log_feedback",
                "export_feedback_log",
                "analyze_feedback",
                "review_memory",
                "feedback_loop",
                "save_context_memory_async",
                "save_context_db",
                "review_context_memory"
            ],
            "classes": {
                "FeedbackEngine": {
                    "methods": [
                        "__init__",
                        "_load_memory",
                        "_save_memory",
                        "save_memory_async",
                        "parse_and_update_memory",
                        "apply_memory_updates",
                        "log_feedback",
                        "export_feedback_log",
                        "analyze_feedback",
                        "review_memory",
                        "feedback_loop",
                        "save_context_memory_async",
                        "save_context_db",
                        "review_context_memory"
                    ],
                    "docstring": "FeedbackEngine - Parses AI responses, updates persistent memory,\ntracks reinforcement loops, and evolves Victor.OS intelligence.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 28
        },
        "src\\dreamos\\channels\\local_blob_channel.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\dreamos\\chat_engine\\discord_dispatcher.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_setup_events",
                "send_message",
                "dispatch_memory_update",
                "dispatch_dreamscape_episode",
                "dispatch_feedback_loop",
                "run_bot",
                "shutdown"
            ],
            "classes": {
                "DiscordDispatcher": {
                    "methods": [
                        "__init__",
                        "_setup_events",
                        "send_message",
                        "dispatch_memory_update",
                        "dispatch_dreamscape_episode",
                        "dispatch_feedback_loop",
                        "run_bot",
                        "shutdown"
                    ],
                    "docstring": "DiscordDispatcher - Manages communication to a Discord server.\nSends updates on system events, memory updates, and AI output.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 16,
            "agent_role": "potential_agent"
        },
        "src\\dreamos\\chat_engine\\gui_event_handler.py": {
            "language": ".py",
            "functions": [
                "run_gui",
                "__init__",
                "init_ui",
                "toggle_headless",
                "toggle_reverse",
                "toggle_archive",
                "start_dispatcher",
                "stop_dispatcher",
                "log",
                "__init__",
                "exec_",
                "__init__",
                "__init__",
                "__init__",
                "__init__",
                "__init__"
            ],
            "classes": {
                "GUIEventHandler": {
                    "methods": [
                        "__init__",
                        "init_ui",
                        "toggle_headless",
                        "toggle_reverse",
                        "toggle_archive",
                        "start_dispatcher",
                        "stop_dispatcher",
                        "log"
                    ],
                    "docstring": "GUI Event Handler for ChatMate Agent Control Panel\n- Control Config Flags (Headless, Reverse Order, Archive)\n- Start/Stop the Agent Dispatcher\n- Display logs or status updates",
                    "base_classes": [
                        "QMainWindow"
                    ]
                },
                "QtWidgets": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": []
                },
                "QtCore": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": []
                },
                "QApplication": {
                    "methods": [
                        "__init__",
                        "exec_"
                    ],
                    "docstring": null,
                    "base_classes": []
                },
                "QMainWindow": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": null,
                    "base_classes": []
                },
                "QPushButton": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": null,
                    "base_classes": []
                },
                "QLabel": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": null,
                    "base_classes": []
                },
                "QCheckBox": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": null,
                    "base_classes": []
                },
                "QTextEdit": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 31
        },
        "src\\dreamos\\chat_engine\\driver_manager.py": {
            "language": ".py",
            "functions": [
                "setup_logger",
                "example_main",
                "get_instance",
                "__init__",
                "__enter__",
                "__exit__",
                "_get_cached_driver_path",
                "_download_driver_if_needed",
                "_is_session_expired",
                "_renew_driver_session",
                "get_session_info",
                "set_session_timeout",
                "_create_chrome_options",
                "get_driver",
                "_quit_driver_instance",
                "release_driver",
                "save_cookies",
                "load_cookies",
                "clear_cookies",
                "is_logged_in",
                "execute_with_retry",
                "scroll_into_view",
                "scroll_page",
                "scroll_to_bottom_smoothly",
                "update_options",
                "shutdown",
                "_force_kill_browsers",
                "__del__"
            ],
            "classes": {
                "DriverManager": {
                    "methods": [
                        "get_instance",
                        "__init__",
                        "__enter__",
                        "__exit__",
                        "_get_cached_driver_path",
                        "_download_driver_if_needed",
                        "_is_session_expired",
                        "_renew_driver_session",
                        "get_session_info",
                        "set_session_timeout",
                        "_create_chrome_options",
                        "get_driver",
                        "_quit_driver_instance",
                        "release_driver",
                        "save_cookies",
                        "load_cookies",
                        "clear_cookies",
                        "is_logged_in",
                        "execute_with_retry",
                        "scroll_into_view",
                        "scroll_page",
                        "scroll_to_bottom_smoothly",
                        "update_options",
                        "shutdown",
                        "_force_kill_browsers",
                        "__del__"
                    ],
                    "docstring": "Unified DriverManager for Selenium-based browser automation.\n\nFeatures:\n  - Singleton pattern to ensure a single active driver instance per configuration hash\n  - Session management with automatic expiration (default 1 hour) and renewal\n  - Persistent profile support (or temporary profiles in headless mode)\n  - Cookie saving/loading for session persistence\n  - Support for headless mode, mobile emulation, and optional undetected mode\n  - Auto-downloading and caching of the ChromeDriver executable\n  - Robust retry mechanisms for resilient browser operations\n  - Utilities for waiting, scrolling, and option updates",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 54
        },
        "src\\dreamos\\chat_engine\\chat_cycle_controller.py": {
            "language": ".py",
            "functions": [
                "sanitize_filename",
                "__init__",
                "_default_output_callback",
                "append_output",
                "start",
                "process_chat",
                "run_single_chat",
                "_save_prompt_response",
                "_save_run_summary",
                "shutdown",
                "__init__",
                "get"
            ],
            "classes": {
                "ChatCycleController": {
                    "methods": [
                        "__init__",
                        "_default_output_callback",
                        "append_output",
                        "start",
                        "process_chat",
                        "run_single_chat",
                        "_save_prompt_response",
                        "_save_run_summary",
                        "shutdown"
                    ],
                    "docstring": "Master orchestrator for chat scraping, prompt cycles,\nmemory updates, and Discord dispatching.",
                    "base_classes": []
                },
                "Config": {
                    "methods": [
                        "__init__",
                        "get"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 23
        },
        "src\\dreamos\\chat_engine\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\dreamos\\cli\\dream_cli.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\dreamos\\chat_engine\\prompt_execution_service.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "get_prompt",
                "execute_prompt_cycle",
                "execute_prompts_single_chat",
                "execute_prompts_concurrently",
                "_execute_single_prompt_thread",
                "_determine_wait_time",
                "_post_process_jawbone_response",
                "_send_prompt",
                "_fetch_response"
            ],
            "classes": {
                "PromptExecutionService": {
                    "methods": [
                        "__init__",
                        "get_prompt",
                        "execute_prompt_cycle",
                        "execute_prompts_single_chat",
                        "execute_prompts_concurrently",
                        "_execute_single_prompt_thread",
                        "_determine_wait_time",
                        "_post_process_jawbone_response",
                        "_send_prompt",
                        "_fetch_response"
                    ],
                    "docstring": "PromptExecutionService handles sending prompts and retrieving responses.\nIt manages execution cycles for single chats or cycles across multiple prompts.\nNow supports model switching, feedback integration, and parallel execution.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 20
        },
        "src\\dreamos\\cli\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\dreamos\\chat_engine\\feedback_engine_v2.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "save_analysis"
            ],
            "classes": {
                "FeedbackEngineV2": {
                    "methods": [
                        "__init__",
                        "save_analysis"
                    ],
                    "docstring": "FeedbackEngineV2 analyzes failed prompts using an LLM and provides root cause analysis\nand recommended fixes based on archived failure data.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 4
        },
        "src\\dreamos\\cli\\manage_tasks.py": {
            "language": ".py",
            "functions": [
                "_now",
                "cli",
                "claim",
                "update",
                "complete",
                "list_future",
                "list_working",
                "get",
                "add"
            ],
            "classes": {},
            "routes": [],
            "complexity": 9
        },
        "src\\dreamos\\coordination\\dispatchers\\base_dispatcher.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0,
            "agent_role": "potential_agent"
        },
        "src\\dreamos\\coordination\\dispatchers\\dispatchers\\base_dispatcher.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "add_task",
                "run_dispatcher_loop",
                "stop",
                "get_status"
            ],
            "classes": {
                "BaseDispatcher": {
                    "methods": [
                        "__init__",
                        "add_task",
                        "run_dispatcher_loop",
                        "stop",
                        "get_status"
                    ],
                    "docstring": "Base dispatcher that manages a task queue and processes tasks.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 10,
            "agent_role": "potential_agent"
        },
        "src\\dreamos\\cli\\main.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\dreamos\\coordination\\dispatcher.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "__init__",
                "register_handler"
            ],
            "classes": {
                "Event": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": null,
                    "base_classes": []
                },
                "EventDispatcher": {
                    "methods": [
                        "__init__",
                        "register_handler"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 6,
            "agent_role": "potential_agent"
        },
        "src\\dreamos\\config_files\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\dreamos\\cli\\safe_writer_cli.py": {
            "language": ".py",
            "functions": [
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "src\\dreamos\\coordination\\dispatchers\\dispatchers\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\dreamos\\coordination\\agent_bus.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "__init__",
                "__init__",
                "__init__",
                "__init__",
                "__init__",
                "__init__",
                "__init__",
                "__init__",
                "__init__",
                "subscribe",
                "unsubscribe",
                "dispatch_event",
                "_handle_handler_task_completion",
                "__new__",
                "__init__",
                "subscribe",
                "unsubscribe",
                "dispatch_event",
                "register_agent",
                "unregister_agent",
                "get_agent_info",
                "update_agent_status"
            ],
            "classes": {
                "BusError": {
                    "methods": [],
                    "docstring": "Base class for AgentBus related errors.",
                    "base_classes": [
                        "Exception"
                    ]
                },
                "SubscriptionError": {
                    "methods": [],
                    "docstring": "Raised for errors during handler subscription or unsubscription.",
                    "base_classes": [
                        "BusError"
                    ]
                },
                "DispatchError": {
                    "methods": [],
                    "docstring": "Raised for errors during the event dispatch process itself (e.g., invalid event).",
                    "base_classes": [
                        "BusError"
                    ]
                },
                "EventHandlerError": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Raised specifically when an exception occurs within a subscribed event handler.\n\nAttributes:\n    original_exception: The exception caught from the handler.\n    handler: The handler function that caused the error.\n    event: The BaseEvent being processed when the error occurred.",
                    "base_classes": [
                        "DispatchError"
                    ]
                },
                "EventType": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "Enum"
                    ]
                },
                "BaseEvent": {
                    "methods": [],
                    "docstring": "Base class for all events on the AgentBus.",
                    "base_classes": []
                },
                "MemoryEvent": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Specific event type for memory operations.",
                    "base_classes": [
                        "BaseEvent"
                    ]
                },
                "TaskEvent": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Specific event for task lifecycle events.",
                    "base_classes": [
                        "BaseEvent"
                    ]
                },
                "ToolCallEvent": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Specific event for tool calls.",
                    "base_classes": [
                        "BaseEvent"
                    ]
                },
                "ToolResultEvent": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Specific event for tool results.",
                    "base_classes": [
                        "BaseEvent"
                    ]
                },
                "CursorInjectRequestEvent": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Specific event for cursor injection requests.",
                    "base_classes": [
                        "BaseEvent"
                    ]
                },
                "CursorRetrieveRequestEvent": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Specific event for cursor retrieval requests.",
                    "base_classes": [
                        "BaseEvent"
                    ]
                },
                "CursorResultEvent": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Specific event for cursor operation results (success/failure).",
                    "base_classes": [
                        "BaseEvent"
                    ]
                },
                "AgentErrorEvent": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Specific event for agent errors.",
                    "base_classes": [
                        "BaseEvent"
                    ]
                },
                "SimpleEventBus": {
                    "methods": [
                        "__init__",
                        "subscribe",
                        "unsubscribe",
                        "dispatch_event",
                        "_handle_handler_task_completion"
                    ],
                    "docstring": "A basic in-memory publish-subscribe event bus supporting wildcard subscriptions.\n\nNote: This implementation uses a single lock for subscriber modifications,\nmaking subscribe/unsubscribe thread-safe but potentially limiting concurrency\nunder very high subscription churn. Event dispatch calls handlers sequentially\nafter retrieving them under the lock.",
                    "base_classes": []
                },
                "AgentBus": {
                    "methods": [
                        "__new__",
                        "__init__",
                        "subscribe",
                        "unsubscribe",
                        "dispatch_event",
                        "register_agent",
                        "unregister_agent",
                        "get_agent_info",
                        "update_agent_status"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 46,
            "agent_role": "potential_agent"
        },
        "src\\dreamos\\coordination\\governance_utils.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\dreamos\\core\\coordination\\agent_bus.py": {
            "language": ".py",
            "functions": [],
            "classes": {
                "BusError": {
                    "methods": [],
                    "docstring": "Base exception for AgentBus errors.",
                    "base_classes": [
                        "Exception"
                    ]
                },
                "TopicNotFoundError": {
                    "methods": [],
                    "docstring": "Raised when a topic is not found.",
                    "base_classes": [
                        "BusError"
                    ]
                },
                "SubscriberCallbackError": {
                    "methods": [],
                    "docstring": "Raised when a subscriber callback fails.",
                    "base_classes": [
                        "BusError"
                    ]
                },
                "MessageValidationError": {
                    "methods": [],
                    "docstring": "Raised when message validation fails.",
                    "base_classes": [
                        "BusError"
                    ]
                },
                "AgentBus": {
                    "methods": [],
                    "docstring": "An asynchronous event bus for inter-agent and system communication.\n\nHandles event subscription, publishing, and basic error handling.\nUses asyncio for non-blocking operations.\n\nCore Concepts:\n    - Topics: Hierarchical strings (e.g., \"agent.status.online\", \"task.lifecycle.created\").\n    - Events: Pydantic models inheriting from BaseEvent, containing data.\n    - Subscribers: Coroutine functions that handle specific event types on topics.\n    - Wildcards: Supports single-level (#) and multi-level (*) wildcards in topic subscriptions.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 0,
            "agent_role": "potential_agent"
        },
        "src\\dreamos\\coordination\\voting_coordinator.py": {
            "language": ".py",
            "functions": [
                "__init__"
            ],
            "classes": {
                "VotingCoordinator": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Manages voting sessions initiated within the Dream.OS swarm using standard pub/sub.\n\nListens for events on VOTE_INITIATED_TOPIC, collects votes from VOTE_CAST_TOPIC,\ntallies results based on timeout or quorum, and publishes results to VOTE_RESULTS_TOPIC.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 2,
            "agent_role": "potential_agent"
        },
        "src\\dreamos\\coordination\\tasks\\task_utils.py": {
            "language": ".py",
            "functions": [
                "read_tasks",
                "write_tasks",
                "_calculate_task_score",
                "update_task_status"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "src\\dreamos\\core\\awareness\\context_manager.py": {
            "language": ".py",
            "functions": [],
            "classes": {
                "ContextManager": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 0
        },
        "src\\dreamos\\coordination\\project_board_manager.py": {
            "language": ".py",
            "functions": [
                "cli",
                "add",
                "claim",
                "update",
                "complete",
                "list_future",
                "list_working",
                "get",
                "__init__",
                "_resolve_path",
                "_get_lock",
                "_load_file",
                "_read_board_file",
                "load_boards",
                "_load_schema",
                "_validate_task",
                "_atomic_write",
                "_save_file",
                "save_boards",
                "get_task",
                "list_future_tasks",
                "list_working_tasks",
                "_add_history",
                "_find_task_index",
                "add_task",
                "update_task",
                "claim_task",
                "_attempt_claim_rollback",
                "complete_task",
                "delete_task",
                "move_task_to_completed",
                "convert",
                "__enter__",
                "__exit__"
            ],
            "classes": {
                "ProjectBoardManagerError": {
                    "methods": [],
                    "docstring": "Custom exception for ProjectBoardManager errors.",
                    "base_classes": [
                        "Exception"
                    ]
                },
                "TaskNotFoundError": {
                    "methods": [],
                    "docstring": "Raised when a task ID is not found on the expected board.",
                    "base_classes": [
                        "ProjectBoardManagerError"
                    ]
                },
                "TaskValidationError": {
                    "methods": [],
                    "docstring": "Raised when task data fails validation.",
                    "base_classes": [
                        "ProjectBoardManagerError"
                    ]
                },
                "BoardLockError": {
                    "methods": [],
                    "docstring": "Raised when a file lock cannot be acquired.",
                    "base_classes": [
                        "ProjectBoardManagerError"
                    ]
                },
                "ProjectBoardManager": {
                    "methods": [
                        "__init__",
                        "_resolve_path",
                        "_get_lock",
                        "_load_file",
                        "_read_board_file",
                        "load_boards",
                        "_load_schema",
                        "_validate_task",
                        "_atomic_write",
                        "_save_file",
                        "save_boards",
                        "get_task",
                        "list_future_tasks",
                        "list_working_tasks",
                        "_add_history",
                        "_find_task_index",
                        "add_task",
                        "update_task",
                        "claim_task",
                        "_attempt_claim_rollback",
                        "complete_task",
                        "delete_task",
                        "move_task_to_completed"
                    ],
                    "docstring": "Manages loading, saving, and modifying tasks on JSON-based project boards.\nEnsures safe concurrent access via file locking.\n\nCore Task Manipulation Methods:\n    - add_task: Adds a new task to future or working board.\n    - claim_task: Atomically moves a task from future to working board.\n    - update_task: Updates fields of a task on the working board.\n    - delete_task: Deletes a task from the future or working board.\n    - complete_task: Helper method to update a task's status to COMPLETED.\n    - get_task: Retrieves a single task by ID from any board.\n    - list_future_tasks: Lists tasks on the future board, with optional filtering.\n    - list_working_tasks: Lists tasks on the working board, with optional filtering.\n\nInternal helpers manage file I/O (_load_file, _save_file, _atomic_write),\nlocking (_get_lock), schema validation (_load_schema, _validate_task), \nand state management.",
                    "base_classes": []
                },
                "JsonParamType": {
                    "methods": [
                        "convert"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "click.ParamType"
                    ]
                },
                "_dummy_lock": {
                    "methods": [
                        "__enter__",
                        "__exit__"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 60
        },
        "src\\dreamos\\coordination\\tasks\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\dreamos\\core\\config.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\dreamos\\core\\coordination\\events.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\dreamos\\core\\comms\\mailbox.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_get_target_inbox",
                "send",
                "get_messages",
                "archive_message"
            ],
            "classes": {
                "MailboxError": {
                    "methods": [],
                    "docstring": "Custom exception for mailbox operations.",
                    "base_classes": [
                        "Exception"
                    ]
                },
                "MailboxHandler": {
                    "methods": [
                        "__init__",
                        "_get_target_inbox",
                        "send",
                        "get_messages",
                        "archive_message"
                    ],
                    "docstring": "Handles file-based mailbox operations for an agent using standardized JSON format.\nProvides methods to send messages/tasks to other agents' inboxes\nand potentially manage the agent's own inbox/archive.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 10
        },
        "src\\dreamos\\core\\agents\\capabilities\\schema.py": {
            "language": ".py",
            "functions": [
                "to_dict",
                "to_dict",
                "to_dict",
                "to_dict",
                "to_dict",
                "from_dict"
            ],
            "classes": {
                "CapabilitySchema": {
                    "methods": [
                        "to_dict"
                    ],
                    "docstring": "Defines the expected input, output, and error data structures for a capability.",
                    "base_classes": []
                },
                "CapabilityMetadata": {
                    "methods": [
                        "to_dict"
                    ],
                    "docstring": "Metadata associated with a capability.",
                    "base_classes": []
                },
                "CapabilityPerformance": {
                    "methods": [
                        "to_dict"
                    ],
                    "docstring": "Estimated or measured performance characteristics.",
                    "base_classes": []
                },
                "CapabilityResourceRequirements": {
                    "methods": [
                        "to_dict"
                    ],
                    "docstring": "Estimated resource needs for executing the capability.",
                    "base_classes": []
                },
                "AgentCapability": {
                    "methods": [
                        "to_dict",
                        "from_dict"
                    ],
                    "docstring": "Represents a single capability offered by an agent, registered in the central registry.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 12
        },
        "src\\dreamos\\core\\coordination\\event_payloads.py": {
            "language": ".py",
            "functions": [],
            "classes": {
                "SystemAgentErrorPayload": {
                    "methods": [],
                    "docstring": "Payload for SYSTEM_ERROR events.",
                    "base_classes": []
                },
                "AgentStatusChangePayload": {
                    "methods": [],
                    "docstring": "Payload for SYSTEM_AGENT_STATUS_CHANGE events.",
                    "base_classes": []
                },
                "AgentRegistrationPayload": {
                    "methods": [],
                    "docstring": "Payload for SYSTEM_AGENT_REGISTERED / UNREGISTERED events.",
                    "base_classes": []
                },
                "TaskEventPayload": {
                    "methods": [],
                    "docstring": "Standard payload for Task Lifecycle events (TASK_*).",
                    "base_classes": []
                },
                "TaskProgressPayload": {
                    "methods": [],
                    "docstring": "Payload for TASK_PROGRESS events.",
                    "base_classes": [
                        "TaskEventPayload"
                    ]
                },
                "TaskCompletionPayload": {
                    "methods": [],
                    "docstring": "Payload for TASK_COMPLETED events.",
                    "base_classes": [
                        "TaskEventPayload"
                    ]
                },
                "TaskFailurePayload": {
                    "methods": [],
                    "docstring": "Payload for TASK_FAILED events.",
                    "base_classes": [
                        "TaskEventPayload"
                    ]
                },
                "ToolCallPayload": {
                    "methods": [],
                    "docstring": "Payload for TOOL_CALL events.",
                    "base_classes": []
                },
                "ToolResultPayload": {
                    "methods": [],
                    "docstring": "Payload for TOOL_RESULT events.",
                    "base_classes": []
                },
                "MemoryEventData": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": []
                },
                "CursorInjectRequestPayload": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": []
                },
                "CursorRetrieveRequestPayload": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": []
                },
                "CursorResultPayload": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": []
                },
                "AgentErrorPayload": {
                    "methods": [],
                    "docstring": "Payload for AGENT_ERROR event.",
                    "base_classes": []
                },
                "AgentContractStatusPayload": {
                    "methods": [],
                    "docstring": "Payload for AGENT_CONTRACT_STATUS event (response to query).",
                    "base_classes": []
                },
                "RouteInjectPayload": {
                    "methods": [],
                    "docstring": "Payload for ROUTE_INJECTION_REQUEST event.",
                    "base_classes": []
                },
                "CursorEventPayload": {
                    "methods": [],
                    "docstring": "Standard payload for Cursor Interaction events (CURSOR_*).",
                    "base_classes": []
                },
                "ScrapedDataPayload": {
                    "methods": [],
                    "docstring": "Payload for CHATGPT_RESPONSE_SCRAPED event.",
                    "base_classes": []
                },
                "AgentStatusPayload": {
                    "methods": [],
                    "docstring": "Payload for AGENT_STATUS_UPDATE, AGENT_STARTED, AGENT_STOPPED, AGENT_BLOCKED, AGENT_UNBLOCKED events.",
                    "base_classes": []
                },
                "ApprovalRequestPayload": {
                    "methods": [],
                    "docstring": "Payload for SUPERVISOR_APPROVAL_REQUESTED event.",
                    "base_classes": []
                },
                "ApprovalResponsePayload": {
                    "methods": [],
                    "docstring": "Payload for SUPERVISOR_APPROVAL_RESPONSE event.",
                    "base_classes": []
                },
                "SupervisorAlertPayload": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": []
                },
                "TaskValidationFailedPayload": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "TaskEventPayload"
                    ]
                },
                "CapabilityRegisteredPayload": {
                    "methods": [],
                    "docstring": "Payload for SYSTEM_CAPABILITY_REGISTERED event.",
                    "base_classes": []
                },
                "CapabilityUnregisteredPayload": {
                    "methods": [],
                    "docstring": "Payload for SYSTEM_CAPABILITY_UNREGISTERED event.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 0
        },
        "src\\dreamos\\core\\errors.py": {
            "language": ".py",
            "functions": [],
            "classes": {
                "DreamOSError": {
                    "methods": [],
                    "docstring": "Base class for all Dream.OS specific exceptions.",
                    "base_classes": [
                        "Exception"
                    ]
                },
                "ConfigurationError": {
                    "methods": [],
                    "docstring": "Errors related to configuration loading or validation.",
                    "base_classes": [
                        "DreamOSError"
                    ]
                },
                "ToolError": {
                    "methods": [],
                    "docstring": "Errors related to external tool execution or interaction.",
                    "base_classes": [
                        "DreamOSError"
                    ]
                },
                "CommunicationError": {
                    "methods": [],
                    "docstring": "Errors related to inter-agent communication (Mailbox, AgentBus).",
                    "base_classes": [
                        "DreamOSError"
                    ]
                },
                "MemoryError": {
                    "methods": [],
                    "docstring": "Errors related to memory component operations.",
                    "base_classes": [
                        "DreamOSError"
                    ]
                },
                "TaskBoardError": {
                    "methods": [],
                    "docstring": "Errors related to task board operations (distinct from PBM implementation errors).",
                    "base_classes": [
                        "DreamOSError"
                    ]
                },
                "LockError": {
                    "methods": [],
                    "docstring": "Base class for file locking related errors.",
                    "base_classes": [
                        "DreamOSError"
                    ]
                },
                "LockTimeoutError": {
                    "methods": [],
                    "docstring": "Error raised when acquiring a lock times out.",
                    "base_classes": [
                        "LockError"
                    ]
                },
                "ValidationError": {
                    "methods": [],
                    "docstring": "Errors related to data validation.",
                    "base_classes": [
                        "DreamOSError"
                    ]
                },
                "ProjectBoardError": {
                    "methods": [],
                    "docstring": "Errors related to ProjectBoardManager operations.",
                    "base_classes": [
                        "DreamOSError"
                    ]
                },
                "CursorOrchestratorError": {
                    "methods": [],
                    "docstring": "Errors specifically from the Cursor Orchestrator.",
                    "base_classes": [
                        "DreamOSError"
                    ]
                },
                "CoordinateError": {
                    "methods": [],
                    "docstring": "Errors related to coordinate parsing or retrieval.",
                    "base_classes": [
                        "DreamOSError"
                    ]
                },
                "ArchivingError": {
                    "methods": [],
                    "docstring": "Errors related to archiving files or data.",
                    "base_classes": [
                        "DreamOSError"
                    ]
                }
            },
            "routes": [],
            "complexity": 0
        },
        "src\\dreamos\\core\\bots\\orchestrator_bot.py": {
            "language": ".py",
            "functions": [
                "handle_message",
                "on_created"
            ],
            "classes": {
                "NewMsgHandler": {
                    "methods": [
                        "on_created"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "FileSystemEventHandler"
                    ]
                }
            },
            "routes": [],
            "complexity": 3
        },
        "src\\dreamos\\core\\coordination\\base_agent.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_find_project_root",
                "register_command_handler",
                "_get_priority_value",
                "_setup_logger",
                "get_status",
                "get_capabilities"
            ],
            "classes": {
                "BaseAgent": {
                    "methods": [
                        "__init__",
                        "_find_project_root",
                        "register_command_handler",
                        "_get_priority_value",
                        "_setup_logger",
                        "get_status",
                        "get_capabilities"
                    ],
                    "docstring": "Base class for all Dream.OS agents providing common functionality.",
                    "base_classes": [
                        "ABC"
                    ]
                }
            },
            "routes": [],
            "complexity": 14,
            "agent_role": "potential_agent"
        },
        "src\\dreamos\\core\\feedback\\thea_feedback_ingestor.py": {
            "language": ".py",
            "functions": [
                "load_recent_feedback",
                "inject_feedback_to_thea"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "src\\dreamos\\core\\coordination\\message_patterns.py": {
            "language": ".py",
            "functions": [
                "create_task_message",
                "update_task_status",
                "to_dict",
                "from_dict"
            ],
            "classes": {
                "TaskStatus": {
                    "methods": [],
                    "docstring": "Task execution status.",
                    "base_classes": [
                        "Enum"
                    ]
                },
                "TaskPriority": {
                    "methods": [],
                    "docstring": "Task priority levels.",
                    "base_classes": [
                        "Enum"
                    ]
                },
                "TaskMessage": {
                    "methods": [
                        "to_dict",
                        "from_dict"
                    ],
                    "docstring": "Standard task message format, used as the 'data' field in AgentBus messages.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 6
        },
        "src\\dreamos\\core\\coordination\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\dreamos\\core\\health_checks\\cursor_window_check.py": {
            "language": ".py",
            "functions": [
                "_load_coordinates",
                "check_cursor_window_reachability"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "src\\dreamos\\core\\health_checks\\cursor_status_check.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\dreamos\\core\\coordination\\event_types.py": {
            "language": ".py",
            "functions": [
                "__str__"
            ],
            "classes": {
                "EventType": {
                    "methods": [
                        "__str__"
                    ],
                    "docstring": "Enumeration of standardized event types for AgentBus communication.\n\nUses hierarchical dot notation for topic structure:\ne.g., scope.domain.resource.action[.status]",
                    "base_classes": [
                        "Enum"
                    ]
                }
            },
            "routes": [],
            "complexity": 2
        },
        "src\\dreamos\\core\\coordination\\schemas\\voting_patterns.py": {
            "language": ".py",
            "functions": [
                "validate_vote_message"
            ],
            "classes": {
                "VoteQuestion": {
                    "methods": [],
                    "docstring": "Structure for a single question within a vote.",
                    "base_classes": [
                        "TypedDict"
                    ]
                },
                "VoteInitiated": {
                    "methods": [],
                    "docstring": "Message schema published to initiate an agent vote.",
                    "base_classes": [
                        "TypedDict"
                    ]
                },
                "AgentVote": {
                    "methods": [],
                    "docstring": "Message schema published by an agent casting its vote.",
                    "base_classes": [
                        "TypedDict"
                    ]
                },
                "VoteResultsSummary": {
                    "methods": [],
                    "docstring": "Structure holding the tallied results for a vote (adapt structure as needed).",
                    "base_classes": [
                        "TypedDict"
                    ]
                },
                "VoteResults": {
                    "methods": [],
                    "docstring": "Message schema published by the coordinator with the outcome of a vote.",
                    "base_classes": [
                        "TypedDict"
                    ]
                }
            },
            "routes": [],
            "complexity": 1
        },
        "src\\dreamos\\core\\identity\\agent_identity.py": {
            "language": ".py",
            "functions": [
                "ensure_datetime_obj",
                "update"
            ],
            "classes": {
                "AgentIdentity": {
                    "methods": [
                        "ensure_datetime_obj",
                        "update"
                    ],
                    "docstring": "Represents the persistent identity and metadata of an agent.",
                    "base_classes": [
                        "BaseModel"
                    ]
                },
                "Config": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 4,
            "agent_role": "potential_agent"
        },
        "src\\dreamos\\core\\identity\\agent_identity_manager.py": {
            "language": ".py",
            "functions": [
                "get_agent_identity_manager",
                "__new__",
                "__init__",
                "register_agent",
                "update_agent",
                "get_identity",
                "get_all_identities",
                "delete_agent"
            ],
            "classes": {
                "AgentIdentityError": {
                    "methods": [],
                    "docstring": "Custom exception for Agent Identity Manager errors.",
                    "base_classes": [
                        "Exception"
                    ]
                },
                "AgentIdentityManager": {
                    "methods": [
                        "__new__",
                        "__init__",
                        "register_agent",
                        "update_agent",
                        "get_identity",
                        "get_all_identities",
                        "delete_agent"
                    ],
                    "docstring": "Manages agent identities, including registration and updates.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 15,
            "agent_role": "potential_agent"
        },
        "src\\dreamos\\core\\tasks\\nexus\\capability_registry.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_get_file_lock",
                "_load_registry",
                "_save_registry",
                "_dispatch_registry_event",
                "register_capability",
                "unregister_capability",
                "get_capability",
                "get_agent_capabilities",
                "find_capabilities",
                "find_agents_for_capability",
                "update_capability_status"
            ],
            "classes": {
                "CapabilityRegistry": {
                    "methods": [
                        "__init__",
                        "_get_file_lock",
                        "_load_registry",
                        "_save_registry",
                        "_dispatch_registry_event",
                        "register_capability",
                        "unregister_capability",
                        "get_capability",
                        "get_agent_capabilities",
                        "find_capabilities",
                        "find_agents_for_capability",
                        "update_capability_status"
                    ],
                    "docstring": "Manages the registration, querying, and persistence of agent capabilities.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 24
        },
        "src\\dreamos\\core\\utils\\file_locking.py": {
            "language": ".py",
            "functions": [],
            "classes": {
                "LockAcquisitionError": {
                    "methods": [],
                    "docstring": "Raised when a file lock cannot be acquired within the specified timeout.",
                    "base_classes": [
                        "DreamOSError"
                    ]
                },
                "LockDirectoryError": {
                    "methods": [],
                    "docstring": "Raised when the directory for the lock file cannot be created or accessed.",
                    "base_classes": [
                        "DreamOSError"
                    ]
                }
            },
            "routes": [],
            "complexity": 0
        },
        "src\\dreamos\\core\\tools\\script_runner.py": {
            "language": ".py",
            "functions": [
                "run_script",
                "__init__",
                "_resolve_script_path",
                "_run_script"
            ],
            "classes": {
                "ScriptExecutionError": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Custom exception for script execution failures.",
                    "base_classes": [
                        "Exception"
                    ]
                },
                "ScriptRunner": {
                    "methods": [
                        "_resolve_script_path",
                        "_run_script"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 7
        },
        "src\\dreamos\\core\\tasks\\nexus\\task_nexus.py": {
            "language": ".py",
            "functions": [
                "__init__"
            ],
            "classes": {
                "TaskNexus": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 2
        },
        "src\\dreamos\\core\\logging\\swarm_logger.py": {
            "language": ".py",
            "functions": [
                "_get_log_path",
                "log_agent_event"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "src\\dreamos\\core\\identity\\agent_identity_store.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_ensure_store_exists",
                "_load_data",
                "_save_data",
                "save",
                "load",
                "get_all",
                "delete"
            ],
            "classes": {
                "AgentIdentityStore": {
                    "methods": [
                        "__init__",
                        "_ensure_store_exists",
                        "_load_data",
                        "_save_data",
                        "save",
                        "load",
                        "get_all",
                        "delete"
                    ],
                    "docstring": "Handles persistence of AgentIdentity objects to a JSON file.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 16,
            "agent_role": "potential_agent"
        },
        "src\\dreamos\\core\\utils\\safe_file_writer.py": {
            "language": ".py",
            "functions": [
                "safe_write_file"
            ],
            "classes": {
                "SafeWriteError": {
                    "methods": [],
                    "docstring": "Custom exception for errors during safe file writing.",
                    "base_classes": [
                        "IOError"
                    ]
                }
            },
            "routes": [],
            "complexity": 1
        },
        "src\\dreamos\\core\\validation_utils.py": {
            "language": ".py",
            "functions": [
                "validate_required_fields",
                "validate_field_type",
                "validate_payload"
            ],
            "classes": {
                "ValidationError": {
                    "methods": [],
                    "docstring": "Custom exception raised when data validation fails.",
                    "base_classes": [
                        "CoreValidationError"
                    ]
                }
            },
            "routes": [],
            "complexity": 3
        },
        "src\\dreamos\\core\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\dreamos\\core\\utils\\onboarding_utils.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\dreamos\\hooks\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\dreamos\\gui\\supervisor_alert_viewer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "load_alerts"
            ],
            "classes": {
                "AlertViewerWindow": {
                    "methods": [
                        "__init__",
                        "load_alerts"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "QMainWindow"
                    ]
                }
            },
            "routes": [],
            "complexity": 4
        },
        "src\\dreamos\\dashboard\\dashboard_app.py": {
            "language": ".py",
            "functions": [
                "read_task_board",
                "index"
            ],
            "classes": {},
            "routes": [
                {
                    "function": "index",
                    "method": "ROUTE",
                    "path": "/"
                }
            ],
            "complexity": 2
        },
        "src\\dreamos\\dashboard\\dashboard_ui.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "refresh",
                "_inject_task",
                "_refresh_health_summary",
                "_update_chronicle_viewer"
            ],
            "classes": {
                "Dashboard": {
                    "methods": [
                        "__init__",
                        "refresh",
                        "_inject_task",
                        "_refresh_health_summary",
                        "_update_chronicle_viewer"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "QMainWindow"
                    ]
                }
            },
            "routes": [],
            "complexity": 10
        },
        "src\\dreamos\\gui\\main_window.py": {
            "language": ".py",
            "functions": [
                "add_task",
                "__init__",
                "_run_async_bootstrap",
                "_create_navigation",
                "add_navigation_item",
                "get_sidebar_items",
                "log_event",
                "notify_mailbox",
                "sync_event_with_board",
                "save_state",
                "_append_task_to_list",
                "load_state_fallback",
                "closeEvent",
                "cleanup_resources",
                "_save_state",
                "_load_state",
                "_update_agents_list",
                "_update_escalated_agents_list",
                "_subscribe_prompt_event"
            ],
            "classes": {
                "DummyTaskManager": {
                    "methods": [
                        "add_task"
                    ],
                    "docstring": null,
                    "base_classes": []
                },
                "TaskManager": {
                    "methods": [],
                    "docstring": "Alias for DummyTaskManager for testing compatibility.",
                    "base_classes": [
                        "DummyTaskManager"
                    ]
                },
                "FeedbackEngine": {
                    "methods": [],
                    "docstring": "Placeholder for feedback engine in tests.",
                    "base_classes": []
                },
                "DreamOSTabManager": {
                    "methods": [],
                    "docstring": "Placeholder for tab manager in tests.",
                    "base_classes": [
                        "QTabWidget"
                    ]
                },
                "TabSystemShutdownManager": {
                    "methods": [],
                    "docstring": "Placeholder for tab system shutdown in tests.",
                    "base_classes": []
                },
                "DreamOSMainWindow": {
                    "methods": [
                        "__init__",
                        "_run_async_bootstrap",
                        "_create_navigation",
                        "add_navigation_item",
                        "get_sidebar_items",
                        "log_event",
                        "notify_mailbox",
                        "sync_event_with_board",
                        "save_state",
                        "_append_task_to_list",
                        "load_state_fallback",
                        "closeEvent",
                        "cleanup_resources",
                        "_save_state",
                        "_load_state",
                        "_update_agents_list",
                        "_update_escalated_agents_list"
                    ],
                    "docstring": "Main application window for Dream.OS using Sidebar Navigation.",
                    "base_classes": [
                        "QMainWindow"
                    ]
                }
            },
            "routes": [],
            "complexity": 37
        },
        "src\\dreamos\\hooks\\chatgpt_responder.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "get_response",
                "respond_to_mailbox"
            ],
            "classes": {
                "ChatGPTResponder": {
                    "methods": [
                        "__init__",
                        "get_response",
                        "respond_to_mailbox"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 6
        },
        "src\\dreamos\\hooks\\stats_logger.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "log_snapshot"
            ],
            "classes": {
                "StatsLoggingHook": {
                    "methods": [
                        "__init__",
                        "log_snapshot"
                    ],
                    "docstring": "Logs periodic snapshots of TaskNexus stats to a JSON file.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 4
        },
        "src\\dreamos\\hooks\\chronicle_logger.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_format_entry",
                "_handle_event",
                "stop",
                "start"
            ],
            "classes": {
                "ChronicleLoggerHook": {
                    "methods": [
                        "__init__",
                        "_format_entry",
                        "_handle_event",
                        "stop",
                        "start"
                    ],
                    "docstring": "Listens to AgentBus events and logs them to the Dreamscape Chronicle.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 10
        },
        "src\\dreamos\\hooks\\conversation_logger.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_get_db_connection",
                "_setup_database",
                "register_event_handlers",
                "_log_turn",
                "_handle_agent_prompt_request",
                "_handle_agent_prompt_response",
                "close"
            ],
            "classes": {
                "ConversationLogger": {
                    "methods": [
                        "__init__",
                        "_get_db_connection",
                        "_setup_database",
                        "register_event_handlers",
                        "_log_turn",
                        "_handle_agent_prompt_request",
                        "_handle_agent_prompt_response",
                        "close"
                    ],
                    "docstring": "Logs conversation turns (prompts/replies) to an SQLite database via AgentBus events.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 16
        },
        "src\\dreamos\\identity\\models.py": {
            "language": ".py",
            "functions": [
                "default_timestamp",
                "update_last_seen",
                "to_dict",
                "from_dict"
            ],
            "classes": {
                "AgentIdentity": {
                    "methods": [
                        "update_last_seen",
                        "to_dict",
                        "from_dict"
                    ],
                    "docstring": "Represents the static and dynamic identity attributes of an agent.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 7
        },
        "src\\dreamos\\integrations\\azure_blob_client.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "is_functional"
            ],
            "classes": {
                "AzureBlobClient": {
                    "methods": [
                        "__init__",
                        "is_functional"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 4
        },
        "src\\dreamos\\identity\\store.py": {
            "language": ".py",
            "functions": [
                "get_identity_store",
                "__new__",
                "__init__",
                "_ensure_store_exists",
                "load_identities",
                "save_identities",
                "register_agent",
                "get_identity",
                "list_agents",
                "get_agent_ids"
            ],
            "classes": {
                "AgentIdentityStore": {
                    "methods": [
                        "__new__",
                        "__init__",
                        "_ensure_store_exists",
                        "load_identities",
                        "save_identities",
                        "register_agent",
                        "get_identity",
                        "list_agents",
                        "get_agent_ids"
                    ],
                    "docstring": "Manages the persistence and retrieval of AgentIdentity objects.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 19
        },
        "src\\dreamos\\integrations\\browser_client.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "is_functional"
            ],
            "classes": {
                "BrowserClient": {
                    "methods": [
                        "__init__",
                        "is_functional"
                    ],
                    "docstring": "Asynchronous client for browser automation using Playwright.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 4
        },
        "src\\dreamos\\integrations\\cursor\\coordination\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\dreamos\\integrations\\agent_services\\cursor_shadow_controller.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "send_prompt_to_cursor",
                "monitor_output",
                "run_prompt_cycle"
            ],
            "classes": {
                "CursorShadowController": {
                    "methods": [
                        "__init__",
                        "send_prompt_to_cursor",
                        "monitor_output",
                        "run_prompt_cycle"
                    ],
                    "docstring": "Shadow controller that allows background execution of prompts in Cursor\nwithout requiring visible GUI interaction, using a file-based inbox/outbox.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 8
        },
        "src\\dreamos\\memory\\compaction_utils.py": {
            "language": ".py",
            "functions": [
                "compact_segment_data",
                "_rewrite_memory_safely",
                "compact_segment_file",
                "dt_serializer"
            ],
            "classes": {
                "CompactionError": {
                    "methods": [],
                    "docstring": "Exception raised for errors during memory compaction.",
                    "base_classes": [
                        "CoreMemoryError"
                    ]
                }
            },
            "routes": [],
            "complexity": 4
        },
        "src\\dreamos\\integrations\\cursor\\cursor_prompt_controller.py": {
            "language": ".py",
            "functions": [
                "_activate_cursor_window",
                "_focus_chat_input",
                "send_prompt_to_chat"
            ],
            "classes": {
                "CursorPromptController": {
                    "methods": [
                        "_activate_cursor_window",
                        "_focus_chat_input",
                        "send_prompt_to_chat"
                    ],
                    "docstring": "Uses pyautogui to send prompts to the Cursor chat interface.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 6
        },
        "src\\dreamos\\integrations\\cursor\\swarm_bootloader.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_resolve_cursor_path",
                "launch_instances",
                "wait_for_detection",
                "move_windows_to_desktop",
                "setup_swarm",
                "detect_all_instances"
            ],
            "classes": {
                "TheaSwarmBootloader": {
                    "methods": [
                        "__init__",
                        "_resolve_cursor_path",
                        "launch_instances",
                        "wait_for_detection",
                        "move_windows_to_desktop",
                        "setup_swarm"
                    ],
                    "docstring": "Handles launching and preparing a swarm of Cursor instances.",
                    "base_classes": []
                },
                "WindowWrapper": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": []
                },
                "CursorWindowController": {
                    "methods": [
                        "detect_all_instances"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 14
        },
        "src\\dreamos\\integrations\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {
                "IntegrationError": {
                    "methods": [],
                    "docstring": "Base exception for integration client errors.",
                    "base_classes": [
                        "Exception"
                    ]
                },
                "APIError": {
                    "methods": [],
                    "docstring": "Exception for API-specific errors (e.g., 4xx, 5xx).",
                    "base_classes": [
                        "IntegrationError"
                    ]
                }
            },
            "routes": [],
            "complexity": 0
        },
        "src\\dreamos\\integrations\\discord_client.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "is_webhook_functional",
                "is_bot_functional"
            ],
            "classes": {
                "DiscordClient": {
                    "methods": [
                        "__init__",
                        "is_webhook_functional",
                        "is_bot_functional"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 6
        },
        "src\\dreamos\\integrations\\cursor\\utils.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\dreamos\\integrations\\cursor\\window_controller.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_setup_os_specific_handlers",
                "detect_all_instances",
                "activate_window",
                "get_window_by_id",
                "print_window_map",
                "enum_callback",
                "get_window_info"
            ],
            "classes": {
                "WindowWrapper": {
                    "methods": [],
                    "docstring": "Cross-platform window handle wrapper.",
                    "base_classes": []
                },
                "CursorWindowController": {
                    "methods": [
                        "__init__",
                        "_setup_os_specific_handlers",
                        "detect_all_instances",
                        "activate_window",
                        "get_window_by_id",
                        "print_window_map"
                    ],
                    "docstring": "Controls multiple Cursor window instances.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 14
        },
        "src\\dreamos\\integrations\\social\\core\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\dreamos\\memory\\summarization_utils.py": {
            "language": ".py",
            "functions": [
                "summarize_segment_chunk",
                "summarize_segment_file",
                "_build_llm_summary_prompt"
            ],
            "classes": {
                "SummarizationError": {
                    "methods": [],
                    "docstring": "Exception raised for errors during memory summarization.",
                    "base_classes": [
                        "CoreMemoryError"
                    ]
                }
            },
            "routes": [],
            "complexity": 3
        },
        "src\\dreamos\\llm_bridge\\bridge_adapters\\base_adapter.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "name",
                "_validate_config",
                "get_config_value",
                "__init__",
                "__str__"
            ],
            "classes": {
                "BaseAdapter": {
                    "methods": [
                        "__init__",
                        "name",
                        "_validate_config",
                        "get_config_value"
                    ],
                    "docstring": "Abstract Base Class for LLM Bridge Adapters.\n\nDefines the common interface required for interacting with different\nLLM services or models through a unified bridge.",
                    "base_classes": [
                        "ABC"
                    ]
                },
                "AdapterError": {
                    "methods": [
                        "__init__",
                        "__str__"
                    ],
                    "docstring": "Custom exception for errors originating from an adapter.",
                    "base_classes": [
                        "ToolError"
                    ]
                }
            },
            "routes": [],
            "complexity": 12
        },
        "src\\dreamos\\integrations\\openai_client.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "is_functional"
            ],
            "classes": {
                "OpenAIClient": {
                    "methods": [
                        "__init__",
                        "is_functional"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 4
        },
        "src\\dreamos\\memory\\layers\\task_memory_layer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load_memory",
                "_save_memory",
                "record_task_outcome",
                "recall_task"
            ],
            "classes": {
                "TaskMemoryLayer": {
                    "methods": [
                        "__init__",
                        "_load_memory",
                        "_save_memory",
                        "record_task_outcome",
                        "recall_task"
                    ],
                    "docstring": "Manages persistent storage and recall of task outcomes using a JSON file.\nEnsures basic thread safety for updates and auto-saves on modification.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 10
        },
        "src\\dreamos\\memory\\memory_manager.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_ensure_store",
                "load_memory",
                "save_memory",
                "save_fragment",
                "load_fragment",
                "delete_fragment",
                "list_fragment_ids",
                "__init__",
                "_init_schema",
                "record_interaction",
                "initialize_conversation",
                "fetch_conversation",
                "close",
                "__init__",
                "_segment_file",
                "_load_segments",
                "_save_segment",
                "set",
                "get",
                "delete",
                "clear_segment",
                "get_stats",
                "optimize",
                "record_interaction",
                "initialize_conversation",
                "fetch_conversation",
                "export_conversation_finetune",
                "render_narrative",
                "_rewrite_memory_safely",
                "_compact_segment",
                "_check_and_compact",
                "close"
            ],
            "classes": {
                "MemoryManager": {
                    "methods": [
                        "__init__",
                        "_ensure_store",
                        "load_memory",
                        "save_memory",
                        "save_fragment",
                        "load_fragment",
                        "delete_fragment",
                        "list_fragment_ids"
                    ],
                    "docstring": "Lightweight dict-of-dicts persisted to a single JSON file.\nGood for small, human-inspectable fragments.",
                    "base_classes": []
                },
                "DatabaseManager": {
                    "methods": [
                        "__init__",
                        "_init_schema",
                        "record_interaction",
                        "initialize_conversation",
                        "fetch_conversation",
                        "close"
                    ],
                    "docstring": "Thread-safe wrapper around SQLite for long-term interaction storage.",
                    "base_classes": []
                },
                "UnifiedMemoryManager": {
                    "methods": [
                        "__init__",
                        "_segment_file",
                        "_load_segments",
                        "_save_segment",
                        "set",
                        "get",
                        "delete",
                        "clear_segment",
                        "get_stats",
                        "optimize",
                        "record_interaction",
                        "initialize_conversation",
                        "fetch_conversation",
                        "export_conversation_finetune",
                        "render_narrative",
                        "_rewrite_memory_safely",
                        "_compact_segment",
                        "_check_and_compact",
                        "close"
                    ],
                    "docstring": "\u2022 LRU + compressed JSON per segment (system / prompts / feedback / context / interactions)\n\u2022 SQLite long-term store\n\u2022 Jinja2 narrative helpers",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 66
        },
        "src\\dreamos\\memory\\summarizer.py": {
            "language": ".py",
            "functions": [
                "_generate_placeholder_summary",
                "summarize_memory_file"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "src\\dreamos\\memory\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\dreamos\\monitoring\\performance_logger.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "track_operation",
                "log_outcome",
                "_log_entry"
            ],
            "classes": {
                "PerformanceLogger": {
                    "methods": [
                        "__init__",
                        "track_operation",
                        "log_outcome",
                        "_log_entry"
                    ],
                    "docstring": "Logs performance metrics for agent operations and tasks.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 8
        },
        "src\\dreamos\\reporting\\scoring_analyzer.py": {
            "language": ".py",
            "functions": [
                "load_task_data",
                "calculate_metrics",
                "generate_console_report",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "src\\dreamos\\rendering\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\dreamos\\monitoring\\prompt_execution_monitor.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "start_monitoring",
                "report_success",
                "report_failure",
                "_monitor_loop",
                "recover_and_requeue"
            ],
            "classes": {
                "PromptExecutionMonitor": {
                    "methods": [
                        "__init__",
                        "start_monitoring",
                        "report_success",
                        "report_failure",
                        "_monitor_loop",
                        "recover_and_requeue"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 12
        },
        "src\\dreamos\\services\\utils\\content\\post_context_generator.py": {
            "language": ".py",
            "functions": [
                "generate_context_from_governance"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "src\\dreamos\\rendering\\template_engine.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "render"
            ],
            "classes": {
                "TemplateEngine": {
                    "methods": [
                        "__init__",
                        "render"
                    ],
                    "docstring": "Wraps Jinja2 for rendering template strings.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 4
        },
        "src\\dreamos\\schemas\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\dreamos\\services\\event_logger.py": {
            "language": ".py",
            "functions": [
                "log_structured_event"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "src\\dreamos\\services\\utils\\chatgpt_scraper.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "__enter__",
                "__exit__",
                "setup_browser",
                "cleanup",
                "save_cookies",
                "load_cookies",
                "_perform_login",
                "scrape_single_chat",
                "write_json"
            ],
            "classes": {
                "ChatGPTScraper": {
                    "methods": [
                        "__init__",
                        "__enter__",
                        "__exit__",
                        "setup_browser",
                        "cleanup",
                        "save_cookies",
                        "load_cookies",
                        "_perform_login",
                        "scrape_single_chat"
                    ],
                    "docstring": "Manages ChatGPT web scraping operations with session persistence and AgentBus integration.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 20
        },
        "src\\dreamos\\services\\failed_prompt_archive.py": {
            "language": ".py",
            "functions": [
                "load_json_safe",
                "write_json_safe",
                "__init__",
                "log_failure",
                "get_failures",
                "get_by_prompt_id"
            ],
            "classes": {
                "FailedPromptArchiveService": {
                    "methods": [
                        "__init__",
                        "log_failure",
                        "get_failures",
                        "get_by_prompt_id"
                    ],
                    "docstring": "Service to archive failed prompts with full metadata.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 10
        },
        "src\\dreamos\\services\\utils\\devlog_analyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_get_connection",
                "_init_db",
                "track_post",
                "update_metrics",
                "get_best_posting_times",
                "get_top_performing_tags",
                "get_content_insights"
            ],
            "classes": {
                "DevLogAnalyzer": {
                    "methods": [
                        "__init__",
                        "_get_connection",
                        "_init_db",
                        "track_post",
                        "update_metrics",
                        "get_best_posting_times",
                        "get_top_performing_tags",
                        "get_content_insights"
                    ],
                    "docstring": "Analyzes post performance and provides optimization insights.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 16
        },
        "src\\dreamos\\services\\utils\\feedback_processor.py": {
            "language": ".py",
            "functions": [
                "_extract_potential_suggestions",
                "_create_task_message",
                "process_feedback",
                "__init__",
                "log_event",
                "get_utc_iso_timestamp",
                "__init__",
                "send_message"
            ],
            "classes": {
                "FeedbackProcessor": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": null,
                    "base_classes": []
                },
                "DummyMailboxHandler": {
                    "methods": [
                        "__init__",
                        "send_message"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 11
        },
        "src\\dreamos\\services\\utils\\cursor.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "update_context",
                "add_to_history",
                "set_current_file",
                "record_command",
                "get_file_context",
                "clear_history",
                "_save_state",
                "_load_state",
                "__init__",
                "add_message",
                "get_context",
                "clear"
            ],
            "classes": {
                "CursorState": {
                    "methods": [
                        "__init__",
                        "update_context",
                        "add_to_history",
                        "set_current_file",
                        "record_command",
                        "get_file_context",
                        "clear_history",
                        "_save_state",
                        "_load_state"
                    ],
                    "docstring": "Manages cursor state and context for chat interactions.",
                    "base_classes": []
                },
                "ChatContext": {
                    "methods": [
                        "__init__",
                        "add_message",
                        "get_context",
                        "clear"
                    ],
                    "docstring": "Manages chat context and history for conversations.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 26
        },
        "src\\dreamos\\services\\utils\\devlog_generator.py": {
            "language": ".py",
            "functions": [
                "initialize_strategies",
                "main_example",
                "__init__",
                "process_conversation",
                "_process_message",
                "generate_blog_post",
                "generate_social_content",
                "_generate_title",
                "_generate_description",
                "_extract_tags",
                "_detect_language",
                "_extract_metadata",
                "auto_publish"
            ],
            "classes": {
                "ContentBlock": {
                    "methods": [],
                    "docstring": "Represents a block of content from the conversation.",
                    "base_classes": []
                },
                "DevLogPost": {
                    "methods": [],
                    "docstring": "Represents a structured blog post from a conversation.",
                    "base_classes": []
                },
                "DevLogGenerator": {
                    "methods": [
                        "__init__",
                        "process_conversation",
                        "_process_message",
                        "generate_blog_post",
                        "generate_social_content",
                        "_generate_title",
                        "_generate_description",
                        "_extract_tags",
                        "_detect_language",
                        "_extract_metadata",
                        "auto_publish"
                    ],
                    "docstring": "Transforms ChatGPT conversations into various content formats.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 24
        },
        "src\\dreamos\\services\\utils\\devlog_dispatcher.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "on_created",
                "__init__",
                "_initialize_strategies",
                "start",
                "handle_new_blog_post",
                "handle_new_social_content",
                "schedule_post",
                "_generate_post_id",
                "_extract_tags",
                "_get_next_optimal_time",
                "publish_job"
            ],
            "classes": {
                "ContentHandler": {
                    "methods": [
                        "__init__",
                        "on_created"
                    ],
                    "docstring": "Handles file system events for new content.",
                    "base_classes": [
                        "FileSystemEventHandler"
                    ]
                },
                "DevLogDispatcher": {
                    "methods": [
                        "__init__",
                        "_initialize_strategies",
                        "start",
                        "handle_new_blog_post",
                        "handle_new_social_content",
                        "schedule_post",
                        "_generate_post_id",
                        "_extract_tags",
                        "_get_next_optimal_time"
                    ],
                    "docstring": "Autonomous agent that watches for new content and publishes it\nto appropriate platforms using configured strategies.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 24,
            "agent_role": "potential_agent"
        },
        "src\\dreamos\\services\\utils\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\dreamos\\services\\utils\\logging_utils.py": {
            "language": ".py",
            "functions": [
                "log_event",
                "get_logger"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "src\\dreamos\\services\\utils\\selenium_utils.py": {
            "language": ".py",
            "functions": [
                "wait_for_element",
                "safe_click",
                "safe_send_keys",
                "navigate_to"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "src\\dreamos\\social\\exceptions\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\dreamos\\tools\\analysis\\dead_code.py": {
            "language": ".py",
            "functions": [
                "find_dead_code"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "src\\dreamos\\social\\utils\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\dreamos\\tools\\analysis\\project_scanner\\concurrency.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "run",
                "__init__",
                "start_workers",
                "add_task",
                "wait_for_completion",
                "stop_workers",
                "get_results"
            ],
            "classes": {
                "BotWorker": {
                    "methods": [
                        "__init__",
                        "run"
                    ],
                    "docstring": "A background worker that pulls file tasks from a queue,\nprocesses them, and appends results to results_list.",
                    "base_classes": [
                        "threading.Thread"
                    ]
                },
                "MultibotManager": {
                    "methods": [
                        "__init__",
                        "start_workers",
                        "add_task",
                        "wait_for_completion",
                        "stop_workers",
                        "get_results"
                    ],
                    "docstring": "Manages a pool of BotWorker threads.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 16
        },
        "src\\dreamos\\services\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\dreamos\\tools\\analysis\\project_scanner\\analyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_init_tree_sitter_language",
                "analyze_file",
                "_analyze_python",
                "_analyze_rust",
                "_analyze_javascript",
                "_traverse",
                "get_node_text",
                "_traverse"
            ],
            "classes": {
                "LanguageAnalyzer": {
                    "methods": [
                        "__init__",
                        "_init_tree_sitter_language",
                        "analyze_file",
                        "_analyze_python",
                        "_analyze_rust",
                        "_analyze_javascript"
                    ],
                    "docstring": "Handles language-specific code analysis for different programming languages.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 15
        },
        "src\\dreamos\\social\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\dreamos\\supervisor_tools\\command_supervisor.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "start",
                "stop",
                "_run"
            ],
            "classes": {
                "SupervisorEvent": {
                    "methods": [],
                    "docstring": "Represents an event structure specifically for the CommandSupervisor context.",
                    "base_classes": []
                },
                "ApprovalStatus": {
                    "methods": [],
                    "docstring": "Represents the possible states of a command approval request.",
                    "base_classes": [
                        "Enum"
                    ]
                },
                "CommandSupervisor": {
                    "methods": [
                        "__init__",
                        "start",
                        "stop",
                        "_run"
                    ],
                    "docstring": "Singleton class to manage potentially risky command execution requests.\n\nThis supervisor acts as a central gatekeeper for shell commands requested by\nvarious agents. It enforces a human-in-the-loop approval process before\nallowing any command execution, enhancing system safety.\n\nWorkflow:\n1. An agent publishes a `COMMAND_EXECUTION_REQUEST` event via AgentBus.\n2. `CommandSupervisor` receives the request (`handle_command_request`).\n3. It assigns a unique ID and publishes a `COMMAND_APPROVAL_REQUEST` event.\n4. A separate component (e.g., a UI Agent, a manual reviewer) observes the\n   approval request and publishes a `COMMAND_APPROVAL_RESPONSE` event.\n5. `CommandSupervisor` receives the response (`handle_approval_response`).\n6. If approved, it executes the command (`execute_command`) using asyncio\n   subprocesses.\n7. If rejected or upon completion/error, it publishes a\n   `COMMAND_EXECUTION_RESULT` event back to the original requesting agent.\n\nAttributes:\n    agent_bus (AgentBus): The shared AgentBus instance for communication.\n    pending_approvals (Dict[str, SupervisorEvent]): Stores requests awaiting approval.\n    approval_status (Dict[str, ApprovalStatus]): Tracks the status of each request.",
                    "base_classes": [
                        "Singleton"
                    ]
                }
            },
            "routes": [],
            "complexity": 8
        },
        "src\\dreamos\\tools\\analysis\\project_scanner\\file_processor.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "hash_file",
                "should_exclude",
                "process_file"
            ],
            "classes": {
                "FileProcessor": {
                    "methods": [
                        "__init__",
                        "hash_file",
                        "should_exclude",
                        "process_file"
                    ],
                    "docstring": "Handles file hashing, ignoring, caching checks, etc.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 8
        },
        "src\\dreamos\\tools\\analysis\\project_scanner\\report_generator.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "load_existing_report",
                "save_report",
                "generate_init_files",
                "load_existing_chatgpt_context",
                "export_chatgpt_context",
                "categorize_agents",
                "_maturity_level",
                "_agent_type"
            ],
            "classes": {
                "ReportGenerator": {
                    "methods": [
                        "__init__",
                        "load_existing_report",
                        "save_report",
                        "generate_init_files",
                        "load_existing_chatgpt_context",
                        "export_chatgpt_context",
                        "categorize_agents",
                        "_maturity_level",
                        "_agent_type"
                    ],
                    "docstring": "Handles merging new analysis into existing reports and context files.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 18
        },
        "src\\dreamos\\tools\\calibration\\recalibrate_coords.py": {
            "language": ".py",
            "functions": [
                "capture_single_coordinate",
                "update_coords_file",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "src\\dreamos\\tools\\discovery\\archive_defunct_tests.py": {
            "language": ".py",
            "functions": [
                "archive_defunct_tests"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "src\\dreamos\\tools\\analysis\\project_scanner\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\dreamos\\tools\\coordination\\broadcast_directive.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\dreamos\\tools\\discovery\\find_defunct_tests.py": {
            "language": ".py",
            "functions": [
                "find_python_files",
                "map_test_to_source",
                "find_defunct_tests"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "src\\dreamos\\tools\\discovery\\find_todos.py": {
            "language": ".py",
            "functions": [
                "find_todos_in_file",
                "write_log_entry",
                "scan_directory",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "src\\dreamos\\tools\\dreamos_utils\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\dreamos\\tools\\dreamos_utils\\archive_agent_mailboxes.py": {
            "language": ".py",
            "functions": [
                "archive_mailbox",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2,
            "agent_role": "potential_agent"
        },
        "src\\dreamos\\tools\\functional\\gui_interaction.py": {
            "language": ".py",
            "functions": [
                "find_and_activate_cursor_window",
                "type_prompt_and_send",
                "copy_cursor_response",
                "interact_with_cursor"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "src\\dreamos\\tools\\functional\\context_planner_tool.py": {
            "language": ".py",
            "functions": [
                "name",
                "description",
                "_extract_targets",
                "execute",
                "_rule_copy_file",
                "_rule_extract_symbol",
                "_rule_refactor_symbol",
                "_rule_create_file",
                "_rule_migrate_update_generic_refactor",
                "_rule_read_analyze",
                "_rule_search",
                "_rule_fallback_log",
                "_generate_plan_narration",
                "_log_execution"
            ],
            "classes": {
                "ContextPlannerTool": {
                    "methods": [
                        "name",
                        "description",
                        "_extract_targets",
                        "execute",
                        "_rule_copy_file",
                        "_rule_extract_symbol",
                        "_rule_refactor_symbol",
                        "_rule_create_file",
                        "_rule_migrate_update_generic_refactor",
                        "_rule_read_analyze",
                        "_rule_search",
                        "_rule_fallback_log",
                        "_generate_plan_narration",
                        "_log_execution"
                    ],
                    "docstring": "Generates a execution plan based on keywords and patterns in the task description.\nNOTE: This is a simplified rule-based planner, NOT an LLM-based planner.",
                    "base_classes": [
                        "BaseTool"
                    ]
                }
            },
            "routes": [],
            "complexity": 28
        },
        "src\\dreamos\\tools\\dreamos_utils\\check_agent_pulse.py": {
            "language": ".py",
            "functions": [
                "get_core_timestamp_utility",
                "check_agent_pulse",
                "fallback_timestamp"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3,
            "agent_role": "potential_agent"
        },
        "src\\dreamos\\tools\\discovery\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\dreamos\\tools\\thea_relay_agent.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_ensure_dirs",
                "_load_thea_response",
                "_validate_response",
                "_get_mailbox_path",
                "_dispatch_message",
                "_move_file",
                "write_mailbox_message",
                "__init__"
            ],
            "classes": {
                "TheaRelayAgent": {
                    "methods": [
                        "__init__",
                        "_ensure_dirs",
                        "_load_thea_response",
                        "_validate_response",
                        "_get_mailbox_path",
                        "_dispatch_message",
                        "_move_file"
                    ],
                    "docstring": "An agent that monitors a directory for THEA responses, parses them,\nand dispatches them to the appropriate agent mailboxes.",
                    "base_classes": [
                        "BaseAgent"
                    ]
                },
                "BaseAgent": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 17,
            "agent_role": "potential_agent"
        },
        "src\\dreamos\\tools\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\dreamos\\tools\\_core\\registry.py": {
            "language": ".py",
            "functions": [
                "get_registry",
                "__init__",
                "register",
                "get_tool",
                "list_tools"
            ],
            "classes": {
                "ToolRegistry": {
                    "methods": [
                        "__init__",
                        "register",
                        "get_tool",
                        "list_tools"
                    ],
                    "docstring": "Minimal placeholder for ToolRegistry to resolve import errors.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 9
        },
        "src\\dreamos\\tools\\validation\\check_dependencies.py": {
            "language": ".py",
            "functions": [
                "check_cli_dependencies",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "src\\dreamos\\tools\\_core\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\dreamos\\tools\\_core\\base.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "__repr__",
                "__init__",
                "get_argument",
                "execute",
                "__init__",
                "__repr__",
                "__init__",
                "execute_tool"
            ],
            "classes": {
                "ToolParameter": {
                    "methods": [
                        "__init__",
                        "__repr__"
                    ],
                    "docstring": null,
                    "base_classes": []
                },
                "ToolContext": {
                    "methods": [
                        "__init__",
                        "get_argument"
                    ],
                    "docstring": null,
                    "base_classes": []
                },
                "BaseTool": {
                    "methods": [
                        "execute",
                        "__init__",
                        "__repr__"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "ABC"
                    ]
                },
                "BaseToolExecutor": {
                    "methods": [
                        "__init__",
                        "execute_tool"
                    ],
                    "docstring": "Placeholder base class for a tool executor concept.",
                    "base_classes": [
                        "ABC"
                    ]
                }
            },
            "routes": [],
            "complexity": 18
        },
        "src\\dreamos\\utils\\common_utils.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\dreamos\\tools\\functional\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\dreamos\\utils\\dream_mode_utils\\channel_loader.py": {
            "language": ".py",
            "functions": [
                "get_blob_channel"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "src\\dreamos\\utils\\dream_mode_utils\\browser.py": {
            "language": ".py",
            "functions": [
                "launch_browser",
                "navigate_to_page",
                "wait_for_login",
                "close_browser"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "src\\dreamos\\utils\\dream_mode_utils\\cursor_session_manager.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "on_created",
                "start"
            ],
            "classes": {
                "CursorSessionManager": {
                    "methods": [
                        "__init__",
                        "on_created",
                        "start"
                    ],
                    "docstring": "Watches a directory for Cursor task files and launches Cursor IDE sessions to execute them.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 6
        },
        "src\\dreamos\\utils\\dream_mode_utils\\prompt_renderer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "render"
            ],
            "classes": {
                "PromptRenderer": {
                    "methods": [
                        "__init__",
                        "render"
                    ],
                    "docstring": "Loads and renders Jinja2 templates from a specified directory.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 4
        },
        "src\\dreamos\\utils\\dream_mode_utils\\task_parser.py": {
            "language": ".py",
            "functions": [
                "_extract_json_block",
                "_extract_regex_fallback",
                "extract_task_metadata"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "src\\dreamos\\utils\\dream_mode_utils\\html_parser.py": {
            "language": ".py",
            "functions": [
                "is_still_generating",
                "extract_latest_reply"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "src\\dreamos\\utils\\dream_mode_utils\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\dreamos\\utils\\file_io.py": {
            "language": ".py",
            "functions": [
                "read_json_file",
                "write_json_atomic",
                "append_jsonl",
                "read_jsonl_file",
                "read_text_file",
                "write_text_file_atomic",
                "ensure_directory_exists"
            ],
            "classes": {
                "FileIOError": {
                    "methods": [],
                    "docstring": "Custom exception for errors during file I/O operations in this module.",
                    "base_classes": [
                        "IOError"
                    ]
                }
            },
            "routes": [],
            "complexity": 7
        },
        "src\\dreamos\\utils\\log_validator.py": {
            "language": ".py",
            "functions": [
                "validate_log_file"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "src\\dreamos\\utils\\text.py": {
            "language": ".py",
            "functions": [
                "sanitize_filename"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "src\\dreamos\\utils\\schema_validator.py": {
            "language": ".py",
            "functions": [
                "load_schema",
                "validate_payload"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "src\\dreamos\\utils\\protocol_compliance_utils.py": {
            "language": ".py",
            "functions": [
                "calculate_file_sha256",
                "load_yaml_registry",
                "check_mailbox_structure",
                "check_agent_bus_usage",
                "check_task_status_reporting",
                "check_compliance"
            ],
            "classes": {},
            "routes": [],
            "complexity": 6
        },
        "src\\dreamos\\utils\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\dreamos\\utils\\search.py": {
            "language": ".py",
            "functions": [
                "is_ripgrep_installed",
                "run_ripgrep_search"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "src\\dreamos\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\dreamscape\\agents\\planner_agent.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_build_planning_prompt",
                "_parse_llm_outline"
            ],
            "classes": {
                "ContentPlannerAgent": {
                    "methods": [
                        "__init__",
                        "_build_planning_prompt",
                        "_parse_llm_outline"
                    ],
                    "docstring": "Generates content plans for the Digital Dreamscape devblog.\n\nListens for tasks of type 'GENERATE_CONTENT_PLAN' via the AgentBus.",
                    "base_classes": [
                        "BaseAgent"
                    ]
                }
            },
            "routes": [],
            "complexity": 6,
            "agent_role": "potential_agent"
        },
        "src\\dreamscape\\core\\content_models.py": {
            "language": ".py",
            "functions": [],
            "classes": {
                "ContentPlan": {
                    "methods": [],
                    "docstring": "Represents a plan for generating a piece of content.",
                    "base_classes": [
                        "BaseModel"
                    ]
                },
                "ContentDraft": {
                    "methods": [],
                    "docstring": "Represents a generated draft of content based on a plan.",
                    "base_classes": [
                        "BaseModel"
                    ]
                }
            },
            "routes": [],
            "complexity": 0
        },
        "src\\dreamscape\\utils\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\dreamscape\\events\\event_types.py": {
            "language": ".py",
            "functions": [],
            "classes": {
                "DreamscapeEventType": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "Enum"
                    ]
                },
                "AgentStatus": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "Enum"
                    ]
                }
            },
            "routes": [],
            "complexity": 0
        },
        "src\\dreamscape\\agents\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\dreamscape\\schemas\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\dreamscape\\agents\\writer_agent.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_build_writing_prompt",
                "_parse_llm_draft"
            ],
            "classes": {
                "ContentWriterAgent": {
                    "methods": [
                        "__init__",
                        "_build_writing_prompt",
                        "_parse_llm_draft"
                    ],
                    "docstring": "Generates content drafts based on provided ContentPlans, handling tasks of type 'WRITE_CONTENT_DRAFT'.",
                    "base_classes": [
                        "BaseAgent"
                    ]
                }
            },
            "routes": [],
            "complexity": 6,
            "agent_role": "potential_agent"
        },
        "src\\dreamscape\\events\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\dreamscape\\core\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\dreamscape\\schemas\\event_schemas.py": {
            "language": ".py",
            "functions": [],
            "classes": {
                "BaseEventPayload": {
                    "methods": [],
                    "docstring": "Base model containing fields common to most Dreamscape events.",
                    "base_classes": [
                        "BaseModel"
                    ]
                },
                "PlanRequestedPayload": {
                    "methods": [],
                    "docstring": "Payload for requesting a new content plan.",
                    "base_classes": [
                        "BaseEventPayload"
                    ]
                },
                "PlanGeneratedPayload": {
                    "methods": [],
                    "docstring": "Payload for publishing a newly generated content plan.",
                    "base_classes": [
                        "BaseEventPayload"
                    ]
                },
                "WritingRequestedPayload": {
                    "methods": [],
                    "docstring": "Payload for requesting content generation based on a plan.",
                    "base_classes": [
                        "BaseEventPayload"
                    ]
                },
                "DraftGeneratedPayload": {
                    "methods": [],
                    "docstring": "Payload for publishing a newly generated content draft.",
                    "base_classes": [
                        "BaseEventPayload"
                    ]
                },
                "PublishRequestedPayload": {
                    "methods": [],
                    "docstring": "Payload for requesting the publication of a content draft.",
                    "base_classes": [
                        "BaseEventPayload"
                    ]
                },
                "PlanFailedPayload": {
                    "methods": [],
                    "docstring": "Payload indicating a failure during content plan generation.",
                    "base_classes": [
                        "BaseEventPayload"
                    ]
                },
                "DraftFailedPayload": {
                    "methods": [],
                    "docstring": "Payload indicating a failure during content draft generation.",
                    "base_classes": [
                        "BaseEventPayload"
                    ]
                }
            },
            "routes": [],
            "complexity": 0
        },
        "tests\\conftest.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "tests\\coordination\\dispatchers\\test_base_dispatcher.py": {
            "language": ".py",
            "functions": [
                "test_base_dispatcher_initialization",
                "test_add_task",
                "test_add_task_with_priority",
                "test_run_dispatcher_loop",
                "test_run_dispatcher_loop_priority",
                "test_run_dispatcher_handles_execution_error",
                "test_stop_dispatcher",
                "test_get_status",
                "__init__",
                "execute_task"
            ],
            "classes": {
                "MockDispatcher": {
                    "methods": [
                        "__init__",
                        "execute_task"
                    ],
                    "docstring": "Mock dispatcher for testing.",
                    "base_classes": [
                        "BaseDispatcher"
                    ]
                }
            },
            "routes": [],
            "complexity": 12,
            "agent_role": "potential_agent"
        },
        "src\\dreamscape\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "tests\\coordination\\test_voting_coordinator.py": {
            "language": ".py",
            "functions": [
                "mock_agent_bus",
                "mock_config",
                "coordinator",
                "test_coordinator_init",
                "test_initiate_vote",
                "test_cast_vote_valid",
                "test_cast_vote_invalid_topic",
                "test_cast_vote_invalid_choice",
                "test_tally_vote_simple_majority",
                "test_tally_vote_tie",
                "test_tally_vote_timeout",
                "__init__",
                "initiate_vote",
                "cast_vote",
                "tally_vote",
                "handle_event"
            ],
            "classes": {
                "VotingCoordinator": {
                    "methods": [
                        "__init__",
                        "initiate_vote",
                        "cast_vote",
                        "tally_vote",
                        "handle_event"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 21,
            "agent_role": "potential_agent"
        },
        "tests\\coordination\\test_agent_bus.py": {
            "language": ".py",
            "functions": [
                "agent_bus",
                "test_agent_bus_singleton",
                "test_agent_bus_delegates_to_simple_bus",
                "test_unsubscribe_removes_handler",
                "test_unsubscribe_removes_topic_if_empty",
                "test_unsubscribe_nonexistent_handler",
                "test_unsubscribe_nonexistent_topic",
                "handler1",
                "handler2",
                "handler",
                "handler1",
                "handler_never_subscribed",
                "handler"
            ],
            "classes": {},
            "routes": [],
            "complexity": 13,
            "agent_role": "potential_agent"
        },
        "tests\\coordination\\test_project_board_manager.py": {
            "language": ".py",
            "functions": [
                "temp_test_dir",
                "pbm_instance",
                "sample_task_details",
                "mock_pbm_with_schema",
                "pbm_instance_with_real_schema",
                "test_pbm_initialization",
                "test_add_task_future_success",
                "test_add_task_working_success",
                "test_add_task_duplicate_id",
                "test_add_task_missing_id",
                "test_add_task_missing_description",
                "test_claim_task_success",
                "test_claim_task_not_found",
                "test_claim_task_wrong_status",
                "test_update_task_success",
                "test_update_task_not_found",
                "test_update_task_future_board",
                "test_delete_task_future_success",
                "test_delete_task_working_success",
                "test_delete_task_not_found",
                "test_claim_task_fail_save_working_rollback",
                "test_update_task_lock_timeout",
                "test_claim_task_lock_timeout",
                "test_add_task_schema_validation_fail",
                "test_update_task_schema_validation_success",
                "test_update_task_schema_validation_fail",
                "test_load_schema_success",
                "test_load_schema_not_found",
                "test_load_schema_invalid_json",
                "__init__",
                "__enter__",
                "__exit__",
                "save_side_effect",
                "side_effect_wrapper"
            ],
            "classes": {
                "MockFileLock": {
                    "methods": [
                        "__init__",
                        "__enter__",
                        "__exit__"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 37
        },
        "tests\\core\\utils\\test_agent_utils.py": {
            "language": ".py",
            "functions": [
                "test_format_agent_report",
                "__init__"
            ],
            "classes": {
                "MockAgent": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 3,
            "agent_role": "potential_agent"
        },
        "tests\\core\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "tests\\core\\comms\\test_project_board.py": {
            "language": ".py",
            "functions": [
                "board_manager",
                "future_tasks_file",
                "working_tasks_file",
                "completed_tasks_file",
                "_read_json",
                "_write_json",
                "test_claim_success",
                "test_claim_not_found",
                "test_claim_already_working",
                "test_move_success",
                "test_move_not_found"
            ],
            "classes": {
                "TestClaimFutureTask": {
                    "methods": [
                        "test_claim_success",
                        "test_claim_not_found",
                        "test_claim_already_working"
                    ],
                    "docstring": null,
                    "base_classes": []
                },
                "TestMoveTaskToCompleted": {
                    "methods": [
                        "test_move_success",
                        "test_move_not_found"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 16
        },
        "tests\\dashboard\\test_dashboard_ui.py": {
            "language": ".py",
            "functions": [
                "mock_dashboard_deps",
                "test_dashboard_initialization",
                "test_dashboard_refresh_smoke",
                "test_dashboard_ui_loads",
                "test_dashboard_event_handling"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5
        },
        "tests\\core\\coordination\\test_base_agent.py": {
            "language": ".py",
            "functions": [
                "mock_agent_bus",
                "test_agent",
                "test_base_agent_init",
                "create_sample_task",
                "mock_agent",
                "capture_task"
            ],
            "classes": {
                "ConcreteAgent": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "BaseAgent"
                    ]
                },
                "MinimalAgent": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "BaseAgent"
                    ]
                },
                "MockConcreteAgent": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "BaseAgent"
                    ]
                }
            },
            "routes": [],
            "complexity": 6,
            "agent_role": "potential_agent"
        },
        "tests\\dreamscape\\agents\\test_planner_agent.py": {
            "language": ".py",
            "functions": [
                "mock_agent_bus",
                "mock_app_config",
                "planner_agent",
                "test_planner_agent_init"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4,
            "agent_role": "potential_agent"
        },
        "tests\\core\\coordination\\test_message_patterns.py": {
            "language": ".py",
            "functions": [
                "test_create_task_message_defaults",
                "test_create_task_message_explicit",
                "test_update_task_status",
                "test_task_message_to_from_dict",
                "test_task_message_from_dict_minimal",
                "test_task_message_from_dict_missing_required",
                "test_task_message_from_dict_invalid_enum"
            ],
            "classes": {},
            "routes": [],
            "complexity": 7
        },
        "tests\\dreamscape\\agents\\test_writer_agent.py": {
            "language": ".py",
            "functions": [
                "mock_agent_bus",
                "mock_app_config",
                "writer_agent",
                "sample_plan",
                "test_writer_agent_init"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5,
            "agent_role": "potential_agent"
        },
        "tests\\core\\utils\\test_onboarding_utils.py": {
            "language": ".py",
            "functions": [
                "test_successful_affirmation_new_agent",
                "test_successful_affirmation_existing_agent",
                "test_fail_protocol_hash_error",
                "test_fail_invalid_yaml_load",
                "test_fail_yaml_dump_error",
                "test_fail_write_permission_error",
                "test_update_contract_successful_lock",
                "test_update_contract_no_filelock_library",
                "open_side_effect",
                "open_side_effect",
                "open_side_effect"
            ],
            "classes": {
                "TestUpdateOnboardingContract": {
                    "methods": [
                        "test_successful_affirmation_new_agent",
                        "test_successful_affirmation_existing_agent",
                        "test_fail_protocol_hash_error",
                        "test_fail_invalid_yaml_load",
                        "test_fail_yaml_dump_error",
                        "test_fail_write_permission_error",
                        "test_update_contract_successful_lock",
                        "test_update_contract_no_filelock_library"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "unittest.TestCase"
                    ]
                }
            },
            "routes": [],
            "complexity": 19
        },
        "tests\\memory\\test_memory_compaction.py": {
            "language": ".py",
            "functions": [
                "memory_manager",
                "create_segment_file",
                "test_compaction_triggered_by_size",
                "test_compaction_triggered_by_entries",
                "test_compaction_not_triggered_below_thresholds",
                "test_time_based_compaction_list",
                "test_time_based_compaction_dict",
                "test_keep_n_compaction_list",
                "test_safe_rewrite",
                "test_compaction_handles_invalid_json",
                "test_compaction_handles_missing_timestamp",
                "_create"
            ],
            "classes": {},
            "routes": [],
            "complexity": 12
        },
        "tests\\hooks\\test_chatgpt_responder.py": {
            "language": ".py",
            "functions": [
                "test_responder_init_dev_mode",
                "test_responder_init_prod_mode",
                "test_get_response_dev_mode",
                "test_get_response_prod_mode",
                "test_respond_to_mailbox",
                "test_respond_to_mailbox_no_messages",
                "test_responder_init_dev_mode_scraper_missing"
            ],
            "classes": {},
            "routes": [],
            "complexity": 7
        },
        "tests\\hooks\\test_chronicle_logger.py": {
            "language": ".py",
            "functions": [
                "mock_agent_bus_instance",
                "test_chronicle_logger_init",
                "test_chronicle_logger_format_entry",
                "test_chronicle_logger_handle_event"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "tests\\memory\\test_compaction_utils.py": {
            "language": ".py",
            "functions": [
                "temp_file",
                "sample_data",
                "setup_segment_file",
                "test_rewrite_memory_safely_basic_write",
                "test_rewrite_memory_safely_compressed_write",
                "test_rewrite_memory_safely_serializes_datetime",
                "test_rewrite_memory_safely_write_failure",
                "test_rewrite_memory_safely_replace_failure",
                "test_compact_segment_data_time_policy",
                "test_compact_segment_data_keep_n_policy",
                "test_compact_segment_data_unknown_policy_returns_original",
                "test_compact_segment_data_default_policy_values",
                "test_compact_segment_file_on_json",
                "test_compact_segment_file_on_compressed",
                "test_compact_segment_file_no_op",
                "test_compact_segment_file_missing_ok",
                "test_compact_segment_file_empty_ok",
                "test_compact_segment_file_invalid_json_raises",
                "test_compact_segment_file_non_list_json_raises",
                "test_compact_segment_file_load_failure_raises",
                "test_compact_segment_file_save_failure_raises",
                "test_compact_segment_data_time_policy_with_tz",
                "test_compact_segment_data_keep_n_edge_cases",
                "test_compact_segment_data_logs_warnings",
                "test_rewrite_memory_safely_non_serializable_fails",
                "test_compact_segment_file_invalid_json_fails",
                "test_compact_segment_file_rewrite_failure",
                "test_compact_segment_file_logs_rewrite_failure"
            ],
            "classes": {
                "NonSerializable": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 28
        },
        "tests\\memory\\test_governance_memory_engine.py": {
            "language": ".py",
            "functions": [
                "setUp",
                "tearDown",
                "test_log_single_event",
                "test_log_multiple_events",
                "test_log_event_error_handling"
            ],
            "classes": {
                "TestGovernanceMemoryEngine": {
                    "methods": [
                        "setUp",
                        "tearDown",
                        "test_log_single_event",
                        "test_log_multiple_events",
                        "test_log_event_error_handling"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "unittest.TestCase"
                    ]
                }
            },
            "routes": [],
            "complexity": 10
        },
        "tests\\hooks\\test_stats_logger.py": {
            "language": ".py",
            "functions": [
                "mock_nexus",
                "test_stats_logger_log_snapshot"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "tests\\integrations\\azure\\test_azure_blob_channel.py": {
            "language": ".py",
            "functions": [
                "test_push_and_pull_task",
                "test_push_and_pull_result"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "tests\\memory\\test_database_manager.py": {
            "language": ".py",
            "functions": [
                "temp_db_file",
                "db_manager",
                "test_db_manager_initialization_creates_db_and_tables",
                "test_record_interaction_inserts_data",
                "test_initialize_conversation_inserts_metadata",
                "test_initialize_conversation_ignores_duplicate",
                "test_fetch_conversation_retrieves_interactions",
                "test_fetch_conversation_empty_result"
            ],
            "classes": {},
            "routes": [],
            "complexity": 8
        },
        "tests\\integrations\\test_discord_client.py": {
            "language": ".py",
            "functions": [
                "discord_client"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "tests\\memory\\test_memory_manager.py": {
            "language": ".py",
            "functions": [
                "temp_memory_file",
                "memory_manager",
                "test_memory_manager_initialization_creates_file",
                "test_memory_manager_initialization_loads_existing",
                "test_load_memory_handles_empty_file",
                "test_load_memory_handles_invalid_json",
                "test_load_memory_handles_non_dict_json",
                "test_save_memory_writes_correctly",
                "test_save_memory_handles_write_error",
                "test_save_fragment_adds_new",
                "test_save_fragment_updates_existing",
                "test_save_fragment_invalid_input",
                "test_load_fragment_returns_data",
                "test_load_fragment_returns_none_for_missing",
                "test_delete_fragment_removes_existing",
                "test_delete_fragment_handles_missing",
                "test_list_fragment_ids",
                "test_list_fragment_ids_empty"
            ],
            "classes": {},
            "routes": [],
            "complexity": 18
        },
        "tests\\memory\\test_summarizer.py": {
            "language": ".py",
            "functions": [
                "sample_memory_file",
                "test_generate_summary_basic",
                "test_generate_summary_empty_chunk",
                "test_generate_summary_missing_timestamps",
                "test_summarize_file_no_summarization_needed_too_few",
                "test_summarize_file_no_summarization_needed_all_recent",
                "test_summarize_file_simple_case",
                "test_summarize_handles_missing_timestamps",
                "test_summarize_file_does_not_summarize_summaries",
                "test_summarize_safe_write_and_backup",
                "test_summarize_file_not_found",
                "test_summarize_file_invalid_json",
                "test_summarize_file_empty_json",
                "test_summarize_file_json_not_list",
                "_create"
            ],
            "classes": {},
            "routes": [],
            "complexity": 15
        },
        "tests\\scripts\\utils\\test_simple_task_updater.py": {
            "language": ".py",
            "functions": [
                "mock_board_manager",
                "run_script",
                "test_claim_success",
                "test_claim_failure_board",
                "test_claim_missing_arg",
                "test_update_working_success",
                "test_update_completed_success",
                "test_update_failure_board",
                "test_update_move_failure_board",
                "test_update_missing_arg",
                "test_invalid_action"
            ],
            "classes": {
                "TestSimpleTaskUpdaterScript": {
                    "methods": [
                        "test_claim_success",
                        "test_claim_failure_board",
                        "test_claim_missing_arg",
                        "test_update_working_success",
                        "test_update_completed_success",
                        "test_update_failure_board",
                        "test_update_move_failure_board",
                        "test_update_missing_arg",
                        "test_invalid_action"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 20
        },
        "tests\\rendering\\test_template_engine.py": {
            "language": ".py",
            "functions": [
                "setUpClass",
                "tearDownClass",
                "test_render_valid_template",
                "test_render_with_tojson_filter",
                "test_render_template_not_found",
                "test_render_with_missing_variable"
            ],
            "classes": {
                "TestTemplateEngine": {
                    "methods": [
                        "setUpClass",
                        "tearDownClass",
                        "test_render_valid_template",
                        "test_render_with_tojson_filter",
                        "test_render_template_not_found",
                        "test_render_with_missing_variable"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "unittest.TestCase"
                    ]
                }
            },
            "routes": [],
            "complexity": 12
        },
        "tests\\memory\\test_summarization_utils.py": {
            "language": ".py",
            "functions": [
                "mock_summarizer_instance",
                "sample_policy",
                "create_segment_file",
                "sample_chunk",
                "test_summarize_segment_chunk_placeholder",
                "test_summarize_segment_chunk_with_summarizer",
                "test_summarize_segment_chunk_summarizer_error",
                "test_summarize_segment_chunk_empty_chunk",
                "sample_conversations",
                "test_summarize_conversations_simple_concat",
                "test_summarize_conversations_simple_concat_truncation",
                "test_summarize_conversations_simple_concat_empty",
                "test_summarize_conversations_llm_placeholder",
                "test_summarize_conversations_llm_placeholder_truncation",
                "test_summarize_conversations_llm_no_client_raises",
                "test_summarize_conversations_llm_empty_input",
                "test_summarize_conversations_unknown_strategy_raises",
                "test_build_llm_summary_prompt_basic",
                "test_build_llm_summary_prompt_missing_fields",
                "test_build_llm_summary_prompt_empty",
                "_creator"
            ],
            "classes": {
                "MockSummarizer": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "BaseSummarizer"
                    ]
                }
            },
            "routes": [],
            "complexity": 21
        },
        "tests\\services\\test_event_logger.py": {
            "language": ".py",
            "functions": [
                "test_log_structured_event_creates_file_and_logs",
                "test_log_structured_event_appends",
                "test_log_structured_event_creates_directory"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "tests\\social\\tests\\core\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "tests\\services\\test_failed_prompt_archive.py": {
            "language": ".py",
            "functions": [
                "archive_service",
                "test_archive_initialization_new",
                "test_archive_initialization_loads_existing",
                "test_log_failure_appends_and_writes",
                "test_get_failures_no_filter",
                "test_get_failures_filter_by_reason",
                "test_get_failures_filter_by_max_retry",
                "test_get_by_prompt_id"
            ],
            "classes": {},
            "routes": [],
            "complexity": 8
        },
        "tests\\social\\tests\\conftest.py": {
            "language": ".py",
            "functions": [
                "pytest_configure",
                "mock_setup_logging",
                "mock_driver"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "tests\\social\\tests\\social\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "tests\\social\\tests\\integration\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "tests\\social\\tests\\social\\strategies\\base_strategy_test.py": {
            "language": ".py",
            "functions": [
                "mock_config",
                "mock_api",
                "strategy",
                "snapshot_dir",
                "save_snapshot",
                "load_snapshot",
                "test_init_with_valid_credentials",
                "test_init_with_missing_credentials",
                "test_feedback_on_rate_limit",
                "verify_template_rendering"
            ],
            "classes": {
                "BaseStrategyTest": {
                    "methods": [
                        "mock_config",
                        "mock_api",
                        "strategy",
                        "snapshot_dir",
                        "save_snapshot",
                        "load_snapshot",
                        "test_init_with_valid_credentials",
                        "test_init_with_missing_credentials",
                        "test_feedback_on_rate_limit",
                        "verify_template_rendering"
                    ],
                    "docstring": "Base test class for all social media strategy tests.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 20
        },
        "tests\\social\\tests\\strategies\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "tests\\services\\test_memory_maintenance_service.py": {
            "language": ".py",
            "functions": [
                "mock_app_config",
                "mock_summarizer",
                "maintenance_service",
                "get_memory_base_path",
                "get_snapshot_base_path"
            ],
            "classes": {
                "MockPathsConfig": {
                    "methods": [
                        "get_memory_base_path",
                        "get_snapshot_base_path"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "PathsConfig"
                    ]
                }
            },
            "routes": [],
            "complexity": 7
        },
        "tests\\social\\tests\\strategies\\base_strategy_test.py": {
            "language": ".py",
            "functions": [
                "login",
                "post_content",
                "scrape_mentions",
                "mock_config",
                "mock_driver",
                "strategy",
                "test_init_with_valid_config",
                "test_init_with_missing_config",
                "test_validate_media_files_success",
                "test_validate_media_files_missing",
                "test_wait_for_element_success",
                "test_wait_for_element_timeout",
                "test_safe_click_success",
                "test_safe_click_retry_success",
                "test_safe_click_failure",
                "test_safe_send_keys_success",
                "test_safe_send_keys_retry_success",
                "test_safe_send_keys_failure",
                "test_extract_error_details_success",
                "test_extract_error_details_failure"
            ],
            "classes": {
                "MockStrategy": {
                    "methods": [
                        "login",
                        "post_content",
                        "scrape_mentions"
                    ],
                    "docstring": "Mock strategy for testing base functionality.",
                    "base_classes": [
                        "BaseStrategy"
                    ]
                },
                "BaseStrategyTest": {
                    "methods": [
                        "mock_config",
                        "mock_driver",
                        "strategy",
                        "test_init_with_valid_config",
                        "test_init_with_missing_config",
                        "test_validate_media_files_success",
                        "test_validate_media_files_missing",
                        "test_wait_for_element_success",
                        "test_wait_for_element_timeout",
                        "test_safe_click_success",
                        "test_safe_click_retry_success",
                        "test_safe_click_failure",
                        "test_safe_send_keys_success",
                        "test_safe_send_keys_retry_success",
                        "test_safe_send_keys_failure",
                        "test_extract_error_details_success",
                        "test_extract_error_details_failure"
                    ],
                    "docstring": "Base test class for all strategy tests.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 40
        },
        "tests\\utils\\test_protocol_compliance_utils.py": {
            "language": ".py",
            "functions": [
                "test_check_mailbox_structure_exists",
                "test_check_mailbox_structure_missing"
            ],
            "classes": {
                "TestProtocolComplianceUtils": {
                    "methods": [
                        "test_check_mailbox_structure_exists",
                        "test_check_mailbox_structure_missing"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "unittest.TestCase"
                    ]
                }
            },
            "routes": [],
            "complexity": 4
        },
        "tests\\utils\\test_terminal_execution.py": {
            "language": ".py",
            "functions": [
                "test_security_avoids_shell_true",
                "test_security_prevents_command_injection"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "tests\\social\\tests\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "tests\\social\\tests\\tools\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "tests\\social\\tests\\utils\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "tests\\utils\\test_json_io.py": {
            "language": ".py",
            "functions": [
                "test_write_read_json_dict",
                "test_write_read_json_list",
                "test_read_json_file_not_found",
                "test_read_json_invalid_json",
                "test_append_read_jsonl",
                "test_read_jsonl_file_not_found",
                "test_read_jsonl_invalid_line",
                "test_write_read_text",
                "test_read_text_file_not_found"
            ],
            "classes": {},
            "routes": [],
            "complexity": 9
        },
        "tests\\tools\\discovery\\test_find_todos.py": {
            "language": ".py",
            "functions": [
                "test_find_todos_in_file_basic",
                "test_find_todos_in_file_no_matches",
                "test_find_todos_in_file_empty_file",
                "test_scan_directory"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "tests\\social\\tests\\strategies\\base_test.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "find_element",
                "find_elements",
                "get",
                "quit",
                "__init__",
                "click",
                "send_keys",
                "is_displayed",
                "get_attribute",
                "setUp",
                "tearDown",
                "assert_logged_event",
                "simulate_element_present",
                "simulate_element_not_found",
                "simulate_login_success",
                "simulate_login_failure",
                "simulate_post_success",
                "simulate_post_failure"
            ],
            "classes": {
                "MockWebDriver": {
                    "methods": [
                        "__init__",
                        "find_element",
                        "find_elements",
                        "get",
                        "quit"
                    ],
                    "docstring": "Mock Selenium WebDriver for testing.",
                    "base_classes": []
                },
                "MockElement": {
                    "methods": [
                        "__init__",
                        "click",
                        "send_keys",
                        "is_displayed",
                        "get_attribute"
                    ],
                    "docstring": "Mock Selenium WebElement for testing.",
                    "base_classes": []
                },
                "BaseStrategyTest": {
                    "methods": [
                        "setUp",
                        "tearDown",
                        "assert_logged_event",
                        "simulate_element_present",
                        "simulate_element_not_found",
                        "simulate_login_success",
                        "simulate_login_failure",
                        "simulate_post_success",
                        "simulate_post_failure"
                    ],
                    "docstring": "Base test class for all social media strategy tests.",
                    "base_classes": [
                        "unittest.TestCase"
                    ]
                }
            },
            "routes": [],
            "complexity": 38
        },
        "tests\\supervisor_tools\\test_command_supervisor.py": {
            "language": ".py",
            "functions": [
                "mock_agent_bus",
                "command_supervisor",
                "create_mock_process"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "tests\\tools\\test_base.py": {
            "language": ".py",
            "functions": [
                "setUp",
                "tearDown",
                "test_base_tool_initialization",
                "test_tool_context_initialization",
                "test_tool_context_get_arg",
                "test_tool_parameter_initialization"
            ],
            "classes": {
                "TestBaseTool": {
                    "methods": [
                        "setUp",
                        "tearDown",
                        "test_base_tool_initialization",
                        "test_tool_context_initialization",
                        "test_tool_context_get_arg",
                        "test_tool_parameter_initialization"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "unittest.TestCase"
                    ]
                },
                "DummyTool": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "BaseTool"
                    ]
                }
            },
            "routes": [],
            "complexity": 12
        },
        "tests\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "_archive\\tests\\tests\\social\\tests\\utils\\test_browser_utils.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        }
    }
}
