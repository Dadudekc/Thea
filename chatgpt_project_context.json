{
    "project_root": "D:\\Dream.os",
    "num_files_analyzed": 1122,
    "analysis_details": {
        "jest.config.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "jest.setup.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "jest.env.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "apps\\dashboard\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "test_monitoring.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "setup.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "apps\\dashboard\\modules\\notifier.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load_config"
            ],
            "classes": {
                "Notifier": {
                    "methods": [
                        "__init__",
                        "_load_config"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Prototype",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "apps\\dashboard\\modules\\task_manager.py": {
            "language": ".py",
            "functions": [
                "load_inbox",
                "load_status",
                "load_devlog",
                "update_task_status",
                "requeue_task",
                "escalate_to_thea"
            ],
            "classes": {},
            "routes": [],
            "complexity": 6
        },
        "test_jarvis.py": {
            "language": ".py",
            "functions": [
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "apps\\dashboard\\modules\\thea_handler.py": {
            "language": ".py",
            "functions": [
                "__init__"
            ],
            "classes": {
                "THEAHandler": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Prototype",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 2
        },
        "apps\\dashboard\\modules\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "apps\\dashboard\\tests\\run_tests.py": {
            "language": ".py",
            "functions": [
                "run_tests"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "apps\\dashboard\\tests\\test_agent_autonomy_manager.py": {
            "language": ".py",
            "functions": [
                "tmp_inbox_base",
                "manager",
                "agent_status",
                "test_detect_drift_no_status",
                "test_detect_drift_recent_heartbeat",
                "test_detect_drift_old_heartbeat",
                "test_should_resume_agent_no_status",
                "test_should_resume_agent_inactive_loop",
                "test_mark_agent_resumed",
                "test_update_agent_status",
                "test_enqueue_resume_prompt"
            ],
            "classes": {},
            "routes": [],
            "complexity": 11
        },
        "apps\\dashboard\\tests\\test_dashboard.py": {
            "language": ".py",
            "functions": [
                "setup_method",
                "create_test_files",
                "test_dashboard_initialization",
                "test_agent_list_population",
                "test_agent_details_display",
                "test_task_actions",
                "teardown_method"
            ],
            "classes": {
                "TestDashboard": {
                    "methods": [
                        "setup_method",
                        "create_test_files",
                        "test_dashboard_initialization",
                        "test_agent_list_population",
                        "test_agent_details_display",
                        "test_task_actions",
                        "teardown_method"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 14
        },
        "apps\\dashboard\\tests\\test_voice_commands.py": {
            "language": ".py",
            "functions": [
                "test_env",
                "voice_handler",
                "mock_audio",
                "test_voice_handler_initialization",
                "test_command_template_validation",
                "test_parse_agent_command",
                "test_validate_mailbox_message",
                "test_convert_legacy_message",
                "test_command_history"
            ],
            "classes": {},
            "routes": [],
            "complexity": 9
        },
        "apps\\dashboard\\tests\\test_notifier.py": {
            "language": ".py",
            "functions": [
                "config_path"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "apps\\dashboard\\tests\\test_resume_autonomy.py": {
            "language": ".py",
            "functions": [
                "app",
                "agent_tab",
                "status_file",
                "test_agent_tab_initialization",
                "test_task_action_menu",
                "test_theme_application",
                "test_resume_trigger_on_drift",
                "test_autonomy_loop_recovery",
                "test_status_file_update"
            ],
            "classes": {},
            "routes": [],
            "complexity": 9
        },
        "apps\\dashboard\\tests\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "archive\\orphans\\agents\\chatgpt_web_agent.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_initialize_browser",
                "_is_result_injected",
                "_mark_result_injected",
                "_get_and_cache_results",
                "sync_inject_and_selenium_send",
                "sync_scrape",
                "sync_close",
                "sync_read",
                "sync_write",
                "sync_read_prompt",
                "sync_scrape"
            ],
            "classes": {
                "ChatGPTWebAgent": {
                    "methods": [
                        "__init__",
                        "_initialize_browser",
                        "_is_result_injected",
                        "_mark_result_injected",
                        "_get_and_cache_results"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 17
        },
        "apps\\dashboard\\core\\autonomy\\agent_autonomy_manager.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "detect_drift",
                "should_resume_agent",
                "mark_agent_resumed",
                "update_agent_status",
                "enqueue_resume_prompt",
                "_load_agent_status",
                "_save_agent_status"
            ],
            "classes": {
                "AgentAutonomyManager": {
                    "methods": [
                        "__init__",
                        "detect_drift",
                        "should_resume_agent",
                        "mark_agent_resumed",
                        "update_agent_status",
                        "enqueue_resume_prompt",
                        "_load_agent_status",
                        "_save_agent_status"
                    ],
                    "docstring": "Core logic for managing agent autonomy, drift detection, and status updates.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 16
        },
        "apps\\dashboard\\modules\\voice_commands.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_validate_command_templates",
                "setup_hotkeys",
                "start_recording",
                "clear_transcript",
                "parse_agent_command",
                "_add_to_history",
                "get_command_history",
                "_validate_mailbox_message",
                "_convert_legacy_message",
                "cleanup"
            ],
            "classes": {
                "VoiceCommandHandler": {
                    "methods": [
                        "__init__",
                        "_validate_command_templates",
                        "setup_hotkeys",
                        "start_recording",
                        "clear_transcript",
                        "parse_agent_command",
                        "_add_to_history",
                        "get_command_history",
                        "_validate_mailbox_message",
                        "_convert_legacy_message",
                        "cleanup"
                    ],
                    "docstring": "Handles voice command processing and routing",
                    "base_classes": [
                        "QObject"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 22
        },
        "apps\\dashboard\\modules\\resume_autonomy.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "setup_actions",
                "__init__",
                "setup_ui",
                "update_status",
                "show_context_menu",
                "refresh_content",
                "apply_theme",
                "__init__",
                "set_level",
                "paintEvent",
                "__init__",
                "setup_ui",
                "update_history",
                "__init__",
                "setup_ui",
                "connect_signals",
                "start_recording",
                "on_recording_started",
                "on_recording_stopped",
                "on_transcription_complete",
                "on_command_parsed",
                "on_error",
                "on_mic_level_updated",
                "__init__",
                "setup_ui",
                "set_waiting_state",
                "refresh_metrics",
                "closeEvent"
            ],
            "classes": {
                "TaskActionMenu": {
                    "methods": [
                        "__init__",
                        "setup_actions"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "QMenu"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ResumeAutonomyAgentTab": {
                    "methods": [
                        "__init__",
                        "setup_ui",
                        "update_status",
                        "show_context_menu",
                        "refresh_content",
                        "apply_theme"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "QWidget"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MicLevelWidget": {
                    "methods": [
                        "__init__",
                        "set_level",
                        "paintEvent"
                    ],
                    "docstring": "Widget to display microphone level",
                    "base_classes": [
                        "QWidget"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "CommandHistoryWidget": {
                    "methods": [
                        "__init__",
                        "setup_ui",
                        "update_history"
                    ],
                    "docstring": "Widget to display command history",
                    "base_classes": [
                        "QWidget"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "VoiceCommandWidget": {
                    "methods": [
                        "__init__",
                        "setup_ui",
                        "connect_signals",
                        "start_recording",
                        "on_recording_started",
                        "on_recording_stopped",
                        "on_transcription_complete",
                        "on_command_parsed",
                        "on_error",
                        "on_mic_level_updated"
                    ],
                    "docstring": "Widget for voice command input",
                    "base_classes": [
                        "QWidget"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "EpisodeMetricsTab": {
                    "methods": [
                        "__init__",
                        "setup_ui",
                        "set_waiting_state",
                        "refresh_metrics",
                        "closeEvent"
                    ],
                    "docstring": "Widget to display episode metrics and status",
                    "base_classes": [
                        "QWidget"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 58
        },
        "apps\\dashboard\\agent_dashboard.py": {
            "language": ".py",
            "functions": [
                "load_devlog",
                "last_devlog_ts",
                "enqueue",
                "update_task_status",
                "requeue_task",
                "escalate_to_thea",
                "main",
                "__init__",
                "__init__",
                "_load_json",
                "_load_agent_logs",
                "_load_test_coverage",
                "_get_module_owner",
                "_get_module_coverage",
                "_populate_summary",
                "_populate_dependencies",
                "_populate_modules",
                "update_metrics",
                "_update_thea_insight",
                "export_to_markdown",
                "refresh_data",
                "update_module_tree",
                "show_module_details",
                "__init__",
                "setup_ui",
                "apply_theme",
                "refresh_data",
                "closeEvent",
                "ping_agents"
            ],
            "classes": {
                "TaskActionMenu": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "QMenu"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ProjectTab": {
                    "methods": [
                        "__init__",
                        "_load_json",
                        "_load_agent_logs",
                        "_load_test_coverage",
                        "_get_module_owner",
                        "_get_module_coverage",
                        "_populate_summary",
                        "_populate_dependencies",
                        "_populate_modules",
                        "update_metrics",
                        "_update_thea_insight",
                        "export_to_markdown",
                        "refresh_data",
                        "update_module_tree",
                        "show_module_details"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "QWidget"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "AgentDashboard": {
                    "methods": [
                        "__init__",
                        "setup_ui",
                        "apply_theme",
                        "refresh_data",
                        "closeEvent",
                        "ping_agents"
                    ],
                    "docstring": "Main dashboard window for agent monitoring and control",
                    "base_classes": [
                        "QMainWindow"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 51
        },
        "archive\\orphans\\agents\\agent9_response_injector.py": {
            "language": ".py",
            "functions": [
                "__init__"
            ],
            "classes": {
                "Agent9ResponseInjector": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Listens for CHATGPT_RESPONSE_SCRAPED events and triggers Cursor injection tasks.",
                    "base_classes": [
                        "BaseAgent"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 2
        },
        "archive\\orphans\\agents\\base_agent.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "status"
            ],
            "classes": {
                "BaseAgent": {
                    "methods": [
                        "__init__",
                        "status"
                    ],
                    "docstring": "Abstract base class for all DreamOS agents.",
                    "base_classes": [
                        "ABC"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "archive\\orphans\\agents\\autonomy_recovery_patch.py": {
            "language": ".py",
            "functions": [
                "sync_read",
                "sync_write"
            ],
            "classes": {
                "AgentStateError": {
                    "methods": [],
                    "docstring": "Custom exception for agent state issues.",
                    "base_classes": [
                        "Exception"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 2
        },
        "archive\\orphans\\agents\\cursor_worker.py": {
            "language": ".py",
            "functions": [
                "run",
                "pull_tasks",
                "push_result",
                "click_button",
                "wait_for_idle",
                "process_task_ui"
            ],
            "classes": {
                "TaskChannel": {
                    "methods": [
                        "pull_tasks",
                        "push_result"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Prototype",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "archive\\orphans\\agents\\context_router_agent.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load_routing_rules",
                "_determine_target_agent"
            ],
            "classes": {
                "ContextRouterAgent": {
                    "methods": [
                        "__init__",
                        "_load_routing_rules",
                        "_determine_target_agent"
                    ],
                    "docstring": "Dynamically routes incoming requests (e.g., scraped prompts)\nto specific target agents based on context metadata.",
                    "base_classes": [
                        "BaseAgent"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "archive\\orphans\\agents\\recovery_coordinator.py": {
            "language": ".py",
            "functions": [
                "__init__"
            ],
            "classes": {
                "RecoveryCoordinatorAgent": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Monitors for failed and timed-out tasks.\nAttempts retries for failed tasks based on a configured strategy.\nMarks tasks as permanently failed if retries are exhausted or critical errors occur.\nMarks tasks as failed if they run longer than the configured timeout.",
                    "base_classes": [
                        "BaseAgent"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 2
        },
        "archive\\orphans\\agents\\shadow_task_nexus.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load",
                "_save",
                "get_next_task",
                "add_task",
                "update_task_status",
                "get_all_tasks",
                "stats",
                "get_task_by_id",
                "remove_task"
            ],
            "classes": {
                "ShadowTaskNexus": {
                    "methods": [
                        "__init__",
                        "_load",
                        "_save",
                        "get_next_task",
                        "add_task",
                        "update_task_status",
                        "get_all_tasks",
                        "stats",
                        "get_task_by_id",
                        "remove_task"
                    ],
                    "docstring": "Fallback task queue for Agent-1, mirroring TaskNexus but using shadow_backlog.json.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "Task": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "BaseModel"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 20
        },
        "archive\\orphans\\agents\\task_feedback_router.py": {
            "language": ".py",
            "functions": [
                "find_task_file",
                "route_feedback",
                "run_loop"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "archive\\orphans\\agents\\supervisor_agent.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "load_directives",
                "dispatch_tasks",
                "gather_results",
                "save_results",
                "run_loop"
            ],
            "classes": {
                "SupervisorAgent": {
                    "methods": [
                        "__init__",
                        "load_directives",
                        "dispatch_tasks",
                        "gather_results",
                        "save_results",
                        "run_loop"
                    ],
                    "docstring": "Orchestrates tasks between ChatGPT WebAgents and Cursor workers.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 12
        },
        "archive\\orphans\\agents\\utils.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "archive\\orphans\\agents\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "archive\\orphans\\agents\\agents\\task_executor_agent.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load_tasks",
                "_check_dependencies",
                "handle_response",
                "run_cycle"
            ],
            "classes": {
                "TaskStatus": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Prototype",
                    "agent_type": "Utility"
                },
                "TaskExecutorAgent": {
                    "methods": [
                        "__init__",
                        "_load_tasks",
                        "_check_dependencies",
                        "handle_response",
                        "run_cycle"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 10
        },
        "archive\\orphans\\agents\\agents\\tool_executor_agent.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "execute_plan"
            ],
            "classes": {
                "ToolExecutionAgent": {
                    "methods": [
                        "__init__",
                        "execute_plan"
                    ],
                    "docstring": "Executes a plan (list of tool call steps) sequentially.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "archive\\orphans\\agents\\library\\agent_devlog.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_get_default_template",
                "_format_log_entry",
                "_append_entry"
            ],
            "classes": {
                "AgentDevlog": {
                    "methods": [
                        "__init__",
                        "_get_default_template",
                        "_format_log_entry",
                        "_append_entry"
                    ],
                    "docstring": "An agent that listens to the AgentBus and automatically logs significant events to a daily devlog file.",
                    "base_classes": [
                        "BaseAgent"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "archive\\orphans\\agents\\library\\agent_lore_writer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "check_mailbox",
                "generate_lore",
                "write_lore",
                "run_cycle"
            ],
            "classes": {
                "AgentLoreWriter": {
                    "methods": [
                        "__init__",
                        "check_mailbox",
                        "generate_lore",
                        "write_lore",
                        "run_cycle"
                    ],
                    "docstring": "Minimal Lore Writer Agent Scaffold.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 10
        },
        "archive\\orphans\\agents\\library\\task_promoter_agent.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_get_completed_task_ids",
                "_get_pending_backlog_tasks",
                "promote_eligible_tasks",
                "run_standalone"
            ],
            "classes": {
                "TaskPromoterAgent": {
                    "methods": [
                        "__init__",
                        "_get_completed_task_ids",
                        "_get_pending_backlog_tasks",
                        "promote_eligible_tasks",
                        "run_standalone"
                    ],
                    "docstring": "An agent that periodically scans the task backlog and promotes tasks\nto the ready queue if their dependencies are met.",
                    "base_classes": [
                        "BaseAgent"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 10
        },
        "archive\\orphans\\agents\\mixins\\voting.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "decide_vote"
            ],
            "classes": {
                "AgentVoterMixin": {
                    "methods": [
                        "__init__",
                        "decide_vote"
                    ],
                    "docstring": "A mixin for Agents to automatically participate in voting sessions using standard pub/sub.\n\nAgents using this mixin should have `agent_id`, `agent_bus` attributes.\nSubscribes to VOTE_INITIATED_TOPIC and publishes votes to VOTE_CAST_TOPIC.\nProvides a default handler to cast a simple vote.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "archive\\orphans\\agents\\utils\\agent_utils.py": {
            "language": ".py",
            "functions": [
                "log_task_performance",
                "format_agent_report",
                "example_agent_util_function",
                "_task_done_callback"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "archive\\orphans\\agents\\utils\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "archive\\orphans\\apps\\dreamscape\\dreamscape_generator\\main.py": {
            "language": ".py",
            "functions": [
                "run_generation"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "archive\\orphans\\agents\\validation\\offline_validation_agent.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_calculate_sha256",
                "load_validation_matrix",
                "_check_file_age",
                "_check_file_size",
                "_check_json_validity",
                "_check_python_compilation",
                "_attempt_repair",
                "run_validation_check",
                "run_scan_cycle",
                "log_specific_failure",
                "log_validation_failure",
                "log_scan_summary"
            ],
            "classes": {
                "OfflineValidationAgent": {
                    "methods": [
                        "__init__",
                        "_calculate_sha256",
                        "load_validation_matrix",
                        "_check_file_age",
                        "_check_file_size",
                        "_check_json_validity",
                        "_check_python_compilation",
                        "_attempt_repair",
                        "run_validation_check",
                        "run_scan_cycle",
                        "log_specific_failure",
                        "log_validation_failure",
                        "log_scan_summary"
                    ],
                    "docstring": "Scans for tool output vs. file state consistency. Includes auto-repair.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 26
        },
        "archive\\orphans\\automation\\bridge_loop.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "archive\\orphans\\automation\\config.py": {
            "language": ".py",
            "functions": [
                "_find_project_root_marker_for_automation"
            ],
            "classes": {
                "GuiAutomationConfig": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "BaseModel"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "TheaCopyConfig": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "BaseModel"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 1
        },
        "archive\\orphans\\automation\\cursor_orchestrator.py": {
            "language": ".py",
            "functions": [
                "__new__",
                "__init__",
                "_load_all_coordinates",
                "_initialize_agent_status",
                "_check_and_recover_focus",
                "_perform_injection_sequence",
                "_perform_copy_sequence",
                "_perform_health_check_click",
                "_log_retry_attempt",
                "injection_task"
            ],
            "classes": {
                "CursorOrchestratorError": {
                    "methods": [],
                    "docstring": "Custom exception for Cursor Orchestrator errors.",
                    "base_classes": [
                        "CoreToolError"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "CursorOrchestrator": {
                    "methods": [
                        "__new__",
                        "__init__",
                        "_load_all_coordinates",
                        "_initialize_agent_status",
                        "_check_and_recover_focus",
                        "_perform_injection_sequence",
                        "_perform_copy_sequence",
                        "_perform_health_check_click",
                        "_log_retry_attempt"
                    ],
                    "docstring": "Manages interaction with multiple Cursor UI instances.\n\nProvides methods to inject prompts, retrieve responses, and manage the state\nof Cursor windows associated with specific agent IDs. Operates as a singleton.\nHandles coordinate loading and orchestrates UI automation via pyautogui/pyperclip.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 19
        },
        "archive\\orphans\\automation\\execution\\agent_factory.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "create_active_agents"
            ],
            "classes": {
                "AgentFactoryError": {
                    "methods": [],
                    "docstring": "Custom exception for agent factory errors.",
                    "base_classes": [
                        "Exception"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "AgentFactory": {
                    "methods": [
                        "__init__",
                        "create_active_agents"
                    ],
                    "docstring": "Handles the dynamic loading and instantiation of agents.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "archive\\orphans\\automation\\execution\\swarm_controller.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "start",
                "shutdown",
                "_spawn_thread",
                "_run_cursor_orchestrator_listener_async",
                "_worker_loop",
                "_maybe_launch_headless_cursor",
                "_route_loop",
                "_run_feedback_engine",
                "_persist_lore_metadata",
                "_compile_lore",
                "_start_stats_autologger",
                "_stats_loop",
                "_process_agent_output",
                "_handle_agent_error",
                "_load_initial_captain_id"
            ],
            "classes": {
                "SwarmController": {
                    "methods": [
                        "__init__",
                        "start",
                        "shutdown",
                        "_spawn_thread",
                        "_run_cursor_orchestrator_listener_async",
                        "_worker_loop",
                        "_maybe_launch_headless_cursor",
                        "_route_loop",
                        "_run_feedback_engine",
                        "_persist_lore_metadata",
                        "_compile_lore",
                        "_start_stats_autologger",
                        "_stats_loop",
                        "_process_agent_output",
                        "_handle_agent_error",
                        "_load_initial_captain_id"
                    ],
                    "docstring": "Top-level coordinator for Cursor agents (GUI & headless).",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 32
        },
        "archive\\orphans\\automation\\execution\\dream_mode_sleep.py": {
            "language": ".py",
            "functions": [
                "run_chatgpt_web_agent",
                "run_cursor_dispatcher",
                "run_task_feedback_router"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "archive\\orphans\\bridge\\bridge_loop.py": {
            "language": ".py",
            "functions": [
                "call_gpt_api",
                "write_bridge_output",
                "log_failure_trace",
                "relay_prompt_to_gpt",
                "get_file_mtime",
                "main_loop",
                "log_interaction"
            ],
            "classes": {},
            "routes": [],
            "complexity": 7
        },
        "archive\\orphans\\automation\\execution\\virtual_desktop_runner.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "launch_cursor_headless",
                "inject_keystrokes",
                "teardown"
            ],
            "classes": {
                "VirtualDesktopController": {
                    "methods": [
                        "__init__",
                        "launch_cursor_headless",
                        "inject_keystrokes",
                        "teardown"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "archive\\orphans\\automation\\execution\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "archive\\orphans\\channels\\azure_blob_channel.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "push",
                "pull"
            ],
            "classes": {
                "AzureBlobChannel": {
                    "methods": [
                        "__init__",
                        "push",
                        "pull"
                    ],
                    "docstring": "Placeholder for Azure Blob Channel.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "archive\\orphans\\bridge\\run_bridge_loop.py": {
            "language": ".py",
            "functions": [
                "cli",
                "__init__",
                "_default_queue_fn",
                "run",
                "_load_prompts",
                "_persist_response",
                "_sigint_handler"
            ],
            "classes": {
                "BridgeLoop": {
                    "methods": [
                        "__init__",
                        "_default_queue_fn",
                        "run",
                        "_load_prompts",
                        "_persist_response",
                        "_sigint_handler"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "ActionAgent"
                }
            },
            "routes": [],
            "complexity": 13
        },
        "archive\\orphans\\bridge\\http_bridge_service.py": {
            "language": ".py",
            "functions": [],
            "classes": {
                "InteractRequest": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "BaseModel"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "InteractResponse": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "BaseModel"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ErrorResponse": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "BaseModel"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 0
        },
        "archive\\orphans\\channels\\local_blob_channel.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_get_full_path",
                "push",
                "pull",
                "healthcheck"
            ],
            "classes": {
                "LocalBlobChannel": {
                    "methods": [
                        "__init__",
                        "_get_full_path",
                        "push",
                        "pull",
                        "healthcheck"
                    ],
                    "docstring": "Placeholder for Local Blob Channel (File System based).",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 10
        },
        "archive\\orphans\\chat_engine\\base_chat_adapter.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "archive\\orphans\\chat_engine\\chat_cycle_controller.py": {
            "language": ".py",
            "functions": [
                "sanitize_filename",
                "__init__",
                "_default_output_callback",
                "append_output",
                "start",
                "process_chat",
                "run_single_chat",
                "_save_prompt_response",
                "_save_run_summary",
                "shutdown",
                "__init__",
                "get"
            ],
            "classes": {
                "ChatCycleController": {
                    "methods": [
                        "__init__",
                        "_default_output_callback",
                        "append_output",
                        "start",
                        "process_chat",
                        "run_single_chat",
                        "_save_prompt_response",
                        "_save_run_summary",
                        "shutdown"
                    ],
                    "docstring": "Master orchestrator for chat scraping, prompt cycles,\nmemory updates, and Discord dispatching.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "Config": {
                    "methods": [
                        "__init__",
                        "get"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Prototype",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 23
        },
        "archive\\orphans\\chat_engine\\discord_dispatcher.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_setup_events",
                "send_message",
                "dispatch_memory_update",
                "dispatch_dreamscape_episode",
                "dispatch_feedback_loop",
                "run_bot",
                "shutdown"
            ],
            "classes": {
                "DiscordDispatcher": {
                    "methods": [
                        "__init__",
                        "_setup_events",
                        "send_message",
                        "dispatch_memory_update",
                        "dispatch_dreamscape_episode",
                        "dispatch_feedback_loop",
                        "run_bot",
                        "shutdown"
                    ],
                    "docstring": "DiscordDispatcher - Manages communication to a Discord server.\nSends updates on system events, memory updates, and AI output.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 16
        },
        "archive\\orphans\\chat_engine\\chat_scraper_service.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "get_all_chats",
                "get_filtered_chats",
                "validate_login",
                "manual_login_flow"
            ],
            "classes": {
                "ChatScraperService": {
                    "methods": [
                        "__init__",
                        "get_all_chats",
                        "get_filtered_chats",
                        "validate_login",
                        "manual_login_flow"
                    ],
                    "docstring": "ChatScraperService retrieves available chat titles and links from the chat UI.\nIt handles exclusions and filtering for downstream execution cycles.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 10
        },
        "archive\\orphans\\chat_engine\\feedback_engine.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load_memory",
                "_save_memory",
                "save_memory_async",
                "parse_and_update_memory",
                "apply_memory_updates",
                "log_feedback",
                "export_feedback_log",
                "analyze_feedback",
                "review_memory",
                "feedback_loop",
                "save_context_memory_async",
                "save_context_db",
                "review_context_memory"
            ],
            "classes": {
                "FeedbackEngine": {
                    "methods": [
                        "__init__",
                        "_load_memory",
                        "_save_memory",
                        "save_memory_async",
                        "parse_and_update_memory",
                        "apply_memory_updates",
                        "log_feedback",
                        "export_feedback_log",
                        "analyze_feedback",
                        "review_memory",
                        "feedback_loop",
                        "save_context_memory_async",
                        "save_context_db",
                        "review_context_memory"
                    ],
                    "docstring": "FeedbackEngine - Parses AI responses, updates persistent memory,\ntracks reinforcement loops, and evolves Victor.OS intelligence.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "DataAgent"
                }
            },
            "routes": [],
            "complexity": 28
        },
        "archive\\orphans\\chat_engine\\driver_manager.py": {
            "language": ".py",
            "functions": [
                "setup_logger",
                "example_main",
                "get_instance",
                "__init__",
                "__enter__",
                "__exit__",
                "_get_cached_driver_path",
                "_download_driver_if_needed",
                "_is_session_expired",
                "_renew_driver_session",
                "get_session_info",
                "set_session_timeout",
                "_create_chrome_options",
                "get_driver",
                "_quit_driver_instance",
                "release_driver",
                "save_cookies",
                "load_cookies",
                "clear_cookies",
                "is_logged_in",
                "execute_with_retry",
                "scroll_into_view",
                "scroll_page",
                "scroll_to_bottom_smoothly",
                "update_options",
                "shutdown",
                "_force_kill_browsers",
                "__del__"
            ],
            "classes": {
                "DriverManager": {
                    "methods": [
                        "get_instance",
                        "__init__",
                        "__enter__",
                        "__exit__",
                        "_get_cached_driver_path",
                        "_download_driver_if_needed",
                        "_is_session_expired",
                        "_renew_driver_session",
                        "get_session_info",
                        "set_session_timeout",
                        "_create_chrome_options",
                        "get_driver",
                        "_quit_driver_instance",
                        "release_driver",
                        "save_cookies",
                        "load_cookies",
                        "clear_cookies",
                        "is_logged_in",
                        "execute_with_retry",
                        "scroll_into_view",
                        "scroll_page",
                        "scroll_to_bottom_smoothly",
                        "update_options",
                        "shutdown",
                        "_force_kill_browsers",
                        "__del__"
                    ],
                    "docstring": "Unified DriverManager for Selenium-based browser automation.\n\nFeatures:\n  - Singleton pattern to ensure a single active driver instance per configuration hash\n  - Session management with automatic expiration (default 1 hour) and renewal\n  - Persistent profile support (or temporary profiles in headless mode)\n  - Cookie saving/loading for session persistence\n  - Support for headless mode, mobile emulation, and optional undetected mode\n  - Auto-downloading and caching of the ChromeDriver executable\n  - Robust retry mechanisms for resilient browser operations\n  - Utilities for waiting, scrolling, and option updates",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 54
        },
        "archive\\orphans\\chat_engine\\feedback_engine_v2.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "save_analysis"
            ],
            "classes": {
                "FeedbackEngineV2": {
                    "methods": [
                        "__init__",
                        "save_analysis"
                    ],
                    "docstring": "FeedbackEngineV2 analyzes failed prompts using an LLM and provides root cause analysis\nand recommended fixes based on archived failure data.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "archive\\orphans\\chat_engine\\gui_event_handler.py": {
            "language": ".py",
            "functions": [
                "run_gui",
                "__init__",
                "init_ui",
                "toggle_headless",
                "toggle_reverse",
                "toggle_archive",
                "start_dispatcher",
                "stop_dispatcher",
                "log",
                "__init__",
                "exec_",
                "__init__",
                "__init__",
                "__init__",
                "__init__",
                "__init__"
            ],
            "classes": {
                "GUIEventHandler": {
                    "methods": [
                        "__init__",
                        "init_ui",
                        "toggle_headless",
                        "toggle_reverse",
                        "toggle_archive",
                        "start_dispatcher",
                        "stop_dispatcher",
                        "log"
                    ],
                    "docstring": "GUI Event Handler for ChatMate Agent Control Panel\n- Control Config Flags (Headless, Reverse Order, Archive)\n- Start/Stop the Agent Dispatcher\n- Display logs or status updates",
                    "base_classes": [
                        "QMainWindow"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "QtWidgets": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Prototype",
                    "agent_type": "Utility"
                },
                "QtCore": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Prototype",
                    "agent_type": "Utility"
                },
                "QApplication": {
                    "methods": [
                        "__init__",
                        "exec_"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Prototype",
                    "agent_type": "Utility"
                },
                "QMainWindow": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Prototype",
                    "agent_type": "Utility"
                },
                "QPushButton": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Prototype",
                    "agent_type": "Utility"
                },
                "QLabel": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Prototype",
                    "agent_type": "Utility"
                },
                "QCheckBox": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Prototype",
                    "agent_type": "Utility"
                },
                "QTextEdit": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Prototype",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 31
        },
        "archive\\orphans\\chat_engine\\prompt_execution_service.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "get_prompt",
                "execute_prompt_cycle",
                "execute_prompts_single_chat",
                "execute_prompts_concurrently",
                "_execute_single_prompt_thread",
                "_determine_wait_time",
                "_post_process_jawbone_response",
                "_send_prompt",
                "_fetch_response",
                "send_prompt_and_wait"
            ],
            "classes": {
                "PromptExecutionService": {
                    "methods": [
                        "__init__",
                        "get_prompt",
                        "execute_prompt_cycle",
                        "execute_prompts_single_chat",
                        "execute_prompts_concurrently",
                        "_execute_single_prompt_thread",
                        "_determine_wait_time",
                        "_post_process_jawbone_response",
                        "_send_prompt",
                        "_fetch_response",
                        "send_prompt_and_wait"
                    ],
                    "docstring": "PromptExecutionService handles sending prompts and retrieving responses.\nIt manages execution cycles for single chats or cycles across multiple prompts.\nNow supports model switching, feedback integration, and parallel execution.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 22
        },
        "archive\\orphans\\cli\\bridge_diagnostic.py": {
            "language": ".py",
            "functions": [
                "run_diagnostic"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "archive\\orphans\\cli\\calibrate_gui_coords.py": {
            "language": ".py",
            "functions": [
                "load_coords",
                "save_coords",
                "calibrate_coordinates",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "archive\\orphans\\cli\\dreamscape_controller.py": {
            "language": ".py",
            "functions": [
                "setup_logging",
                "load_deployment_config",
                "load_agent_prompt",
                "initialize_agents",
                "run_controller",
                "__init__",
                "__str__",
                "launch",
                "monitor",
                "stop"
            ],
            "classes": {
                "AgentInstance": {
                    "methods": [
                        "__init__",
                        "__str__",
                        "launch",
                        "monitor",
                        "stop"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 15
        },
        "archive\\orphans\\cli\\cursor_injector.py": {
            "language": ".py",
            "functions": [
                "get_cli_settings",
                "_cli_next_prompt_file",
                "_cli_mark_processed",
                "_cli_ensure_focus",
                "_cli_type_or_paste",
                "_cli_inject_single",
                "_cli_loop",
                "_build_cli_parser",
                "cli_main",
                "__init__",
                "_pause",
                "focus_window",
                "_type_or_paste",
                "type_text"
            ],
            "classes": {
                "CLISettings": {
                    "methods": [],
                    "docstring": "Runtime configuration container for CLI script operations.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "CursorInjector": {
                    "methods": [
                        "__init__",
                        "_pause",
                        "focus_window",
                        "_type_or_paste",
                        "type_text"
                    ],
                    "docstring": "Handles direct GUI interactions with the Cursor application window.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 19
        },
        "archive\\orphans\\cli\\main.py": {
            "language": ".py",
            "functions": [
                "cli",
                "run"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "archive\\orphans\\cli\\run_e2e_bridge_test.py": {
            "language": ".py",
            "functions": [
                "step",
                "assert_file",
                "create_prompt_file",
                "run_bridge_loop",
                "validate_latest_output",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 6
        },
        "archive\\orphans\\cli\\manage_tasks.py": {
            "language": ".py",
            "functions": [
                "cli",
                "claim",
                "update",
                "complete",
                "list_backlog",
                "list_ready",
                "list_working",
                "list_completed",
                "get",
                "add",
                "promote"
            ],
            "classes": {},
            "routes": [],
            "complexity": 11
        },
        "archive\\orphans\\cli\\safe_writer_cli.py": {
            "language": ".py",
            "functions": [
                "safe_write_cli"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "archive\\orphans\\cli\\state_cmds.py": {
            "language": ".py",
            "functions": [
                "create_snapshot_cmd",
                "list_snapshots_cmd"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "archive\\orphans\\cli\\safe_edit_json_list.py": {
            "language": ".py",
            "functions": [
                "_atomic_write_json",
                "safe_edit_json_list"
            ],
            "classes": {
                "SafeEditError": {
                    "methods": [],
                    "docstring": "Custom exception for errors during safe JSON list editing.",
                    "base_classes": [
                        "Exception"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 2
        },
        "archive\\orphans\\cli\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "archive\\orphans\\coordination\\governance_utils.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "archive\\orphans\\coordination\\dispatcher.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "__init__",
                "register_handler"
            ],
            "classes": {
                "Event": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Minimal Event class stub, likely for import compatibility.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "EventDispatcher": {
                    "methods": [
                        "__init__",
                        "register_handler"
                    ],
                    "docstring": "Minimal EventDispatcher stub, likely for import compatibility.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "archive\\orphans\\coordination\\voting_coordinator.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "reset_session"
            ],
            "classes": {
                "VotingCoordinator": {
                    "methods": [
                        "__init__",
                        "reset_session"
                    ],
                    "docstring": "Manages voting sessions initiated within the Dream.OS swarm using standard pub/sub.\n\nListens for events on VOTE_INITIATED_TOPIC, collects votes from VOTE_CAST_TOPIC,\ntallies results based on timeout or quorum, and publishes results to VOTE_RESULTS_TOPIC.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "archive\\orphans\\coordination\\project_board_manager.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_resolve_path",
                "_get_lock",
                "_load_file",
                "_read_board_file",
                "_load_backlog",
                "_load_ready_queue",
                "_load_working_tasks",
                "_load_completed_tasks",
                "_save_backlog",
                "_save_ready_queue",
                "_save_working_tasks",
                "_save_completed_tasks",
                "_load_schema",
                "_validate_task",
                "_find_task_index",
                "_atomic_write",
                "_save_file",
                "get_task",
                "list_backlog_tasks",
                "list_ready_queue_tasks",
                "list_working_tasks",
                "add_task",
                "add_task_to_backlog",
                "_generate_task_id",
                "update_working_task",
                "delete_task",
                "move_task_to_completed",
                "claim_ready_task",
                "promote_task_to_ready",
                "_create_from_cli_args"
            ],
            "classes": {
                "ProjectBoardManager": {
                    "methods": [
                        "__init__",
                        "_resolve_path",
                        "_get_lock",
                        "_load_file",
                        "_read_board_file",
                        "_load_backlog",
                        "_load_ready_queue",
                        "_load_working_tasks",
                        "_load_completed_tasks",
                        "_save_backlog",
                        "_save_ready_queue",
                        "_save_working_tasks",
                        "_save_completed_tasks",
                        "_load_schema",
                        "_validate_task",
                        "_find_task_index",
                        "_atomic_write",
                        "_save_file",
                        "get_task",
                        "list_backlog_tasks",
                        "list_ready_queue_tasks",
                        "list_working_tasks",
                        "add_task",
                        "add_task_to_backlog",
                        "_generate_task_id",
                        "update_working_task",
                        "delete_task",
                        "move_task_to_completed",
                        "claim_ready_task",
                        "promote_task_to_ready",
                        "_create_from_cli_args"
                    ],
                    "docstring": "Manages loading, saving, and modifying tasks on JSON-based project boards.\nEnsures safe concurrent access via file locking.\n\nSupports Backlog, Ready Queue, Working, and Completed boards.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 62
        },
        "archive\\orphans\\coordination\\dispatchers\\base_dispatcher.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "add_task",
                "execute_task",
                "run_dispatcher_loop",
                "stop",
                "get_status"
            ],
            "classes": {
                "BaseDispatcher": {
                    "methods": [
                        "__init__",
                        "add_task",
                        "execute_task",
                        "run_dispatcher_loop",
                        "stop",
                        "get_status"
                    ],
                    "docstring": "Base dispatcher that manages a task queue and processes tasks.",
                    "base_classes": [
                        "ABC"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 12
        },
        "archive\\orphans\\coordination\\tasks\\task_utils.py": {
            "language": ".py",
            "functions": [
                "read_tasks",
                "write_tasks",
                "_calculate_task_score",
                "update_task_status"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "archive\\orphans\\core\\swarm_sync.py": {
            "language": ".py",
            "functions": [
                "_get_sync_config",
                "_get_state_file_path",
                "read_swarm_state",
                "update_agent_state"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "archive\\orphans\\core\\agents\\capabilities\\schema.py": {
            "language": ".py",
            "functions": [
                "ensure_datetime_utc"
            ],
            "classes": {
                "CapabilitySchema": {
                    "methods": [],
                    "docstring": "Defines the expected input, output, and error data structures for a capability.",
                    "base_classes": [
                        "BaseModel"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "CapabilityMetadata": {
                    "methods": [],
                    "docstring": "Metadata associated with a capability.",
                    "base_classes": [
                        "BaseModel"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "CapabilityPerformance": {
                    "methods": [],
                    "docstring": "Estimated or measured performance characteristics.",
                    "base_classes": [
                        "BaseModel"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "CapabilityResourceRequirements": {
                    "methods": [],
                    "docstring": "Estimated resource needs for executing the capability.",
                    "base_classes": [
                        "BaseModel"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "AgentCapability": {
                    "methods": [
                        "ensure_datetime_utc"
                    ],
                    "docstring": "Represents a single capability offered by an agent, registered in the central registry.",
                    "base_classes": [
                        "BaseModel"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 2
        },
        "archive\\orphans\\core\\agents\\capabilities\\library\\debate_management.py": {
            "language": ".py",
            "functions": [
                "debate_initiate_capability"
            ],
            "classes": {
                "PersonaInput": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "TypedDict"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "DebateInitiateInput": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "TypedDict"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "DebateInitiateOutput": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "TypedDict"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 1
        },
        "archive\\orphans\\core\\agents\\capabilities\\library\\narrative_generate.py": {
            "language": ".py",
            "functions": [
                "narrative_generate_episode_capability"
            ],
            "classes": {
                "NarrativeGenerateInput": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "TypedDict"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "NarrativeGenerateOutput": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "TypedDict"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 1
        },
        "archive\\orphans\\core\\agents\\capabilities\\library\\meeting_management.py": {
            "language": ".py",
            "functions": [
                "meeting_create_capability",
                "meeting_post_message_capability",
                "meeting_read_messages_capability",
                "meeting_get_info_capability",
                "meeting_join_capability",
                "meeting_vote_capability",
                "meeting_update_state_capability",
                "meeting_discover_capability"
            ],
            "classes": {
                "MeetingCreateInput": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "TypedDict"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MeetingCreateOutput": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "TypedDict"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MeetingPostMessageInput": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "TypedDict"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MeetingPostMessageOutput": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "TypedDict"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MeetingReadMessagesInput": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "TypedDict"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MeetingReadMessagesOutput": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "TypedDict"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MeetingGetInfoInput": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "TypedDict"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MeetingGetInfoOutput": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "TypedDict"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MeetingJoinInput": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "TypedDict"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MeetingJoinOutput": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "TypedDict"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MeetingVoteInput": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "TypedDict"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MeetingVoteOutput": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "TypedDict"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MeetingUpdateStateInput": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "TypedDict"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MeetingUpdateStateOutput": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "TypedDict"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MeetingDiscoverInput": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "TypedDict"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MeetingDiscoverOutput": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "TypedDict"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MeetingParticipant": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "BaseModel"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MeetingAgendaItem": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "BaseModel"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MeetingLogEntry": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "BaseModel"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MeetingSchema": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "BaseModel"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "archive\\orphans\\core\\agents\\capabilities\\library\\task_rewrite.py": {
            "language": ".py",
            "functions": [
                "get_llm_client",
                "task_rewrite_capability",
                "generate"
            ],
            "classes": {
                "MockLlmClient": {
                    "methods": [
                        "generate"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Prototype",
                    "agent_type": "Utility"
                },
                "LlmApiError": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "Exception"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "TaskRewriteInput": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "TypedDict"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "TaskRewriteOutput": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "TypedDict"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "archive\\orphans\\core\\awareness\\context_manager.py": {
            "language": ".py",
            "functions": [],
            "classes": {
                "ContextManager": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Prototype",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 0
        },
        "archive\\orphans\\core\\comms\\debate_schemas.py": {
            "language": ".py",
            "functions": [
                "generate_uuid",
                "current_utc_iso"
            ],
            "classes": {
                "DebateInfo": {
                    "methods": [],
                    "docstring": "Basic info about a debate.",
                    "base_classes": [
                        "BaseModel"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "Persona": {
                    "methods": [],
                    "docstring": "Defines the role, stance, and instructions for an agent in a specific debate.",
                    "base_classes": [
                        "BaseModel"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ArgumentReference": {
                    "methods": [],
                    "docstring": "Reference cited in an argument.",
                    "base_classes": [
                        "BaseModel"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "Argument": {
                    "methods": [],
                    "docstring": "Represents a single contribution (argument) by an agent during a debate turn.",
                    "base_classes": [
                        "BaseModel"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "DebateParticipantInfo": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "BaseModel"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "DebateManifest": {
                    "methods": [],
                    "docstring": "Metadata stored in manifest.json for a debate arena.",
                    "base_classes": [
                        "BaseModel"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 2
        },
        "archive\\orphans\\core\\comms\\mailbox.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_get_target_inbox",
                "archive_message"
            ],
            "classes": {
                "MailboxError": {
                    "methods": [],
                    "docstring": "Custom exception for mailbox operations.",
                    "base_classes": [
                        "Exception"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MailboxHandler": {
                    "methods": [
                        "__init__",
                        "_get_target_inbox",
                        "archive_message"
                    ],
                    "docstring": "Handles file-based mailbox operations for an agent using standardized JSON format.\nProvides methods to send messages/tasks to other agents' inboxes\nand potentially manage the agent's own inbox/archive.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "archive\\orphans\\core\\comms\\mailbox_utils.py": {
            "language": ".py",
            "functions": [
                "validate_mailbox_message_schema",
                "create_mailbox_message",
                "get_agent_mailbox_path",
                "validate_agent_mailbox_path",
                "glob_sync",
                "write_sync",
                "read_sync"
            ],
            "classes": {},
            "routes": [],
            "complexity": 7
        },
        "archive\\orphans\\core\\comms\\meeting_schemas.py": {
            "language": ".py",
            "functions": [
                "generate_uuid",
                "current_utc_iso"
            ],
            "classes": {
                "BaseMeetingMessage": {
                    "methods": [],
                    "docstring": "Base model for all messages within a meeting mailbox.",
                    "base_classes": [
                        "BaseModel"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MeetingComment": {
                    "methods": [],
                    "docstring": "A general comment or discussion point.",
                    "base_classes": [
                        "BaseMeetingMessage"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MeetingProposal": {
                    "methods": [],
                    "docstring": "A formal proposal for discussion or voting.",
                    "base_classes": [
                        "BaseMeetingMessage"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MeetingVote": {
                    "methods": [],
                    "docstring": "A vote cast on a specific proposal.",
                    "base_classes": [
                        "BaseMeetingMessage"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MeetingSummary": {
                    "methods": [],
                    "docstring": "A summary of discussion points or meeting outcomes.",
                    "base_classes": [
                        "BaseMeetingMessage"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MeetingStateChange": {
                    "methods": [],
                    "docstring": "Indicates a change in the overall meeting state.",
                    "base_classes": [
                        "BaseMeetingMessage"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MeetingAgendaItem": {
                    "methods": [],
                    "docstring": "An item added to the meeting agenda.",
                    "base_classes": [
                        "BaseMeetingMessage"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ParticipantInfo": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "BaseModel"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MeetingManifest": {
                    "methods": [],
                    "docstring": "Metadata stored in manifest.json for a meeting.",
                    "base_classes": [
                        "BaseModel"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 2
        },
        "archive\\orphans\\core\\coordination\\agent_bus.py": {
            "language": ".py",
            "functions": [
                "get_agent_bus",
                "__init__",
                "subscribe",
                "unsubscribe",
                "dispatch_event",
                "__new__",
                "__init__",
                "subscribe",
                "unsubscribe",
                "dispatch_event",
                "register_agent",
                "unregister_agent",
                "get_agent_info",
                "update_agent_status"
            ],
            "classes": {
                "BusError": {
                    "methods": [],
                    "docstring": "Base exception for AgentBus errors.",
                    "base_classes": [
                        "Exception"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "TopicNotFoundError": {
                    "methods": [],
                    "docstring": "Raised when a topic is not found.",
                    "base_classes": [
                        "BusError"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "SubscriberCallbackError": {
                    "methods": [],
                    "docstring": "Raised when a subscriber callback fails.",
                    "base_classes": [
                        "BusError"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MessageValidationError": {
                    "methods": [],
                    "docstring": "Raised when message validation fails.",
                    "base_classes": [
                        "BusError"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "BaseEvent": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "BaseModel"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "SimpleEventBus": {
                    "methods": [
                        "__init__",
                        "subscribe",
                        "unsubscribe",
                        "dispatch_event"
                    ],
                    "docstring": "A simple, thread-safe event bus implementation.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "AgentBus": {
                    "methods": [
                        "__new__",
                        "__init__",
                        "subscribe",
                        "unsubscribe",
                        "dispatch_event",
                        "register_agent",
                        "unregister_agent",
                        "get_agent_info",
                        "update_agent_status"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 27
        },
        "archive\\orphans\\core\\coordination\\base_agent.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "register_command_handler",
                "_get_priority_value",
                "_setup_logger",
                "get_status",
                "get_capabilities",
                "_get_default_agent_bus"
            ],
            "classes": {
                "BaseAgent": {
                    "methods": [
                        "__init__",
                        "register_command_handler",
                        "_get_priority_value",
                        "_setup_logger",
                        "get_status",
                        "get_capabilities",
                        "_get_default_agent_bus"
                    ],
                    "docstring": "Base class for all Dream.OS agents providing common functionality.",
                    "base_classes": [
                        "ABC",
                        "BaseAgentLifecycleMixin"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 14
        },
        "archive\\orphans\\core\\coordination\\base_agent_lifecycle.py": {
            "language": ".py",
            "functions": [],
            "classes": {
                "BaseAgentLifecycleMixin": {
                    "methods": [],
                    "docstring": "Mixin containing start and stop logic for BaseAgent.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 0
        },
        "archive\\orphans\\core\\coordination\\enums.py": {
            "language": ".py",
            "functions": [],
            "classes": {
                "AgentStatus": {
                    "methods": [],
                    "docstring": "Represents the possible operational statuses of an Agent.",
                    "base_classes": [
                        "Enum"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 0
        },
        "archive\\orphans\\core\\coordination\\event_payloads.py": {
            "language": ".py",
            "functions": [
                "to_dict"
            ],
            "classes": {
                "ErrorEventPayload": {
                    "methods": [],
                    "docstring": "Unified payload for system or agent-specific error events. Replaces SystemAgentErrorPayload and AgentErrorPayload.",
                    "base_classes": [
                        "BaseModel"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "AgentStatusEventPayload": {
                    "methods": [],
                    "docstring": "Unified payload for various agent status update events. Replaces AgentStatusChangePayload and AgentStatusPayload.",
                    "base_classes": [
                        "BaseModel"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "AgentRegistrationPayload": {
                    "methods": [],
                    "docstring": "Payload for SYSTEM_AGENT_REGISTERED / UNREGISTERED events.",
                    "base_classes": [
                        "BaseModel"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "TaskEventPayload": {
                    "methods": [],
                    "docstring": "Base payload for Task Lifecycle events. Contains only common fields.",
                    "base_classes": [
                        "BaseModel"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "TaskProgressPayload": {
                    "methods": [],
                    "docstring": "Payload for TASK_PROGRESS events.",
                    "base_classes": [
                        "TaskEventPayload"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "TaskCompletionPayload": {
                    "methods": [],
                    "docstring": "Payload for TASK_COMPLETED events.",
                    "base_classes": [
                        "TaskEventPayload"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "TaskFailurePayload": {
                    "methods": [],
                    "docstring": "Payload for TASK_FAILED events.",
                    "base_classes": [
                        "TaskEventPayload"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ToolCallPayload": {
                    "methods": [],
                    "docstring": "Payload for TOOL_CALL events.",
                    "base_classes": [
                        "BaseModel"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ToolResultPayload": {
                    "methods": [],
                    "docstring": "Payload for TOOL_RESULT events.",
                    "base_classes": [
                        "BaseModel"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MemoryEventData": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "BaseModel"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "CursorInjectRequestPayload": {
                    "methods": [
                        "to_dict"
                    ],
                    "docstring": "Payload for when a prompt injection is requested for a specific agent.",
                    "base_classes": [
                        "BaseModel"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "CursorRetrieveRequestPayload": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "BaseModel"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "CursorResultPayload": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "BaseModel"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "AgentContractStatusPayload": {
                    "methods": [],
                    "docstring": "Payload for AGENT_CONTRACT_STATUS event (response to query).",
                    "base_classes": [
                        "BaseModel"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "RouteInjectPayload": {
                    "methods": [],
                    "docstring": "Payload for ROUTE_INJECTION_REQUEST event.",
                    "base_classes": [
                        "BaseModel"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "CursorEventPayload": {
                    "methods": [],
                    "docstring": "Standard payload for Cursor Interaction events (CURSOR_*).",
                    "base_classes": [
                        "BaseModel"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ScrapedDataPayload": {
                    "methods": [],
                    "docstring": "Payload for CHATGPT_RESPONSE_SCRAPED event.",
                    "base_classes": [
                        "BaseModel"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ApprovalRequestPayload": {
                    "methods": [],
                    "docstring": "Payload for SUPERVISOR_APPROVAL_REQUESTED event.",
                    "base_classes": [
                        "BaseModel"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ApprovalResponsePayload": {
                    "methods": [],
                    "docstring": "Payload for SUPERVISOR_APPROVAL_RESPONSE event.",
                    "base_classes": [
                        "BaseModel"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "SupervisorAlertPayload": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "BaseModel"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "TaskValidationFailedPayload": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "TaskEventPayload"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "CapabilityRegisteredPayload": {
                    "methods": [],
                    "docstring": "Payload for SYSTEM_CAPABILITY_REGISTERED event.",
                    "base_classes": [
                        "BaseModel"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "CapabilityUnregisteredPayload": {
                    "methods": [],
                    "docstring": "Payload for SYSTEM_CAPABILITY_UNREGISTERED event.",
                    "base_classes": [
                        "BaseModel"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "Config": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Prototype",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 2
        },
        "archive\\orphans\\core\\coordination\\event_types.py": {
            "language": ".py",
            "functions": [
                "__str__"
            ],
            "classes": {
                "EventType": {
                    "methods": [
                        "__str__"
                    ],
                    "docstring": "Enumeration of standardized event types for AgentBus communication.\n\nUses hierarchical dot notation for topic structure:\ne.g., scope.domain.resource.action[.status]",
                    "base_classes": [
                        "Enum"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 2
        },
        "archive\\orphans\\core\\coordination\\message_patterns.py": {
            "language": ".py",
            "functions": [
                "create_task_message",
                "update_task_status"
            ],
            "classes": {
                "TaskStatus": {
                    "methods": [],
                    "docstring": "Task execution status.",
                    "base_classes": [
                        "Enum"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "TaskPriority": {
                    "methods": [],
                    "docstring": "Task priority levels.",
                    "base_classes": [
                        "Enum"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "TaskMessage": {
                    "methods": [],
                    "docstring": "Standard task message format, used as the 'data' field in AgentBus messages.",
                    "base_classes": [
                        "BaseModel"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "Config": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Prototype",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 2
        },
        "archive\\orphans\\core\\coordination\\project_board_manager.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_resolve_path",
                "_get_lock",
                "_load_file",
                "_read_board_file",
                "_load_backlog",
                "_load_ready_queue",
                "_load_working_tasks",
                "_load_completed_tasks",
                "_save_backlog",
                "_save_ready_queue",
                "_save_working_tasks",
                "_save_completed_tasks",
                "_load_schema",
                "_validate_task",
                "_find_task_index",
                "_atomic_write",
                "_save_file",
                "get_task",
                "list_backlog_tasks",
                "list_ready_queue_tasks",
                "list_working_tasks",
                "add_task",
                "add_task_to_backlog",
                "_get_utc_timestamp",
                "_generate_task_id",
                "update_working_task",
                "delete_task",
                "move_task_to_completed",
                "claim_ready_task",
                "promote_task_to_ready",
                "_create_from_cli_args"
            ],
            "classes": {
                "ProjectBoardManager": {
                    "methods": [
                        "__init__",
                        "_resolve_path",
                        "_get_lock",
                        "_load_file",
                        "_read_board_file",
                        "_load_backlog",
                        "_load_ready_queue",
                        "_load_working_tasks",
                        "_load_completed_tasks",
                        "_save_backlog",
                        "_save_ready_queue",
                        "_save_working_tasks",
                        "_save_completed_tasks",
                        "_load_schema",
                        "_validate_task",
                        "_find_task_index",
                        "_atomic_write",
                        "_save_file",
                        "get_task",
                        "list_backlog_tasks",
                        "list_ready_queue_tasks",
                        "list_working_tasks",
                        "add_task",
                        "add_task_to_backlog",
                        "_get_utc_timestamp",
                        "_generate_task_id",
                        "update_working_task",
                        "delete_task",
                        "move_task_to_completed",
                        "claim_ready_task",
                        "promote_task_to_ready",
                        "_create_from_cli_args"
                    ],
                    "docstring": "Manages loading, saving, and modifying tasks on JSON-based project boards.\nEnsures safe concurrent access via file locking.\n\nSupports Backlog, Ready Queue, Working, and Completed boards.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 64
        },
        "archive\\orphans\\core\\coordination\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "archive\\orphans\\core\\coordination\\schemas\\voting_patterns.py": {
            "language": ".py",
            "functions": [],
            "classes": {
                "VoteQuestion": {
                    "methods": [],
                    "docstring": "Structure for a single question within a vote.",
                    "base_classes": [
                        "BaseModel"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "VoteInitiated": {
                    "methods": [],
                    "docstring": "Message schema published to initiate an agent vote.",
                    "base_classes": [
                        "BaseModel"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "AgentVote": {
                    "methods": [],
                    "docstring": "Message schema published by an agent casting its vote.",
                    "base_classes": [
                        "BaseModel"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "VoteResults": {
                    "methods": [],
                    "docstring": "Message schema published by the coordinator with the outcome of a vote.",
                    "base_classes": [
                        "BaseModel"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 0
        },
        "archive\\orphans\\core\\db\\sqlite_adapter.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_connect",
                "_create_schema",
                "close",
                "get_all_agents",
                "update_agent_heartbeat",
                "get_stale_agents",
                "register_capability",
                "unregister_capability",
                "get_capabilities_for_agent",
                "get_all_capabilities",
                "find_agents_with_capability",
                "add_task",
                "update_task",
                "get_task",
                "_row_to_task",
                "get_tasks_by_status",
                "get_pending_tasks",
                "claim_next_pending_task",
                "get_all_tasks",
                "_log_status_change",
                "_update_task_tags",
                "get_tasks_by_tag",
                "get_tasks_by_agents_and_status"
            ],
            "classes": {
                "SQLiteAdapter": {
                    "methods": [
                        "__init__",
                        "_connect",
                        "_create_schema",
                        "close",
                        "get_all_agents",
                        "update_agent_heartbeat",
                        "get_stale_agents",
                        "register_capability",
                        "unregister_capability",
                        "get_capabilities_for_agent",
                        "get_all_capabilities",
                        "find_agents_with_capability",
                        "add_task",
                        "update_task",
                        "get_task",
                        "_row_to_task",
                        "get_tasks_by_status",
                        "get_pending_tasks",
                        "claim_next_pending_task",
                        "get_all_tasks",
                        "_log_status_change",
                        "_update_task_tags",
                        "get_tasks_by_tag",
                        "get_tasks_by_agents_and_status"
                    ],
                    "docstring": "Provides an interface to interact with the SQLite database for Dream.OS data.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 48
        },
        "archive\\orphans\\core\\errors\\exceptions.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "__str__"
            ],
            "classes": {
                "DreamOSError": {
                    "methods": [
                        "__init__",
                        "__str__"
                    ],
                    "docstring": "Base class for all custom exceptions in Dream.OS.",
                    "base_classes": [
                        "Exception"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ConfigurationError": {
                    "methods": [],
                    "docstring": "Raised when there is an error related to configuration loading or validation.",
                    "base_classes": [
                        "DreamOSError"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "AgentError": {
                    "methods": [],
                    "docstring": "Base class for errors originating from agents.",
                    "base_classes": [
                        "DreamOSError"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "TaskError": {
                    "methods": [],
                    "docstring": "Base class for errors related to task processing.",
                    "base_classes": [
                        "DreamOSError"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ToolError": {
                    "methods": [],
                    "docstring": "Base class for errors related to tool execution.",
                    "base_classes": [
                        "DreamOSError"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ProjectBoardError": {
                    "methods": [],
                    "docstring": "Base class for errors related to Project Board Manager operations.",
                    "base_classes": [
                        "DreamOSError"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "CoordinateError": {
                    "methods": [],
                    "docstring": "Raised for errors related to coordinate handling or lookup.",
                    "base_classes": [
                        "DreamOSError"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "TaskNotFoundError": {
                    "methods": [],
                    "docstring": "Raised when a task ID is not found on the expected board.",
                    "base_classes": [
                        "ProjectBoardError"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "TaskValidationError": {
                    "methods": [],
                    "docstring": "Raised when task data fails validation.",
                    "base_classes": [
                        "ProjectBoardError"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "BoardLockError": {
                    "methods": [],
                    "docstring": "Raised when a file lock cannot be acquired.",
                    "base_classes": [
                        "ProjectBoardError"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "CommunicationError": {
                    "methods": [],
                    "docstring": "Indicates an error in inter-agent or system communication mechanisms.",
                    "base_classes": [
                        "DreamOSError"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MemoryError": {
                    "methods": [],
                    "docstring": "Indicates an error related to an agent's memory component operations.",
                    "base_classes": [
                        "DreamOSError"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ValidationError": {
                    "methods": [],
                    "docstring": "Indicates that data failed a validation check (general purpose).",
                    "base_classes": [
                        "DreamOSError"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "CursorOrchestratorError": {
                    "methods": [],
                    "docstring": "Represents an error reported by the Cursor Orchestrator component.",
                    "base_classes": [
                        "DreamOSError"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ArchivingError": {
                    "methods": [],
                    "docstring": "Indicates an error during archiving or unarchiving operations.",
                    "base_classes": [
                        "DreamOSError"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "TaskProcessingError": {
                    "methods": [],
                    "docstring": "Error during task processing.",
                    "base_classes": [
                        "TaskError"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MessageHandlingError": {
                    "methods": [],
                    "docstring": "Error during message handling.",
                    "base_classes": [
                        "AgentError"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "archive\\orphans\\core\\events\\base_event.py": {
            "language": ".py",
            "functions": [
                "get_utc_iso_timestamp"
            ],
            "classes": {
                "BaseDreamEvent": {
                    "methods": [],
                    "docstring": "Base Pydantic model for all events dispatched via the AgentBus.",
                    "base_classes": [
                        "BaseModel"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "Config": {
                    "methods": [],
                    "docstring": "Pydantic config settings.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 1
        },
        "archive\\orphans\\core\\feedback\\thea_feedback_ingestor.py": {
            "language": ".py",
            "functions": [
                "load_recent_feedback",
                "inject_feedback_to_thea"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "archive\\orphans\\core\\health_checks\\cursor_status_check.py": {
            "language": ".py",
            "functions": [
                "__init__"
            ],
            "classes": {
                "CursorStatusCheck": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Encapsulates the logic for the cursor agent status check.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 2
        },
        "archive\\orphans\\core\\health_checks\\cursor_window_check.py": {
            "language": ".py",
            "functions": [
                "_load_coordinates",
                "check_cursor_window_reachability",
                "__init__",
                "run_check"
            ],
            "classes": {
                "CursorWindowCheck": {
                    "methods": [
                        "__init__",
                        "run_check"
                    ],
                    "docstring": "Encapsulates the logic for the cursor window reachability check.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "archive\\orphans\\core\\identity\\agent_identity.py": {
            "language": ".py",
            "functions": [
                "validate_agent_id_format",
                "ensure_datetime_obj",
                "update"
            ],
            "classes": {
                "AgentIdentity": {
                    "methods": [
                        "validate_agent_id_format",
                        "ensure_datetime_obj",
                        "update"
                    ],
                    "docstring": "Represents the persistent identity and metadata of an agent.",
                    "base_classes": [
                        "BaseModel"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "Config": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Prototype",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "archive\\orphans\\core\\identity\\agent_identity_manager.py": {
            "language": ".py",
            "functions": [
                "__new__",
                "__init__"
            ],
            "classes": {
                "AgentIdentityError": {
                    "methods": [],
                    "docstring": "Custom exception for Agent Identity Manager errors.",
                    "base_classes": [
                        "Exception"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "AgentIdentityManager": {
                    "methods": [
                        "__new__",
                        "__init__"
                    ],
                    "docstring": "Manages agent identities, including registration and updates.\n\nNOTE: This class uses an async initialization pattern.\nObtain the singleton instance using AgentIdentityManager()\nand then call `await instance.initialize()` before using other methods.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "archive\\orphans\\core\\identity\\agent_identity_store.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "write_sync",
                "read_sync",
                "write_empty_json"
            ],
            "classes": {
                "AgentIdentityStore": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Handles persistence of AgentIdentity objects to a JSON file.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 5
        },
        "archive\\orphans\\core\\logging\\swarm_logger.py": {
            "language": ".py",
            "functions": [
                "_get_log_path",
                "log_agent_event"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "archive\\orphans\\core\\narrative\\lore_parser.py": {
            "language": ".py",
            "functions": [
                "fetch_task_data",
                "fetch_git_log",
                "fetch_agent_logs",
                "fetch_captain_logs",
                "fetch_lore_context",
                "gather_narrative_context"
            ],
            "classes": {
                "ContextWindow": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "TypedDict"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "NarrativeContextData": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "TypedDict"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "archive\\orphans\\core\\state\\snapshot_manager.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "create_snapshot",
                "list_snapshots"
            ],
            "classes": {
                "SnapshotError": {
                    "methods": [],
                    "docstring": "Custom exception for snapshot errors.",
                    "base_classes": [
                        "Exception"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "SnapshotManager": {
                    "methods": [
                        "__init__",
                        "create_snapshot",
                        "list_snapshots"
                    ],
                    "docstring": "Handles creation of system state snapshots (DB file copy).",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "archive\\orphans\\core\\tasks\\nexus\\agent_registry_handler.py": {
            "language": ".py",
            "functions": [
                "__init__"
            ],
            "classes": {
                "AgentRegistryHandler": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Handles agent heartbeat recording and stale task reclamation using SQLiteAdapter.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 2
        },
        "archive\\orphans\\core\\tasks\\nexus\\capability_handler.py": {
            "language": ".py",
            "functions": [
                "__init__"
            ],
            "classes": {
                "CapabilityHandler": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Handles interactions with the CapabilityRegistry.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 2
        },
        "archive\\orphans\\core\\tasks\\nexus\\capability_registry.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load_capabilities_from_db",
                "register_capability",
                "unregister_capability",
                "get_capability",
                "get_agent_capabilities",
                "find_capabilities",
                "find_agents_for_capability",
                "_dispatch_registry_event",
                "update_capability_status"
            ],
            "classes": {
                "CapabilityRegistry": {
                    "methods": [
                        "__init__",
                        "_load_capabilities_from_db",
                        "register_capability",
                        "unregister_capability",
                        "get_capability",
                        "get_agent_capabilities",
                        "find_capabilities",
                        "find_agents_for_capability",
                        "_dispatch_registry_event",
                        "update_capability_status"
                    ],
                    "docstring": "Manages the registration and querying of agent capabilities via SQLiteAdapter.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 20
        },
        "archive\\orphans\\core\\tasks\\nexus\\db_task_nexus.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "get_next_task",
                "add_task",
                "update_task",
                "get_all_tasks",
                "get_task_by_id",
                "get_pending_tasks",
                "get_tasks_by_tag",
                "stats"
            ],
            "classes": {
                "TaskDict": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "TypedDict"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "DbTaskNexus": {
                    "methods": [
                        "__init__",
                        "get_next_task",
                        "add_task",
                        "update_task",
                        "get_all_tasks",
                        "get_task_by_id",
                        "get_pending_tasks",
                        "get_tasks_by_tag",
                        "stats"
                    ],
                    "docstring": "Task management interface backed by SQLiteAdapter.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 18
        },
        "archive\\orphans\\core\\tasks\\nexus\\shadow_task_nexus.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_ensure_backlog_exists",
                "load_tasks",
                "list_tasks",
                "add_task",
                "validate_shadow_backlog"
            ],
            "classes": {
                "TaskDict": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "TypedDict"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ShadowTaskNexus": {
                    "methods": [
                        "__init__",
                        "_ensure_backlog_exists",
                        "load_tasks",
                        "list_tasks",
                        "add_task",
                        "validate_shadow_backlog"
                    ],
                    "docstring": "A fallback task nexus operating on a local JSON file for redundancy.\nHandles basic task loading, validation, and manipulation if primary systems fail.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 12
        },
        "archive\\orphans\\core\\tasks\\nexus\\task_operations.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "get_priority"
            ],
            "classes": {
                "TaskOperationsHandler": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Handles core task operations like getting, adding, updating, and checking dependencies.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "archive\\orphans\\core\\tasks\\nexus\\task_nexus.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load",
                "_save",
                "get_next_task",
                "add_task",
                "update_task_status",
                "get_all_tasks",
                "stats",
                "get_task_by_id"
            ],
            "classes": {
                "Task": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "BaseModel"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "TaskNexus": {
                    "methods": [
                        "__init__",
                        "_load",
                        "_save",
                        "get_next_task",
                        "add_task",
                        "update_task_status",
                        "get_all_tasks",
                        "stats",
                        "get_task_by_id"
                    ],
                    "docstring": "Local task queue and state tracker reading/writing from JSON.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 18
        },
        "archive\\orphans\\core\\tts\\elevenlabs_tts.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "synthesize",
                "is_available",
                "__init__",
                "is_available",
                "synthesize",
                "save"
            ],
            "classes": {
                "AppConfig": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Prototype",
                    "agent_type": "Utility"
                },
                "TTSInterface": {
                    "methods": [
                        "synthesize",
                        "is_available"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Prototype",
                    "agent_type": "Utility"
                },
                "ElevenLabsTTS": {
                    "methods": [
                        "__init__",
                        "is_available",
                        "synthesize"
                    ],
                    "docstring": "TTS implementation using the ElevenLabs API.",
                    "base_classes": [
                        "TTSInterface"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ElevenLabs": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Prototype",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 13
        },
        "archive\\orphans\\core\\tts\\local_tts.py": {
            "language": ".py",
            "functions": [
                "synthesize",
                "is_available",
                "__init__",
                "is_available",
                "synthesize"
            ],
            "classes": {
                "TTSInterface": {
                    "methods": [
                        "synthesize",
                        "is_available"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Prototype",
                    "agent_type": "Utility"
                },
                "LocalTTS": {
                    "methods": [
                        "__init__",
                        "is_available",
                        "synthesize"
                    ],
                    "docstring": "TTS implementation using the pyttsx3 library for local synthesis.",
                    "base_classes": [
                        "TTSInterface"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 10
        },
        "archive\\orphans\\core\\tts\\tts_factory.py": {
            "language": ".py",
            "functions": [
                "get_tts_engine",
                "is_available",
                "synthesize",
                "__init__",
                "__init__",
                "is_available",
                "synthesize",
                "__init__",
                "is_available",
                "synthesize"
            ],
            "classes": {
                "TTSInterface": {
                    "methods": [
                        "is_available",
                        "synthesize"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Prototype",
                    "agent_type": "Utility"
                },
                "AppConfig": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Prototype",
                    "agent_type": "Utility"
                },
                "ElevenLabsTTS": {
                    "methods": [
                        "__init__",
                        "is_available",
                        "synthesize"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "TTSInterface"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "LocalTTS": {
                    "methods": [
                        "__init__",
                        "is_available",
                        "synthesize"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "TTSInterface"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 19
        },
        "archive\\orphans\\core\\tts\\tts_interface.py": {
            "language": ".py",
            "functions": [
                "synthesize",
                "is_available"
            ],
            "classes": {
                "TTSInterface": {
                    "methods": [
                        "synthesize",
                        "is_available"
                    ],
                    "docstring": "Abstract base class for Text-to-Speech engines.",
                    "base_classes": [
                        "ABC"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "archive\\orphans\\core\\tools\\script_runner.py": {
            "language": ".py",
            "functions": [
                "run_script",
                "__init__",
                "_resolve_script_path",
                "_run_script"
            ],
            "classes": {
                "ScriptExecutionError": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Custom exception for script execution failures.",
                    "base_classes": [
                        "Exception"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ScriptRunner": {
                    "methods": [
                        "_resolve_script_path",
                        "_run_script"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Prototype",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 7
        },
        "archive\\orphans\\core\\utils\\file_utils.py": {
            "language": ".py",
            "functions": [
                "_sync_rewrite",
                "dt_serializer"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "archive\\orphans\\dashboard\\dashboard_app.py": {
            "language": ".py",
            "functions": [
                "read_task_board",
                "index"
            ],
            "classes": {},
            "routes": [
                {
                    "function": "index",
                    "method": "ROUTE",
                    "path": "/"
                }
            ],
            "complexity": 2
        },
        "archive\\orphans\\dashboard\\dashboard_ui.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "refresh",
                "_inject_task",
                "_refresh_health_summary",
                "_update_chronicle_viewer"
            ],
            "classes": {
                "Dashboard": {
                    "methods": [
                        "__init__",
                        "refresh",
                        "_inject_task",
                        "_refresh_health_summary",
                        "_update_chronicle_viewer"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "QMainWindow"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 10
        },
        "archive\\orphans\\feedback\\feedback_engine_v2.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "process_feedback",
                "get_agent_adjustment"
            ],
            "classes": {
                "FeedbackEngineV2": {
                    "methods": [
                        "__init__",
                        "process_feedback",
                        "get_agent_adjustment"
                    ],
                    "docstring": "Placeholder implementation for FeedbackEngineV2.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "archive\\orphans\\governance\\agent_points_manager.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_get_lock",
                "_read_ledger_file",
                "_load_ledger",
                "_atomic_write_ledger",
                "_save_ledger",
                "_log_audit_event",
                "get_points_for_reason",
                "adjust_points",
                "get_agent_score",
                "get_all_scores",
                "determine_captain"
            ],
            "classes": {
                "AgentPointsManager": {
                    "methods": [
                        "__init__",
                        "_get_lock",
                        "_read_ledger_file",
                        "_load_ledger",
                        "_atomic_write_ledger",
                        "_save_ledger",
                        "_log_audit_event",
                        "get_points_for_reason",
                        "adjust_points",
                        "get_agent_score",
                        "get_all_scores",
                        "determine_captain"
                    ],
                    "docstring": "Handles reading, writing, and updating agent points in the ledger file.\nUses file locking for safe concurrent access.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 24
        },
        "archive\\orphans\\gui\\main_window.py": {
            "language": ".py",
            "functions": [
                "add_task",
                "__init__",
                "_run_async_bootstrap",
                "_create_navigation",
                "add_navigation_item",
                "get_sidebar_items",
                "log_event",
                "notify_mailbox",
                "sync_event_with_board",
                "save_state",
                "_append_task_to_list",
                "load_state_fallback",
                "closeEvent",
                "cleanup_resources",
                "_save_state",
                "_load_state",
                "_update_agents_list",
                "_update_escalated_agents_list",
                "_subscribe_prompt_event"
            ],
            "classes": {
                "DummyTaskManager": {
                    "methods": [
                        "add_task"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Prototype",
                    "agent_type": "Utility"
                },
                "TaskManager": {
                    "methods": [],
                    "docstring": "Alias for DummyTaskManager for testing compatibility.",
                    "base_classes": [
                        "DummyTaskManager"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "FeedbackEngine": {
                    "methods": [],
                    "docstring": "Placeholder for feedback engine in tests.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "DreamOSTabManager": {
                    "methods": [],
                    "docstring": "Placeholder for tab manager in tests.",
                    "base_classes": [
                        "QTabWidget"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "TabSystemShutdownManager": {
                    "methods": [],
                    "docstring": "Placeholder for tab system shutdown in tests.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "DreamOSMainWindow": {
                    "methods": [
                        "__init__",
                        "_run_async_bootstrap",
                        "_create_navigation",
                        "add_navigation_item",
                        "get_sidebar_items",
                        "log_event",
                        "notify_mailbox",
                        "sync_event_with_board",
                        "save_state",
                        "_append_task_to_list",
                        "load_state_fallback",
                        "closeEvent",
                        "cleanup_resources",
                        "_save_state",
                        "_load_state",
                        "_update_agents_list",
                        "_update_escalated_agents_list"
                    ],
                    "docstring": "Main application window for Dream.OS using Sidebar Navigation.",
                    "base_classes": [
                        "QMainWindow"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 37
        },
        "archive\\orphans\\gui\\supervisor_alert_viewer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "load_alerts"
            ],
            "classes": {
                "AlertViewerWindow": {
                    "methods": [
                        "__init__",
                        "load_alerts"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "QMainWindow"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "archive\\orphans\\hooks\\chatgpt_responder.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "get_response",
                "respond_to_mailbox"
            ],
            "classes": {
                "ChatGPTResponder": {
                    "methods": [
                        "__init__",
                        "get_response",
                        "respond_to_mailbox"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Prototype",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "archive\\orphans\\hooks\\chronicle_logger.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_format_entry",
                "_handle_event",
                "stop",
                "start"
            ],
            "classes": {
                "ChronicleLoggerHook": {
                    "methods": [
                        "__init__",
                        "_format_entry",
                        "_handle_event",
                        "stop",
                        "start"
                    ],
                    "docstring": "Listens to AgentBus events and logs them to the Dreamscape Chronicle.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 10
        },
        "archive\\orphans\\hooks\\conversation_logger.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_get_db_connection",
                "_setup_database",
                "register_event_handlers",
                "_log_turn",
                "_handle_agent_prompt_request",
                "_handle_agent_prompt_response",
                "close"
            ],
            "classes": {
                "ConversationLogger": {
                    "methods": [
                        "__init__",
                        "_get_db_connection",
                        "_setup_database",
                        "register_event_handlers",
                        "_log_turn",
                        "_handle_agent_prompt_request",
                        "_handle_agent_prompt_response",
                        "close"
                    ],
                    "docstring": "Logs conversation turns (prompts/replies) to an SQLite database via AgentBus events.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 16
        },
        "archive\\orphans\\hooks\\devlog_hook.py": {
            "language": ".py",
            "functions": [
                "__init__"
            ],
            "classes": {
                "DevlogHook": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Listens for significant system events on the AgentBus and logs them.\n\nThis hook subscribes to various event types (task completion/failure,\nagent errors, protocol violations) and appends formatted summaries to the\ncentral devlog file (`runtime/devlog/devlog.md`). It uses file locking\nto prevent concurrent write issues.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 2
        },
        "archive\\orphans\\hooks\\stats_logger.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "log_snapshot"
            ],
            "classes": {
                "StatsLoggingHook": {
                    "methods": [
                        "__init__",
                        "log_snapshot"
                    ],
                    "docstring": "Logs periodic snapshots of TaskNexus stats to a JSON file.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "archive\\orphans\\identity\\models.py": {
            "language": ".py",
            "functions": [
                "default_timestamp",
                "update_last_seen",
                "to_dict",
                "from_dict"
            ],
            "classes": {
                "AgentIdentity": {
                    "methods": [
                        "update_last_seen",
                        "to_dict",
                        "from_dict"
                    ],
                    "docstring": "Represents the static and dynamic identity attributes of an agent.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 7
        },
        "archive\\orphans\\identity\\store.py": {
            "language": ".py",
            "functions": [
                "get_identity_store",
                "__new__",
                "__init__",
                "_ensure_store_exists",
                "load_identities",
                "save_identities",
                "register_agent",
                "get_identity",
                "list_agents",
                "get_agent_ids"
            ],
            "classes": {
                "AgentIdentityStore": {
                    "methods": [
                        "__new__",
                        "__init__",
                        "_ensure_store_exists",
                        "load_identities",
                        "save_identities",
                        "register_agent",
                        "get_identity",
                        "list_agents",
                        "get_agent_ids"
                    ],
                    "docstring": "Manages the persistence and retrieval of AgentIdentity objects.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 19
        },
        "archive\\orphans\\integrations\\azure_blob_client.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "is_functional"
            ],
            "classes": {
                "IntegrationError": {
                    "methods": [],
                    "docstring": "Base error for integration issues.",
                    "base_classes": [
                        "DreamOSError"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "APIError": {
                    "methods": [],
                    "docstring": "Error related to external API interaction.",
                    "base_classes": [
                        "IntegrationError"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "AzureBlobError": {
                    "methods": [],
                    "docstring": "Specific error for Azure Blob Storage operations.",
                    "base_classes": [
                        "IntegrationError"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "AzureBlobClient": {
                    "methods": [
                        "__init__",
                        "is_functional"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Prototype",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "archive\\orphans\\integrations\\discord_bot.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_register_events",
                "_register_commands",
                "__init__",
                "is_closed",
                "event",
                "command",
                "default",
                "command",
                "decorator",
                "decorator"
            ],
            "classes": {
                "DiscordBot": {
                    "methods": [
                        "__init__",
                        "_register_events",
                        "_register_commands"
                    ],
                    "docstring": "Handles Discord bot connection and command interaction with DreamOS.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "commands": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Kiddie Script",
                    "agent_type": "Utility"
                },
                "discord": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Kiddie Script",
                    "agent_type": "Utility"
                },
                "Bot": {
                    "methods": [
                        "__init__",
                        "is_closed",
                        "event",
                        "command"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "Intents": {
                    "methods": [
                        "default"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Prototype",
                    "agent_type": "Utility"
                },
                "Interaction": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Prototype",
                    "agent_type": "Utility"
                },
                "LoginFailure": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "Exception"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "tree": {
                    "methods": [
                        "command"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Kiddie Script",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 20
        },
        "archive\\orphans\\integrations\\browser_client.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "is_functional"
            ],
            "classes": {
                "IntegrationError": {
                    "methods": [],
                    "docstring": "Base error for integration issues.",
                    "base_classes": [
                        "DreamOSError"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "APIError": {
                    "methods": [],
                    "docstring": "Error related to external API interaction.",
                    "base_classes": [
                        "IntegrationError"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "BrowserClientError": {
                    "methods": [],
                    "docstring": "Specific error for Browser Client operations.",
                    "base_classes": [
                        "IntegrationError"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "BrowserClient": {
                    "methods": [
                        "__init__",
                        "is_functional"
                    ],
                    "docstring": "Asynchronous client for browser automation using Playwright.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "archive\\orphans\\integrations\\discord_client.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "is_webhook_functional",
                "is_bot_functional"
            ],
            "classes": {
                "IntegrationError": {
                    "methods": [],
                    "docstring": "Base error for integration issues.",
                    "base_classes": [
                        "DreamOSError"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "APIError": {
                    "methods": [],
                    "docstring": "Error related to external API interaction.",
                    "base_classes": [
                        "IntegrationError"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "DiscordClient": {
                    "methods": [
                        "__init__",
                        "is_webhook_functional",
                        "is_bot_functional"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Prototype",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "archive\\orphans\\integrations\\openai_client.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "is_functional"
            ],
            "classes": {
                "IntegrationError": {
                    "methods": [],
                    "docstring": "Base error for integration issues.",
                    "base_classes": [
                        "DreamOSError"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "APIError": {
                    "methods": [],
                    "docstring": "Error related to external API interaction.",
                    "base_classes": [
                        "IntegrationError"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "OpenAIClient": {
                    "methods": [
                        "__init__",
                        "is_functional"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Prototype",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "archive\\orphans\\integrations\\agent_services\\cursor_shadow_controller.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "send_prompt_to_cursor",
                "monitor_output",
                "run_prompt_cycle"
            ],
            "classes": {
                "CursorShadowController": {
                    "methods": [
                        "__init__",
                        "send_prompt_to_cursor",
                        "monitor_output",
                        "run_prompt_cycle"
                    ],
                    "docstring": "Shadow controller that allows background execution of prompts in Cursor\nwithout requiring visible GUI interaction, using a file-based inbox/outbox.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "archive\\orphans\\integrations\\cursor\\cursor_prompt_controller.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_activate_cursor_window",
                "_focus_chat_input",
                "send_prompt_to_chat"
            ],
            "classes": {
                "CursorPromptController": {
                    "methods": [
                        "__init__",
                        "_activate_cursor_window",
                        "_focus_chat_input",
                        "send_prompt_to_chat"
                    ],
                    "docstring": "DEPRECATED: Uses fragile pyautogui to send prompts. Use AgentBus events instead.\n\nUses pyautogui to send prompts to the Cursor chat interface.\nWARNING: This approach is highly unreliable and prone to breaking with UI changes,\n         timing issues, or focus stealing. It should only be used as a last resort\n         if the AgentBus event mechanism is unavailable.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "archive\\orphans\\integrations\\cursor\\utils.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "archive\\orphans\\integrations\\cursor\\swarm_bootloader.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_resolve_cursor_path",
                "launch_instances",
                "wait_for_detection",
                "move_windows_to_desktop",
                "setup_swarm",
                "detect_all_instances"
            ],
            "classes": {
                "TheaSwarmBootloader": {
                    "methods": [
                        "__init__",
                        "_resolve_cursor_path",
                        "launch_instances",
                        "wait_for_detection",
                        "move_windows_to_desktop",
                        "setup_swarm"
                    ],
                    "docstring": "Handles launching and preparing a swarm of Cursor instances.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "WindowWrapper": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Prototype",
                    "agent_type": "Utility"
                },
                "CursorWindowController": {
                    "methods": [
                        "detect_all_instances"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Prototype",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 14
        },
        "archive\\orphans\\integrations\\cursor\\window_controller.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_setup_os_specific_handlers",
                "detect_all_instances",
                "activate_window",
                "get_window_by_id",
                "print_window_map",
                "close",
                "enum_callback",
                "get_window_info"
            ],
            "classes": {
                "WindowWrapper": {
                    "methods": [],
                    "docstring": "Cross-platform window handle wrapper.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "CursorWindowController": {
                    "methods": [
                        "__init__",
                        "_setup_os_specific_handlers",
                        "detect_all_instances",
                        "activate_window",
                        "get_window_by_id",
                        "print_window_map",
                        "close"
                    ],
                    "docstring": "Controls multiple Cursor window instances.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 16
        },
        "archive\\orphans\\js\\binding_test.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "archive\\orphans\\js\\coverage_html_cb_497bf287.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "archive\\orphans\\llm_bridge\\bridge_adapters\\base_adapter.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "name",
                "_validate_config",
                "get_config_value",
                "__init__",
                "__str__"
            ],
            "classes": {
                "BaseAdapter": {
                    "methods": [
                        "__init__",
                        "name",
                        "_validate_config",
                        "get_config_value"
                    ],
                    "docstring": "Abstract Base Class for LLM Bridge Adapters.\n\nDefines the common interface required for interacting with different\nLLM services or models through a unified bridge.",
                    "base_classes": [
                        "ABC"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "AdapterError": {
                    "methods": [
                        "__init__",
                        "__str__"
                    ],
                    "docstring": "Custom exception for errors originating from an adapter.",
                    "base_classes": [
                        "ToolError"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 12
        },
        "archive\\orphans\\memory\\compaction_utils.py": {
            "language": ".py",
            "functions": [
                "compact_segment_data",
                "_sync_read_and_parse"
            ],
            "classes": {
                "CompactionError": {
                    "methods": [],
                    "docstring": "Exception raised for errors during memory compaction.",
                    "base_classes": [
                        "CoreMemoryError"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 2
        },
        "archive\\orphans\\memory\\memory_manager.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "__init__",
                "_init_schema",
                "__init__",
                "_segment_file",
                "render_narrative",
                "_rewrite_memory_safely",
                "_compact_segment",
                "_check_and_compact",
                "_sync_record",
                "_sync_init",
                "_sync_fetch",
                "_sync_export",
                "_sync_write",
                "_sync_read"
            ],
            "classes": {
                "MemoryManager": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Lightweight dict-of-dicts persisted to a single JSON file.\nGood for small, human-inspectable fragments. Now async-friendly.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "DatabaseManager": {
                    "methods": [
                        "__init__",
                        "_init_schema"
                    ],
                    "docstring": "Async wrapper around SQLite for long-term interaction storage.\nUses asyncio.Lock for safe concurrent access from async contexts.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "UnifiedMemoryManager": {
                    "methods": [
                        "__init__",
                        "_segment_file",
                        "render_narrative",
                        "_rewrite_memory_safely",
                        "_compact_segment",
                        "_check_and_compact"
                    ],
                    "docstring": "\u2022 LRU + compressed JSON per segment (system / prompts / feedback / context / interactions)\n\u2022 SQLite long-term store\n\u2022 Jinja2 narrative helpers",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 24
        },
        "archive\\orphans\\memory\\summarization_utils.py": {
            "language": ".py",
            "functions": [
                "_build_llm_summary_prompt",
                "_sync_read_and_parse"
            ],
            "classes": {
                "SummarizationError": {
                    "methods": [],
                    "docstring": "Exception raised for errors during memory summarization.",
                    "base_classes": [
                        "CoreMemoryError"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 2
        },
        "archive\\orphans\\memory\\summarizer.py": {
            "language": ".py",
            "functions": [
                "_generate_placeholder_summary",
                "summarize_memory_file",
                "__init__",
                "summarize"
            ],
            "classes": {
                "SummarizationStrategy": {
                    "methods": [],
                    "docstring": "Base class for summarization strategies.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "SlidingWindowSummarization": {
                    "methods": [],
                    "docstring": "Placeholder for sliding window summarization.",
                    "base_classes": [
                        "SummarizationStrategy"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "Summarizer": {
                    "methods": [
                        "__init__",
                        "summarize"
                    ],
                    "docstring": "Placeholder for the main summarizer class.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "archive\\orphans\\memory\\layers\\task_memory_layer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_sync_save",
                "_sync_load"
            ],
            "classes": {
                "TaskMemoryLayer": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Manages persistent storage and recall of task outcomes using a JSON file.\nEnsures basic safety for concurrent async updates and auto-saves on modification.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "archive\\orphans\\modules\\scraper\\chatgpt_scraper\\scraper.py": {
            "language": ".py",
            "functions": [
                "log_interaction"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "archive\\orphans\\modules\\scraper\\chatgpt_scraper\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "archive\\orphans\\monitoring\\correlation_validator.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "configure",
                "get_instance",
                "validate_event",
                "validate_event_sequence",
                "log_issue",
                "get_issues",
                "reset_issues"
            ],
            "classes": {
                "BaseEvent": {
                    "methods": [],
                    "docstring": "Represents a basic event structure expected by BusCorrelationValidator.\n\nThis is a placeholder. The actual BaseEvent should provide these attributes.\nThe validator uses getattr, so it relies on duck-typing.\n\nAttributes:\n    event_id (str): A unique identifier for the event.\n    event_type (Any): The type of the event (e.g., an enum member, a string).\n                      The validator expects `event_type.name` if it's an enum-like object\n                      for logging, but primarily uses the `event_type` value itself for comparisons.\n    source_id (str): Identifier of the agent or component that emitted the event.\n    correlation_id (Optional[str]): The correlation ID for tracking related events.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "BusCorrelationValidator": {
                    "methods": [
                        "__init__",
                        "configure",
                        "get_instance",
                        "validate_event",
                        "validate_event_sequence",
                        "log_issue",
                        "get_issues",
                        "reset_issues"
                    ],
                    "docstring": "Validates correlation ID usage in AgentBus events (Singleton).",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 16
        },
        "archive\\orphans\\monitoring\\performance_logger.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "track_operation",
                "log_outcome",
                "_log_entry"
            ],
            "classes": {
                "PerformanceLogger": {
                    "methods": [
                        "__init__",
                        "track_operation",
                        "log_outcome",
                        "_log_entry"
                    ],
                    "docstring": "Logs performance metrics for agent operations and tasks.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "archive\\orphans\\monitoring\\prompt_execution_monitor.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "start_monitoring",
                "report_success",
                "report_failure",
                "_monitor_loop",
                "recover_and_requeue"
            ],
            "classes": {
                "PromptExecutionMonitor": {
                    "methods": [
                        "__init__",
                        "start_monitoring",
                        "report_success",
                        "report_failure",
                        "_monitor_loop",
                        "recover_and_requeue"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 12
        },
        "archive\\orphans\\py\\agent1_taskboard_workaround.py": {
            "language": ".py",
            "functions": [
                "_acquire_lock_local",
                "_read_board_local",
                "_rewrite_memory_safely_local",
                "update_global_task_local",
                "__init__",
                "__enter__",
                "__exit__",
                "acquire",
                "release",
                "is_locked"
            ],
            "classes": {
                "_DummyLock": {
                    "methods": [
                        "__init__",
                        "__enter__",
                        "__exit__",
                        "acquire",
                        "release",
                        "is_locked"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Prototype",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 16
        },
        "archive\\orphans\\py\\agent2_infra_surgeon.py": {
            "language": ".py",
            "functions": [
                "__init__"
            ],
            "classes": {
                "Agent2InfraSurgeon": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Agent responsible for executing infrastructure-related tasks via GUI automation (Cursor).\nInteracts primarily by publishing CURSOR_INJECT_REQUEST events and listening for\nCURSOR_RETRIEVE_SUCCESS/FAILURE responses.",
                    "base_classes": [
                        "BaseAgent"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 2
        },
        "archive\\orphans\\py\\agent7_validation_test.py": {
            "language": ".py",
            "functions": [
                "test_validation"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "archive\\orphans\\py\\agent_1_stub.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_handle_plan"
            ],
            "classes": {
                "Agent1Stub": {
                    "methods": [
                        "__init__",
                        "_handle_plan"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Prototype",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "archive\\orphans\\py\\analyze_latency_trends.py": {
            "language": ".py",
            "functions": [
                "parse_stress_logs",
                "analyze_latency_trends",
                "__init__",
                "calculate_stats"
            ],
            "classes": {
                "StressRunStats": {
                    "methods": [
                        "__init__",
                        "calculate_stats"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Prototype",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "archive\\orphans\\py\\agent_file_manager_stub.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_resolve_path",
                "read_file",
                "write_file",
                "read_json",
                "write_json",
                "list_dir",
                "file_exists",
                "delete_file"
            ],
            "classes": {
                "AgentFileManager": {
                    "methods": [
                        "__init__",
                        "_resolve_path",
                        "read_file",
                        "write_file",
                        "read_json",
                        "write_json",
                        "list_dir",
                        "file_exists",
                        "delete_file"
                    ],
                    "docstring": "Provides a standardized interface for file system interactions across agents.\nManages concurrency and abstracts low-level file operations.\nSee proposal: runtime/agent_comms/proposals/file_manager_blueprint.md",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 18
        },
        "archive\\orphans\\py\\anomaly_detector.py": {
            "language": ".py",
            "functions": [
                "normalize",
                "_try_unix",
                "_try_iso_format",
                "_try_log_format",
                "parse_line",
                "__init__",
                "check_record",
                "get_results",
                "__init__",
                "run_analysis",
                "_generate_report",
                "_generate_summary_report"
            ],
            "classes": {
                "TimestampNormalizer": {
                    "methods": [
                        "normalize",
                        "_try_unix",
                        "_try_iso_format",
                        "_try_log_format"
                    ],
                    "docstring": "Handles parsing and normalization of various timestamp formats to UTC datetime objects.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "TelemetryParser": {
                    "methods": [
                        "parse_line"
                    ],
                    "docstring": "Parses raw log lines into structured telemetry records.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "DataAgent"
                },
                "AnomalyDetector": {
                    "methods": [
                        "__init__",
                        "check_record",
                        "get_results"
                    ],
                    "docstring": "Identifies environmental shifts and timestamp inconsistencies.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "TelemetryAnalyzer": {
                    "methods": [
                        "__init__",
                        "run_analysis",
                        "_generate_report",
                        "_generate_summary_report"
                    ],
                    "docstring": "Orchestrates parsing, analysis, and reporting.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 24
        },
        "archive\\orphans\\py\\azure_eventhub_channel.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "archive\\orphans\\py\\bloat_watcher.py": {
            "language": ".py",
            "functions": [
                "get_size",
                "format_size",
                "should_exclude",
                "scan_directory",
                "generate_report",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 6
        },
        "archive\\orphans\\py\\automation_interface.py": {
            "language": ".py",
            "functions": [
                "trigger_action",
                "__init__",
                "__repr__",
                "__init__",
                "execute_task",
                "run_sequence",
                "register_automation_trigger"
            ],
            "classes": {
                "AutomationResult": {
                    "methods": [
                        "__init__",
                        "__repr__"
                    ],
                    "docstring": "Represents the result of an automation action.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "AutomationInterface": {
                    "methods": [
                        "__init__",
                        "execute_task",
                        "run_sequence",
                        "register_automation_trigger"
                    ],
                    "docstring": "Provides a high-level API for defining and executing automation sequences.\nIt orchestrates calls to GUIController, TaskTrigger, and potentially other\nautomation-related modules.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 13
        },
        "archive\\orphans\\py\\bridge_health_report.py": {
            "language": ".py",
            "functions": [
                "check_tool_stability",
                "check_bridge_logs",
                "check_component_availability",
                "generate_report",
                "parse_extraction_log",
                "parse_stress_test_data",
                "parse_agent_errors",
                "calculate_uptime",
                "generate_report"
            ],
            "classes": {},
            "routes": [],
            "complexity": 9
        },
        "archive\\orphans\\py\\bridge_fault_inspector.py": {
            "language": ".py",
            "functions": [
                "get_local_tz",
                "parse_stress_results",
                "parse_integrity_logs",
                "parse_agent_logs",
                "find_latency_spikes_near_duplicates",
                "find_failure_patterns"
            ],
            "classes": {},
            "routes": [],
            "complexity": 6
        },
        "archive\\orphans\\py\\bridge_expansion.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load_state",
                "_save_state",
                "subscribe",
                "unsubscribe",
                "publish",
                "sync_state",
                "get_message_history",
                "monitor_health",
                "process_events",
                "_handle_event",
                "_handle_message_event",
                "_handle_state_sync_event",
                "_handle_error_event",
                "start",
                "_handle_shutdown"
            ],
            "classes": {
                "BridgeExpansion": {
                    "methods": [
                        "__init__",
                        "_load_state",
                        "_save_state",
                        "subscribe",
                        "unsubscribe",
                        "publish",
                        "sync_state",
                        "get_message_history",
                        "monitor_health",
                        "process_events",
                        "_handle_event",
                        "_handle_message_event",
                        "_handle_state_sync_event",
                        "_handle_error_event",
                        "start",
                        "_handle_shutdown"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 32
        },
        "archive\\orphans\\py\\bridge_mutation_impact_report.py": {
            "language": ".py",
            "functions": [
                "load_baseline_metrics",
                "load_mutation_results",
                "generate_impact_report"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "archive\\orphans\\py\\bridge_integrity_monitor.py": {
            "language": ".py",
            "functions": [
                "log_anomaly",
                "check_bridge_mode_config",
                "check_chatgpt_cookies",
                "check_config_yaml_paths",
                "watchdog_loop",
                "load_config"
            ],
            "classes": {
                "AppConfig": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Prototype",
                    "agent_type": "Utility"
                },
                "ConfigurationError": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "Exception"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "archive\\orphans\\py\\calibrate_agent_gui.py": {
            "language": ".py",
            "functions": [
                "load_existing_coords",
                "save_coords",
                "calibrate_element",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "archive\\orphans\\py\\capture_gui_snippet.py": {
            "language": ".py",
            "functions": [
                "get_coordinates",
                "sanitize",
                "confirm",
                "choose_preset",
                "capture_snippet",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 6
        },
        "archive\\orphans\\py\\captain_ai_self_prompter.py": {
            "language": ".py",
            "functions": [
                "get_latest_response_file",
                "run_self_prompt"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "archive\\orphans\\py\\channel_loader.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "archive\\orphans\\py\\check_imports.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "_parse_file",
                "_check_import_resolution",
                "_detect_circular_imports",
                "validate",
                "dfs"
            ],
            "classes": {
                "ImportValidator": {
                    "methods": [
                        "__init__",
                        "_parse_file",
                        "_check_import_resolution",
                        "_detect_circular_imports",
                        "validate"
                    ],
                    "docstring": "Validates Python imports in the codebase.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 12
        },
        "archive\\orphans\\py\\chronicle_conversations.py": {
            "language": ".py",
            "functions": [
                "initialize_database",
                "load_latest_state",
                "save_cumulative_state",
                "parse_response",
                "update_cumulative_state",
                "run_chronicle"
            ],
            "classes": {},
            "routes": [],
            "complexity": 6
        },
        "archive\\orphans\\py\\chrono_sentinel.py": {
            "language": ".py",
            "functions": [
                "log_to_ledger",
                "get_local_tz_cached",
                "parse_integrity_log_entry",
                "parse_stress_log_entry",
                "check_log_file",
                "run_sentinel"
            ],
            "classes": {},
            "routes": [],
            "complexity": 6
        },
        "archive\\orphans\\py\\command_supervisor.py": {
            "language": ".py",
            "functions": [
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "archive\\orphans\\py\\command_listener.py": {
            "language": ".py",
            "functions": [
                "start_listener",
                "on_created",
                "process_file"
            ],
            "classes": {
                "CommandFileHandler": {
                    "methods": [
                        "on_created",
                        "process_file"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "FileSystemEventHandler"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 5
        },
        "archive\\orphans\\py\\compile_devlog.py": {
            "language": ".py",
            "functions": [
                "compile_devlog"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "archive\\orphans\\py\\content_models.py": {
            "language": ".py",
            "functions": [],
            "classes": {
                "ContentPlan": {
                    "methods": [],
                    "docstring": "Represents a plan for generating a piece of content.",
                    "base_classes": [
                        "BaseModel"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ContentDraft": {
                    "methods": [],
                    "docstring": "Represents a generated draft of content based on a plan.",
                    "base_classes": [
                        "BaseModel"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 0
        },
        "archive\\orphans\\py\\config.py": {
            "language": ".py",
            "functions": [
                "find_project_root_marker",
                "setup_logging",
                "load_config",
                "get_config",
                "resolve_log_dir",
                "__init__",
                "_load_config",
                "get_field_value",
                "prepare_field_value",
                "__call__",
                "settings_customise_sources",
                "load"
            ],
            "classes": {
                "LoggingConfig": {
                    "methods": [
                        "resolve_log_dir"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "BaseModel"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "PathsConfig": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "BaseModel"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "OpenAIConfig": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "BaseModel"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ChatGPTScraperConfig": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "BaseModel"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "GuiAutomationConfig": {
                    "methods": [],
                    "docstring": "Configuration for GUI automation features.",
                    "base_classes": [
                        "BaseModel"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "AgentActivationConfig": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "BaseModel"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "SwarmConfig": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "BaseModel"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "AzureBlobConfig": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "BaseModel"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "IntegrationsConfig": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "BaseModel"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MonitoringConfig": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "BaseModel"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "HealthCheckConfig": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "BaseModel"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "OrchestratorConfig": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "BaseModel"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "PyAutoGUIBridgeConfig": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "BaseModel"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "YamlConfigSettingsSource": {
                    "methods": [
                        "__init__",
                        "_load_config",
                        "get_field_value",
                        "prepare_field_value",
                        "__call__"
                    ],
                    "docstring": "A Pydantic settings source that loads configuration from a YAML file.\n\nThis class is used in conjunction with `AppConfig.settings_customise_sources`\nto enable loading application settings from a specified YAML configuration file.\nIt handles finding the YAML file (with priority to environment variables)\nand parsing its content.",
                    "base_classes": [
                        "PydanticBaseSettingsSource"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "BasePolicyConfig": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "BaseModel"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "CompactionPolicyConfig": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "BasePolicyConfig"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "SummarizationConfig": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "BasePolicyConfig"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "AgentMemoryPolicyOverride": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "BaseModel"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MemoryMaintenanceConfig": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "BaseModel"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "AgentPointsSystemConfig": {
                    "methods": [],
                    "docstring": "Configuration for the agent points system.",
                    "base_classes": [
                        "BaseModel"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "LogLevel": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "str",
                        "Enum"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "OperatingMode": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "str",
                        "Enum"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "AppConfig": {
                    "methods": [
                        "settings_customise_sources",
                        "load"
                    ],
                    "docstring": "Main application configuration loaded from environment variables and/or config file.",
                    "base_classes": [
                        "BaseSettings"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "Config": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Prototype",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 20
        },
        "archive\\orphans\\py\\context_injector.py": {
            "language": ".py",
            "functions": [
                "inject_context"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "archive\\orphans\\py\\cursor_dispatcher.py": {
            "language": ".py",
            "functions": [
                "render_task_prompt",
                "load_queue",
                "save_queue",
                "dispatch_tasks",
                "run_loop"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5
        },
        "archive\\orphans\\py\\cursor_bridge.py": {
            "language": ".py",
            "functions": [
                "publish_bridge_status",
                "_get_bridge_config",
                "_ensure_config",
                "handle_gpt_payload",
                "find_and_focus_cursor_window",
                "inject_prompt_into_cursor",
                "configure_response_area",
                "capture_response_area",
                "extract_text_from_image",
                "monitor_and_extract_response",
                "summarize_cursor_output",
                "interact_with_cursor",
                "parse_bridge_log",
                "push_telemetry",
                "simulate_gpt_call",
                "run_demo_scenario",
                "validate_full_cycle",
                "relay_prompt_via_web_and_gui",
                "log_telemetry",
                "__init__",
                "resolve"
            ],
            "classes": {
                "BusMessage": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "BaseModel"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "CursorBridgeError": {
                    "methods": [],
                    "docstring": "Custom exception for Cursor Bridge specific errors.",
                    "base_classes": [
                        "Exception"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "CursorInjectError": {
                    "methods": [],
                    "docstring": "Indicates an error during the injection phase (focusing, pasting, etc.).",
                    "base_classes": [
                        "CursorBridgeError"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "CursorExtractError": {
                    "methods": [],
                    "docstring": "Indicates an error during the extraction phase (capture, OCR, stabilization).",
                    "base_classes": [
                        "CursorBridgeError"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ConfigWrapper": {
                    "methods": [
                        "__init__",
                        "resolve"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Prototype",
                    "agent_type": "Utility"
                },
                "MessageTypePlaceholder": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Prototype",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 23
        },
        "archive\\orphans\\py\\dependency_extractor.py": {
            "language": ".py",
            "functions": [
                "extract_imports_from_file"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "archive\\orphans\\py\\cursor_fleet_launcher.py": {
            "language": ".py",
            "functions": [
                "launch_cursor_instance",
                "move_window",
                "get_cursor_windows",
                "assign_windows_to_monitors",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5
        },
        "archive\\orphans\\py\\disperse_tasks.py": {
            "language": ".py",
            "functions": [
                "verify_task_dispersal",
                "generate_completion_receipt",
                "disperse_tasks_to_inboxes"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "archive\\orphans\\py\\cursor_gpt_feedback.py": {
            "language": ".py",
            "functions": [
                "determine_result_type",
                "format_feedback"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "archive\\orphans\\py\\dreamscape_controller.py": {
            "language": ".py",
            "functions": [
                "log_message",
                "load_deployment_config",
                "initialize_agents",
                "update_agent_points_file",
                "log_deployment_status",
                "map_saga_output_to_task",
                "dreamscape_controller_main",
                "__init__",
                "get_prompt_content",
                "perform_task",
                "write_to_devlog",
                "award_points"
            ],
            "classes": {
                "Agent": {
                    "methods": [
                        "__init__",
                        "get_prompt_content",
                        "perform_task",
                        "write_to_devlog",
                        "award_points"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 17
        },
        "archive\\orphans\\py\\edit_file.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "archive\\orphans\\py\\drift_generator.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "archive\\orphans\\py\\drift_injector.py": {
            "language": ".py",
            "functions": [
                "normalize_timestamp_utc",
                "process_log_data"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "archive\\orphans\\py\\episode_index_builder.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "_extract_artifacts",
                "_determine_status",
                "_parse_episode_file",
                "build_index"
            ],
            "classes": {
                "EpisodeIndexEntry": {
                    "methods": [],
                    "docstring": "Represents a single episode entry in the index.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "EpisodeIndexBuilder": {
                    "methods": [
                        "__init__",
                        "_extract_artifacts",
                        "_determine_status",
                        "_parse_episode_file",
                        "build_index"
                    ],
                    "docstring": "Builds and maintains the global episode index.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 11
        },
        "archive\\orphans\\py\\episode_parser.py": {
            "language": ".py",
            "functions": [
                "parse_episode_yaml",
                "validate_episode_structure"
            ],
            "classes": {
                "Task": {
                    "methods": [],
                    "docstring": "Represents a single task in the episode.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "Milestone": {
                    "methods": [],
                    "docstring": "Represents a milestone in the episode.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "EpisodeMetadata": {
                    "methods": [],
                    "docstring": "Represents the metadata of an episode.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 2
        },
        "archive\\orphans\\py\\episode_status_sync.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_get_episode_flag_files",
                "_check_runtime_logs",
                "_get_task_board_status",
                "_determine_episode_status",
                "sync_episode_status",
                "sync_all_episodes"
            ],
            "classes": {
                "EpisodeStatus": {
                    "methods": [],
                    "docstring": "Episode completion status indicators.",
                    "base_classes": [
                        "Enum"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "EpisodeStatusSync": {
                    "methods": [
                        "__init__",
                        "_get_episode_flag_files",
                        "_check_runtime_logs",
                        "_get_task_board_status",
                        "_determine_episode_status",
                        "sync_episode_status",
                        "sync_all_episodes"
                    ],
                    "docstring": "Synchronizes episode statuses by analyzing multiple sources.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 14
        },
        "archive\\orphans\\py\\event_schemas.py": {
            "language": ".py",
            "functions": [],
            "classes": {
                "BaseEventPayload": {
                    "methods": [],
                    "docstring": "Base model containing fields common to most Dreamscape events.",
                    "base_classes": [
                        "BaseModel"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "PlanRequestedPayload": {
                    "methods": [],
                    "docstring": "Payload for requesting a new content plan.",
                    "base_classes": [
                        "BaseEventPayload"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "PlanGeneratedPayload": {
                    "methods": [],
                    "docstring": "Payload for publishing a newly generated content plan.",
                    "base_classes": [
                        "BaseEventPayload"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "WritingRequestedPayload": {
                    "methods": [],
                    "docstring": "Payload for requesting content generation based on a plan.",
                    "base_classes": [
                        "BaseEventPayload"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "DraftGeneratedPayload": {
                    "methods": [],
                    "docstring": "Payload for publishing a newly generated content draft.",
                    "base_classes": [
                        "BaseEventPayload"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "PublishRequestedPayload": {
                    "methods": [],
                    "docstring": "Payload for requesting the publication of a content draft.",
                    "base_classes": [
                        "BaseEventPayload"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "PlanFailedPayload": {
                    "methods": [],
                    "docstring": "Payload indicating a failure during content plan generation.",
                    "base_classes": [
                        "BaseEventPayload"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "DraftFailedPayload": {
                    "methods": [],
                    "docstring": "Payload indicating a failure during content draft generation.",
                    "base_classes": [
                        "BaseEventPayload"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 0
        },
        "archive\\orphans\\py\\event_types.py": {
            "language": ".py",
            "functions": [],
            "classes": {
                "DreamscapeEventType": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "Enum"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 0
        },
        "archive\\orphans\\py\\extract_cursor_response.py": {
            "language": ".py",
            "functions": [
                "_rand_pause",
                "_save_response",
                "_clipboard_changed",
                "extract_response",
                "cli"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5
        },
        "archive\\orphans\\py\\fault_inspector.py": {
            "language": ".py",
            "functions": [
                "parse_timestamp",
                "analyze_log_file",
                "check_reverse_chronology",
                "generate_report"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "archive\\orphans\\py\\feedback_sentinel.py": {
            "language": ".py",
            "functions": [
                "ensure_dir_exists",
                "load_log",
                "save_log",
                "log_anomaly",
                "check_alert_condition",
                "process_file",
                "quarantine_file",
                "purge_old_logs",
                "sentinel_loop",
                "log_state_update",
                "update_swarm_state"
            ],
            "classes": {},
            "routes": [],
            "complexity": 11
        },
        "archive\\orphans\\py\\feedback_patch.py": {
            "language": ".py",
            "functions": [
                "read_jsonl_data",
                "write_jsonl_data",
                "append_jsonl",
                "apply_schema_defaults_and_cleanup",
                "patch_feedback_anomalies"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5
        },
        "archive\\orphans\\py\\find_duplicate_tasks.py": {
            "language": ".py",
            "functions": [
                "is_excluded",
                "parse_json_file",
                "parse_md_file",
                "find_task_files",
                "normalize",
                "find_duplicate_tasks",
                "backup_file",
                "get_task_metadata",
                "determine_canonical_task",
                "generate_markdown_report",
                "auto_fix_duplicates",
                "fix_json_duplicate",
                "fix_md_duplicate",
                "repair_json_content",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 15
        },
        "archive\\orphans\\py\\file_locking.py": {
            "language": ".py",
            "functions": [],
            "classes": {
                "LockAcquisitionError": {
                    "methods": [],
                    "docstring": "Raised when a file lock cannot be acquired within the specified timeout.\n\nThis typically occurs if another process or thread holds the lock for too\nlong. The original `filelock.Timeout` exception is chained for context.",
                    "base_classes": [
                        "DreamOSError"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "LockDirectoryError": {
                    "methods": [],
                    "docstring": "Raised when the directory for the lock file cannot be created or accessed.\n\nThis usually indicates a filesystem permission issue or an invalid base\npath. The original `OSError` is chained for context.",
                    "base_classes": [
                        "DreamOSError"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 0
        },
        "archive\\orphans\\py\\feedback_trace_verifier.py": {
            "language": ".py",
            "functions": [
                "parse_timestamp",
                "read_jsonl",
                "write_jsonl",
                "create_flag_file",
                "verify_traces"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5
        },
        "archive\\orphans\\py\\generate_chatgpt_cookies.py": {
            "language": ".py",
            "functions": [
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "archive\\orphans\\py\\fix_tenacity_example.py": {
            "language": ".py",
            "functions": [
                "might_fail"
            ],
            "classes": {
                "TransientError": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "Exception"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 1
        },
        "archive\\orphans\\py\\gpt_cursor_relay.py": {
            "language": ".py",
            "functions": [
                "process_gpt_command",
                "edit_file",
                "run_terminal_cmd",
                "codebase_search",
                "read_file",
                "grep_search"
            ],
            "classes": {
                "SimulatedCursorTools": {
                    "methods": [
                        "edit_file",
                        "run_terminal_cmd",
                        "codebase_search",
                        "read_file",
                        "grep_search"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 11
        },
        "archive\\orphans\\py\\gui_controller.py": {
            "language": ".py",
            "functions": [
                "click",
                "move_to",
                "drag_to",
                "type_text",
                "press_key",
                "hotkey",
                "locate_on_screen",
                "wait_for_element",
                "get_screenshot",
                "__init__",
                "click_element",
                "type_text",
                "get_element_text"
            ],
            "classes": {
                "GUIController": {
                    "methods": [
                        "__init__",
                        "click_element",
                        "type_text",
                        "get_element_text"
                    ],
                    "docstring": "Manages and interacts with GUI elements for automation tasks.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 17
        },
        "archive\\orphans\\py\\injector.py": {
            "language": ".py",
            "functions": [
                "simulate_cursor_injection",
                "generate_report"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "archive\\orphans\\py\\midnight_runner.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load_state",
                "_save_state",
                "is_night_cycle",
                "adjust_resources",
                "monitor_health",
                "_get_memory_usage",
                "_get_cpu_usage",
                "handle_recovery",
                "_execute_recovery_protocol",
                "_reset_components",
                "_verify_system_state",
                "emergency_shutdown",
                "run_cycle",
                "_process_events",
                "_handle_event",
                "_handle_task_completion",
                "_handle_error_event",
                "_handle_state_change",
                "start",
                "_handle_shutdown"
            ],
            "classes": {
                "MidnightRunner": {
                    "methods": [
                        "__init__",
                        "_load_state",
                        "_save_state",
                        "is_night_cycle",
                        "adjust_resources",
                        "monitor_health",
                        "_get_memory_usage",
                        "_get_cpu_usage",
                        "handle_recovery",
                        "_execute_recovery_protocol",
                        "_reset_components",
                        "_verify_system_state",
                        "emergency_shutdown",
                        "run_cycle",
                        "_process_events",
                        "_handle_event",
                        "_handle_task_completion",
                        "_handle_error_event",
                        "_handle_state_change",
                        "start",
                        "_handle_shutdown"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 42
        },
        "archive\\orphans\\py\\main.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_init_tree_sitter_language",
                "analyze_file",
                "_analyze_python",
                "_analyze_rust",
                "_analyze_javascript",
                "__init__",
                "run",
                "__init__",
                "add_task",
                "wait_for_completion",
                "stop_workers",
                "__init__",
                "hash_file",
                "should_exclude",
                "process_file",
                "__init__",
                "load_existing_report",
                "save_report",
                "generate_init_files",
                "load_existing_chatgpt_context",
                "export_chatgpt_context",
                "__init__",
                "load_cache",
                "save_cache",
                "scan_project",
                "_process_file",
                "generate_init_files",
                "export_chatgpt_context",
                "categorize_agents",
                "_maturity_level",
                "_agent_type",
                "_traverse",
                "get_node_text",
                "_traverse"
            ],
            "classes": {
                "LanguageAnalyzer": {
                    "methods": [
                        "__init__",
                        "_init_tree_sitter_language",
                        "analyze_file",
                        "_analyze_python",
                        "_analyze_rust",
                        "_analyze_javascript"
                    ],
                    "docstring": "Handles language-specific code analysis for different programming languages.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "BotWorker": {
                    "methods": [
                        "__init__",
                        "run"
                    ],
                    "docstring": "A background worker that pulls file tasks from a queue,\nprocesses them, and appends results to results_list.",
                    "base_classes": [
                        "threading.Thread"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "ActionAgent"
                },
                "MultibotManager": {
                    "methods": [
                        "__init__",
                        "add_task",
                        "wait_for_completion",
                        "stop_workers"
                    ],
                    "docstring": "Manages a pool of BotWorker threads.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "FileProcessor": {
                    "methods": [
                        "__init__",
                        "hash_file",
                        "should_exclude",
                        "process_file"
                    ],
                    "docstring": "Handles file hashing, ignoring, caching checks, etc.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ReportGenerator": {
                    "methods": [
                        "__init__",
                        "load_existing_report",
                        "save_report",
                        "generate_init_files",
                        "load_existing_chatgpt_context",
                        "export_chatgpt_context"
                    ],
                    "docstring": "Handles merging new analysis into existing project_analysis.json and chatgpt context.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ProjectScanner": {
                    "methods": [
                        "__init__",
                        "load_cache",
                        "save_cache",
                        "scan_project",
                        "_process_file",
                        "generate_init_files",
                        "export_chatgpt_context",
                        "categorize_agents",
                        "_maturity_level",
                        "_agent_type"
                    ],
                    "docstring": "A universal project scanner that:\n  - Identifies Python, Rust, JS, TS files.\n  - Extracts functions, classes, routes, complexity.\n  - Caches file hashes to skip unchanged files.\n  - Detects moved files by matching file hashes.\n  - Merges new analysis into existing project_analysis.json (preserving old entries).\n  - Exports a merged ChatGPT context if requested (preserving old context data).\n  - Processes files asynchronously with BotWorker threads.\n  - Auto-generates __init__.py files for Python packages.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 67
        },
        "archive\\orphans\\py\\mock_bridge_loop.py": {
            "language": ".py",
            "functions": [
                "generate_mock_response",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "archive\\orphans\\py\\monitor_bridge.py": {
            "language": ".py",
            "functions": [
                "setup_logging",
                "run_bridge_check"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "archive\\orphans\\py\\module_mapper.py": {
            "language": ".py",
            "functions": [
                "_classify_service_type_and_pattern",
                "_classify_tool_util_functionality",
                "_get_primary_class_docstring",
                "load_analysis",
                "normalise",
                "categorize",
                "fmt_row",
                "build_tables",
                "inject_tables",
                "main"
            ],
            "classes": {
                "Cfg": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Prototype",
                    "agent_type": "Utility"
                },
                "Category": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "Enum"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 10
        },
        "archive\\orphans\\py\\move_application_content.py": {
            "language": ".py",
            "functions": [
                "ensure_target_app_dir_exists",
                "move_application_code"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "archive\\orphans\\py\\move_archived_content.py": {
            "language": ".py",
            "functions": [
                "move_content_for_mapping"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "archive\\orphans\\py\\move_bloat.py": {
            "language": ".py",
            "functions": [
                "get_dir_size",
                "find_top_bloat_dir",
                "move_bloat_dir"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "archive\\orphans\\py\\move_orphans.py": {
            "language": ".py",
            "functions": [
                "move_orphans"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "archive\\orphans\\py\\move_sandbox_content.py": {
            "language": ".py",
            "functions": [
                "ensure_target_dir_exists",
                "move_sandbox_item"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "archive\\orphans\\py\\mutation_test_bridge.py": {
            "language": ".py",
            "functions": [
                "register_fault",
                "fault_none",
                "fault_empty_string",
                "fault_raise_exception",
                "fault_delay",
                "fault_return_corrupted_data",
                "fault_return_false",
                "load_mutation_scenarios",
                "create_mutator",
                "run_mutation_test",
                "mutated_func",
                "mutated_func",
                "mutated_func",
                "mutated_func",
                "mutated_func",
                "mutated_func"
            ],
            "classes": {},
            "routes": [],
            "complexity": 16
        },
        "archive\\orphans\\py\\normalize_time.py": {
            "language": ".py",
            "functions": [
                "normalize_utc_iso_line",
                "process_file"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "archive\\orphans\\py\\onboarding_message_injector.py": {
            "language": ".py",
            "functions": [
                "inject_initial_onboarding_message"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "archive\\orphans\\py\\new_agent.py": {
            "language": ".py",
            "functions": [
                "read_mailbox",
                "write_mailbox",
                "process_inbox",
                "update_loop_state",
                "check_idle_state",
                "new_agent_loop"
            ],
            "classes": {},
            "routes": [],
            "complexity": 6
        },
        "archive\\orphans\\py\\onboarding_utils.py": {
            "language": ".py",
            "functions": [
                "write_yaml_sync",
                "read_yaml_sync"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "archive\\orphans\\py\\parser.py": {
            "language": ".py",
            "functions": [
                "parse_cursor_log"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "archive\\orphans\\py\\payload_handler.py": {
            "language": ".py",
            "functions": [
                "call_cursor_api",
                "validate_parameters",
                "process_gpt_command"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "archive\\orphans\\py\\planner_agent.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_build_planning_prompt",
                "_parse_llm_outline"
            ],
            "classes": {
                "PlannerAgent": {
                    "methods": [
                        "__init__",
                        "_build_planning_prompt",
                        "_parse_llm_outline"
                    ],
                    "docstring": "Agent responsible for decomposing high-level goals into actionable tasks.",
                    "base_classes": [
                        "BaseAgent"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "archive\\orphans\\py\\process_logs.py": {
            "language": ".py",
            "functions": [
                "normalize_timestamp_utc",
                "process_log_data"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "archive\\orphans\\py\\prompt_dispatcher.py": {
            "language": ".py",
            "functions": [
                "scrape_new_prompts",
                "determine_prompt_priority",
                "route_prompt_to_agent"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "archive\\orphans\\py\\pyqt_dashboard.py": {
            "language": ".py",
            "functions": [
                "get_agent_inbox_data",
                "__init__",
                "load_agent_inboxes",
                "display_agent_inbox"
            ],
            "classes": {
                "AgentInboxDashboard": {
                    "methods": [
                        "__init__",
                        "load_agent_inboxes",
                        "display_agent_inbox"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "QMainWindow"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 7
        },
        "archive\\orphans\\py\\refactor_task_ids.py": {
            "language": ".py",
            "functions": [
                "find_files_to_scan",
                "update_task_references",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "archive\\orphans\\py\\regenerate_init_files.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "analyze_module",
                "__init__",
                "generate_init_file",
                "regenerate_all"
            ],
            "classes": {
                "ModuleAnalyzer": {
                    "methods": [
                        "__init__",
                        "analyze_module"
                    ],
                    "docstring": "Analyzes Python modules to determine their exports and dependencies.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "InitFileGenerator": {
                    "methods": [
                        "__init__",
                        "generate_init_file",
                        "regenerate_all"
                    ],
                    "docstring": "Generates __init__.py files with proper exports and documentation.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 11
        },
        "archive\\orphans\\py\\reflection_agent.py": {
            "language": ".py",
            "functions": [
                "load_rules_from_rulebook",
                "generate_reflection",
                "save_reflection",
                "submit_proposal",
                "start_monitoring",
                "__init__",
                "on_created"
            ],
            "classes": {
                "AlertHandler": {
                    "methods": [
                        "__init__",
                        "on_created"
                    ],
                    "docstring": "Handles new alert files in the inbox directory.",
                    "base_classes": [
                        "FileSystemEventHandler"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 9
        },
        "archive\\orphans\\py\\response_retriever.py": {
            "language": ".py",
            "functions": [
                "get_response",
                "__init__",
                "retrieve_agent_response"
            ],
            "classes": {
                "ResponseRetriever": {
                    "methods": [
                        "__init__",
                        "retrieve_agent_response"
                    ],
                    "docstring": "Handles retrieving agent responses by clicking 'Copy' and reading the clipboard.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 5
        },
        "archive\\orphans\\py\\robust_move_and_git_track.py": {
            "language": ".py",
            "functions": [
                "run_git_command",
                "robust_move_item"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "archive\\orphans\\py\\run_bridge_service.py": {
            "language": ".py",
            "functions": [
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "archive\\orphans\\py\\run_loop.py": {
            "language": ".py",
            "functions": [
                "main",
                "chatgpt_loop"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "archive\\orphans\\py\\run_orchestrator.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "archive\\orphans\\py\\run_vulture.py": {
            "language": ".py",
            "functions": [
                "run_vulture",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "archive\\orphans\\py\\safe_file_writer.py": {
            "language": ".py",
            "functions": [
                "safe_write_file"
            ],
            "classes": {
                "SafeWriteError": {
                    "methods": [],
                    "docstring": "Custom exception raised for errors during the safe file writing process.\n\nThis includes errors related to:\n- Invalid input parameters (path, content type).\n- Failure to acquire the file lock within the timeout period.\n- IOErrors during temporary file writing or final file replacement.\n- Unexpected exceptions during the write/rename process.",
                    "base_classes": [
                        "IOError"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 1
        },
        "archive\\orphans\\py\\scan_for_orphans.py": {
            "language": ".py",
            "functions": [
                "find_orphans"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "archive\\orphans\\py\\scan_for_rogue_files.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "archive\\orphans\\py\\setup.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "archive\\orphans\\py\\sky_viewer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "send_fullscreen_toggle",
                "toggle_fullscreen",
                "open_splash"
            ],
            "classes": {
                "SkyViewer": {
                    "methods": [
                        "__init__",
                        "send_fullscreen_toggle",
                        "toggle_fullscreen",
                        "open_splash"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "QMainWindow"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "archive\\orphans\\py\\simulate_tool_timeout.py": {
            "language": ".py",
            "functions": [
                "simulate_potential_timeout",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "archive\\orphans\\py\\state.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_init_schema",
                "fetch_agents",
                "update_agent_queue_status",
                "fetch_tasks",
                "update_task_lane",
                "add_devlog_entry",
                "fetch_devlog_entries"
            ],
            "classes": {
                "StateDB": {
                    "methods": [
                        "__init__",
                        "_init_schema",
                        "fetch_agents",
                        "update_agent_queue_status",
                        "fetch_tasks",
                        "update_task_lane",
                        "add_devlog_entry",
                        "fetch_devlog_entries"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 16
        },
        "archive\\orphans\\py\\status_pusher.py": {
            "language": ".py",
            "functions": [
                "format_feedback",
                "push_feedback"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "archive\\orphans\\py\\stress_test_bridge.py": {
            "language": ".py",
            "functions": [
                "rotate_log_if_needed",
                "write_results_log",
                "run_stress_test",
                "audit_results",
                "cleanup_stress_test",
                "noisy_scraper_extract",
                "noisy_gui_extract"
            ],
            "classes": {},
            "routes": [],
            "complexity": 7
        },
        "archive\\orphans\\py\\summarizer.py": {
            "language": ".py",
            "functions": [
                "load_episode_yaml",
                "generate_markdown_briefing",
                "generate_lore_json",
                "generate_devlog",
                "write_episode_briefing",
                "write_lore_json",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 7
        },
        "archive\\orphans\\py\\summary_stream_watch.py": {
            "language": ".py",
            "functions": [
                "get_current_timestamp",
                "log_status",
                "log_integrity_event",
                "read_new_jsonl_lines",
                "find_correlation"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5
        },
        "archive\\orphans\\py\\sync_episode_status.py": {
            "language": ".py",
            "functions": [
                "setup_logging",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "archive\\orphans\\py\\swarm_monitor.py": {
            "language": ".py",
            "functions": [
                "log_integrity_issue",
                "trigger_alert",
                "manage_stall_flag",
                "trigger_escalation_flag",
                "parse_iso_utc",
                "run_monitor"
            ],
            "classes": {},
            "routes": [],
            "complexity": 6
        },
        "archive\\orphans\\py\\task_trigger.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "register_trigger",
                "unregister_trigger",
                "_start_monitoring",
                "_stop_monitoring"
            ],
            "classes": {
                "TaskTrigger": {
                    "methods": [
                        "__init__",
                        "register_trigger",
                        "unregister_trigger",
                        "_start_monitoring",
                        "_stop_monitoring"
                    ],
                    "docstring": "Listens for events or conditions to trigger automation tasks.\nThis could involve monitoring file changes, time schedules, API callbacks, message queues, etc.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 10
        },
        "archive\\orphans\\py\\test.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "archive\\orphans\\py\\task_editor.py": {
            "language": ".py",
            "functions": [
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "archive\\orphans\\py\\task_flow_migration.py": {
            "language": ".py",
            "functions": [
                "setup_logging",
                "create_backup",
                "read_jsonl_file",
                "transform_task",
                "merge_into_task_board",
                "deprecate_old_files",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 7
        },
        "archive\\orphans\\py\\test_browser_utils.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "archive\\orphans\\py\\temporal_ledger_auditor.py": {
            "language": ".py",
            "functions": [
                "parse_iso_utc",
                "audit_ledger"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "archive\\orphans\\py\\test_drift_detection.py": {
            "language": ".py",
            "functions": [
                "parse_expected_utc",
                "calculate_drift",
                "run_test"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "archive\\orphans\\py\\test_cli.py": {
            "language": ".py",
            "functions": [
                "test_cli_help",
                "test_task_editor_command",
                "test_command_supervisor_command",
                "test_task_editor_args",
                "test_command_supervisor_args"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5
        },
        "archive\\orphans\\py\\test_edit_file_failures.py": {
            "language": ".py",
            "functions": [
                "setup_test_files",
                "attempt_edit_overwrite",
                "verify_file_content"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "archive\\orphans\\py\\test_file_integrity_recovery.py": {
            "language": ".py",
            "functions": [
                "calculate_sha256",
                "setup_test_environment",
                "simulate_corruption",
                "attempt_recovery",
                "verify_integrity"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5
        },
        "archive\\orphans\\py\\test_night_cycle.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_simulate_time_progression",
                "_simulate_night_cycle_start",
                "_simulate_midnight_events",
                "_simulate_early_morning_events",
                "_simulate_day_cycle_start",
                "_simulate_random_event",
                "_monitor_systems",
                "start_simulation",
                "_handle_shutdown",
                "stop_simulation"
            ],
            "classes": {
                "NightCycleSimulator": {
                    "methods": [
                        "__init__",
                        "_simulate_time_progression",
                        "_simulate_night_cycle_start",
                        "_simulate_midnight_events",
                        "_simulate_early_morning_events",
                        "_simulate_day_cycle_start",
                        "_simulate_random_event",
                        "_monitor_systems",
                        "start_simulation",
                        "_handle_shutdown",
                        "stop_simulation"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 22
        },
        "archive\\orphans\\py\\test_read_file_diagnostics.py": {
            "language": ".py",
            "functions": [
                "test_read_file",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "archive\\orphans\\py\\test_runner.py": {
            "language": ".py",
            "functions": [
                "run_cli_tool",
                "test_all_tools"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "archive\\orphans\\py\\test_status_pusher.py": {
            "language": ".py",
            "functions": [
                "setUp",
                "test_format_feedback_structure",
                "test_push_feedback_creates_file",
                "test_push_feedback_handles_complex_result"
            ],
            "classes": {
                "TestStatusPusher": {
                    "methods": [
                        "setUp",
                        "test_format_feedback_structure",
                        "test_push_feedback_creates_file",
                        "test_push_feedback_handles_complex_result"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "unittest.TestCase"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "archive\\orphans\\py\\test_points_config.py": {
            "language": ".py",
            "functions": [
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "archive\\orphans\\py\\test_payload_handler.py": {
            "language": ".py",
            "functions": [
                "setUp",
                "tearDown",
                "find_feedback_file",
                "read_feedback_file",
                "test_validate_parameters_valid",
                "test_validate_parameters_missing",
                "test_validate_parameters_unknown_command",
                "test_process_valid_command_generates_feedback",
                "test_process_missing_params_generates_error_feedback",
                "test_process_invalid_structure_generates_error_feedback",
                "test_process_harmful_command_generates_error_feedback"
            ],
            "classes": {
                "TestPayloadHandlerFeedbackIntegration": {
                    "methods": [
                        "setUp",
                        "tearDown",
                        "find_feedback_file",
                        "read_feedback_file",
                        "test_validate_parameters_valid",
                        "test_validate_parameters_missing",
                        "test_validate_parameters_unknown_command",
                        "test_process_valid_command_generates_feedback",
                        "test_process_missing_params_generates_error_feedback",
                        "test_process_invalid_structure_generates_error_feedback",
                        "test_process_harmful_command_generates_error_feedback"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "unittest.TestCase"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 22
        },
        "archive\\orphans\\py\\test_scraper_interactively.py": {
            "language": ".py",
            "functions": [
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "archive\\orphans\\py\\test_thea_bridge_pipeline.py": {
            "language": ".py",
            "functions": [
                "create_dummy_config",
                "setUp",
                "run_agent_cycle",
                "test_gui_mode_cycle",
                "test_gui_mode_no_new_reply",
                "test_scraper_mode_cycle",
                "test_scraper_mode_no_new_reply",
                "test_hybrid_mode_scraper_first",
                "test_hybrid_mode_gui_fallback",
                "test_hybrid_mode_both_fail",
                "test_duplicate_suppression"
            ],
            "classes": {
                "TestTheaBridgePipeline": {
                    "methods": [
                        "setUp",
                        "run_agent_cycle",
                        "test_gui_mode_cycle",
                        "test_gui_mode_no_new_reply",
                        "test_scraper_mode_cycle",
                        "test_scraper_mode_no_new_reply",
                        "test_hybrid_mode_scraper_first",
                        "test_hybrid_mode_gui_fallback",
                        "test_hybrid_mode_both_fail",
                        "test_duplicate_suppression"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "unittest.TestCase"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 21
        },
        "archive\\orphans\\py\\update_python_imports.py": {
            "language": ".py",
            "functions": [
                "update_imports_in_file",
                "find_and_update_python_files"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "archive\\orphans\\py\\thea_to_cursor_agent.py": {
            "language": ".py",
            "functions": [
                "check_dependencies",
                "load_bridge_mode",
                "log_extraction",
                "extract_via_gui",
                "extract_via_scraper",
                "main_loop"
            ],
            "classes": {},
            "routes": [],
            "complexity": 6
        },
        "archive\\orphans\\py\\update_markdown_links.py": {
            "language": ".py",
            "functions": [
                "update_links_in_md_file",
                "find_and_update_md_files"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "archive\\orphans\\py\\utils.py": {
            "language": ".py",
            "functions": [
                "with_error_handling",
                "with_performance_tracking",
                "decorator",
                "decorator"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "archive\\orphans\\py\\validate_gui_coords.py": {
            "language": ".py",
            "functions": [
                "load_coords",
                "find_and_activate_window",
                "inject_test_prompt",
                "retrieve_response",
                "save_results",
                "_validate_coord_structure",
                "_check_coord_proximity",
                "_check_accessibility",
                "_check_for_duplicates",
                "validate_gui_coordinates",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 11
        },
        "archive\\orphans\\py\\validate_imports.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "find_python_files",
                "get_module_name",
                "analyze_imports",
                "validate_imports",
                "report_results"
            ],
            "classes": {
                "ImportValidator": {
                    "methods": [
                        "__init__",
                        "find_python_files",
                        "get_module_name",
                        "analyze_imports",
                        "validate_imports",
                        "report_results"
                    ],
                    "docstring": "Validates imports across Python modules.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 13
        },
        "archive\\orphans\\py\\validator.py": {
            "language": ".py",
            "functions": [
                "check_api_endpoint",
                "check_file_path",
                "trigger_bridge_task",
                "check_bridge_status",
                "get_bridge_result",
                "check_output_file",
                "check_logs",
                "call_summarizer",
                "run_preflight_checks_only",
                "run_validation"
            ],
            "classes": {},
            "routes": [],
            "complexity": 10
        },
        "archive\\orphans\\py\\visual_wait_prototype.py": {
            "language": ".py",
            "functions": [
                "wait_for_visual_cue"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "archive\\orphans\\py\\zero_value_sweep.py": {
            "language": ".py",
            "functions": [
                "should_delete",
                "sweep"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "archive\\orphans\\py\\writer_agent.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_build_writing_prompt",
                "_parse_llm_draft"
            ],
            "classes": {
                "ContentWriterAgent": {
                    "methods": [
                        "__init__",
                        "_build_writing_prompt",
                        "_parse_llm_draft"
                    ],
                    "docstring": "Generates content drafts based on provided ContentPlans, handling tasks of type 'WRITE_CONTENT_DRAFT'.",
                    "base_classes": [
                        "BaseAgent"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "archive\\orphans\\py\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "archive\\orphans\\py\\__main__.py": {
            "language": ".py",
            "functions": [
                "discover_cli_tools",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "archive\\orphans\\rendering\\template_engine.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "render"
            ],
            "classes": {
                "TemplateEngine": {
                    "methods": [
                        "__init__",
                        "render"
                    ],
                    "docstring": "Wraps Jinja2 for rendering template strings.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "archive\\orphans\\reporting\\devlog_utils.py": {
            "language": ".py",
            "functions": [
                "_generate_index_markdown",
                "_parse_devlog_for_index",
                "update_devlog_index"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "archive\\orphans\\reporting\\scoring_analyzer.py": {
            "language": ".py",
            "functions": [
                "load_task_data",
                "calculate_metrics",
                "generate_console_report",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "archive\\orphans\\services\\event_logger.py": {
            "language": ".py",
            "functions": [
                "log_structured_event"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "archive\\orphans\\services\\memory_maintenance_service.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_get_policy_for_file"
            ],
            "classes": {
                "MemoryMaintenanceService": {
                    "methods": [
                        "__init__",
                        "_get_policy_for_file"
                    ],
                    "docstring": "Manages background memory maintenance tasks like compaction and summarization.\nUses APScheduler for scheduling.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "archive\\orphans\\services\\failed_prompt_archive.py": {
            "language": ".py",
            "functions": [
                "load_json_safe",
                "write_json_safe",
                "__init__",
                "log_failure",
                "get_failures",
                "get_by_prompt_id"
            ],
            "classes": {
                "FailedPromptArchiveService": {
                    "methods": [
                        "__init__",
                        "log_failure",
                        "get_failures",
                        "get_by_prompt_id"
                    ],
                    "docstring": "Service to archive failed prompts with full metadata.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 10
        },
        "archive\\orphans\\services\\utils\\cursor.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "update_context",
                "add_to_history",
                "set_current_file",
                "record_command",
                "get_file_context",
                "clear_history",
                "_save_state",
                "_load_state",
                "__init__",
                "add_message",
                "get_context",
                "clear"
            ],
            "classes": {
                "CursorState": {
                    "methods": [
                        "__init__",
                        "update_context",
                        "add_to_history",
                        "set_current_file",
                        "record_command",
                        "get_file_context",
                        "clear_history",
                        "_save_state",
                        "_load_state"
                    ],
                    "docstring": "Manages cursor state and context for chat interactions.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ChatContext": {
                    "methods": [
                        "__init__",
                        "add_message",
                        "get_context",
                        "clear"
                    ],
                    "docstring": "Manages chat context and history for conversations.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 26
        },
        "archive\\orphans\\services\\utils\\chatgpt_scraper.py": {
            "language": ".py",
            "functions": [
                "parse_hybrid_response",
                "__init__",
                "_init_driver",
                "save_cookies",
                "load_cookies",
                "is_logged_in",
                "_chat_box_present",
                "ensure_chat_page",
                "ensure_login_session",
                "send_prompt",
                "fetch_response",
                "wait_for_stable_response",
                "clean_response",
                "handle_hybrid_response",
                "execute_prompt_cycle",
                "execute_prompts_on_all_chats",
                "shutdown",
                "_get_message_elements",
                "get_conversation_content",
                "get_conversation_links",
                "get_available_models",
                "select_model",
                "is_rate_limited",
                "prompt_with_fallback",
                "scroll_to_bottom",
                "default_queue_fn"
            ],
            "classes": {
                "HybridResponseHandler": {
                    "methods": [
                        "parse_hybrid_response"
                    ],
                    "docstring": "Parses a hybrid response that includes both narrative text and a MEMORY_UPDATE JSON block.\nReturns a tuple of (text_part, memory_update_json).",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "DataAgent"
                },
                "ResponseHandler": {
                    "methods": [
                        "__init__",
                        "_init_driver",
                        "save_cookies",
                        "load_cookies",
                        "is_logged_in",
                        "_chat_box_present",
                        "ensure_chat_page",
                        "ensure_login_session",
                        "send_prompt",
                        "fetch_response",
                        "wait_for_stable_response",
                        "clean_response",
                        "handle_hybrid_response",
                        "execute_prompt_cycle",
                        "execute_prompts_on_all_chats",
                        "shutdown",
                        "_get_message_elements",
                        "get_conversation_content",
                        "get_conversation_links",
                        "get_available_models",
                        "select_model",
                        "is_rate_limited",
                        "prompt_with_fallback",
                        "scroll_to_bottom"
                    ],
                    "docstring": "Handles sending prompts, fetching, and stabilizing ChatGPT responses.\nNow includes hybrid response processing: it will extract narrative text and MEMORY_UPDATE JSON.\nAlso hooks into the AI output logger for reinforcement training.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 51
        },
        "archive\\orphans\\services\\utils\\devlog_analyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_get_connection",
                "_init_db",
                "track_post",
                "update_metrics",
                "get_best_posting_times",
                "get_top_performing_tags",
                "get_content_insights"
            ],
            "classes": {
                "DevLogAnalyzer": {
                    "methods": [
                        "__init__",
                        "_get_connection",
                        "_init_db",
                        "track_post",
                        "update_metrics",
                        "get_best_posting_times",
                        "get_top_performing_tags",
                        "get_content_insights"
                    ],
                    "docstring": "Analyzes post performance and provides optimization insights.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 16
        },
        "archive\\orphans\\services\\utils\\devlog_dispatcher.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "on_created",
                "__init__",
                "_initialize_strategies",
                "start",
                "stop",
                "_process_content_queue",
                "handle_new_blog_post",
                "handle_new_social_content",
                "schedule_post",
                "_generate_post_id",
                "_extract_tags",
                "_get_next_optimal_time",
                "publish_job"
            ],
            "classes": {
                "ContentHandler": {
                    "methods": [
                        "__init__",
                        "on_created"
                    ],
                    "docstring": "Handles file system events for new content.",
                    "base_classes": [
                        "FileSystemEventHandler"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "DevLogDispatcher": {
                    "methods": [
                        "__init__",
                        "_initialize_strategies",
                        "start",
                        "stop",
                        "_process_content_queue",
                        "handle_new_blog_post",
                        "handle_new_social_content",
                        "schedule_post",
                        "_generate_post_id",
                        "_extract_tags",
                        "_get_next_optimal_time"
                    ],
                    "docstring": "Autonomous agent that watches for new content and publishes it\nto appropriate platforms using configured strategies.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 28
        },
        "archive\\orphans\\services\\utils\\logging_utils.py": {
            "language": ".py",
            "functions": [
                "log_event",
                "get_logger"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "archive\\orphans\\services\\utils\\devlog_generator.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load_strategies_from_config",
                "process_conversation",
                "_process_message",
                "generate_blog_post",
                "generate_social_content",
                "_generate_title",
                "_generate_description",
                "_extract_tags",
                "_detect_language",
                "_extract_metadata",
                "auto_publish"
            ],
            "classes": {
                "ContentBlock": {
                    "methods": [],
                    "docstring": "Represents a block of content from the conversation.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "DevLogPost": {
                    "methods": [],
                    "docstring": "Represents a structured blog post from a conversation.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "DevLogGenerator": {
                    "methods": [
                        "__init__",
                        "_load_strategies_from_config",
                        "process_conversation",
                        "_process_message",
                        "generate_blog_post",
                        "generate_social_content",
                        "_generate_title",
                        "_generate_description",
                        "_extract_tags",
                        "_detect_language",
                        "_extract_metadata",
                        "auto_publish"
                    ],
                    "docstring": "Transforms ChatGPT conversations into various content formats.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "DataAgent"
                }
            },
            "routes": [],
            "complexity": 24
        },
        "archive\\orphans\\services\\utils\\feedback_processor.py": {
            "language": ".py",
            "functions": [
                "_extract_potential_suggestions",
                "_create_task_message",
                "process_feedback",
                "__init__"
            ],
            "classes": {
                "FeedbackProcessor": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Prototype",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 5
        },
        "archive\\orphans\\services\\utils\\retry_utils.py": {
            "language": ".py",
            "functions": [
                "retry_selenium_action",
                "decorator",
                "wrapper"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "archive\\orphans\\services\\utils\\selenium_utils.py": {
            "language": ".py",
            "functions": [
                "wait_for_element",
                "safe_click",
                "safe_send_keys",
                "navigate_to"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "archive\\orphans\\tests\\run_e2e_bridge_test.py": {
            "language": ".py",
            "functions": [
                "validate_prompt_file",
                "validate_coords",
                "run_bridge_loop",
                "validate_output"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "archive\\orphans\\services\\utils\\content\\post_context_generator.py": {
            "language": ".py",
            "functions": [
                "generate_context_from_governance"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "archive\\orphans\\tests\\conftest.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "archive\\orphans\\tests\\bridge\\test_http_bridge_service.py": {
            "language": ".py",
            "functions": [
                "test_client",
                "test_health_check_success",
                "test_interact_success",
                "test_interact_bridge_error",
                "test_interact_value_error",
                "test_interact_unexpected_error",
                "test_interact_bridge_unavailable",
                "test_interact_config_unavailable",
                "test_health_check_bridge_unavailable",
                "test_health_check_config_unavailable",
                "test_health_check_both_unavailable"
            ],
            "classes": {},
            "routes": [],
            "complexity": 11
        },
        "archive\\orphans\\tests\\test_legacy_empty.py": {
            "language": ".py",
            "functions": [
                "test_stub"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "archive\\orphans\\tests\\coordination\\test_agent_bus.py": {
            "language": ".py",
            "functions": [
                "agent_bus",
                "test_agent_bus_singleton",
                "test_agent_bus_delegates_to_simple_bus",
                "test_unsubscribe_removes_handler",
                "test_unsubscribe_removes_topic_if_empty",
                "test_unsubscribe_nonexistent_handler",
                "test_unsubscribe_nonexistent_topic",
                "handler1",
                "handler2",
                "handler",
                "handler1",
                "handler_never_subscribed",
                "handler"
            ],
            "classes": {},
            "routes": [],
            "complexity": 13
        },
        "archive\\orphans\\tests\\cli\\test_safe_edit_json_list.py": {
            "language": ".py",
            "functions": [
                "runner",
                "mock_filelock",
                "temp_json_file",
                "test_add_item_success",
                "test_add_item_to_empty_file",
                "test_remove_item_success",
                "test_remove_item_not_found",
                "test_update_item_success",
                "test_update_item_not_found",
                "test_invalid_json_item_data",
                "test_item_data_not_dict",
                "test_missing_item_id_for_remove",
                "test_missing_item_data_for_add",
                "test_target_file_not_list",
                "test_target_file_invalid_json",
                "acquire_side_effect",
                "release_side_effect",
                "_create_file"
            ],
            "classes": {},
            "routes": [],
            "complexity": 18
        },
        "archive\\orphans\\tests\\coordination\\test_voting_coordinator.py": {
            "language": ".py",
            "functions": [
                "mock_agent_bus",
                "mock_config",
                "coordinator",
                "test_coordinator_init",
                "test_initiate_vote",
                "test_cast_vote_valid",
                "test_cast_vote_invalid_topic",
                "test_cast_vote_invalid_choice",
                "test_tally_vote_simple_majority",
                "test_tally_vote_tie",
                "test_tally_vote_timeout",
                "__init__",
                "initiate_vote",
                "cast_vote",
                "tally_vote",
                "handle_event"
            ],
            "classes": {
                "VotingCoordinator": {
                    "methods": [
                        "__init__",
                        "initiate_vote",
                        "cast_vote",
                        "tally_vote",
                        "handle_event"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 21
        },
        "archive\\orphans\\tests\\coordination\\dispatchers\\test_base_dispatcher.py": {
            "language": ".py",
            "functions": [
                "test_base_dispatcher_initialization",
                "test_add_task",
                "test_add_task_with_priority",
                "test_run_dispatcher_loop",
                "test_run_dispatcher_loop_priority",
                "test_run_dispatcher_handles_execution_error",
                "test_stop_dispatcher",
                "test_get_status",
                "__init__",
                "execute_task"
            ],
            "classes": {
                "MockDispatcher": {
                    "methods": [
                        "__init__",
                        "execute_task"
                    ],
                    "docstring": "Mock dispatcher for testing.",
                    "base_classes": [
                        "BaseDispatcher"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 12
        },
        "archive\\orphans\\tests\\coordination\\test_project_board_manager.py": {
            "language": ".py",
            "functions": [
                "mock_app_config",
                "pbm",
                "sample_task_1",
                "sample_task_2",
                "temp_test_dir",
                "sample_task_details",
                "mock_pbm_with_schema",
                "pbm_with_real_schema",
                "test_pbm_initialization",
                "test_add_task_future_success",
                "test_add_task_duplicate_id",
                "test_add_task_missing_id",
                "test_add_task_missing_description",
                "test_claim_task_success",
                "test_claim_task_not_found",
                "test_claim_task_wrong_status",
                "test_update_task_success",
                "test_update_task_not_found",
                "test_update_task_future_board",
                "test_delete_task_future_success",
                "test_delete_task_working_success",
                "test_delete_task_not_found",
                "test_claim_task_fail_save_working_rollback",
                "test_update_task_lock_timeout",
                "test_claim_task_lock_timeout",
                "test_add_task_schema_validation_fail",
                "test_update_task_schema_validation_success",
                "test_update_task_schema_validation_fail",
                "test_load_schema_success",
                "test_load_schema_not_found",
                "test_load_schema_invalid_json",
                "test_claim_ready_task_success",
                "test_claim_task_not_in_ready",
                "test_move_task_to_completed_success",
                "test_move_task_to_completed_not_found",
                "test_get_task_success",
                "test_get_task_not_found",
                "__init__",
                "__enter__",
                "__exit__",
                "save_side_effect",
                "side_effect_wrapper",
                "test_promote_success",
                "test_promote_not_found",
                "test_promote_already_ready",
                "test_promote_working_task",
                "test_promote_completed_task",
                "test_create_from_cli_basic",
                "test_create_from_cli_with_overrides"
            ],
            "classes": {
                "MockFileLock": {
                    "methods": [
                        "__init__",
                        "__enter__",
                        "__exit__"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Prototype",
                    "agent_type": "Utility"
                },
                "TestPromoteTaskToReady": {
                    "methods": [
                        "test_promote_success",
                        "test_promote_not_found",
                        "test_promote_already_ready",
                        "test_promote_working_task",
                        "test_promote_completed_task"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "TestCreateFromCliArgs": {
                    "methods": [
                        "test_create_from_cli_basic",
                        "test_create_from_cli_with_overrides"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Prototype",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 59
        },
        "archive\\orphans\\tests\\core\\test_config.py": {
            "language": ".py",
            "functions": [
                "clear_global_config_singleton",
                "sample_config_data",
                "create_test_yaml_file",
                "test_get_config_loads_default_if_available",
                "test_load_config_specific_path",
                "test_load_config_path_not_exists",
                "test_load_config_empty_yaml",
                "test_load_config_invalid_yaml",
                "test_get_config_returns_same_instance",
                "test_load_config_no_file_loads_defaults",
                "_create"
            ],
            "classes": {},
            "routes": [],
            "complexity": 11
        },
        "archive\\orphans\\tests\\core\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "archive\\orphans\\tests\\core\\comms\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "archive\\orphans\\tests\\core\\comms\\test_project_board.py": {
            "language": ".py",
            "functions": [
                "board_manager",
                "future_tasks_file",
                "working_tasks_file",
                "completed_tasks_file",
                "_read_json",
                "_write_json",
                "test_claim_success",
                "test_claim_not_found",
                "test_claim_already_working",
                "test_move_success",
                "test_move_not_found",
                "test_update_success",
                "test_update_not_found",
                "test_lock_timeout_on_read",
                "test_write_failure_on_update",
                "test_validation_calls_flake8",
                "test_validation_fails_on_flake8_error",
                "test_validation_handles_flake8_not_found",
                "test_update_task_on_future_board",
                "test_update_task_on_completed_board",
                "test_update_task_with_invalid_update_data_type",
                "test_validate_task_data_missing_id",
                "test_validate_task_data_valid",
                "test_validate_task_data_completed_missing_modified_files",
                "test_validate_task_data_completed_with_modified_files",
                "test_validate_task_data_schema_wrong_type",
                "test_validate_task_data_schema_missing_required"
            ],
            "classes": {
                "TestClaimFutureTask": {
                    "methods": [
                        "test_claim_success",
                        "test_claim_not_found",
                        "test_claim_already_working"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Prototype",
                    "agent_type": "Utility"
                },
                "TestMoveTaskToCompleted": {
                    "methods": [
                        "test_move_success",
                        "test_move_not_found"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Prototype",
                    "agent_type": "Utility"
                },
                "TestUpdateTask": {
                    "methods": [
                        "test_update_success",
                        "test_update_not_found"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Prototype",
                    "agent_type": "Utility"
                },
                "TestErrorConditions": {
                    "methods": [
                        "test_lock_timeout_on_read",
                        "test_write_failure_on_update"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Prototype",
                    "agent_type": "Utility"
                },
                "TestValidationLogic": {
                    "methods": [
                        "test_validation_calls_flake8",
                        "test_validation_fails_on_flake8_error",
                        "test_validation_handles_flake8_not_found"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Prototype",
                    "agent_type": "Utility"
                },
                "TestUpdateTaskEdgeCases": {
                    "methods": [
                        "test_update_task_on_future_board",
                        "test_update_task_on_completed_board",
                        "test_update_task_with_invalid_update_data_type"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Prototype",
                    "agent_type": "Utility"
                },
                "TestInternalValidation": {
                    "methods": [
                        "test_validate_task_data_missing_id",
                        "test_validate_task_data_valid",
                        "test_validate_task_data_completed_missing_modified_files",
                        "test_validate_task_data_completed_with_modified_files",
                        "test_validate_task_data_schema_wrong_type",
                        "test_validate_task_data_schema_missing_required"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ProjectBoardError": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "Exception"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 48
        },
        "archive\\orphans\\tests\\core\\coordination\\test_base_agent_event_helpers.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "archive\\orphans\\tests\\core\\coordination\\conftest.py": {
            "language": ".py",
            "functions": [
                "mock_agent_bus",
                "test_agent",
                "create_sample_task",
                "mock_agent"
            ],
            "classes": {
                "ConcreteAgent": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "BaseAgent"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MockConcreteAgent": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "BaseAgent"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "archive\\orphans\\tests\\core\\coordination\\test_base_agent_lifecycle.py": {
            "language": ".py",
            "functions": [
                "test_base_agent_init",
                "capture_task"
            ],
            "classes": {
                "MinimalAgent": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "BaseAgent"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 2
        },
        "archive\\orphans\\tests\\core\\coordination\\test_message_patterns.py": {
            "language": ".py",
            "functions": [
                "test_create_task_message_defaults",
                "test_create_task_message_explicit",
                "test_update_task_status",
                "test_task_message_to_from_dict",
                "test_task_message_from_dict_minimal",
                "test_task_message_from_dict_missing_required",
                "test_task_message_from_dict_invalid_enum"
            ],
            "classes": {},
            "routes": [],
            "complexity": 7
        },
        "archive\\orphans\\tests\\core\\coordination\\test_base_agent_task_handling.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "archive\\orphans\\tests\\core\\coordination\\tasks\\test_project_board_manager.py": {
            "language": ".py",
            "functions": [
                "mock_pbm",
                "mock_multi_board_pbm",
                "mock_load_board_func",
                "mock_atomic_write_func",
                "test_initialization",
                "test_add_task_success",
                "test_add_task_duplicate_id_should_fail",
                "test_get_task_success",
                "test_get_task_not_found",
                "test_update_task_status_success",
                "test_update_task_status_not_found",
                "test_claim_future_task_success",
                "test_claim_future_task_not_found",
                "test_complete_task_success",
                "test_complete_task_not_found",
                "test_list_tasks_empty",
                "test_list_tasks_with_data",
                "test_claim_future_task_success_multi",
                "test_claim_future_task_not_found_multi"
            ],
            "classes": {
                "TestProjectBoardManager": {
                    "methods": [
                        "test_initialization",
                        "test_add_task_success",
                        "test_add_task_duplicate_id_should_fail",
                        "test_get_task_success",
                        "test_get_task_not_found",
                        "test_update_task_status_success",
                        "test_update_task_status_not_found",
                        "test_claim_future_task_success",
                        "test_claim_future_task_not_found",
                        "test_complete_task_success",
                        "test_complete_task_not_found",
                        "test_list_tasks_empty",
                        "test_list_tasks_with_data",
                        "test_claim_future_task_success_multi",
                        "test_claim_future_task_not_found_multi"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 34
        },
        "archive\\orphans\\tests\\core\\coordination\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "archive\\orphans\\tests\\core\\coordination\\tasks\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "archive\\orphans\\tests\\core\\utils\\test_agent_utils.py": {
            "language": ".py",
            "functions": [
                "test_format_agent_report",
                "__init__"
            ],
            "classes": {
                "MockAgent": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Prototype",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "archive\\orphans\\tests\\core\\utils\\test_onboarding_utils.py": {
            "language": ".py",
            "functions": [
                "test_successful_affirmation_new_agent",
                "test_successful_affirmation_existing_agent",
                "test_fail_protocol_hash_error",
                "test_fail_invalid_yaml_load",
                "test_fail_yaml_dump_error",
                "test_fail_write_permission_error",
                "test_update_contract_successful_lock",
                "test_update_contract_no_filelock_library",
                "open_side_effect",
                "open_side_effect",
                "open_side_effect"
            ],
            "classes": {
                "TestUpdateOnboardingContract": {
                    "methods": [
                        "test_successful_affirmation_new_agent",
                        "test_successful_affirmation_existing_agent",
                        "test_fail_protocol_hash_error",
                        "test_fail_invalid_yaml_load",
                        "test_fail_yaml_dump_error",
                        "test_fail_write_permission_error",
                        "test_update_contract_successful_lock",
                        "test_update_contract_no_filelock_library"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "unittest.TestCase"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 19
        },
        "archive\\orphans\\tests\\core\\utils\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "archive\\orphans\\tests\\dashboard\\test_dashboard_ui.py": {
            "language": ".py",
            "functions": [
                "mock_dashboard_deps",
                "test_dashboard_initialization",
                "test_dashboard_refresh_smoke",
                "test_dashboard_ui_loads",
                "test_dashboard_event_handling"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5
        },
        "archive\\orphans\\tests\\dashboard\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "archive\\orphans\\tests\\dreamscape\\agents\\test_planner_agent.py": {
            "language": ".py",
            "functions": [
                "mock_agent_bus",
                "mock_app_config",
                "planner_agent",
                "test_planner_agent_init"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "archive\\orphans\\tests\\hooks\\test_chronicle_logger.py": {
            "language": ".py",
            "functions": [
                "mock_agent_bus_instance",
                "test_chronicle_logger_init",
                "test_chronicle_logger_format_entry",
                "test_chronicle_logger_handle_event"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "archive\\orphans\\tests\\dreamscape\\agents\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "archive\\orphans\\tests\\dreamscape\\agents\\test_writer_agent.py": {
            "language": ".py",
            "functions": [
                "mock_agent_bus",
                "mock_app_config",
                "writer_agent",
                "sample_plan",
                "test_writer_agent_init"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5
        },
        "archive\\orphans\\tests\\hooks\\test_chatgpt_responder.py": {
            "language": ".py",
            "functions": [
                "test_responder_init_dev_mode",
                "test_responder_init_prod_mode",
                "test_get_response_dev_mode",
                "test_get_response_prod_mode",
                "test_respond_to_mailbox",
                "test_respond_to_mailbox_no_messages",
                "test_responder_init_dev_mode_scraper_missing"
            ],
            "classes": {},
            "routes": [],
            "complexity": 7
        },
        "archive\\orphans\\tests\\hooks\\test_stats_logger.py": {
            "language": ".py",
            "functions": [
                "mock_nexus",
                "test_stats_logger_log_snapshot"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "archive\\orphans\\tests\\hooks\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "archive\\orphans\\tests\\integrations\\azure\\test_azure_blob_channel.py": {
            "language": ".py",
            "functions": [
                "test_push_and_pull_task",
                "test_push_and_pull_result"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "archive\\orphans\\tests\\integrations\\azure\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "archive\\orphans\\tests\\memory\\test_compaction_utils.py": {
            "language": ".py",
            "functions": [
                "temp_file",
                "sample_data",
                "setup_segment_file",
                "test_rewrite_memory_safely_basic_write",
                "test_rewrite_memory_safely_compressed_write",
                "test_rewrite_memory_safely_serializes_datetime",
                "test_rewrite_memory_safely_write_failure",
                "test_rewrite_memory_safely_replace_failure",
                "test_compact_segment_data_time_policy",
                "test_compact_segment_data_keep_n_policy",
                "test_compact_segment_data_unknown_policy_returns_original",
                "test_compact_segment_data_default_policy_values",
                "test_compact_segment_file_on_json",
                "test_compact_segment_file_on_compressed",
                "test_compact_segment_file_no_op",
                "test_compact_segment_file_missing_ok",
                "test_compact_segment_file_empty_ok",
                "test_compact_segment_file_invalid_json_raises",
                "test_compact_segment_file_non_list_json_raises",
                "test_compact_segment_file_load_failure_raises",
                "test_compact_segment_file_save_failure_raises",
                "test_compact_segment_data_time_policy_with_tz",
                "test_compact_segment_data_keep_n_edge_cases",
                "test_compact_segment_data_logs_warnings",
                "test_rewrite_memory_safely_non_serializable_fails",
                "test_compact_segment_file_invalid_json_fails",
                "test_compact_segment_file_rewrite_failure",
                "test_compact_segment_file_logs_rewrite_failure"
            ],
            "classes": {
                "NonSerializable": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Prototype",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 28
        },
        "archive\\orphans\\tests\\memory\\test_database_manager.py": {
            "language": ".py",
            "functions": [
                "temp_db_file",
                "db_manager",
                "test_db_manager_initialization_creates_db_and_tables",
                "test_record_interaction_inserts_data",
                "test_initialize_conversation_inserts_metadata",
                "test_initialize_conversation_ignores_duplicate",
                "test_fetch_conversation_retrieves_interactions",
                "test_fetch_conversation_empty_result"
            ],
            "classes": {},
            "routes": [],
            "complexity": 8
        },
        "archive\\orphans\\tests\\memory\\test_memory_compaction.py": {
            "language": ".py",
            "functions": [
                "memory_manager",
                "create_segment_file",
                "test_compaction_triggered_by_size",
                "test_compaction_triggered_by_entries",
                "test_compaction_not_triggered_below_thresholds",
                "test_time_based_compaction_list",
                "test_time_based_compaction_dict",
                "test_keep_n_compaction_list",
                "test_safe_rewrite",
                "test_compaction_handles_invalid_json",
                "test_compaction_handles_missing_timestamp",
                "_create"
            ],
            "classes": {},
            "routes": [],
            "complexity": 12
        },
        "archive\\orphans\\tests\\memory\\test_memory_manager.py": {
            "language": ".py",
            "functions": [
                "mock_config",
                "temp_memory_file",
                "memory_manager",
                "test_memory_manager_initialization_creates_file",
                "test_memory_manager_initialization_loads_existing",
                "test_load_memory_handles_empty_file",
                "test_load_memory_handles_invalid_json",
                "test_load_memory_handles_non_dict_json",
                "test_save_memory_writes_correctly",
                "test_save_memory_handles_write_error",
                "test_save_fragment_adds_new",
                "test_save_fragment_updates_existing",
                "test_save_fragment_invalid_input",
                "test_load_fragment_returns_data",
                "test_load_fragment_returns_none_for_missing",
                "test_delete_fragment_removes_existing",
                "test_delete_fragment_handles_missing",
                "test_list_fragment_ids",
                "test_list_fragment_ids_empty"
            ],
            "classes": {},
            "routes": [],
            "complexity": 19
        },
        "archive\\orphans\\tests\\memory\\test_summarization_utils.py": {
            "language": ".py",
            "functions": [
                "mock_summarizer_instance",
                "sample_policy",
                "create_segment_file",
                "sample_chunk",
                "test_summarize_segment_chunk_placeholder",
                "test_summarize_segment_chunk_with_summarizer",
                "test_summarize_segment_chunk_summarizer_error",
                "test_summarize_segment_chunk_empty_chunk",
                "sample_conversations",
                "test_summarize_conversations_simple_concat",
                "test_summarize_conversations_simple_concat_truncation",
                "test_summarize_conversations_simple_concat_empty",
                "test_summarize_conversations_llm_placeholder",
                "test_summarize_conversations_llm_placeholder_truncation",
                "test_summarize_conversations_llm_no_client_raises",
                "test_summarize_conversations_llm_empty_input",
                "test_summarize_conversations_unknown_strategy_raises",
                "test_build_llm_summary_prompt_basic",
                "test_build_llm_summary_prompt_missing_fields",
                "test_build_llm_summary_prompt_empty",
                "_creator"
            ],
            "classes": {
                "MockSummarizer": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "BaseSummarizer"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 21
        },
        "archive\\orphans\\tests\\memory\\test_governance_memory_engine.py": {
            "language": ".py",
            "functions": [
                "setUp",
                "tearDown",
                "test_log_single_event",
                "test_log_multiple_events",
                "test_log_event_error_handling"
            ],
            "classes": {
                "TestGovernanceMemoryEngine": {
                    "methods": [
                        "setUp",
                        "tearDown",
                        "test_log_single_event",
                        "test_log_multiple_events",
                        "test_log_event_error_handling"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "unittest.TestCase"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 10
        },
        "archive\\orphans\\tests\\memory\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "archive\\orphans\\tests\\memory\\test_summarizer.py": {
            "language": ".py",
            "functions": [
                "sample_memory_file",
                "test_generate_summary_basic",
                "test_generate_summary_empty_chunk",
                "test_generate_summary_missing_timestamps",
                "test_summarize_file_no_summarization_needed_too_few",
                "test_summarize_file_no_summarization_needed_all_recent",
                "test_summarize_file_simple_case",
                "test_summarize_handles_missing_timestamps",
                "test_summarize_file_does_not_summarize_summaries",
                "test_summarize_safe_write_and_backup",
                "test_summarize_file_not_found",
                "test_summarize_file_invalid_json",
                "test_summarize_file_empty_json",
                "test_summarize_file_json_not_list",
                "_create"
            ],
            "classes": {},
            "routes": [],
            "complexity": 15
        },
        "archive\\orphans\\tests\\monitoring\\test_correlation_validator.py": {
            "language": ".py",
            "functions": [
                "create_mock_event",
                "validator_instance",
                "configured_validator",
                "test_singleton_get_instance_unconfigured_raises_error",
                "test_singleton_configure_and_get_instance",
                "test_singleton_configure_called_multiple_times_logs_warning",
                "test_singleton_parallel_configuration",
                "test_validate_event_id_present_no_regex",
                "test_validate_event_id_missing",
                "test_validate_event_id_present_valid_format",
                "test_validate_event_id_present_invalid_format",
                "test_validate_event_context_id_match",
                "test_validate_event_context_id_mismatch",
                "test_validate_event_context_id_not_provided",
                "test_validate_event_all_issues_logged",
                "test_log_issue_adds_to_internal_log",
                "test_reset_issues_clears_log",
                "test_get_issues_returns_copy",
                "test_validate_sequence_empty_list",
                "test_validate_sequence_single_valid_event",
                "test_validate_sequence_single_invalid_event_missing_id",
                "test_validate_sequence_multiple_events_same_valid_id",
                "test_validate_sequence_multiple_events_one_missing_id",
                "test_validate_sequence_multiple_events_different_ids",
                "test_validate_sequence_multiple_events_invalid_format",
                "test_validate_sequence_with_explicit_matching_sequence_id",
                "test_validate_sequence_with_explicit_mismatching_sequence_id",
                "test_validate_sequence_first_event_no_id_no_explicit_sequence_id",
                "test_validate_sequence_missing_origin_event",
                "test_validate_sequence_present_origin_event",
                "test_validate_sequence_missing_terminal_event",
                "test_validate_sequence_present_terminal_event",
                "test_validate_sequence_correct_origin_and_terminal",
                "test_validate_sequence_multiple_possible_origin_types_found",
                "test_validate_sequence_multiple_possible_origin_types_missing",
                "test_validate_sequence_require_all_origin_types_met",
                "test_validate_sequence_require_all_origin_types_not_met",
                "test_validate_sequence_require_all_terminal_types_met",
                "test_validate_sequence_require_all_terminal_types_not_met",
                "test_validate_sequence_origin_type_check_with_id_failure",
                "test_validate_sequence_correct_order",
                "test_validate_sequence_incorrect_order",
                "test_validate_sequence_incomplete_order_too_short",
                "test_validate_sequence_order_correct_prefix_events_longer",
                "test_validate_sequence_order_empty_expected_order",
                "test_validate_sequence_order_empty_events_with_expected_order",
                "test_validate_sequence_order_with_other_failures",
                "configure_validator"
            ],
            "classes": {
                "MockEventType": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Prototype",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 48
        },
        "archive\\orphans\\tests\\monitoring\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "archive\\orphans\\tests\\rendering\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "archive\\orphans\\tests\\rendering\\test_template_engine.py": {
            "language": ".py",
            "functions": [
                "setUpClass",
                "tearDownClass",
                "test_render_valid_template",
                "test_render_with_tojson_filter",
                "test_render_template_not_found",
                "test_render_with_missing_variable"
            ],
            "classes": {
                "TestTemplateEngine": {
                    "methods": [
                        "setUpClass",
                        "tearDownClass",
                        "test_render_valid_template",
                        "test_render_with_tojson_filter",
                        "test_render_template_not_found",
                        "test_render_with_missing_variable"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "unittest.TestCase"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 12
        },
        "archive\\orphans\\tests\\scripts\\utils\\test_simple_task_updater.py": {
            "language": ".py",
            "functions": [
                "mock_board_manager",
                "run_script",
                "test_claim_success",
                "test_claim_failure_board",
                "test_claim_missing_arg",
                "test_update_working_success",
                "test_update_completed_success",
                "test_update_failure_board",
                "test_update_move_failure_board",
                "test_update_missing_arg",
                "test_invalid_action",
                "test_board_file_argument"
            ],
            "classes": {
                "TestSimpleTaskUpdaterScript": {
                    "methods": [
                        "test_claim_success",
                        "test_claim_failure_board",
                        "test_claim_missing_arg",
                        "test_update_working_success",
                        "test_update_completed_success",
                        "test_update_failure_board",
                        "test_update_move_failure_board",
                        "test_update_missing_arg",
                        "test_invalid_action",
                        "test_board_file_argument"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 22
        },
        "archive\\orphans\\tests\\scripts\\utils\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "archive\\orphans\\tests\\skills\\test_pyautogui_control_module_part2.py": {
            "language": ".py",
            "functions": [
                "setUp",
                "tearDown"
            ],
            "classes": {
                "TestPyAutoGUIControlModulePart2": {
                    "methods": [
                        "setUp",
                        "tearDown"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "unittest.IsolatedAsyncioTestCase"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "archive\\orphans\\tests\\services\\test_memory_maintenance_service.py": {
            "language": ".py",
            "functions": [
                "mock_app_config",
                "mock_summarizer",
                "maintenance_service",
                "get_memory_base_path",
                "get_snapshot_base_path"
            ],
            "classes": {
                "MockPathsConfig": {
                    "methods": [
                        "get_memory_base_path",
                        "get_snapshot_base_path"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "PathsConfig"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 7
        },
        "archive\\orphans\\tests\\social\\tests\\conftest.py": {
            "language": ".py",
            "functions": [
                "pytest_configure",
                "mock_setup_logging",
                "mock_driver"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "archive\\orphans\\tests\\social\\tests\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "archive\\orphans\\tests\\social\\tests\\core\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "archive\\orphans\\tests\\social\\tests\\integration\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "archive\\orphans\\tests\\social\\tests\\social\\strategies\\base_strategy_test.py": {
            "language": ".py",
            "functions": [
                "mock_config",
                "mock_api",
                "strategy",
                "snapshot_dir",
                "save_snapshot",
                "load_snapshot",
                "test_init_with_valid_credentials",
                "test_init_with_missing_credentials",
                "test_feedback_on_rate_limit",
                "verify_template_rendering"
            ],
            "classes": {
                "BaseStrategyTest": {
                    "methods": [
                        "mock_config",
                        "mock_api",
                        "strategy",
                        "snapshot_dir",
                        "save_snapshot",
                        "load_snapshot",
                        "test_init_with_valid_credentials",
                        "test_init_with_missing_credentials",
                        "test_feedback_on_rate_limit",
                        "verify_template_rendering"
                    ],
                    "docstring": "Base test class for all social media strategy tests.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 20
        },
        "archive\\orphans\\tests\\social\\tests\\strategies\\base_strategy_test.py": {
            "language": ".py",
            "functions": [
                "login",
                "post_content",
                "scrape_mentions",
                "mock_config",
                "mock_driver",
                "strategy",
                "test_init_with_valid_config",
                "test_init_with_missing_config",
                "test_validate_media_files_success",
                "test_validate_media_files_missing",
                "test_wait_for_element_success",
                "test_wait_for_element_timeout",
                "test_safe_click_success",
                "test_safe_click_retry_success",
                "test_safe_click_failure",
                "test_safe_send_keys_success",
                "test_safe_send_keys_retry_success",
                "test_safe_send_keys_failure",
                "test_extract_error_details_success",
                "test_extract_error_details_failure"
            ],
            "classes": {
                "MockStrategy": {
                    "methods": [
                        "login",
                        "post_content",
                        "scrape_mentions"
                    ],
                    "docstring": "Mock strategy for testing base functionality.",
                    "base_classes": [
                        "BaseStrategy"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "BaseStrategyTest": {
                    "methods": [
                        "mock_config",
                        "mock_driver",
                        "strategy",
                        "test_init_with_valid_config",
                        "test_init_with_missing_config",
                        "test_validate_media_files_success",
                        "test_validate_media_files_missing",
                        "test_wait_for_element_success",
                        "test_wait_for_element_timeout",
                        "test_safe_click_success",
                        "test_safe_click_retry_success",
                        "test_safe_click_failure",
                        "test_safe_send_keys_success",
                        "test_safe_send_keys_retry_success",
                        "test_safe_send_keys_failure",
                        "test_extract_error_details_success",
                        "test_extract_error_details_failure"
                    ],
                    "docstring": "Base test class for all strategy tests.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 40
        },
        "archive\\orphans\\tests\\social\\tests\\social\\strategies\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "archive\\orphans\\tests\\social\\tests\\strategies\\base_test.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "find_element",
                "find_elements",
                "get",
                "quit",
                "__init__",
                "click",
                "send_keys",
                "is_displayed",
                "get_attribute",
                "setUp",
                "tearDown",
                "assert_logged_event",
                "simulate_element_present",
                "simulate_element_not_found",
                "simulate_login_success",
                "simulate_login_failure",
                "simulate_post_success",
                "simulate_post_failure"
            ],
            "classes": {
                "MockWebDriver": {
                    "methods": [
                        "__init__",
                        "find_element",
                        "find_elements",
                        "get",
                        "quit"
                    ],
                    "docstring": "Mock Selenium WebDriver for testing.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MockElement": {
                    "methods": [
                        "__init__",
                        "click",
                        "send_keys",
                        "is_displayed",
                        "get_attribute"
                    ],
                    "docstring": "Mock Selenium WebElement for testing.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "BaseStrategyTest": {
                    "methods": [
                        "setUp",
                        "tearDown",
                        "assert_logged_event",
                        "simulate_element_present",
                        "simulate_element_not_found",
                        "simulate_login_success",
                        "simulate_login_failure",
                        "simulate_post_success",
                        "simulate_post_failure"
                    ],
                    "docstring": "Base test class for all social media strategy tests.",
                    "base_classes": [
                        "unittest.TestCase"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 38
        },
        "archive\\orphans\\tests\\social\\tests\\strategies\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "archive\\orphans\\tests\\social\\tests\\tools\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "archive\\orphans\\tests\\social\\tests\\utils\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "archive\\orphans\\tests\\supervisor_tools\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "archive\\orphans\\tests\\supervisor_tools\\test_command_supervisor.py": {
            "language": ".py",
            "functions": [
                "mock_agent_bus",
                "command_supervisor",
                "create_mock_process"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "archive\\orphans\\tests\\tools\\test_base.py": {
            "language": ".py",
            "functions": [
                "setUp",
                "tearDown",
                "test_base_tool_initialization",
                "test_base_tool_validate_arguments_missing_required",
                "test_base_tool_validate_arguments_valid",
                "test_base_tool_abstract_execute_enforcement",
                "test_tool_context_initialization",
                "test_tool_context_get_arg",
                "test_tool_parameter_initialization"
            ],
            "classes": {
                "TestBaseTool": {
                    "methods": [
                        "setUp",
                        "tearDown",
                        "test_base_tool_initialization",
                        "test_base_tool_validate_arguments_missing_required",
                        "test_base_tool_validate_arguments_valid",
                        "test_base_tool_abstract_execute_enforcement",
                        "test_tool_context_initialization",
                        "test_tool_context_get_arg",
                        "test_tool_parameter_initialization"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "unittest.TestCase"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "DummyTool": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "BaseTool"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "SimpleReqTool": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "BaseTool"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "IncompleteTool": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "BaseTool"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 18
        },
        "archive\\orphans\\tests\\tools\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "archive\\orphans\\tests\\tools\\cursor_bridge\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "archive\\orphans\\tests\\tools\\cursor_bridge\\bridge_bootstrap_test.py": {
            "language": ".py",
            "functions": [
                "test_full_loop_success",
                "test_injection_failure",
                "test_extraction_failure_ocr"
            ],
            "classes": {
                "TestCursorBridgeBootstrap": {
                    "methods": [
                        "test_full_loop_success",
                        "test_injection_failure",
                        "test_extraction_failure_ocr"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "unittest.TestCase"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "archive\\orphans\\tests\\tools\\discovery\\test_find_todos.py": {
            "language": ".py",
            "functions": [
                "test_find_todos_in_file_basic",
                "test_find_todos_in_file_no_matches",
                "test_find_todos_in_file_empty_file",
                "test_scan_directory",
                "test_scan_directory"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5
        },
        "archive\\orphans\\tests\\tools\\discovery\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "archive\\orphans\\tests\\unit\\test_bridge_fault_inspector.py": {
            "language": ".py",
            "functions": [
                "setUp",
                "test_parse_integrity_logs_normalization",
                "test_parse_stress_results_normalization"
            ],
            "classes": {
                "TestTimestampNormalization": {
                    "methods": [
                        "setUp",
                        "test_parse_integrity_logs_normalization",
                        "test_parse_stress_results_normalization"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "unittest.TestCase"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "archive\\orphans\\tests\\unit\\test_task_flow_migration.py": {
            "language": ".py",
            "functions": [
                "test_basic_future_task_transform",
                "test_basic_working_task_transform",
                "test_completed_task_transform",
                "test_missing_task_id",
                "test_missing_required_fields_defaulting",
                "transform_task"
            ],
            "classes": {
                "TestTaskTransformation": {
                    "methods": [
                        "test_basic_future_task_transform",
                        "test_basic_working_task_transform",
                        "test_completed_task_transform",
                        "test_missing_task_id",
                        "test_missing_required_fields_defaulting"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "unittest.TestCase"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 11
        },
        "archive\\orphans\\tests\\unit\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "archive\\orphans\\tests\\utils\\test_json_io.py": {
            "language": ".py",
            "functions": [
                "test_write_read_json_dict",
                "test_write_read_json_list",
                "test_read_json_file_not_found",
                "test_read_json_invalid_json",
                "test_append_read_jsonl",
                "test_read_jsonl_file_not_found",
                "test_read_jsonl_invalid_line",
                "test_write_read_text",
                "test_read_text_file_not_found",
                "test_extract_content_success",
                "test_extract_content_no_response",
                "test_extract_content_empty_dict_response",
                "test_extract_content_missing_read_file_response_key",
                "test_extract_content_missing_results_key",
                "test_extract_content_results_not_a_list",
                "test_extract_content_results_empty_list",
                "test_extract_content_results_list_with_none",
                "test_extract_content_results_list_with_non_string_becomes_string",
                "test_extract_content_tool_error_in_results_string",
                "test_extract_content_tool_error_in_error_field",
                "test_extract_content_malformed_response_completely_unexpected_structure",
                "test_safe_read_success_full_read",
                "test_safe_read_full_read_tool_error_fallback_succeeds",
                "test_safe_read_full_read_response_no_content_fallback_succeeds",
                "test_safe_read_no_full_read_request_fallback_succeeds",
                "test_safe_read_warmup_tool_call_fails_returns_none",
                "test_safe_read_warmup_response_no_content_full_read_succeeds",
                "test_safe_read_all_attempts_fail_various_reasons",
                "test_safe_read_full_read_not_requested_all_attempts_fail"
            ],
            "classes": {},
            "routes": [],
            "complexity": 29
        },
        "archive\\orphans\\tests\\utils\\test_logging_utils.py": {
            "language": ".py",
            "functions": [
                "test_log_handler_exception_basic",
                "test_log_handler_exception_no_handler_name",
                "sample_handler"
            ],
            "classes": {
                "TestLogHandlerException": {
                    "methods": [
                        "test_log_handler_exception_basic",
                        "test_log_handler_exception_no_handler_name"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "unittest.TestCase"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 5
        },
        "archive\\orphans\\tests\\utils\\test_protocol_compliance_utils.py": {
            "language": ".py",
            "functions": [
                "test_check_mailbox_structure_exists",
                "test_check_mailbox_structure_missing"
            ],
            "classes": {
                "TestProtocolComplianceUtils": {
                    "methods": [
                        "test_check_mailbox_structure_exists",
                        "test_check_mailbox_structure_missing"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "unittest.TestCase"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "archive\\orphans\\tests\\utils\\test_spec_parser.py": {
            "language": ".py",
            "functions": [
                "test_parse_project_plan_valid_main_tasks_table",
                "test_parse_project_plan_valid_legacy_md_tasks_table",
                "test_parse_project_plan_multiline_cell_content",
                "test_parse_project_plan_mixed_tables",
                "test_parse_project_plan_no_recognized_tables",
                "test_parse_project_plan_malformed_row_table",
                "test_parse_project_plan_file_not_found",
                "test_parse_project_plan_commonmark_not_installed",
                "test_cell_content_extraction_various_inline_markdown"
            ],
            "classes": {
                "TestSpecParser": {
                    "methods": [
                        "test_parse_project_plan_valid_main_tasks_table",
                        "test_parse_project_plan_valid_legacy_md_tasks_table",
                        "test_parse_project_plan_multiline_cell_content",
                        "test_parse_project_plan_mixed_tables",
                        "test_parse_project_plan_no_recognized_tables",
                        "test_parse_project_plan_malformed_row_table",
                        "test_parse_project_plan_file_not_found",
                        "test_parse_project_plan_commonmark_not_installed",
                        "test_cell_content_extraction_various_inline_markdown"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "unittest.TestCase"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 18
        },
        "archive\\orphans\\tests\\utils\\test_terminal_execution.py": {
            "language": ".py",
            "functions": [
                "test_security_avoids_shell_true",
                "test_security_prevents_command_injection"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "archive\\orphans\\tests\\utils\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "archive\\orphans\\tools\\command_supervisor.py": {
            "language": ".py",
            "functions": [
                "__init__"
            ],
            "classes": {
                "SupervisorEvent": {
                    "methods": [],
                    "docstring": "Represents an event structure specifically for the CommandSupervisor context.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ApprovalStatus": {
                    "methods": [],
                    "docstring": "Represents the possible states of a command approval request.",
                    "base_classes": [
                        "Enum"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "CommandSupervisor": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Singleton class to manage potentially risky command execution requests.\n\nThis supervisor acts as a central gatekeeper for shell commands requested by\nvarious agents. It enforces a human-in-the-loop approval process before\nallowing any command execution, enhancing system safety.\n\nWorkflow:\n1. An agent publishes a `COMMAND_EXECUTION_REQUEST` event via AgentBus.\n2. `CommandSupervisor` receives the request (`handle_command_request`).\n3. It assigns a unique ID and publishes a `COMMAND_APPROVAL_REQUEST` event.\n4. A separate component (e.g., a UI Agent, a manual reviewer) observes the\n   approval request and publishes a `COMMAND_APPROVAL_RESPONSE` event.\n5. `CommandSupervisor` receives the response (`handle_approval_response`).\n6. If approved, it executes the command (`execute_command`) using asyncio\n   subprocesses.\n7. If rejected or upon completion/error, it publishes a\n   `COMMAND_EXECUTION_RESULT` event back to the original requesting agent.\n\nAttributes:\n    agent_bus (AgentBus): The shared AgentBus instance for communication.\n    pending_approvals (Dict[str, SupervisorEvent]): Stores requests awaiting approval.\n    approval_status (Dict[str, ApprovalStatus]): Tracks the status of each request.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 2
        },
        "archive\\orphans\\tools\\read_file.py": {
            "language": ".py",
            "functions": [
                "_detect_encoding",
                "_open_locked",
                "_read_once",
                "read_file",
                "read_json",
                "read_yaml"
            ],
            "classes": {
                "ReadFileError": {
                    "methods": [],
                    "docstring": "Raised when all read attempts fail.",
                    "base_classes": [
                        "RuntimeError"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ReadMetrics": {
                    "methods": [],
                    "docstring": "Lightweight container to expose metrics to a callback.",
                    "base_classes": [
                        "dict"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "archive\\orphans\\tools\\task_editor.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "add_modification",
                "add_new_task",
                "to_dict",
                "from_dict",
                "__init__",
                "_load_task_schema",
                "analyze_and_propose_rewrite",
                "apply_task_edit"
            ],
            "classes": {
                "TaskAutoRewriterError": {
                    "methods": [],
                    "docstring": "Custom exception for TaskAutoRewriter errors.",
                    "base_classes": [
                        "Exception"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ProposedTaskEdit": {
                    "methods": [
                        "__init__",
                        "add_modification",
                        "add_new_task",
                        "to_dict",
                        "from_dict"
                    ],
                    "docstring": "Represents a proposed set of changes to a task or new tasks.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "TaskAutoRewriter": {
                    "methods": [
                        "__init__",
                        "_load_task_schema",
                        "analyze_and_propose_rewrite",
                        "apply_task_edit"
                    ],
                    "docstring": "Analyzes task definitions and proposes rewrites to improve clarity,\nactionability, or to break down complex tasks.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 18
        },
        "archive\\orphans\\tools\\thea_relay_agent.py": {
            "language": ".py",
            "functions": [
                "_find_mock_project_root",
                "get_config",
                "__init__",
                "__init__",
                "__init__",
                "__init__",
                "validate_agent_id_format",
                "__init__",
                "_validate_response",
                "_sync_file_write",
                "_sync_load",
                "_sync_glob"
            ],
            "classes": {
                "_MockConfigPaths": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Kiddie Script",
                    "agent_type": "Utility"
                },
                "_MockConfigAgentSettings": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Kiddie Script",
                    "agent_type": "Utility"
                },
                "_MockConfig": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Kiddie Script",
                    "agent_type": "Utility"
                },
                "_StandaloneDummyBaseAgent": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Kiddie Script",
                    "agent_type": "Utility"
                },
                "TheaMessage": {
                    "methods": [
                        "validate_agent_id_format"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "BaseModel"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "TheaRelayAgent": {
                    "methods": [
                        "__init__",
                        "_validate_response"
                    ],
                    "docstring": "An agent that monitors a directory for THEA responses, parses them,\nand dispatches them to the appropriate agent mailboxes.",
                    "base_classes": [
                        "_BaseAgent_cls"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "DataAgent"
                }
            },
            "routes": [],
            "complexity": 19
        },
        "archive\\orphans\\tools\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "archive\\orphans\\tools\\analysis\\dead_code.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "archive\\orphans\\tools\\analysis\\project_scanner\\concurrency.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "get_results"
            ],
            "classes": {
                "MultibotManager": {
                    "methods": [
                        "__init__",
                        "get_results"
                    ],
                    "docstring": "Manages a pool of asyncio worker tasks for file processing.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "archive\\orphans\\tools\\analysis\\project_scanner\\analyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_init_tree_sitter_language_sync",
                "analyze_file",
                "_analyze_python",
                "_analyze_rust",
                "_analyze_javascript",
                "_traverse",
                "get_node_text",
                "_traverse"
            ],
            "classes": {
                "LanguageAnalyzer": {
                    "methods": [
                        "__init__",
                        "_init_tree_sitter_language_sync",
                        "analyze_file",
                        "_analyze_python",
                        "_analyze_rust",
                        "_analyze_javascript"
                    ],
                    "docstring": "Handles language-specific code analysis for different programming languages.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 15
        },
        "archive\\orphans\\tools\\analysis\\project_scanner\\file_processor.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_sync_hash",
                "_sync_check_cache_and_get_data",
                "_sync_remove_excluded_from_cache",
                "_sync_read_source",
                "_sync_update_cache_with_analysis",
                "_sync_remove_fnf_from_cache",
                "_sync_remove_perm_error_from_cache",
                "_sync_remove_encoding_error_from_cache",
                "_sync_remove_general_error_from_cache"
            ],
            "classes": {
                "FileProcessor": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Handles file hashing, ignoring, caching checks, etc. Now with async methods.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 11
        },
        "archive\\orphans\\tools\\analysis\\project_scanner\\report_generator.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "categorize_agents",
                "_maturity_level",
                "_agent_type",
                "_sync_load",
                "_sync_final_write",
                "_sync_load_context",
                "_sync_io_for_init",
                "_sync_write_json_context",
                "_read_template",
                "_write_rendered"
            ],
            "classes": {
                "ReportGenerator": {
                    "methods": [
                        "__init__",
                        "categorize_agents",
                        "_maturity_level",
                        "_agent_type"
                    ],
                    "docstring": "Handles merging new analysis into existing reports and context files. Async I/O.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 15
        },
        "archive\\orphans\\tools\\analysis\\project_scanner\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "archive\\orphans\\tools\\analysis\\project_scanner\\project_scanner.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "_load",
                "_save",
                "get",
                "set",
                "remove",
                "clear",
                "analyze_scan_results",
                "__init__",
                "analyze_file",
                "_analyze_python_ast",
                "_analyze_with_tree_sitter",
                "__init__",
                "hash_file",
                "should_exclude",
                "process_file",
                "__init__",
                "load_existing_report",
                "save_report",
                "generate_init_files",
                "load_existing_chatgpt_context",
                "export_chatgpt_context",
                "categorize_agents",
                "__init__",
                "_resolve_path_from_config",
                "progress_update"
            ],
            "classes": {
                "ProjectCache": {
                    "methods": [
                        "__init__",
                        "_load",
                        "_save",
                        "get",
                        "set",
                        "remove",
                        "clear",
                        "analyze_scan_results"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "LanguageAnalyzer": {
                    "methods": [
                        "__init__",
                        "analyze_file",
                        "_analyze_python_ast",
                        "_analyze_with_tree_sitter"
                    ],
                    "docstring": "Handles language-specific code analysis for different programming languages.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "FileProcessor": {
                    "methods": [
                        "__init__",
                        "hash_file",
                        "should_exclude",
                        "process_file"
                    ],
                    "docstring": "Handles file hashing, ignoring, caching checks, etc.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ReportGenerator": {
                    "methods": [
                        "__init__",
                        "load_existing_report",
                        "save_report",
                        "generate_init_files",
                        "load_existing_chatgpt_context",
                        "export_chatgpt_context",
                        "categorize_agents"
                    ],
                    "docstring": "Handles merging new analysis into existing project_analysis.json and chatgpt context.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ProjectScanner": {
                    "methods": [
                        "__init__",
                        "_resolve_path_from_config"
                    ],
                    "docstring": "Orchestrates the project scanning process using modular components.\nResponsibilities:\n  - Initializes all components (analyzer, processor, reporter, concurrency manager).\n  - Loads and saves the file hash cache (if enabled).\n  - Discovers files to be scanned.\n  - Detects moved files based on hash (if cache enabled).\n  - Manages asynchronous file processing via MultibotManager.\n  - Gathers results and passes them to the ReportGenerator.\n  - Provides methods to trigger optional steps like __init__ generation or context export.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 52
        },
        "archive\\orphans\\tools\\calibration\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "archive\\orphans\\tools\\calibration\\recalibrate_coords.py": {
            "language": ".py",
            "functions": [
                "capture_single_coordinate",
                "update_coords_file",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "archive\\orphans\\tools\\coordination\\broadcast_directive.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "archive\\orphans\\tools\\cursor_bridge\\mock_cursor_bridge.py": {
            "language": ".py",
            "functions": [
                "create_mock_bridge",
                "get",
                "__init__",
                "inject_prompt",
                "__init__",
                "read_response",
                "__init__",
                "run_cycle"
            ],
            "classes": {
                "MockConfigInterface": {
                    "methods": [
                        "get"
                    ],
                    "docstring": "Mocks configuration retrieval.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MockPromptInjector": {
                    "methods": [
                        "__init__",
                        "inject_prompt"
                    ],
                    "docstring": "Mocks injecting prompts into Cursor UI.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MockResponseReader": {
                    "methods": [
                        "__init__",
                        "read_response"
                    ],
                    "docstring": "Mocks reading responses from Cursor UI (OCR/Clipboard).",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MockLoopController": {
                    "methods": [
                        "__init__",
                        "run_cycle"
                    ],
                    "docstring": "Mocks the main bridge control loop.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 15
        },
        "archive\\orphans\\tools\\cursor_bridge\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "archive\\orphans\\tools\\discovery\\archive_defunct_tests.py": {
            "language": ".py",
            "functions": [
                "archive_defunct_tests"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "archive\\orphans\\tools\\discovery\\find_defunct_tests.py": {
            "language": ".py",
            "functions": [
                "find_python_files",
                "map_test_to_source",
                "find_defunct_tests"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "archive\\orphans\\tools\\discovery\\find_todos.py": {
            "language": ".py",
            "functions": [
                "find_todos_in_file",
                "write_log_entry",
                "scan_directory",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "archive\\orphans\\tools\\dreamos_utils\\check_agent_pulse.py": {
            "language": ".py",
            "functions": [
                "get_core_timestamp_utility",
                "check_agent_pulse",
                "fallback_timestamp"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "archive\\orphans\\tools\\functional\\context_planner_tool.py": {
            "language": ".py",
            "functions": [
                "name",
                "description",
                "_extract_targets",
                "execute",
                "_rule_copy_file",
                "_rule_extract_symbol",
                "_rule_refactor_symbol",
                "_rule_create_file",
                "_rule_migrate_update_generic_refactor",
                "_rule_read_analyze",
                "_rule_search",
                "_rule_fallback_log",
                "_generate_plan_narration",
                "_log_execution"
            ],
            "classes": {
                "ContextPlannerTool": {
                    "methods": [
                        "name",
                        "description",
                        "_extract_targets",
                        "execute",
                        "_rule_copy_file",
                        "_rule_extract_symbol",
                        "_rule_refactor_symbol",
                        "_rule_create_file",
                        "_rule_migrate_update_generic_refactor",
                        "_rule_read_analyze",
                        "_rule_search",
                        "_rule_fallback_log",
                        "_generate_plan_narration",
                        "_log_execution"
                    ],
                    "docstring": "Generates a execution plan based on keywords and patterns in the task description.\nNOTE: This is a simplified rule-based planner, NOT an LLM-based planner.",
                    "base_classes": [
                        "BaseTool"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 28
        },
        "archive\\orphans\\tools\\functional\\gui_interaction.py": {
            "language": ".py",
            "functions": [
                "find_and_activate_cursor_window",
                "type_prompt_and_send",
                "copy_cursor_response",
                "interact_with_cursor"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "archive\\orphans\\tools\\maintenance\\archive_agent_comms.py": {
            "language": ".py",
            "functions": [
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "archive\\orphans\\tools\\maintenance\\archive_agent_mailboxes.py": {
            "language": ".py",
            "functions": [
                "archive_mailbox",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "archive\\orphans\\tools\\maintenance\\validate_logs.py": {
            "language": ".py",
            "functions": [
                "load_schema_map",
                "find_jsonl_files"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "archive\\orphans\\tools\\maintenance\\augment_task_tags.py": {
            "language": ".py",
            "functions": [
                "augment_tasks_with_tags",
                "parse_args",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "archive\\orphans\\tools\\maintenance\\validate_onboarding_prompts.py": {
            "language": ".py",
            "functions": [
                "find_project_root",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "archive\\orphans\\tools\\maintenance\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "archive\\orphans\\tools\\tests\\circular_import_probe.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "archive\\orphans\\tools\\validation\\check_dependencies.py": {
            "language": ".py",
            "functions": [
                "check_cli_dependencies",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "archive\\orphans\\tools\\validation\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "archive\\orphans\\tools\\_core\\base.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "__repr__",
                "__init__",
                "get_argument",
                "__init__",
                "__repr__",
                "__init__"
            ],
            "classes": {
                "ToolParameter": {
                    "methods": [
                        "__init__",
                        "__repr__"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Prototype",
                    "agent_type": "Utility"
                },
                "ToolContext": {
                    "methods": [
                        "__init__",
                        "get_argument"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Prototype",
                    "agent_type": "Utility"
                },
                "BaseTool": {
                    "methods": [
                        "__init__",
                        "__repr__"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "ABC"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "BaseToolExecutor": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Placeholder base class for a tool executor concept. Now async.",
                    "base_classes": [
                        "ABC"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 14
        },
        "archive\\orphans\\tools\\_core\\registry.py": {
            "language": ".py",
            "functions": [
                "get_registry",
                "__init__",
                "register",
                "get_tool",
                "list_tools"
            ],
            "classes": {
                "ToolRegistry": {
                    "methods": [
                        "__init__",
                        "register",
                        "get_tool",
                        "list_tools"
                    ],
                    "docstring": "Minimal placeholder for ToolRegistry to resolve import errors.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 9
        },
        "archive\\orphans\\utils\\ai_output_logger.py": {
            "language": ".py",
            "functions": [
                "log_ai_output"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "archive\\orphans\\ts\\index.d.ts": {
            "language": ".ts",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "archive\\orphans\\utils\\autonomy_governor.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "check_operational_status",
                "get_next_action_suggestion",
                "validate_task_completion_checklist"
            ],
            "classes": {
                "AgentAutonomyGovernor": {
                    "methods": [
                        "__init__",
                        "check_operational_status",
                        "get_next_action_suggestion",
                        "validate_task_completion_checklist"
                    ],
                    "docstring": "Provides checks and guidance based on AUTONOMOUS_LOOP principles (v2.1 Inbox-Centric).",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "archive\\orphans\\utils\\common_utils.py": {
            "language": ".py",
            "functions": [
                "get_utc_iso_timestamp"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "archive\\orphans\\utils\\coords.py": {
            "language": ".py",
            "functions": [
                "load_coordinates",
                "save_coordinates"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "archive\\orphans\\utils\\decorators.py": {
            "language": ".py",
            "functions": [
                "retry_on_exception",
                "async_retry_on_exception",
                "decorator",
                "decorator",
                "wrapper"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5
        },
        "archive\\orphans\\utils\\file_io.py": {
            "language": ".py",
            "functions": [
                "read_json_file",
                "write_json_atomic",
                "read_jsonl_file",
                "append_jsonl",
                "read_text_file",
                "write_text_file_atomic",
                "_extract_content_from_tool_response",
                "safe_read_with_tool",
                "ensure_directory",
                "calculate_file_sha256",
                "move_file"
            ],
            "classes": {},
            "routes": [],
            "complexity": 11
        },
        "archive\\orphans\\utils\\gui_utils.py": {
            "language": ".py",
            "functions": [
                "get_specific_coordinate",
                "copy_text_from_cursor",
                "close_browser",
                "launch_browser",
                "inject_text_via_mouse",
                "perform_mouse_action",
                "navigate_to_page",
                "wait_for_login",
                "load_coordinates",
                "is_window_focused",
                "trigger_recalibration",
                "wait_for_element",
                "copy_thea_reply",
                "get_clipboard_content_safe",
                "copy_text_from_agent"
            ],
            "classes": {},
            "routes": [],
            "complexity": 15
        },
        "archive\\orphans\\utils\\import_debugger.py": {
            "language": ".py",
            "functions": [
                "try_import"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "archive\\orphans\\utils\\logging_utils.py": {
            "language": ".py",
            "functions": [
                "log_handler_exception"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "archive\\orphans\\utils\\project_root.py": {
            "language": ".py",
            "functions": [
                "find_project_root"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "archive\\orphans\\utils\\protocol_compliance_utils.py": {
            "language": ".py",
            "functions": [
                "calculate_file_sha256",
                "load_yaml_registry",
                "check_mailbox_structure",
                "_find_agent_source_file",
                "check_agent_bus_usage",
                "check_task_status_reporting",
                "check_compliance",
                "__init__",
                "visit_ClassDef",
                "visit_Call",
                "report",
                "__init__",
                "visit_Assign",
                "visit_Call",
                "report"
            ],
            "classes": {
                "AgentBusAstVisitor": {
                    "methods": [
                        "__init__",
                        "visit_ClassDef",
                        "visit_Call",
                        "report"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "ast.NodeVisitor"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "TaskStatusAstVisitor": {
                    "methods": [
                        "__init__",
                        "visit_Assign",
                        "visit_Call",
                        "report"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "ast.NodeVisitor"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 23
        },
        "archive\\orphans\\utils\\safe_json_editor_template.py": {
            "language": ".py",
            "functions": [
                "load_json_list",
                "atomic_write_json",
                "add_item_to_list",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "archive\\orphans\\utils\\schema_validator.py": {
            "language": ".py",
            "functions": [
                "load_schema",
                "validate_payload"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "archive\\orphans\\utils\\search.py": {
            "language": ".py",
            "functions": [
                "is_ripgrep_installed",
                "run_ripgrep_search",
                "parse_ripgrep_output"
            ],
            "classes": {
                "RipgrepMatch": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "TypedDict"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "archive\\orphans\\utils\\spec_parser.py": {
            "language": ".py",
            "functions": [
                "parse_project_plan_tasks",
                "__init__",
                "visit_Table",
                "visit_TableRow",
                "_extract_headers",
                "_extract_row_cells",
                "_extract_cell_content",
                "_normalize_headers",
                "_map_row_to_headers",
                "parse"
            ],
            "classes": {
                "ProjectPlanTableVisitor": {
                    "methods": [
                        "__init__",
                        "visit_Table",
                        "visit_TableRow",
                        "_extract_headers",
                        "_extract_row_cells",
                        "_extract_cell_content",
                        "_normalize_headers",
                        "_map_row_to_headers"
                    ],
                    "docstring": "AST Visitor to find and process specific task tables within PROJECT_PLAN.md.",
                    "base_classes": [
                        null
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "NodeVisitor": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Prototype",
                    "agent_type": "Utility"
                },
                "ParserWithTables": {
                    "methods": [
                        "parse"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Prototype",
                    "agent_type": "Utility"
                },
                "RendererWithTables": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Prototype",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 19
        },
        "archive\\orphans\\utils\\text.py": {
            "language": ".py",
            "functions": [
                "sanitize_filename"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "archive\\orphans\\utils\\dream_mode_utils\\browser.py": {
            "language": ".py",
            "functions": [
                "launch_browser",
                "navigate_to_page",
                "wait_for_login",
                "close_browser"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "archive\\orphans\\utils\\dream_mode_utils\\cursor_session_manager.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "on_created",
                "start"
            ],
            "classes": {
                "CursorSessionManager": {
                    "methods": [
                        "__init__",
                        "on_created",
                        "start"
                    ],
                    "docstring": "Watches a directory for Cursor task files and launches Cursor IDE sessions to execute them.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "archive\\orphans\\utils\\dream_mode_utils\\channel_loader.py": {
            "language": ".py",
            "functions": [
                "get_blob_channel"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "archive\\orphans\\utils\\dream_mode_utils\\html_parser.py": {
            "language": ".py",
            "functions": [
                "is_still_generating",
                "extract_latest_reply"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "archive\\orphans\\utils\\dream_mode_utils\\prompt_renderer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "render"
            ],
            "classes": {
                "PromptRenderer": {
                    "methods": [
                        "__init__",
                        "render"
                    ],
                    "docstring": "Loads and renders Jinja2 templates from a specified directory.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "archive\\orphans\\utils\\dream_mode_utils\\task_parser.py": {
            "language": ".py",
            "functions": [
                "_extract_json_block",
                "_extract_regex_fallback",
                "extract_task_metadata"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "basicbot\\ai_models.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "fit",
                "predict",
                "__init__",
                "fit",
                "predict",
                "__init__",
                "fit",
                "predict",
                "__init__",
                "fit",
                "predict",
                "__init__",
                "fit",
                "predict",
                "__init__",
                "fit",
                "predict",
                "__init__",
                "fit_model",
                "predict"
            ],
            "classes": {
                "ARIMAModel": {
                    "methods": [
                        "__init__",
                        "fit",
                        "predict"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Prototype",
                    "agent_type": "SignalAgent"
                },
                "LSTMModel": {
                    "methods": [
                        "__init__",
                        "fit",
                        "predict"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Prototype",
                    "agent_type": "SignalAgent"
                },
                "NeuralNetworkModel": {
                    "methods": [
                        "__init__",
                        "fit",
                        "predict"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Prototype",
                    "agent_type": "SignalAgent"
                },
                "RandomForestModel": {
                    "methods": [
                        "__init__",
                        "fit",
                        "predict"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Prototype",
                    "agent_type": "SignalAgent"
                },
                "DecisionTreeModel": {
                    "methods": [
                        "__init__",
                        "fit",
                        "predict"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Prototype",
                    "agent_type": "SignalAgent"
                },
                "SVMModel": {
                    "methods": [
                        "__init__",
                        "fit",
                        "predict"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Prototype",
                    "agent_type": "SignalAgent"
                },
                "ModelManager": {
                    "methods": [
                        "__init__",
                        "fit_model",
                        "predict"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Prototype",
                    "agent_type": "SignalAgent"
                }
            },
            "routes": [],
            "complexity": 42
        },
        "basicbot\\backtest.py": {
            "language": ".py",
            "functions": [
                "retry_request",
                "get_historical_data",
                "resample_data",
                "wrapper",
                "__init__",
                "next"
            ],
            "classes": {
                "MultiTFStrategy": {
                    "methods": [
                        "__init__",
                        "next"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "bt.Strategy"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "basicbot\\backtester.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "run_backtest",
                "_prepare_multitimeframe_data",
                "_calculate_indicators",
                "_generate_signals",
                "_simulate_trading",
                "_calculate_returns"
            ],
            "classes": {
                "Backtester": {
                    "methods": [
                        "__init__",
                        "run_backtest",
                        "_prepare_multitimeframe_data",
                        "_calculate_indicators",
                        "_generate_signals",
                        "_simulate_trading",
                        "_calculate_returns"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 14
        },
        "basicbot\\config.py": {
            "language": ".py",
            "functions": [
                "get_env",
                "ALPACA_API_KEY",
                "ALPACA_SECRET_KEY",
                "ALPACA_BASE_URL",
                "DEBUG_MODE",
                "LOG_FILE",
                "LOG_LEVEL",
                "SYMBOL",
                "TIMEFRAME",
                "LOOKBACK_DAYS",
                "DATA_LIMIT",
                "RISK_PERCENT",
                "STOP_LOSS_PCT",
                "TAKE_PROFIT_PCT",
                "PROFIT_TARGET",
                "BACKTEST_START_DATE",
                "BACKTEST_END_DATE",
                "TRADING_MODE",
                "validate"
            ],
            "classes": {
                "Config": {
                    "methods": [
                        "get_env",
                        "ALPACA_API_KEY",
                        "ALPACA_SECRET_KEY",
                        "ALPACA_BASE_URL",
                        "DEBUG_MODE",
                        "LOG_FILE",
                        "LOG_LEVEL",
                        "SYMBOL",
                        "TIMEFRAME",
                        "LOOKBACK_DAYS",
                        "DATA_LIMIT",
                        "RISK_PERCENT",
                        "STOP_LOSS_PCT",
                        "TAKE_PROFIT_PCT",
                        "PROFIT_TARGET",
                        "BACKTEST_START_DATE",
                        "BACKTEST_END_DATE",
                        "TRADING_MODE",
                        "validate"
                    ],
                    "docstring": "Centralized configuration handler for the trading system. Reads values dynamically from environment variables.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 38
        },
        "basicbot\\db_handler.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_initialize_table",
                "save_posts",
                "fetch_posts",
                "close"
            ],
            "classes": {
                "DatabaseHandler": {
                    "methods": [
                        "__init__",
                        "_initialize_table",
                        "save_posts",
                        "fetch_posts",
                        "close"
                    ],
                    "docstring": "Unified database handler for storing scraped posts.\nSupports PostgreSQL and MySQL based on the DB_TYPE configuration.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 10
        },
        "basicbot\\data_fetcher.py": {
            "language": ".py",
            "functions": [
                "retry_request",
                "wrapper",
                "__init__",
                "get_historical_data",
                "get_latest_quote"
            ],
            "classes": {
                "DataFetcher": {
                    "methods": [
                        "__init__",
                        "get_historical_data",
                        "get_latest_quote"
                    ],
                    "docstring": "Handles fetching historical stock data & news from multiple sources.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "basicbot\\discord_notifier.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "run"
            ],
            "classes": {
                "DiscordNotifier": {
                    "methods": [
                        "__init__",
                        "run"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Prototype",
                    "agent_type": "ActionAgent"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "basicbot\\logger.py": {
            "language": ".py",
            "functions": [
                "setup_logging"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "basicbot\\main.py": {
            "language": ".py",
            "functions": [
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "basicbot\\model_training_utils.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_get_model_save_dir",
                "save_model",
                "load_model",
                "_create_version_directory",
                "get_model_directory",
                "_get_latest_version_dir",
                "_save_metadata",
                "_load_latest_file",
                "save_model",
                "load_model",
                "save_model",
                "load_model",
                "__init__",
                "save_model",
                "load_model",
                "validate_model",
                "load_metadata",
                "create_lstm_model"
            ],
            "classes": {
                "BaseModelIO": {
                    "methods": [
                        "__init__",
                        "_get_model_save_dir",
                        "save_model",
                        "load_model",
                        "_create_version_directory",
                        "get_model_directory",
                        "_get_latest_version_dir",
                        "_save_metadata",
                        "_load_latest_file"
                    ],
                    "docstring": "Abstract interface for saving/loading models, metadata, and scalers.\nSubclasses must implement the `save_model` and `load_model` methods.",
                    "base_classes": [
                        "ABC"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "KerasModelIO": {
                    "methods": [
                        "save_model",
                        "load_model"
                    ],
                    "docstring": "Specialized logic for saving and loading Keras (e.g., LSTM, Neural Network) models.",
                    "base_classes": [
                        "BaseModelIO"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "JoblibModelIO": {
                    "methods": [
                        "save_model",
                        "load_model"
                    ],
                    "docstring": "Specialized logic for saving and loading models that can be serialized via joblib.\n(e.g., scikit-learn, XGBoost, LightGBM).",
                    "base_classes": [
                        "BaseModelIO"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ModelManager": {
                    "methods": [
                        "__init__",
                        "save_model",
                        "load_model",
                        "validate_model",
                        "load_metadata"
                    ],
                    "docstring": "High-level manager that selects the appropriate I/O strategy based on model type.\nProvides unified methods for saving, loading, and validating models.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 37
        },
        "basicbot\\post_scraper.py": {
            "language": ".py",
            "functions": [
                "scroll_down",
                "scrape_linkedin_posts",
                "scrape_twitter_posts",
                "scrape_reddit_posts",
                "scrape_facebook_posts",
                "store_scraped_posts"
            ],
            "classes": {},
            "routes": [],
            "complexity": 6
        },
        "basicbot\\setup.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "basicbot\\social_scraper.py": {
            "language": ".py",
            "functions": [
                "get_driver",
                "load_cookies",
                "save_cookies",
                "wait_for_manual_login",
                "login_linkedin",
                "login_twitter",
                "login_facebook",
                "login_instagram",
                "login_reddit",
                "run_all_logins",
                "fb_logged_in"
            ],
            "classes": {},
            "routes": [],
            "complexity": 11
        },
        "basicbot\\social_storage.py": {
            "language": ".py",
            "functions": [
                "embed_text",
                "store_post",
                "search_similar_posts"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "basicbot\\strategy.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "fetch_historical_data",
                "calculate_indicators",
                "generate_signals",
                "compute_exit_levels",
                "calculate_position_size",
                "optimize_signals",
                "backtest"
            ],
            "classes": {
                "Strategy": {
                    "methods": [
                        "__init__",
                        "fetch_historical_data",
                        "calculate_indicators",
                        "generate_signals",
                        "compute_exit_levels",
                        "calculate_position_size",
                        "optimize_signals",
                        "backtest"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 16
        },
        "basicbot\\trading_api_alpaca.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "place_order",
                "get_account",
                "get_position",
                "logout"
            ],
            "classes": {
                "TradingAPI": {
                    "methods": [
                        "__init__",
                        "place_order",
                        "get_account",
                        "get_position",
                        "logout"
                    ],
                    "docstring": "A wrapper for the Alpaca API.\nUses API credentials from config.py for authentication and trading.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 10
        },
        "basicbot\\trading_bot.py": {
            "language": ".py",
            "functions": [
                "run_live_trading",
                "run_backtest"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "basicbot\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "basicbot\\utils.py": {
            "language": ".py",
            "functions": [
                "get_timestamp",
                "get_historical_data",
                "retry_api_call",
                "calculate_position_size",
                "retry_request",
                "decorator",
                "wrapper"
            ],
            "classes": {},
            "routes": [],
            "complexity": 7
        },
        "basicbot\\archive\\1.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "basicbot\\archive\\test_backtest.py": {
            "language": ".py",
            "functions": [
                "setUpClass",
                "setUp",
                "test_run_backtest",
                "test_empty_dataframe"
            ],
            "classes": {
                "TestBacktester": {
                    "methods": [
                        "setUpClass",
                        "setUp",
                        "test_run_backtest",
                        "test_empty_dataframe"
                    ],
                    "docstring": "Unit tests for the Backtester class.",
                    "base_classes": [
                        "unittest.TestCase"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "basicbot\\archive\\test_data_fetcher.py": {
            "language": ".py",
            "functions": [
                "setUpClass",
                "setUp",
                "test_normalize_columns"
            ],
            "classes": {
                "TestDataFetchUtils": {
                    "methods": [
                        "setUpClass",
                        "setUp",
                        "test_normalize_columns"
                    ],
                    "docstring": "Unit tests for the DataFetchUtils class.",
                    "base_classes": [
                        "unittest.IsolatedAsyncioTestCase"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "basicbot\\archive\\test_trader_api.py": {
            "language": ".py",
            "functions": [
                "setUp",
                "test_buy_order",
                "test_sell_order",
                "test_execute_signals"
            ],
            "classes": {
                "TestTraderAPI": {
                    "methods": [
                        "setUp",
                        "test_buy_order",
                        "test_sell_order",
                        "test_execute_signals"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "unittest.TestCase"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "basicbot\\archive\\test_trader.py": {
            "language": ".py",
            "functions": [
                "setUp",
                "test_buy_signal",
                "test_sell_signal",
                "test_hold_signal",
                "test_invalid_signal",
                "test_mixed_signals"
            ],
            "classes": {
                "TestTrader": {
                    "methods": [
                        "setUp",
                        "test_buy_signal",
                        "test_sell_signal",
                        "test_hold_signal",
                        "test_invalid_signal",
                        "test_mixed_signals"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "unittest.TestCase"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 12
        },
        "basicbot\\archive\\test_trading_api_alpaca.py": {
            "language": ".py",
            "functions": [
                "setUp",
                "tearDown",
                "test_login_success",
                "test_login_failure_missing_credentials",
                "test_place_buy_order",
                "test_place_sell_order",
                "test_get_account",
                "test_logout"
            ],
            "classes": {
                "TestTradingAPI": {
                    "methods": [
                        "setUp",
                        "tearDown",
                        "test_login_success",
                        "test_login_failure_missing_credentials",
                        "test_place_buy_order",
                        "test_place_sell_order",
                        "test_get_account",
                        "test_logout"
                    ],
                    "docstring": "Unit tests for the TradingAPI class integrated with Alpaca.",
                    "base_classes": [
                        "unittest.TestCase"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 16
        },
        "basicbot\\archive\\test_trading_api_robinhood.py": {
            "language": ".py",
            "functions": [
                "setUp",
                "test_login_success",
                "test_login_failure",
                "test_mfa_verification_required",
                "test_retry_login_after_verification",
                "test_logout_success",
                "test_logout_failure"
            ],
            "classes": {
                "TestCustomRobinhoodAPI": {
                    "methods": [
                        "setUp",
                        "test_login_success",
                        "test_login_failure",
                        "test_mfa_verification_required",
                        "test_retry_login_after_verification",
                        "test_logout_success",
                        "test_logout_failure"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "unittest.TestCase"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 14
        },
        "basicbot\\archive\\trader.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "execute_signals",
                "buy",
                "sell"
            ],
            "classes": {
                "Trader": {
                    "methods": [
                        "__init__",
                        "execute_signals",
                        "buy",
                        "sell"
                    ],
                    "docstring": "Trader class to execute trades based on signals.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "basicbot\\archive\\test_trading_bot.py": {
            "language": ".py",
            "functions": [
                "setUp",
                "test_long_signal",
                "test_no_signal",
                "test_get_position_no_position"
            ],
            "classes": {
                "TestTradingBot": {
                    "methods": [
                        "setUp",
                        "test_long_signal",
                        "test_no_signal",
                        "test_get_position_no_position"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "unittest.TestCase"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "basicbot\\archive\\trading_api_robinhood.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "update_endpoints",
                "login",
                "_handle_sms_verification",
                "_finalize_login",
                "_log_response",
                "logout"
            ],
            "classes": {
                "CustomRobinhoodAPI": {
                    "methods": [
                        "__init__",
                        "update_endpoints",
                        "login",
                        "_handle_sms_verification",
                        "_finalize_login",
                        "_log_response",
                        "logout"
                    ],
                    "docstring": "Custom implementation for Robinhood login with SMS-based MFA handling.\nThis version dynamically updates its endpoint URLs by scraping a specified page.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 14
        },
        "basicbot\\tests\\test_backtester.py": {
            "language": ".py",
            "functions": [
                "mock_strategy",
                "mock_logger",
                "mock_api",
                "sample_data",
                "test_backtester_initialization",
                "test_run_backtest_valid_data",
                "test_run_backtest_missing_close_column",
                "test_calculate_indicators",
                "test_generate_signals",
                "test_calculate_returns"
            ],
            "classes": {},
            "routes": [],
            "complexity": 10
        },
        "basicbot\\tests\\test_data_fetcher.py": {
            "language": ".py",
            "functions": [
                "dummy_logger",
                "data_fetcher",
                "test_get_historical_data",
                "test_get_latest_quote",
                "test_get_latest_quote_no_ask",
                "side_effect"
            ],
            "classes": {},
            "routes": [],
            "complexity": 6
        },
        "basicbot\\tests\\test_config.py": {
            "language": ".py",
            "functions": [
                "dynamic_config",
                "test_config_validation",
                "test_config_validation_missing_keys",
                "test_logging_config",
                "test_trading_parameters",
                "test_backtesting_config",
                "test_execution_mode"
            ],
            "classes": {},
            "routes": [],
            "complexity": 7
        },
        "basicbot\\tests\\test_discord_notifier.py": {
            "language": ".py",
            "functions": [
                "mock_env",
                "notifier",
                "test_notifier_initialization",
                "test_notifier_missing_credentials",
                "test_bot_starts"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5
        },
        "basicbot\\tests\\test_logger.py": {
            "language": ".py",
            "functions": [
                "test_logger_creation",
                "test_logging_levels",
                "test_avoid_duplicate_handlers",
                "test_log_file_writing",
                "test_feedback_loop_enabled"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5
        },
        "basicbot\\tests\\test_strategy.py": {
            "language": ".py",
            "functions": [
                "sample_data",
                "strategy_instance",
                "test_calculate_indicators",
                "test_evaluate_buy_signal",
                "test_evaluate_sell_signal",
                "test_evaluate_hold_signal",
                "test_compute_exit_levels",
                "test_calculate_position_size",
                "test_optimize_signals"
            ],
            "classes": {},
            "routes": [],
            "complexity": 9
        },
        "basicbot\\tests\\test_trading_api.py": {
            "language": ".py",
            "functions": [
                "test_api_keys_exist",
                "test_symbol_defined",
                "test_trading_mode_valid",
                "setUpClass",
                "test_account_info",
                "test_get_position",
                "test_place_order",
                "setUpClass",
                "test_indicator_calculation",
                "test_signal_generation",
                "setUpClass",
                "test_backtest_execution",
                "test_live_trading",
                "test_backtest_execution"
            ],
            "classes": {
                "TestConfig": {
                    "methods": [
                        "test_api_keys_exist",
                        "test_symbol_defined",
                        "test_trading_mode_valid"
                    ],
                    "docstring": "\u2705 Test Suite for Config Validation",
                    "base_classes": [
                        "unittest.TestCase"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "TestTradingAPI": {
                    "methods": [
                        "setUpClass",
                        "test_account_info",
                        "test_get_position",
                        "test_place_order"
                    ],
                    "docstring": "\u2705 Test Suite for Alpaca API Wrapper",
                    "base_classes": [
                        "unittest.TestCase"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "TestStrategy": {
                    "methods": [
                        "setUpClass",
                        "test_indicator_calculation",
                        "test_signal_generation"
                    ],
                    "docstring": "\u2705 Test Suite for Trading Strategy",
                    "base_classes": [
                        "unittest.TestCase"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "TestBacktester": {
                    "methods": [
                        "setUpClass",
                        "test_backtest_execution"
                    ],
                    "docstring": "\u2705 Test Suite for Backtesting Engine",
                    "base_classes": [
                        "unittest.TestCase"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "TestTradingBot": {
                    "methods": [
                        "test_live_trading",
                        "test_backtest_execution"
                    ],
                    "docstring": "\u2705 Full System Test (Live/Backtest Modes)",
                    "base_classes": [
                        "unittest.TestCase"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 28
        },
        "basicbot\\tests\\test_utils.py": {
            "language": ".py",
            "functions": [
                "test_get_timestamp",
                "test_get_historical_data",
                "test_get_historical_data_empty",
                "test_get_historical_data_api_error",
                "test_retry_api_call",
                "test_retry_api_call_fail",
                "test_calculate_position_size",
                "test_calculate_position_size_zero_stop_loss",
                "test_retry_request",
                "flaky_function"
            ],
            "classes": {},
            "routes": [],
            "complexity": 10
        },
        "basicbot\\tests\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\agents\\io\\agent_supervisor.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_get_agent_paths",
                "reset_agent_onboarding",
                "reset_all_agents",
                "get_agent_status",
                "get_all_agent_statuses"
            ],
            "classes": {
                "AgentSupervisor": {
                    "methods": [
                        "__init__",
                        "_get_agent_paths",
                        "reset_agent_onboarding",
                        "reset_all_agents",
                        "get_agent_status",
                        "get_all_agent_statuses"
                    ],
                    "docstring": "Supervisor tool for managing agent states and operations.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 12
        },
        "dreamos\\tools\\agent_bootstrap_runner\\config.py": {
            "language": ".py",
            "functions": [
                "validate_agent_id"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "dreamos\\tools\\agent_bootstrap_runner\\onboard_all_agents.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "dreamos\\tools\\agent_bootstrap_runner\\validation.py": {
            "language": ".py",
            "functions": [
                "validate_json_file",
                "validate_coords",
                "validate_all_files"
            ],
            "classes": {
                "ValidationResult": {
                    "methods": [],
                    "docstring": "Result of a validation check",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 3
        },
        "dreamos_ai_organizer\\agent_identity.py": {
            "language": ".py",
            "functions": [
                "create_agent",
                "__init__",
                "_load_ethos",
                "validate_ethos_compliance",
                "_check_value_compliance",
                "_check_principle_compliance",
                "_check_safeguard_compliance",
                "confirm_identity",
                "should_pause",
                "__init__",
                "log_intent"
            ],
            "classes": {
                "EthosValidationResult": {
                    "methods": [],
                    "docstring": "Results from ethos validation checks.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "AgentIdentity": {
                    "methods": [
                        "__init__",
                        "_load_ethos",
                        "validate_ethos_compliance",
                        "_check_value_compliance",
                        "_check_principle_compliance",
                        "_check_safeguard_compliance",
                        "confirm_identity",
                        "should_pause"
                    ],
                    "docstring": "Manages agent identity and ethos compliance.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "EmpathyLogger": {
                    "methods": [
                        "__init__",
                        "log_intent"
                    ],
                    "docstring": "Handles logging of emotional context and intent.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 21
        },
        "dreamos_ai_organizer\\ethos\\identity.py": {
            "language": ".py",
            "functions": [
                "create_agent",
                "__init__",
                "_load_ethos",
                "validate_ethos_compliance",
                "confirm_identity",
                "should_pause",
                "get_action_context",
                "_get_user_state",
                "_get_system_state",
                "_get_environment",
                "_get_emotional_context",
                "_get_user_preferences",
                "_get_allowed_capabilities"
            ],
            "classes": {
                "EthosValidationResult": {
                    "methods": [],
                    "docstring": "Results from ethos validation checks.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "AgentIdentity": {
                    "methods": [
                        "__init__",
                        "_load_ethos",
                        "validate_ethos_compliance",
                        "confirm_identity",
                        "should_pause",
                        "get_action_context",
                        "_get_user_state",
                        "_get_system_state",
                        "_get_environment",
                        "_get_emotional_context",
                        "_get_user_preferences",
                        "_get_allowed_capabilities"
                    ],
                    "docstring": "Manages agent identity and ethos compliance.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 25
        },
        "dreamos_ai_organizer\\validate_ethos.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "_load_ethos",
                "analyze_logs",
                "_load_empathy_logs",
                "_load_action_logs",
                "_calculate_metrics",
                "_count_compliant_actions",
                "_count_warning_actions",
                "_generate_report",
                "_generate_recommendations"
            ],
            "classes": {
                "ValidationMetrics": {
                    "methods": [],
                    "docstring": "Metrics for ethos validation.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "EthosValidator": {
                    "methods": [
                        "__init__",
                        "_load_ethos",
                        "analyze_logs",
                        "_load_empathy_logs",
                        "_load_action_logs",
                        "_calculate_metrics",
                        "_count_compliant_actions",
                        "_count_warning_actions",
                        "_generate_report",
                        "_generate_recommendations"
                    ],
                    "docstring": "Validates system behavior against ethos guidelines.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 21
        },
        "dreamos_ai_organizer\\ethos\\compliance.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "check",
                "check",
                "_check_compassion",
                "_check_clarity",
                "_check_collaboration",
                "check",
                "_check_human_centricity",
                "_check_context_awareness",
                "_check_uncertainty_handling",
                "_check_continuous_learning",
                "_respects_preferences",
                "check",
                "_check_autonomy",
                "_check_emotional_safety",
                "_check_ethical_boundaries"
            ],
            "classes": {
                "ComplianceResult": {
                    "methods": [],
                    "docstring": "Results from a compliance check.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "BaseCompliance": {
                    "methods": [
                        "__init__",
                        "check"
                    ],
                    "docstring": "Base class for all compliance checkers.",
                    "base_classes": [
                        "ABC"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ValueCompliance": {
                    "methods": [
                        "check",
                        "_check_compassion",
                        "_check_clarity",
                        "_check_collaboration"
                    ],
                    "docstring": "Checks compliance with core values.",
                    "base_classes": [
                        "BaseCompliance"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "PrincipleCompliance": {
                    "methods": [
                        "check",
                        "_check_human_centricity",
                        "_check_context_awareness",
                        "_check_uncertainty_handling",
                        "_check_continuous_learning",
                        "_respects_preferences"
                    ],
                    "docstring": "Checks compliance with operational principles.",
                    "base_classes": [
                        "BaseCompliance"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "SafeguardCompliance": {
                    "methods": [
                        "check",
                        "_check_autonomy",
                        "_check_emotional_safety",
                        "_check_ethical_boundaries"
                    ],
                    "docstring": "Checks compliance with system safeguards.",
                    "base_classes": [
                        "BaseCompliance"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 32
        },
        "dreamos_ai_organizer\\ethos\\logger.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "log_intent",
                "log_action",
                "log_validation",
                "_process_log_queue",
                "_write_log",
                "get_recent_logs",
                "analyze_emotional_trends",
                "get_action_statistics",
                "get_validation_statistics"
            ],
            "classes": {
                "EmpathyLogger": {
                    "methods": [
                        "__init__",
                        "log_intent",
                        "log_action",
                        "log_validation",
                        "_process_log_queue",
                        "_write_log",
                        "get_recent_logs",
                        "analyze_emotional_trends",
                        "get_action_statistics",
                        "get_validation_statistics"
                    ],
                    "docstring": "Handles logging of emotional context and intent.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 20
        },
        "dreamos_ai_organizer\\ethos\\validator.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "_load_ethos",
                "analyze_logs",
                "_calculate_metrics",
                "_count_compliant_actions",
                "_count_warning_actions",
                "_generate_report",
                "_generate_recommendations"
            ],
            "classes": {
                "ValidationMetrics": {
                    "methods": [],
                    "docstring": "Metrics for ethos validation.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "EthosValidator": {
                    "methods": [
                        "__init__",
                        "_load_ethos",
                        "analyze_logs",
                        "_calculate_metrics",
                        "_count_compliant_actions",
                        "_count_warning_actions",
                        "_generate_report",
                        "_generate_recommendations"
                    ],
                    "docstring": "Validates system behavior against ethos guidelines.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 17
        },
        "dreamos_ai_organizer\\ethos\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "episodes\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "runtime\\agent_comms\\validators\\checklist_parser.py": {
            "language": ".py",
            "functions": [
                "parse_checklist_content",
                "validate_checklist_file",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "runtime\\agent_comms\\agent_mailboxes\\Agent-1\\state\\state_manager.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load_state",
                "_create_initial_state",
                "save_state",
                "update_cycle",
                "record_violation",
                "update_operation_state",
                "record_error",
                "reset_recovery_context",
                "get_state",
                "should_continue"
            ],
            "classes": {
                "OperationStateManager": {
                    "methods": [
                        "__init__",
                        "_load_state",
                        "_create_initial_state",
                        "save_state",
                        "update_cycle",
                        "record_violation",
                        "update_operation_state",
                        "record_error",
                        "reset_recovery_context",
                        "get_state",
                        "should_continue"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 22
        },
        "runtime\\bridge\\mock_bridge_loop.py": {
            "language": ".py",
            "functions": [
                "ensure_directories",
                "process_message_file",
                "main_loop"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "runtime\\agent_comms\\agent_mailboxes\\Agent-1\\state\\continuous_operation.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "execute_operation",
                "_default_error_handler",
                "_attempt_recovery",
                "maintain_context",
                "get_context",
                "clear_context",
                "enforce_no_stopping",
                "is_operational"
            ],
            "classes": {
                "ContinuousOperationManager": {
                    "methods": [
                        "__init__",
                        "execute_operation",
                        "_default_error_handler",
                        "_attempt_recovery",
                        "maintain_context",
                        "get_context",
                        "clear_context",
                        "enforce_no_stopping",
                        "is_operational"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 18
        },
        "runtime\\agent_comms\\agent_mailboxes\\Agent-1\\state\\__init__.py": {
            "language": ".py",
            "functions": [
                "initialize_continuous_operation",
                "get_operation_manager"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "runtime\\agent_comms\\agent_mailboxes\\Agent-1\\autonomy_loop.py": {
            "language": ".py",
            "functions": [
                "emit_heartbeat",
                "append_devlog",
                "enqueue_resume_prompt",
                "__init__",
                "_load_config"
            ],
            "classes": {
                "AgentNotifier": {
                    "methods": [
                        "__init__",
                        "_load_config"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Prototype",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 7
        },
        "runtime\\bridge\\queue\\run_all.py": {
            "language": ".py",
            "functions": [
                "run_all",
                "__init__",
                "start",
                "_start_components",
                "_check_components",
                "_restart_component",
                "_handle_signal",
                "_handle_error"
            ],
            "classes": {
                "SystemOrchestrator": {
                    "methods": [
                        "__init__",
                        "start",
                        "_start_components",
                        "_check_components",
                        "_restart_component",
                        "_handle_signal",
                        "_handle_error"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 15
        },
        "runtime\\bridge\\queue\\monitor_health.py": {
            "language": ".py",
            "functions": [
                "monitor_health",
                "__init__",
                "start",
                "_check_health",
                "_check_system_health",
                "_check_process_health",
                "_check_file_health",
                "_log_health",
                "_handle_error"
            ],
            "classes": {
                "HealthMonitor": {
                    "methods": [
                        "__init__",
                        "start",
                        "_check_health",
                        "_check_system_health",
                        "_check_process_health",
                        "_check_file_health",
                        "_log_health",
                        "_handle_error"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 17
        },
        "runtime\\bridge\\queue\\continuous_operation.py": {
            "language": ".py",
            "functions": [
                "ensure_continuous_operation",
                "__init__",
                "check_cycle_health",
                "reset_cycle_count",
                "increment_cycle",
                "log_cycle_reset",
                "log_cycle_milestone",
                "_append_to_log",
                "process_prompt",
                "get_operation_status"
            ],
            "classes": {
                "ContinuousOperationHandler": {
                    "methods": [
                        "__init__",
                        "check_cycle_health",
                        "reset_cycle_count",
                        "increment_cycle",
                        "log_cycle_reset",
                        "log_cycle_milestone",
                        "_append_to_log",
                        "process_prompt",
                        "get_operation_status"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 19
        },
        "runtime\\autonomy\\engine.py": {
            "language": ".py",
            "functions": [
                "main",
                "from_dict",
                "to_dict",
                "from_dict",
                "to_dict",
                "__init__",
                "_load_config",
                "_load_coordinates",
                "_initialize_agents",
                "get_agent_state",
                "set_agent_state",
                "get_mailbox",
                "get_agent_tasks",
                "reset_mailbox",
                "send_task",
                "update_task_progress",
                "initialize_mailbox",
                "send_message",
                "copy_response",
                "start_agent",
                "start_all_agents",
                "reset_agent",
                "reset_all_agents",
                "get_task_progress",
                "update_agent_state",
                "mark_message_processed",
                "broadcast_message"
            ],
            "classes": {
                "AgentState": {
                    "methods": [],
                    "docstring": "Agent state enumeration.",
                    "base_classes": [
                        "Enum"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "Message": {
                    "methods": [
                        "from_dict",
                        "to_dict"
                    ],
                    "docstring": "Message data structure.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "Task": {
                    "methods": [
                        "from_dict",
                        "to_dict"
                    ],
                    "docstring": "Task data structure.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "AutonomyEngine": {
                    "methods": [
                        "__init__",
                        "_load_config",
                        "_load_coordinates",
                        "_initialize_agents",
                        "get_agent_state",
                        "set_agent_state",
                        "get_mailbox",
                        "get_agent_tasks",
                        "reset_mailbox",
                        "send_task",
                        "update_task_progress",
                        "initialize_mailbox",
                        "send_message",
                        "copy_response",
                        "start_agent",
                        "start_all_agents",
                        "reset_agent",
                        "reset_all_agents",
                        "get_task_progress",
                        "update_agent_state",
                        "mark_message_processed",
                        "broadcast_message"
                    ],
                    "docstring": "Core autonomy engine for managing agent interactions.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 53
        },
        "runtime\\agent_comms\\validators\\inbox_message_validator.py": {
            "language": ".py",
            "functions": [
                "log_result",
                "load_schema",
                "validate_message",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "runtime\\bridge\\queue\\run_system.py": {
            "language": ".py",
            "functions": [
                "run_system",
                "__init__",
                "start",
                "_start_continuous_operation",
                "_run_validations",
                "_handle_signal",
                "_handle_error",
                "_handle_validation_error"
            ],
            "classes": {
                "SystemRunner": {
                    "methods": [
                        "__init__",
                        "start",
                        "_start_continuous_operation",
                        "_run_validations",
                        "_handle_signal",
                        "_handle_error",
                        "_handle_validation_error"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 15
        },
        "runtime\\bridge\\queue\\run_validations.py": {
            "language": ".py",
            "functions": [
                "run_all_validations",
                "__init__",
                "run_validations",
                "_run_validation",
                "_log_validation_result",
                "_handle_validation_error"
            ],
            "classes": {
                "ValidationRunner": {
                    "methods": [
                        "__init__",
                        "run_validations",
                        "_run_validation",
                        "_log_validation_result",
                        "_handle_validation_error"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 11
        },
        "runtime\\bridge\\queue\\test_continuous_operation.py": {
            "language": ".py",
            "functions": [
                "temp_queue_dir",
                "handler",
                "test_initial_state",
                "test_cycle_increment",
                "test_cycle_reset",
                "test_cycle_health",
                "test_prompt_processing",
                "test_operation_status",
                "test_log_creation",
                "test_prompt_file_creation"
            ],
            "classes": {},
            "routes": [],
            "complexity": 10
        },
        "runtime\\bridge\\queue\\run_continuous_operation.py": {
            "language": ".py",
            "functions": [
                "run_continuous_operation",
                "__init__",
                "run",
                "_process_pending_prompts",
                "_run_validations",
                "_handle_health_failure",
                "_handle_operation_error",
                "_handle_validation_error"
            ],
            "classes": {
                "ContinuousOperationSystem": {
                    "methods": [
                        "__init__",
                        "run",
                        "_process_pending_prompts",
                        "_run_validations",
                        "_handle_health_failure",
                        "_handle_operation_error",
                        "_handle_validation_error"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "ActionAgent"
                }
            },
            "routes": [],
            "complexity": 15
        },
        "runtime\\bridge\\queue\\validate_continuous_operation.py": {
            "language": ".py",
            "functions": [
                "validate_continuous_operation"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "runtime\\bridge\\queue\\monitor_continuous_operation.py": {
            "language": ".py",
            "functions": [
                "start_monitoring",
                "__init__",
                "check_operation_health",
                "_handle_unhealthy_operation",
                "_append_to_log",
                "start_monitoring"
            ],
            "classes": {
                "ContinuousOperationMonitor": {
                    "methods": [
                        "__init__",
                        "check_operation_health",
                        "_handle_unhealthy_operation",
                        "_append_to_log",
                        "start_monitoring"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 11
        },
        "runtime\\dashboard\\api\\agent_metrics.py": {
            "language": ".py",
            "functions": [
                "get_agent_metrics",
                "update_agent_metrics",
                "add_proposal",
                "record_vote",
                "record_bug_fix"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5
        },
        "runtime\\governance\\onboarding\\run_tests.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "runtime\\governance\\onboarding\\scoreboard_monitor.py": {
            "language": ".py",
            "functions": [
                "__init__"
            ],
            "classes": {
                "ComplianceAlert": {
                    "methods": [],
                    "docstring": "Compliance alert model",
                    "base_classes": [
                        "BaseModel"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "SystemMetrics": {
                    "methods": [],
                    "docstring": "System metrics model",
                    "base_classes": [
                        "BaseModel"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ScoreboardMonitor": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Scoreboard monitoring system",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 2
        },
        "runtime\\bridge\\queue\\validate_tasks.py": {
            "language": ".py",
            "functions": [
                "validate_all_tasks",
                "__init__",
                "validate_all_tasks",
                "_read_tasks",
                "_validate_task",
                "_validate_requirements",
                "_is_process_running",
                "_mark_task_complete",
                "_mark_task_failed",
                "_remove_task"
            ],
            "classes": {
                "TaskValidator": {
                    "methods": [
                        "__init__",
                        "validate_all_tasks",
                        "_read_tasks",
                        "_validate_task",
                        "_validate_requirements",
                        "_is_process_running",
                        "_mark_task_complete",
                        "_mark_task_failed",
                        "_remove_task"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 19
        },
        "runtime\\governance\\onboarding\\scoreboard_test_runner.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "load_test_cases",
                "_validate_input"
            ],
            "classes": {
                "TestCase": {
                    "methods": [],
                    "docstring": "Test case model",
                    "base_classes": [
                        "BaseModel"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "TestResult": {
                    "methods": [],
                    "docstring": "Test result model",
                    "base_classes": [
                        "BaseModel"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ScoreboardTestRunner": {
                    "methods": [
                        "__init__",
                        "load_test_cases",
                        "_validate_input"
                    ],
                    "docstring": "Scoreboard test runner",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "runtime\\governance\\onboarding\\utils\\agent_startup.py": {
            "language": ".py",
            "functions": [
                "load_coordinates",
                "initialize_mailbox",
                "send_startup_message",
                "start_agents"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "runtime\\governance\\onboarding\\scoreboard_update_tool.py": {
            "language": ".py",
            "functions": [
                "validate_value_range",
                "validate_timestamp",
                "__init__"
            ],
            "classes": {
                "ScoreUpdate": {
                    "methods": [
                        "validate_value_range",
                        "validate_timestamp"
                    ],
                    "docstring": "Score update model with validation",
                    "base_classes": [
                        "BaseModel"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ScoreboardUpdateTool": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Core scoreboard update implementation",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "runtime\\governance\\onboarding\\utils\\onboarding_utils.py": {
            "language": ".py",
            "functions": [
                "generate_onboarding_report",
                "save_validation_report",
                "__init__",
                "_load_protocols",
                "_parse_protocol",
                "validate_agent",
                "_check_initialization",
                "_check_protocol_compliance",
                "_check_documentation",
                "_check_security",
                "_check_operational"
            ],
            "classes": {
                "OnboardingValidator": {
                    "methods": [
                        "__init__",
                        "_load_protocols",
                        "_parse_protocol",
                        "validate_agent",
                        "_check_initialization",
                        "_check_protocol_compliance",
                        "_check_documentation",
                        "_check_security",
                        "_check_operational"
                    ],
                    "docstring": "Validates agent onboarding compliance and requirements.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 20
        },
        "runtime\\governance\\onboarding\\utils\\protocol_compliance.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "check_directory",
                "check_agent",
                "_check_required_files",
                "_check_protocol_compliance",
                "_check_documentation",
                "_validate_contract",
                "_validate_compliance",
                "_check_doc_sections",
                "generate_report",
                "save_report"
            ],
            "classes": {
                "ProtocolComplianceChecker": {
                    "methods": [
                        "__init__",
                        "check_directory",
                        "check_agent",
                        "_check_required_files",
                        "_check_protocol_compliance",
                        "_check_documentation",
                        "_validate_contract",
                        "_validate_compliance",
                        "_check_doc_sections",
                        "generate_report",
                        "save_report"
                    ],
                    "docstring": "Checks agent compliance with onboarding protocols.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 23
        },
        "runtime\\scripts\\create_missing_agent_dirs.py": {
            "language": ".py",
            "functions": [
                "create_missing_directories",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "runtime\\governance\\onboarding\\utils\\validation_utils.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "validate_documentation",
                "_check_required_sections",
                "_check_cross_references",
                "_check_internal_links",
                "_check_protocol_references",
                "_check_document_references",
                "_check_version_info",
                "_check_timestamp",
                "generate_report",
                "save_report"
            ],
            "classes": {
                "DocumentationValidator": {
                    "methods": [
                        "__init__",
                        "validate_documentation",
                        "_check_required_sections",
                        "_check_cross_references",
                        "_check_internal_links",
                        "_check_protocol_references",
                        "_check_document_references",
                        "_check_version_info",
                        "_check_timestamp",
                        "generate_report",
                        "save_report"
                    ],
                    "docstring": "Validates documentation completeness and format.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 23
        },
        "runtime\\governance\\onboarding\\utils\\validate_migration.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "validate_structure",
                "validate_markdown_refs",
                "validate_python_imports",
                "run_validation"
            ],
            "classes": {
                "MigrationValidator": {
                    "methods": [
                        "__init__",
                        "validate_structure",
                        "validate_markdown_refs",
                        "validate_python_imports",
                        "run_validation"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 11
        },
        "runtime\\scripts\\flatten_agent_directories.py": {
            "language": ".py",
            "functions": [
                "merge_directories",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "runtime\\scripts\\setup_dream_os.py": {
            "language": ".py",
            "functions": [
                "setup_directories",
                "initialize_system",
                "verify_setup"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "runtime\\scripts\\initialize_agent_manifests.py": {
            "language": ".py",
            "functions": [
                "create_agent_manifest",
                "initialize_agent_manifests"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "runtime\\scripts\\update_scoreboard.py": {
            "language": ".py",
            "functions": [
                "get_agent_metrics",
                "calculate_reputation_score",
                "update_scoreboard",
                "get_top_agents",
                "get_agent_stats"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5
        },
        "runtime\\scripts\\verify_agent_mailboxes.py": {
            "language": ".py",
            "functions": [
                "verify_agent_directories",
                "verify_message_references",
                "verify_violation_references",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "runtime\\services\\governance_service.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "start",
                "stop",
                "create_proposal",
                "cast_vote",
                "request_arbitration",
                "_process_proposals",
                "_process_votes",
                "_process_arbitration",
                "get_proposal_status",
                "get_active_proposals",
                "get_proposal_votes"
            ],
            "classes": {
                "ProposalStatus": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "Enum"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "VoteType": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "Enum"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "DreamOSGovernanceService": {
                    "methods": [
                        "__init__",
                        "start",
                        "stop",
                        "create_proposal",
                        "cast_vote",
                        "request_arbitration",
                        "_process_proposals",
                        "_process_votes",
                        "_process_arbitration",
                        "get_proposal_status",
                        "get_active_proposals",
                        "get_proposal_votes"
                    ],
                    "docstring": "Governance service for Dream.OS.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 24
        },
        "runtime\\scripts\\update_system_memory.py": {
            "language": ".py",
            "functions": [
                "log_architecture_decision",
                "log_proposal_origin",
                "log_historical_reasoning",
                "append_to_ledger",
                "update_agent_manifest",
                "record_activity"
            ],
            "classes": {},
            "routes": [],
            "complexity": 6
        },
        "runtime\\services\\service_manager.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "_setup_logging",
                "_init_services",
                "start",
                "stop",
                "_handle_signal",
                "get_service_status"
            ],
            "classes": {
                "DreamOSServiceManager": {
                    "methods": [
                        "__init__",
                        "_setup_logging",
                        "_init_services",
                        "start",
                        "stop",
                        "_handle_signal",
                        "get_service_status"
                    ],
                    "docstring": "Manager for Dream.OS services.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 15
        },
        "runtime\\services\\sync_service.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "on_modified",
                "__init__",
                "start",
                "stop",
                "_sync_loop",
                "_process_event",
                "_full_sync",
                "_sync_manifest",
                "_sync_memory",
                "_sync_scoreboard",
                "_update_scoreboard",
                "_update_memory",
                "_append_to_memory"
            ],
            "classes": {
                "DreamOSEventHandler": {
                    "methods": [
                        "__init__",
                        "on_modified"
                    ],
                    "docstring": "Handle file system events for Dream.OS components.",
                    "base_classes": [
                        "FileSystemEventHandler"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "DreamOSSyncService": {
                    "methods": [
                        "__init__",
                        "start",
                        "stop",
                        "_sync_loop",
                        "_process_event",
                        "_full_sync",
                        "_sync_manifest",
                        "_sync_memory",
                        "_sync_scoreboard",
                        "_update_scoreboard",
                        "_update_memory",
                        "_append_to_memory"
                    ],
                    "docstring": "Synchronization service for Dream.OS components.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 28
        },
        "runtime\\tools\\direct_inject.py": {
            "language": ".py",
            "functions": [
                "get_window_bounds",
                "load_coordinates",
                "focus_cursor_window",
                "get_latest_prompt",
                "send_prompt_to_agent",
                "setup_coordinates",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 7
        },
        "runtime\\tools\\direct_inbox_prompt.py": {
            "language": ".py",
            "functions": [
                "get_window_bounds",
                "load_coordinates",
                "focus_cursor_window",
                "send_prompt_to_agent",
                "setup_coordinates",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 6
        },
        "runtime\\tools\\inbox_loop_prompt.py": {
            "language": ".py",
            "functions": [
                "ensure_protocol_exists",
                "ensure_directories",
                "create_loop_prompts",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "runtime\\tools\\simple_resume.py": {
            "language": ".py",
            "functions": [
                "ensure_directories",
                "create_resume_prompts",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "runtime\\tools\\inject_onboarding_prompts.py": {
            "language": ".py",
            "functions": [
                "verify_environment",
                "process_onboarding_prompts",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "scripts\\auto_onboard_agents.py": {
            "language": ".py",
            "functions": [
                "get_paths",
                "validate_paths",
                "safe_click",
                "inject_prompt",
                "load_coords",
                "load_inbox_prompt",
                "save_response",
                "onboard_agent",
                "parse_args",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 10
        },
        "scripts\\auto_onboard_agents_test.py": {
            "language": ".py",
            "functions": [
                "validate_paths",
                "load_coords",
                "load_inbox_prompt",
                "save_response",
                "onboard_agent",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 6
        },
        "scripts\\cleanup_duplicate_dirs.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "backup_directory",
                "remove_directory",
                "cleanup_recursive_backups",
                "consolidate_test_directories",
                "cleanup_empathy_logs",
                "cleanup_task_migration_backups",
                "_are_dirs_identical",
                "_are_files_identical"
            ],
            "classes": {
                "DuplicateDirectoryCleaner": {
                    "methods": [
                        "__init__",
                        "backup_directory",
                        "remove_directory",
                        "cleanup_recursive_backups",
                        "consolidate_test_directories",
                        "cleanup_empathy_logs",
                        "cleanup_task_migration_backups",
                        "_are_dirs_identical",
                        "_are_files_identical"
                    ],
                    "docstring": "Handles cleaning up duplicate directories safely.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 19
        },
        "scripts\\check_repo_integrity.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "check_critical_directories",
                "check_agent_directories",
                "check_coordinate_files",
                "check_test_suite",
                "check_utils_integrity",
                "run_all_checks"
            ],
            "classes": {
                "RepoIntegrityChecker": {
                    "methods": [
                        "__init__",
                        "check_critical_directories",
                        "check_agent_directories",
                        "check_coordinate_files",
                        "check_test_suite",
                        "check_utils_integrity",
                        "run_all_checks"
                    ],
                    "docstring": "Checks repository integrity and generates reports.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 15
        },
        "scripts\\centralize_task_lists.py": {
            "language": ".py",
            "functions": [
                "setup_logging",
                "create_backup",
                "read_json_file",
                "extract_tasks_from_episodes",
                "normalize_task",
                "merge_tasks",
                "update_documentation",
                "create_readme",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 9
        },
        "scripts\\debug_midnight_runner.py": {
            "language": ".py",
            "functions": [
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "scripts\\flatten_tools.py": {
            "language": ".py",
            "functions": [
                "flatten_tools"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "scripts\\merge_duplicate_dirs.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "should_ignore",
                "find_similar_names",
                "get_directory_signature",
                "calculate_similarity",
                "find_duplicates",
                "generate_merge_plan",
                "execute_merge",
                "_merge_directory",
                "_handle_file_conflict",
                "_files_are_identical"
            ],
            "classes": {
                "DuplicateGroup": {
                    "methods": [],
                    "docstring": "Represents a group of duplicate directories.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "DuplicateDirectoryFinder": {
                    "methods": [
                        "__init__",
                        "should_ignore",
                        "find_similar_names",
                        "get_directory_signature",
                        "calculate_similarity",
                        "find_duplicates",
                        "generate_merge_plan",
                        "execute_merge",
                        "_merge_directory",
                        "_handle_file_conflict",
                        "_files_are_identical"
                    ],
                    "docstring": "Finds and manages duplicate directories in the codebase.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 23
        },
        "scripts\\project_scanner.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "_init_tree_sitter_language",
                "analyze_file",
                "_analyze_python",
                "_analyze_rust",
                "_analyze_javascript",
                "__init__",
                "run",
                "__init__",
                "add_task",
                "wait_for_completion",
                "stop_workers",
                "__init__",
                "hash_file",
                "should_exclude",
                "process_file",
                "__init__",
                "load_existing_report",
                "save_report",
                "generate_init_files",
                "load_existing_chatgpt_context",
                "export_chatgpt_context",
                "__init__",
                "load_cache",
                "save_cache",
                "scan_project",
                "_process_file",
                "generate_init_files",
                "export_chatgpt_context",
                "categorize_agents",
                "_maturity_level",
                "_agent_type"
            ],
            "classes": {
                "LanguageAnalyzer": {
                    "methods": [
                        "__init__",
                        "_init_tree_sitter_language",
                        "analyze_file",
                        "_analyze_python",
                        "_analyze_rust",
                        "_analyze_javascript"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "BotWorker": {
                    "methods": [
                        "__init__",
                        "run"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "threading.Thread"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "ActionAgent"
                },
                "MultibotManager": {
                    "methods": [
                        "__init__",
                        "add_task",
                        "wait_for_completion",
                        "stop_workers"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "FileProcessor": {
                    "methods": [
                        "__init__",
                        "hash_file",
                        "should_exclude",
                        "process_file"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ReportGenerator": {
                    "methods": [
                        "__init__",
                        "load_existing_report",
                        "save_report",
                        "generate_init_files",
                        "load_existing_chatgpt_context",
                        "export_chatgpt_context"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ProjectScanner": {
                    "methods": [
                        "__init__",
                        "load_cache",
                        "save_cache",
                        "scan_project",
                        "_process_file",
                        "generate_init_files",
                        "export_chatgpt_context",
                        "categorize_agents",
                        "_maturity_level",
                        "_agent_type"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 65
        },
        "scripts\\update_tool_imports.py": {
            "language": ".py",
            "functions": [
                "update_imports"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "scripts\\run_tests.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "scripts\\auditing\\scan_project.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "scan_file",
                "find_orphaned_files",
                "find_duplicate_code",
                "scan"
            ],
            "classes": {
                "ProjectScanner": {
                    "methods": [
                        "__init__",
                        "scan_file",
                        "find_orphaned_files",
                        "find_duplicate_code",
                        "scan"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 11
        },
        "scripts\\maintenance\\cleanup_duplicates.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "get_dir_size",
                "backup_before_delete",
                "cleanup_recursive_backups",
                "consolidate_empathy_logs",
                "rotate_task_migration_backups",
                "consolidate_test_directories",
                "run_cleanup"
            ],
            "classes": {
                "DuplicatesCleaner": {
                    "methods": [
                        "__init__",
                        "get_dir_size",
                        "backup_before_delete",
                        "cleanup_recursive_backups",
                        "consolidate_empathy_logs",
                        "rotate_task_migration_backups",
                        "consolidate_test_directories",
                        "run_cleanup"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 17
        },
        "scripts\\maintenance\\cleanup_runtime.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "create_backup",
                "create_new_structure",
                "move_files",
                "consolidate_temp_dirs",
                "consolidate_task_dirs",
                "consolidate_log_dirs",
                "consolidate_bridge_dirs",
                "cleanup_empty_dirs",
                "save_moves_log",
                "run"
            ],
            "classes": {
                "RuntimeCleanup": {
                    "methods": [
                        "__init__",
                        "create_backup",
                        "create_new_structure",
                        "move_files",
                        "consolidate_temp_dirs",
                        "consolidate_task_dirs",
                        "consolidate_log_dirs",
                        "consolidate_bridge_dirs",
                        "cleanup_empty_dirs",
                        "save_moves_log",
                        "run"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "ActionAgent"
                }
            },
            "routes": [],
            "complexity": 22
        },
        "scripts\\maintenance\\merge_duplicate_dirs.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "compute_dir_hash",
                "find_duplicates",
                "get_duplicate_groups",
                "merge_directories",
                "generate_report"
            ],
            "classes": {
                "DuplicateDirectoryMerger": {
                    "methods": [
                        "__init__",
                        "compute_dir_hash",
                        "find_duplicates",
                        "get_duplicate_groups",
                        "merge_directories",
                        "generate_report"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 13
        },
        "scripts\\maintenance\\fix_orphans.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "is_python_file",
                "fix_malformed_imports",
                "check_syntax",
                "fix_syntax",
                "handle_init_file",
                "process_file",
                "cleanup"
            ],
            "classes": {
                "OrphanCleaner": {
                    "methods": [
                        "__init__",
                        "is_python_file",
                        "fix_malformed_imports",
                        "check_syntax",
                        "fix_syntax",
                        "handle_init_file",
                        "process_file",
                        "cleanup"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 17
        },
        "scripts\\maintenance\\project_cleanup_protocol.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "load_analysis",
                "calculate_file_utility_score",
                "identify_duplicate_functions",
                "find_orphaned_files",
                "archive_file",
                "log_cleanup_action",
                "run_cleanup_cycle",
                "run_until_clean"
            ],
            "classes": {
                "ProjectCleanupProtocol": {
                    "methods": [
                        "__init__",
                        "load_analysis",
                        "calculate_file_utility_score",
                        "identify_duplicate_functions",
                        "find_orphaned_files",
                        "archive_file",
                        "log_cleanup_action",
                        "run_cleanup_cycle",
                        "run_until_clean"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 19
        },
        "scripts\\maintenance\\project_scanner.py": {
            "language": ".py",
            "functions": [
                "get_file_stats",
                "extract_imports",
                "scan_directory",
                "generate_report",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5
        },
        "scripts\\maintenance\\scan_duplicate_dirs.py": {
            "language": ".py",
            "functions": [
                "should_scan_dir",
                "get_dir_signature",
                "find_duplicate_dirs",
                "generate_report",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5
        },
        "scripts\\maintenance\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "scripts\\maintenance\\project_scanner\\analyzers.py": {
            "language": ".py",
            "functions": [
                "get_file_stats",
                "should_analyze",
                "extract_imports",
                "analyze_imports",
                "get_directory_size",
                "find_large_files",
                "format_size",
                "analyze_file",
                "_analyze_python",
                "_analyze_javascript",
                "_analyze_rust",
                "_analyze_frontend",
                "_calculate_complexity"
            ],
            "classes": {
                "AnalysisResult": {
                    "methods": [],
                    "docstring": "Container for file analysis results.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "FileAnalyzer": {
                    "methods": [
                        "get_file_stats",
                        "should_analyze"
                    ],
                    "docstring": "Analyzes file statistics and content.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ImportAnalyzer": {
                    "methods": [
                        "extract_imports",
                        "analyze_imports"
                    ],
                    "docstring": "Analyzes Python import statements.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "SizeAnalyzer": {
                    "methods": [
                        "get_directory_size",
                        "find_large_files",
                        "format_size"
                    ],
                    "docstring": "Analyzes file and directory sizes.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "LanguageAnalyzer": {
                    "methods": [
                        "analyze_file",
                        "_analyze_python",
                        "_analyze_javascript",
                        "_analyze_rust",
                        "_analyze_frontend",
                        "_calculate_complexity"
                    ],
                    "docstring": "Base class for language-specific analyzers.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 26
        },
        "scripts\\maintenance\\project_scanner\\constants.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "scripts\\maintenance\\project_scanner\\reporters.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_get_timestamp",
                "generate",
                "generate",
                "__init__",
                "save_report",
                "_save_json_report",
                "_save_markdown_report",
                "_generate_markdown_content",
                "generate_init_files",
                "export_chatgpt_context"
            ],
            "classes": {
                "BaseReporter": {
                    "methods": [
                        "__init__",
                        "_get_timestamp"
                    ],
                    "docstring": "Base class for report generators.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MarkdownReporter": {
                    "methods": [
                        "generate"
                    ],
                    "docstring": "Generates markdown reports.",
                    "base_classes": [
                        "BaseReporter"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "JsonReporter": {
                    "methods": [
                        "generate"
                    ],
                    "docstring": "Generates JSON reports.",
                    "base_classes": [
                        "BaseReporter"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ReportGenerator": {
                    "methods": [
                        "__init__",
                        "save_report",
                        "_save_json_report",
                        "_save_markdown_report",
                        "_generate_markdown_content",
                        "generate_init_files",
                        "export_chatgpt_context"
                    ],
                    "docstring": "Generates reports in various formats.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 22
        },
        "scripts\\maintenance\\project_scanner\\scanner.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "hash_file",
                "should_exclude",
                "process_file",
                "__init__",
                "progress_update"
            ],
            "classes": {
                "FileProcessor": {
                    "methods": [
                        "__init__",
                        "hash_file",
                        "should_exclude",
                        "process_file"
                    ],
                    "docstring": "Handles file processing and caching.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ProjectScanner": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Main project scanner class.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 11
        },
        "scripts\\maintenance\\project_scanner\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "scripts\\maintenance\\project_scanner\\utils.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "__enter__",
                "__exit__",
                "__init__",
                "load_state",
                "save_state",
                "__init__",
                "register_handler",
                "unregister_handler",
                "handle_event",
                "get_memory_usage",
                "get_cpu_usage",
                "get_disk_usage",
                "ensure_dir",
                "safe_write",
                "safe_read"
            ],
            "classes": {
                "FileLock": {
                    "methods": [
                        "__init__",
                        "__enter__",
                        "__exit__"
                    ],
                    "docstring": "Thread-safe file locking mechanism.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "StateManager": {
                    "methods": [
                        "__init__",
                        "load_state",
                        "save_state"
                    ],
                    "docstring": "Manages state persistence with file locking.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "EventHandler": {
                    "methods": [
                        "__init__",
                        "register_handler",
                        "unregister_handler",
                        "handle_event"
                    ],
                    "docstring": "Base class for event handling.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "HealthMonitor": {
                    "methods": [
                        "get_memory_usage",
                        "get_cpu_usage",
                        "get_disk_usage"
                    ],
                    "docstring": "System health monitoring utilities.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "FileUtils": {
                    "methods": [
                        "ensure_dir",
                        "safe_write",
                        "safe_read"
                    ],
                    "docstring": "Common file operations.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 32
        },
        "scripts\\maintenance\\project_scanner\\__main__.py": {
            "language": ".py",
            "functions": [
                "setup_logging",
                "parse_args",
                "get_base_dir",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "src\\core\\utils\\agent_utils.py": {
            "language": ".py",
            "functions": [
                "get_windows_safe_timestamp",
                "__init__",
                "log_action",
                "start_task",
                "complete_task",
                "heartbeat",
                "get_status",
                "__init__",
                "queue_command",
                "get_command_status",
                "update_command_status"
            ],
            "classes": {
                "AgentMonitor": {
                    "methods": [
                        "__init__",
                        "log_action",
                        "start_task",
                        "complete_task",
                        "heartbeat",
                        "get_status"
                    ],
                    "docstring": "Monitors agent activity and status. (Reconstructed Skeleton)",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "CommandSupervisor": {
                    "methods": [
                        "__init__",
                        "queue_command",
                        "get_command_status",
                        "update_command_status"
                    ],
                    "docstring": "Supervises and executes agent commands. (Reconstructed Skeleton)",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 21
        },
        "src\\core\\utils\\cache_provider.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "hit_rate",
                "record_hit",
                "record_miss",
                "clear",
                "get_stats",
                "get",
                "set",
                "delete",
                "clear",
                "get_stats",
                "record_hit",
                "record_miss",
                "get_raw_cache_data",
                "__init__",
                "get",
                "set",
                "delete",
                "clear",
                "get_stats",
                "record_hit",
                "record_miss",
                "get_raw_cache_data"
            ],
            "classes": {
                "CacheStats": {
                    "methods": [
                        "__init__",
                        "hit_rate",
                        "record_hit",
                        "record_miss",
                        "clear",
                        "get_stats"
                    ],
                    "docstring": "Tracks cache performance statistics.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "CacheProvider": {
                    "methods": [
                        "get",
                        "set",
                        "delete",
                        "clear",
                        "get_stats",
                        "record_hit",
                        "record_miss",
                        "get_raw_cache_data"
                    ],
                    "docstring": "Abstract base class for cache providers.",
                    "base_classes": [
                        "ABC"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "InMemoryCacheProvider": {
                    "methods": [
                        "__init__",
                        "get",
                        "set",
                        "delete",
                        "clear",
                        "get_stats",
                        "record_hit",
                        "record_miss",
                        "get_raw_cache_data"
                    ],
                    "docstring": "In-memory implementation of the CacheProvider interface.",
                    "base_classes": [
                        "CacheProvider"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 46
        },
        "src\\core\\utils\\common_utils.py": {
            "language": ".py",
            "functions": [
                "get_utc_iso_timestamp",
                "validate_iso_timestamp",
                "parse_iso_timestamp"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "src\\core\\utils\\config_utils.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "load_config",
                "validate_config",
                "get_config_value",
                "get_cache_stats",
                "clear_cache",
                "_validate_type",
                "_validate_schema"
            ],
            "classes": {
                "ConfigManager": {
                    "methods": [
                        "__init__",
                        "load_config",
                        "validate_config",
                        "get_config_value",
                        "get_cache_stats",
                        "clear_cache"
                    ],
                    "docstring": "Manages system configuration loading and validation.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 14
        },
        "src\\core\\utils\\file_utils.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "read_json",
                "write_json",
                "ensure_dir",
                "list_files",
                "delete_file"
            ],
            "classes": {
                "FileManager": {
                    "methods": [
                        "__init__",
                        "read_json",
                        "write_json",
                        "ensure_dir",
                        "list_files",
                        "delete_file"
                    ],
                    "docstring": "Manages file operations with error handling and validation.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 12
        },
        "src\\core\\utils\\logging_utils.py": {
            "language": ".py",
            "functions": [
                "setup_logging"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "src\\core\\utils\\task_utils.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "check_conditions",
                "wait_for_completion"
            ],
            "classes": {
                "TaskCompletionDetector": {
                    "methods": [
                        "__init__",
                        "check_conditions",
                        "wait_for_completion"
                    ],
                    "docstring": "Detects task completion based on defined conditions. (Reconstructed Skeleton)",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "src\\core\\utils\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\core\\utils\\validation_utils.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_read_logs",
                "_write_logs",
                "log_validation",
                "get_summary",
                "get_recent_failures"
            ],
            "classes": {
                "ValidationLogger": {
                    "methods": [
                        "__init__",
                        "_read_logs",
                        "_write_logs",
                        "log_validation",
                        "get_summary",
                        "get_recent_failures"
                    ],
                    "docstring": "Logs validation results and metrics. (Reconstructed Skeleton)",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 12
        },
        "src\\dreamos\\cli.py": {
            "language": ".py",
            "functions": [
                "setup_parser",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "src\\dreamos\\main.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\dreamos\\server.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\dreamos\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\dreamos\\UnifiedDriverManager.py": {
            "language": ".py",
            "functions": [
                "setup_logger",
                "main",
                "__new__",
                "__init__",
                "__enter__",
                "__exit__",
                "_get_cached_driver_path",
                "_download_driver_if_needed",
                "get_driver",
                "quit_driver",
                "save_cookies",
                "load_cookies",
                "is_logged_in",
                "scroll_into_view",
                "manual_scroll",
                "update_options",
                "__del__"
            ],
            "classes": {
                "UnifiedDriverManager": {
                    "methods": [
                        "__new__",
                        "__init__",
                        "__enter__",
                        "__exit__",
                        "_get_cached_driver_path",
                        "_download_driver_if_needed",
                        "get_driver",
                        "quit_driver",
                        "save_cookies",
                        "load_cookies",
                        "is_logged_in",
                        "scroll_into_view",
                        "manual_scroll",
                        "update_options",
                        "__del__"
                    ],
                    "docstring": "Singleton class for managing an undetected Chrome WebDriver instance.\n\nFeatures:\n  - Persistent profile support (or temporary profiles in headless mode)\n  - Cookie saving and loading for session persistence\n  - Mobile emulation and headless mode support\n  - Context management for automatic cleanup\n  - Ability to update driver options dynamically",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 32
        },
        "src\\dreamos\\agents\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\dreamos\\agents\\chatgpt_web_agent.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_initialize_browser",
                "_is_result_injected",
                "_mark_result_injected",
                "_get_and_cache_results",
                "sync_inject_and_selenium_send",
                "sync_scrape",
                "sync_close",
                "sync_read",
                "sync_write",
                "sync_read_prompt",
                "sync_scrape"
            ],
            "classes": {
                "ChatGPTWebAgent": {
                    "methods": [
                        "__init__",
                        "_initialize_browser",
                        "_is_result_injected",
                        "_mark_result_injected",
                        "_get_and_cache_results"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 17
        },
        "src\\dreamos\\agents\\cursor\\cursor_coordinator.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_should_send_to_chatgpt"
            ],
            "classes": {
                "CursorCoordinator": {
                    "methods": [
                        "__init__",
                        "_should_send_to_chatgpt"
                    ],
                    "docstring": "Coordinates cursor agent states and manages response routing.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "src\\dreamos\\agents\\cursor\\test_cursor_coordinator.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\dreamos\\agents\\cursor\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\dreamos\\agents\\loop\\agent_loop.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_should_escalate"
            ],
            "classes": {
                "AgentLoop": {
                    "methods": [
                        "__init__",
                        "_should_escalate"
                    ],
                    "docstring": "Core loop implementation for DreamOS agents with validation enforcement.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "src\\dreamos\\agents\\utils\\agent_identity.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "to_dict",
                "__init__",
                "initialize_from_config",
                "_get_purpose_for_role",
                "_save_config",
                "confirm_identity",
                "_log_awareness",
                "get_identity",
                "get_identity_prefix",
                "validate_identity",
                "get_awareness_level"
            ],
            "classes": {
                "AgentIdentity": {
                    "methods": [
                        "__init__",
                        "to_dict"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Prototype",
                    "agent_type": "Utility"
                },
                "AgentAwareness": {
                    "methods": [
                        "__init__",
                        "initialize_from_config",
                        "_get_purpose_for_role",
                        "_save_config",
                        "confirm_identity",
                        "_log_awareness",
                        "get_identity",
                        "get_identity_prefix",
                        "validate_identity",
                        "get_awareness_level"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 24
        },
        "src\\dreamos\\agents\\utils\\agent_status_utils.py": {
            "language": ".py",
            "functions": [
                "update_status",
                "append_devlog",
                "check_drift"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "src\\dreamos\\agents\\utils\\agent_utils.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\dreamos\\agents\\utils\\error_utils.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\dreamos\\agents\\utils\\cursor_monitor_utils.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load_agent_coords",
                "_get_agent_region",
                "_capture_cursor_image",
                "is_agent_complete",
                "get_complete_agents"
            ],
            "classes": {
                "CursorStateMonitor": {
                    "methods": [
                        "__init__",
                        "_load_agent_coords",
                        "_get_agent_region",
                        "_capture_cursor_image",
                        "is_agent_complete",
                        "get_complete_agents"
                    ],
                    "docstring": "Monitors cursor agent states through GUI images.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 12
        },
        "src\\dreamos\\agents\\utils\\reporting_utils.py": {
            "language": ".py",
            "functions": [
                "format_agent_report"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "src\\dreamos\\agents\\utils\\performance_utils.py": {
            "language": ".py",
            "functions": [
                "log_task_performance"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "src\\dreamos\\agents\\utils\\task_utils.py": {
            "language": ".py",
            "functions": [
                "_task_done_callback"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "src\\dreamos\\agents\\utils\\supervisor_utils.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\dreamos\\api\\empathy_scoring.py": {
            "language": ".py",
            "functions": [
                "update_score_cache"
            ],
            "classes": {
                "AgentScore": {
                    "methods": [],
                    "docstring": "Model for agent empathy scores.",
                    "base_classes": [
                        "BaseModel"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ScoreDetails": {
                    "methods": [],
                    "docstring": "Model for detailed empathy score metrics.",
                    "base_classes": [
                        "BaseModel"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "AgentComparison": {
                    "methods": [],
                    "docstring": "Model for agent comparison results.",
                    "base_classes": [
                        "BaseModel"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 1
        },
        "src\\dreamos\\agents\\utils\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\dreamos\\api\\empathy_logs.py": {
            "language": ".py",
            "functions": [
                "parse_log_content",
                "get_log_entries"
            ],
            "classes": {
                "LogEntry": {
                    "methods": [],
                    "docstring": "Model for log entries.",
                    "base_classes": [
                        "BaseModel"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 2
        },
        "src\\dreamos\\api\\empathy_websocket.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "on_created",
                "on_modified",
                "__init__",
                "disconnect",
                "notify_new_log",
                "notify_log_update",
                "stop"
            ],
            "classes": {
                "LogFileHandler": {
                    "methods": [
                        "__init__",
                        "on_created",
                        "on_modified"
                    ],
                    "docstring": "Handles file system events for log files.",
                    "base_classes": [
                        "FileSystemEventHandler"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "WebSocketManager": {
                    "methods": [
                        "__init__",
                        "disconnect",
                        "notify_new_log",
                        "notify_log_update",
                        "stop"
                    ],
                    "docstring": "Manages WebSocket connections and log updates.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 16
        },
        "src\\dreamos\\api\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\dreamos\\api\\routes\\dna_routes.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\dreamos\\automation\\cli.py": {
            "language": ".py",
            "functions": [
                "log_violation",
                "setup_parser",
                "validate_episode_path",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "src\\dreamos\\automation\\disperse_tasks.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "load_tasks",
                "get_agent_inbox_path",
                "load_agent_inbox",
                "disperse_tasks",
                "create_agent_identity_config"
            ],
            "classes": {
                "TaskDisperser": {
                    "methods": [
                        "__init__",
                        "load_tasks",
                        "get_agent_inbox_path",
                        "load_agent_inbox",
                        "disperse_tasks",
                        "create_agent_identity_config"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 13
        },
        "src\\dreamos\\automation\\empathy.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load_state",
                "_save_state",
                "_initialize_state",
                "_create_agent_empathy",
                "log_interaction",
                "update_emotional_state",
                "get_agent_empathy",
                "get_system_metrics"
            ],
            "classes": {
                "EmpathyLogger": {
                    "methods": [
                        "__init__",
                        "_load_state",
                        "_save_state",
                        "_initialize_state",
                        "_create_agent_empathy",
                        "log_interaction",
                        "update_emotional_state",
                        "get_agent_empathy",
                        "get_system_metrics"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 18
        },
        "src\\dreamos\\automation\\episode.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "validate_episode",
                "initialize_episode",
                "get_episode_status"
            ],
            "classes": {
                "EpisodeManager": {
                    "methods": [
                        "__init__",
                        "validate_episode",
                        "initialize_episode",
                        "get_episode_status"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "src\\dreamos\\automation\\episode5_autonomy_loop.py": {
            "language": ".py",
            "functions": [
                "load_agent_prompt",
                "save_agent_output",
                "log_reflection",
                "process_with_jarvis",
                "run_episode5_loop",
                "run_episode5_loop_with_fallback"
            ],
            "classes": {},
            "routes": [],
            "complexity": 6
        },
        "src\\dreamos\\automation\\episode5_integration.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "start",
                "stop",
                "_run_episode5",
                "process_input"
            ],
            "classes": {
                "Episode5Integration": {
                    "methods": [
                        "__init__",
                        "start",
                        "stop",
                        "_run_episode5",
                        "process_input"
                    ],
                    "docstring": "Integration handler for Episode 5 automation.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 10
        },
        "src\\dreamos\\automation\\episode_hooks.py": {
            "language": ".py",
            "functions": [
                "on_episode_start",
                "on_episode_end",
                "on_episode_error"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "src\\dreamos\\automation\\episode_parser.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "validate_structure",
                "parse_tasks",
                "save_parsed_tasks"
            ],
            "classes": {
                "EpisodeParser": {
                    "methods": [
                        "__init__",
                        "validate_structure",
                        "parse_tasks",
                        "save_parsed_tasks"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 9
        },
        "src\\dreamos\\automation\\generate_episode_docs.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "load_episode",
                "generate_markdown",
                "save_documentation"
            ],
            "classes": {
                "EpisodeDocGenerator": {
                    "methods": [
                        "__init__",
                        "load_episode",
                        "generate_markdown",
                        "save_documentation"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 9
        },
        "src\\dreamos\\automation\\identity.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "initialize_identities",
                "_get_purpose_for_role",
                "_save_identity_config",
                "get_agent_identity",
                "get_identity_prefix",
                "validate_identity",
                "log_identity_confirmation"
            ],
            "classes": {
                "IdentityManager": {
                    "methods": [
                        "__init__",
                        "initialize_identities",
                        "_get_purpose_for_role",
                        "_save_identity_config",
                        "get_agent_identity",
                        "get_identity_prefix",
                        "validate_identity",
                        "log_identity_confirmation"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 16
        },
        "src\\dreamos\\automation\\interaction.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "matches",
                "process",
                "__init__",
                "matches",
                "process",
                "__init__",
                "matches",
                "process",
                "__init__",
                "matches",
                "process",
                "__init__",
                "_register_default_patterns",
                "register_pattern",
                "process_input",
                "_handle_system_command",
                "load_user_preferences",
                "save_user_preferences"
            ],
            "classes": {
                "InteractionPattern": {
                    "methods": [
                        "__init__",
                        "matches",
                        "process"
                    ],
                    "docstring": "Base class for interaction patterns.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "CommandPattern": {
                    "methods": [
                        "__init__",
                        "matches",
                        "process"
                    ],
                    "docstring": "Pattern for command-like interactions.",
                    "base_classes": [
                        "InteractionPattern"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ConversationalPattern": {
                    "methods": [
                        "__init__",
                        "matches",
                        "process"
                    ],
                    "docstring": "Pattern for natural conversational interactions.",
                    "base_classes": [
                        "InteractionPattern"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "QueryPattern": {
                    "methods": [
                        "__init__",
                        "matches",
                        "process"
                    ],
                    "docstring": "Pattern for question/query interactions.",
                    "base_classes": [
                        "InteractionPattern"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "InteractionManager": {
                    "methods": [
                        "__init__",
                        "_register_default_patterns",
                        "register_pattern",
                        "process_input",
                        "_handle_system_command",
                        "load_user_preferences",
                        "save_user_preferences"
                    ],
                    "docstring": "Manager for JARVIS interaction patterns.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 38
        },
        "src\\dreamos\\automation\\midnight_runner.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "start",
                "_handle_shutdown",
                "emergency_shutdown"
            ],
            "classes": {
                "MidnightRunner": {
                    "methods": [
                        "__init__",
                        "start",
                        "_handle_shutdown",
                        "emergency_shutdown"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "src\\dreamos\\automation\\jarvis_core.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_get_memory_path",
                "activate",
                "deactivate",
                "process_input",
                "execute_task",
                "_understand_input",
                "_generate_response",
                "_execute_file_task",
                "_execute_system_command",
                "_coordinate_with_agent",
                "_get_system_state",
                "_load_memory",
                "_save_memory",
                "load",
                "__init__"
            ],
            "classes": {
                "JarvisCore": {
                    "methods": [
                        "__init__",
                        "_get_memory_path",
                        "activate",
                        "deactivate",
                        "process_input",
                        "execute_task",
                        "_understand_input",
                        "_generate_response",
                        "_execute_file_task",
                        "_execute_system_command",
                        "_coordinate_with_agent",
                        "_get_system_state",
                        "_load_memory",
                        "_save_memory"
                    ],
                    "docstring": "Core implementation of the JARVIS system architecture.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "AppConfig": {
                    "methods": [
                        "load"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Prototype",
                    "agent_type": "Utility"
                },
                "AgentAwareness": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Prototype",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 32
        },
        "src\\dreamos\\automation\\orchestrator.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "start_episode",
                "_initialize_components",
                "execute_loop",
                "_handle_completion",
                "stop_episode"
            ],
            "classes": {
                "Orchestrator": {
                    "methods": [
                        "__init__",
                        "start_episode",
                        "_initialize_components",
                        "execute_loop",
                        "_handle_completion",
                        "stop_episode"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 12
        },
        "src\\dreamos\\automation\\promotion.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load_state",
                "_save_state",
                "_initialize_state",
                "_create_agent_state",
                "award_points",
                "_check_promotion_eligibility",
                "get_agent_status",
                "get_system_metrics",
                "update_streak"
            ],
            "classes": {
                "PromotionSystem": {
                    "methods": [
                        "__init__",
                        "_load_state",
                        "_save_state",
                        "_initialize_state",
                        "_create_agent_state",
                        "award_points",
                        "_check_promotion_eligibility",
                        "get_agent_status",
                        "get_system_metrics",
                        "update_streak"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 20
        },
        "src\\dreamos\\automation\\reflection.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load_config",
                "_save_config",
                "_initialize_config",
                "generate_milestone_reflection",
                "_generate_reflection_content",
                "_format_metrics",
                "get_config",
                "update_config"
            ],
            "classes": {
                "ReflectionEngine": {
                    "methods": [
                        "__init__",
                        "_load_config",
                        "_save_config",
                        "_initialize_config",
                        "generate_milestone_reflection",
                        "_generate_reflection_content",
                        "_format_metrics",
                        "get_config",
                        "update_config"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 18
        },
        "src\\dreamos\\automation\\validation_utils.py": {
            "language": ".py",
            "functions": [
                "validate_task_completion",
                "__init__",
                "_load_state",
                "_save_state",
                "_initialize_state",
                "validate_improvement",
                "_validate_tests",
                "_validate_documentation",
                "_validate_implementation",
                "_validate_demonstration",
                "_update_metrics",
                "get_validation_status",
                "get_metrics"
            ],
            "classes": {
                "ValidationStatus": {
                    "methods": [],
                    "docstring": "Status of a validation check.",
                    "base_classes": [
                        "Enum"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ValidationResult": {
                    "methods": [],
                    "docstring": "Result of a validation check.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ImprovementValidator": {
                    "methods": [
                        "__init__",
                        "_load_state",
                        "_save_state",
                        "_initialize_state",
                        "validate_improvement",
                        "_validate_tests",
                        "_validate_documentation",
                        "_validate_implementation",
                        "_validate_demonstration",
                        "_update_metrics",
                        "get_validation_status",
                        "get_metrics"
                    ],
                    "docstring": "Validates agent improvements and enhancements.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 25
        },
        "src\\dreamos\\automation\\tasks.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "initialize_tasks",
                "_create_inboxes",
                "get_agent_tasks",
                "update_task_status",
                "start_execution",
                "check_completion"
            ],
            "classes": {
                "TaskManager": {
                    "methods": [
                        "__init__",
                        "initialize_tasks",
                        "_create_inboxes",
                        "get_agent_tasks",
                        "update_task_status",
                        "start_execution",
                        "check_completion"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 14
        },
        "src\\dreamos\\automation\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\dreamos\\coordination\\project_board_manager.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "_load_tasks",
                "_save_tasks",
                "get_task",
                "add_task",
                "update_task",
                "claim_task",
                "complete_task",
                "list_tasks",
                "list_pending_tasks",
                "list_working_tasks",
                "list_completed_tasks",
                "search_tasks",
                "delete_task",
                "generate_task_id"
            ],
            "classes": {
                "ProjectBoardError": {
                    "methods": [],
                    "docstring": "Base exception for ProjectBoardManager errors.",
                    "base_classes": [
                        "Exception"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "TaskNotFoundError": {
                    "methods": [],
                    "docstring": "Raised when a task cannot be found.",
                    "base_classes": [
                        "ProjectBoardError"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "InvalidTaskDataError": {
                    "methods": [],
                    "docstring": "Raised when task data is invalid.",
                    "base_classes": [
                        "ProjectBoardError"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "FileOperationError": {
                    "methods": [],
                    "docstring": "Raised when a file operation fails.",
                    "base_classes": [
                        "ProjectBoardError"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ProjectBoardManager": {
                    "methods": [
                        "__init__",
                        "_load_tasks",
                        "_save_tasks",
                        "get_task",
                        "add_task",
                        "update_task",
                        "claim_task",
                        "complete_task",
                        "list_tasks",
                        "list_pending_tasks",
                        "list_working_tasks",
                        "list_completed_tasks",
                        "search_tasks",
                        "delete_task",
                        "generate_task_id"
                    ],
                    "docstring": "Manages the centralized task board for Dream.OS.\n\nThis class provides methods for:\n- Loading and saving tasks from/to the central task board\n- Adding, updating, claiming, and completing tasks\n- Filtering and searching tasks",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 31
        },
        "src\\dreamos\\coordination\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\dreamos\\core\\agent_identity.py": {
            "language": ".py",
            "functions": [
                "initialize_agent",
                "__init__",
                "_initialize_identity",
                "validate",
                "update_empathy_score",
                "_log_identity_update",
                "_log_ethos_violation",
                "_escalate_violations",
                "get_identity_summary",
                "get_score_history"
            ],
            "classes": {
                "AgentIdentity": {
                    "methods": [
                        "__init__",
                        "_initialize_identity",
                        "validate",
                        "update_empathy_score",
                        "_log_identity_update",
                        "_log_ethos_violation",
                        "_escalate_violations",
                        "get_identity_summary",
                        "get_score_history"
                    ],
                    "docstring": "Manages agent identity including ethos alignment and empathy metrics.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 19
        },
        "src\\dreamos\\core\\config.py": {
            "language": ".py",
            "functions": [
                "find_project_root_marker",
                "setup_logging",
                "load_config",
                "get_config",
                "resolve_log_dir",
                "__init__",
                "_load_config",
                "get_field_value",
                "prepare_field_value",
                "__call__",
                "settings_customise_sources",
                "load"
            ],
            "classes": {
                "LoggingConfig": {
                    "methods": [
                        "resolve_log_dir"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "BaseModel"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "PathsConfig": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "BaseModel"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "OpenAIConfig": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "BaseModel"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ChatGPTScraperConfig": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "BaseModel"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "GuiAutomationConfig": {
                    "methods": [],
                    "docstring": "Configuration for GUI automation features.",
                    "base_classes": [
                        "BaseModel"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "AgentActivationConfig": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "BaseModel"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "SwarmConfig": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "BaseModel"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "AzureBlobConfig": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "BaseModel"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "IntegrationsConfig": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "BaseModel"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MonitoringConfig": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "BaseModel"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "HealthCheckConfig": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "BaseModel"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "OrchestratorConfig": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "BaseModel"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "PyAutoGUIBridgeConfig": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "BaseModel"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "YamlConfigSettingsSource": {
                    "methods": [
                        "__init__",
                        "_load_config",
                        "get_field_value",
                        "prepare_field_value",
                        "__call__"
                    ],
                    "docstring": "A Pydantic settings source that loads configuration from a YAML file.\n\nThis class is used in conjunction with `AppConfig.settings_customise_sources`\nto enable loading application settings from a specified YAML configuration file.\nIt handles finding the YAML file (with priority to environment variables)\nand parsing its content.",
                    "base_classes": [
                        "PydanticBaseSettingsSource"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "BasePolicyConfig": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "BaseModel"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "CompactionPolicyConfig": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "BasePolicyConfig"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "SummarizationConfig": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "BasePolicyConfig"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "AgentMemoryPolicyOverride": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "BaseModel"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MemoryMaintenanceConfig": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "BaseModel"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "AgentPointsSystemConfig": {
                    "methods": [],
                    "docstring": "Configuration for the agent points system.",
                    "base_classes": [
                        "BaseModel"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "LogLevel": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "str",
                        "Enum"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "OperatingMode": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "str",
                        "Enum"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "TaskMonitoringConfig": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "BaseModel"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "AppConfig": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "BaseModel"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "Config": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Prototype",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 18
        },
        "src\\dreamos\\core\\devlog_formatter.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "format_violation",
                "format_compliance_report",
                "format_identity_update",
                "write_devlog",
                "format_and_write_violation",
                "format_and_write_compliance",
                "format_and_write_identity",
                "get_recent_violations",
                "get_compliance_history"
            ],
            "classes": {
                "DevlogFormatter": {
                    "methods": [
                        "__init__",
                        "format_violation",
                        "format_compliance_report",
                        "format_identity_update",
                        "write_devlog",
                        "format_and_write_violation",
                        "format_and_write_compliance",
                        "format_and_write_identity",
                        "get_recent_violations",
                        "get_compliance_history"
                    ],
                    "docstring": "Formats devlog entries with special handling for ethos-related content.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 20
        },
        "src\\dreamos\\core\\drift_detector.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "add_action",
                "add_violation",
                "_check_drift",
                "_check_violation_patterns",
                "_generate_drift_recommendation",
                "get_agent_metrics",
                "predict_compliance"
            ],
            "classes": {
                "DriftDetector": {
                    "methods": [
                        "__init__",
                        "add_action",
                        "add_violation",
                        "_check_drift",
                        "_check_violation_patterns",
                        "_generate_drift_recommendation",
                        "get_agent_metrics",
                        "predict_compliance"
                    ],
                    "docstring": "Detects behavioral drift and predicts potential compliance issues.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 16
        },
        "src\\dreamos\\core\\errors.py": {
            "language": ".py",
            "functions": [],
            "classes": {
                "ConfigurationError": {
                    "methods": [],
                    "docstring": "Raised when there is a problem with required configuration.",
                    "base_classes": [
                        "Exception"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 0
        },
        "src\\dreamos\\core\\empathy_scoring.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load_ethos",
                "calculate_agent_score",
                "_get_agent_logs",
                "_parse_log_content",
                "_create_default_score",
                "_calculate_base_metrics",
                "_calculate_value_scores",
                "_calculate_frequency_metrics",
                "_calculate_trend_metrics",
                "_calculate_recovery_metrics",
                "_calculate_context_metrics",
                "_calculate_weighted_score",
                "_determine_agent_status",
                "_generate_score_summary",
                "calculate_all_agent_scores",
                "get_agent_comparisons",
                "_determine_system_status"
            ],
            "classes": {
                "EmpathyScorer": {
                    "methods": [
                        "__init__",
                        "_load_ethos",
                        "calculate_agent_score",
                        "_get_agent_logs",
                        "_parse_log_content",
                        "_create_default_score",
                        "_calculate_base_metrics",
                        "_calculate_value_scores",
                        "_calculate_frequency_metrics",
                        "_calculate_trend_metrics",
                        "_calculate_recovery_metrics",
                        "_calculate_context_metrics",
                        "_calculate_weighted_score",
                        "_determine_agent_status",
                        "_generate_score_summary",
                        "calculate_all_agent_scores",
                        "get_agent_comparisons",
                        "_determine_system_status"
                    ],
                    "docstring": "Calculates empathy scores for agents based on their behavior logs.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 36
        },
        "src\\dreamos\\core\\ethos_validator.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load_ethos",
                "_validate_ethos_structure",
                "validate_action",
                "_check_human_centricity",
                "_check_context_awareness",
                "_check_uncertainty_handling",
                "_check_ethical_boundaries",
                "validate_agent_behavior",
                "generate_compliance_report",
                "check_ethos_alignment",
                "_calculate_value_alignment",
                "_check_compassion_alignment",
                "_check_clarity_alignment",
                "_check_collaboration_alignment",
                "_check_adaptability_alignment",
                "validate_identity"
            ],
            "classes": {
                "EthosValidator": {
                    "methods": [
                        "__init__",
                        "_load_ethos",
                        "_validate_ethos_structure",
                        "validate_action",
                        "_check_human_centricity",
                        "_check_context_awareness",
                        "_check_uncertainty_handling",
                        "_check_ethical_boundaries",
                        "validate_agent_behavior",
                        "generate_compliance_report",
                        "check_ethos_alignment",
                        "_calculate_value_alignment",
                        "_check_compassion_alignment",
                        "_check_clarity_alignment",
                        "_check_collaboration_alignment",
                        "_check_adaptability_alignment",
                        "validate_identity"
                    ],
                    "docstring": "Validates agent behavior against Dream.OS ethos principles.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 34
        },
        "src\\dreamos\\core\\predictive_model.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load_models",
                "_save_models",
                "extract_features",
                "update_model",
                "predict_drift",
                "_calculate_confidence",
                "_generate_warning",
                "get_agent_insights"
            ],
            "classes": {
                "PredictiveModel": {
                    "methods": [
                        "__init__",
                        "_load_models",
                        "_save_models",
                        "extract_features",
                        "update_model",
                        "predict_drift",
                        "_calculate_confidence",
                        "_generate_warning",
                        "get_agent_insights"
                    ],
                    "docstring": "ML-based model for predicting agent behavior and compliance drift.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 18
        },
        "src\\dreamos\\core\\project_board.py": {
            "language": ".py",
            "functions": [
                "__init__"
            ],
            "classes": {
                "ProjectBoardManager": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Prototype",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 2
        },
        "src\\dreamos\\core\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\dreamos\\core\\agents\\dna_analyzer.py": {
            "language": ".py",
            "functions": [
                "__init__"
            ],
            "classes": {
                "DNAAnalyzer": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Analyzes agent behavior patterns and personality traits from logs.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 2
        },
        "src\\dreamos\\core\\coordination\\base_agent.py": {
            "language": ".py",
            "functions": [
                "__init__"
            ],
            "classes": {
                "BaseAgent": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Base class for all Dream.OS agents providing common functionality.",
                    "base_classes": [
                        "ABC"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 2
        },
        "src\\dreamos\\core\\coordination\\agent_bus.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "subscribe",
                "unsubscribe",
                "__new__",
                "__init__",
                "subscribe",
                "unsubscribe"
            ],
            "classes": {
                "EventType": {
                    "methods": [],
                    "docstring": "Event types for the agent bus.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "BaseEvent": {
                    "methods": [],
                    "docstring": "Base event model.",
                    "base_classes": [
                        "BaseModel"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "SimpleEventBus": {
                    "methods": [
                        "__init__",
                        "subscribe",
                        "unsubscribe"
                    ],
                    "docstring": "Simple event bus implementation.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "AgentBus": {
                    "methods": [
                        "__new__",
                        "__init__",
                        "subscribe",
                        "unsubscribe"
                    ],
                    "docstring": "Agent bus for inter-agent and system communication.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 14
        },
        "src\\dreamos\\core\\coordination\\event_bus.py": {
            "language": ".py",
            "functions": [
                "get_instance",
                "__init__",
                "subscribe"
            ],
            "classes": {
                "BaseEvent": {
                    "methods": [],
                    "docstring": "Base class for all events.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "AgentBus": {
                    "methods": [
                        "get_instance",
                        "__init__",
                        "subscribe"
                    ],
                    "docstring": "Event bus for inter-agent communication.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "src\\dreamos\\core\\coordination\\event_payloads.py": {
            "language": ".py",
            "functions": [],
            "classes": {
                "TaskEventPayload": {
                    "methods": [],
                    "docstring": "Base class for task-related event payloads.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "TaskValidationFailedPayload": {
                    "methods": [],
                    "docstring": "Payload for task validation failure events.",
                    "base_classes": [
                        "TaskEventPayload"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 0
        },
        "src\\dreamos\\core\\coordination\\message_patterns.py": {
            "language": ".py",
            "functions": [],
            "classes": {
                "TaskStatus": {
                    "methods": [],
                    "docstring": "Task status enum.",
                    "base_classes": [
                        "str",
                        "Enum"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "TaskMessage": {
                    "methods": [],
                    "docstring": "Task message model.",
                    "base_classes": [
                        "BaseModel"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 0
        },
        "src\\dreamos\\core\\empathy\\empathy_engine.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "analyze_interaction"
            ],
            "classes": {
                "EmpathyEngine": {
                    "methods": [
                        "__init__",
                        "analyze_interaction"
                    ],
                    "docstring": "Engine for managing empathy-related functionality.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "src\\dreamos\\core\\coordination\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\dreamos\\core\\empathy\\empathy_logger.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "log_interaction"
            ],
            "classes": {
                "EmpathyLogger": {
                    "methods": [
                        "__init__",
                        "log_interaction"
                    ],
                    "docstring": "Logs empathy-related events and metrics.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "src\\dreamos\\core\\empathy\\empathy_metrics.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "calculate_metrics"
            ],
            "classes": {
                "EmpathyMetrics": {
                    "methods": [
                        "__init__",
                        "calculate_metrics"
                    ],
                    "docstring": "Calculates and tracks empathy-related metrics.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "src\\dreamos\\core\\empathy\\empathy_validator.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "validate_empathy"
            ],
            "classes": {
                "EmpathyValidator": {
                    "methods": [
                        "__init__",
                        "validate_empathy"
                    ],
                    "docstring": "Validates empathy-related metrics and behaviors.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "src\\dreamos\\core\\empathy\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\dreamos\\core\\ethos\\validator.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load_rules",
                "validate_task"
            ],
            "classes": {
                "EthosValidator": {
                    "methods": [
                        "__init__",
                        "_load_rules",
                        "validate_task"
                    ],
                    "docstring": "Validates tasks and actions against system ethos.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "src\\dreamos\\core\\ethos\\identity.py": {
            "language": ".py",
            "functions": [],
            "classes": {
                "EthosValidationResult": {
                    "methods": [],
                    "docstring": "Results from ethos validation checks.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 0
        },
        "src\\dreamos\\core\\ethos\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\dreamos\\core\\services\\dna_websocket.py": {
            "language": ".py",
            "functions": [
                "__init__"
            ],
            "classes": {
                "DNAWebSocketService": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "WebSocket service for real-time DNA analysis updates.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 2
        },
        "src\\dreamos\\core\\tasks\\models.py": {
            "language": ".py",
            "functions": [],
            "classes": {
                "TaskPriority": {
                    "methods": [],
                    "docstring": "Task priority levels.",
                    "base_classes": [
                        "str",
                        "Enum"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "TaskStatus": {
                    "methods": [],
                    "docstring": "Task status states.",
                    "base_classes": [
                        "str",
                        "Enum"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "TaskMessage": {
                    "methods": [],
                    "docstring": "Task message model.",
                    "base_classes": [
                        "BaseModel"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 0
        },
        "src\\dreamos\\core\\tasks\\execution\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\dreamos\\core\\tasks\\execution\\task_executor.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "get_execution_history",
                "clear_execution_history"
            ],
            "classes": {
                "TaskExecutor": {
                    "methods": [
                        "__init__",
                        "get_execution_history",
                        "clear_execution_history"
                    ],
                    "docstring": "Executes tasks with proper tracking and error handling.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "src\\dreamos\\core\\tasks\\monitoring\\pending_monitor.py": {
            "language": ".py",
            "functions": [
                "__init__"
            ],
            "classes": {
                "PendingTaskMonitor": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Monitors tasks that have been in PENDING state for too long.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 2
        },
        "src\\dreamos\\core\\tasks\\monitoring\\start_monitoring_service.py": {
            "language": ".py",
            "functions": [
                "signal_handler"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "src\\dreamos\\core\\tasks\\monitoring\\task_monitoring_service.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "is_running"
            ],
            "classes": {
                "TaskMonitoringService": {
                    "methods": [
                        "__init__",
                        "is_running"
                    ],
                    "docstring": "Service that periodically checks for stalled tasks and other task-related issues.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "src\\dreamos\\core\\tasks\\monitoring\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\dreamos\\core\\utils\\class_utils.py": {
            "language": ".py",
            "functions": [
                "get_class_methods",
                "get_class_attributes",
                "get_method_signature",
                "get_class_hierarchy",
                "get_class_annotations"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5
        },
        "src\\dreamos\\core\\tasks\\nexus\\task_nexus.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load",
                "_save",
                "get_next_task",
                "add_task",
                "update_task_status",
                "get_all_tasks",
                "stats",
                "get_task_by_id",
                "mark_task_in_progress",
                "mark_task_completed",
                "mark_task_failed",
                "get_tasks_by_agent",
                "get_pending_tasks"
            ],
            "classes": {
                "Task": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "BaseModel"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "TaskNexus": {
                    "methods": [
                        "__init__",
                        "_load",
                        "_save",
                        "get_next_task",
                        "add_task",
                        "update_task_status",
                        "get_all_tasks",
                        "stats",
                        "get_task_by_id",
                        "mark_task_in_progress",
                        "mark_task_completed",
                        "mark_task_failed",
                        "get_tasks_by_agent",
                        "get_pending_tasks"
                    ],
                    "docstring": "Local task queue and state tracker reading/writing from JSON.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 28
        },
        "src\\dreamos\\core\\utils\\config.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "get",
                "set"
            ],
            "classes": {
                "ConfigManager": {
                    "methods": [
                        "__init__",
                        "get",
                        "set"
                    ],
                    "docstring": "Manages configuration settings for Dream.OS components.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "src\\dreamos\\core\\utils\\config_utils.py": {
            "language": ".py",
            "functions": [
                "load_config_file",
                "save_config_file",
                "get_env_var"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "src\\dreamos\\core\\utils\\dict_utils.py": {
            "language": ".py",
            "functions": [
                "get_nested_value",
                "set_nested_value",
                "merge_dicts",
                "flatten_dict",
                "filter_dict",
                "_flatten"
            ],
            "classes": {},
            "routes": [],
            "complexity": 6
        },
        "src\\dreamos\\core\\utils\\enum_utils.py": {
            "language": ".py",
            "functions": [
                "enum_to_dict",
                "dict_to_enum",
                "get_enum_member",
                "get_enum_member_by_name",
                "get_enum_values"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5
        },
        "src\\dreamos\\core\\utils\\error_utils.py": {
            "language": ".py",
            "functions": [
                "handle_error",
                "get_error_details"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "src\\dreamos\\core\\utils\\file_utils.py": {
            "language": ".py",
            "functions": [
                "load_json_file",
                "save_json_file"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "src\\dreamos\\core\\utils\\json_utils.py": {
            "language": ".py",
            "functions": [
                "load_json",
                "save_json",
                "merge_json_files",
                "json_to_string",
                "string_to_json"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5
        },
        "src\\dreamos\\core\\utils\\function_utils.py": {
            "language": ".py",
            "functions": [
                "retry",
                "log_execution",
                "validate_args",
                "memoize",
                "async_retry",
                "decorator",
                "decorator",
                "wrapper",
                "wrapper",
                "decorator",
                "wrapper",
                "wrapper"
            ],
            "classes": {},
            "routes": [],
            "complexity": 12
        },
        "src\\dreamos\\core\\utils\\list_utils.py": {
            "language": ".py",
            "functions": [
                "chunk_list",
                "find_first",
                "remove_duplicates",
                "flatten_list",
                "filter_none"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5
        },
        "src\\dreamos\\core\\utils\\path_utils.py": {
            "language": ".py",
            "functions": [
                "find_project_root",
                "ensure_dir_exists",
                "get_relative_path"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "src\\dreamos\\core\\utils\\logging_utils.py": {
            "language": ".py",
            "functions": [
                "setup_logger"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "src\\dreamos\\core\\utils\\set_utils.py": {
            "language": ".py",
            "functions": [
                "find_duplicates",
                "filter_set",
                "merge_sets",
                "find_common_elements",
                "find_unique_elements"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5
        },
        "src\\dreamos\\core\\utils\\time_utils.py": {
            "language": ".py",
            "functions": [
                "utc_now_iso",
                "utc_now"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "src\\dreamos\\core\\utils\\string_utils.py": {
            "language": ".py",
            "functions": [
                "normalize_string",
                "split_camel_case",
                "truncate_string",
                "extract_between"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "src\\dreamos\\core\\utils\\tuple_utils.py": {
            "language": ".py",
            "functions": [
                "find_first_matching",
                "filter_tuples",
                "merge_tuples",
                "split_tuple",
                "remove_duplicates"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5
        },
        "src\\dreamos\\core\\utils\\validation.py": {
            "language": ".py",
            "functions": [
                "validate_json_file",
                "validate_required_files",
                "validate_required_dirs"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "src\\dreamos\\core\\utils\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\dreamos\\core\\validation\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\dreamos\\core\\validation\\validation_engine.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_initialize_components"
            ],
            "classes": {
                "ValidationResult": {
                    "methods": [],
                    "docstring": "Results from a validation check.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ValidationEngine": {
                    "methods": [
                        "__init__",
                        "_initialize_components"
                    ],
                    "docstring": "Core validation engine that coordinates validation across the system.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "src\\dreamos\\integrations\\cursor\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\dreamos\\integrations\\cursor\\bridge\\bridge_loop.py": {
            "language": ".py",
            "functions": [
                "call_gpt_api",
                "write_bridge_output",
                "log_failure_trace",
                "relay_prompt_to_gpt",
                "get_file_mtime",
                "main_loop",
                "log_interaction"
            ],
            "classes": {
                "BridgeLoop": {
                    "methods": [],
                    "docstring": "Placeholder for BridgeLoop functionality.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 7
        },
        "src\\dreamos\\integrations\\cursor\\bridge\\http_bridge_service.py": {
            "language": ".py",
            "functions": [
                "health_check"
            ],
            "classes": {},
            "routes": [
                {
                    "function": "health_check",
                    "method": "GET",
                    "path": "/health"
                }
            ],
            "complexity": 1
        },
        "src\\dreamos\\integrations\\cursor\\bridge\\feedback\\thea_response_handler.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "validate_response",
                "process_response",
                "get_response",
                "mark_as_escalated"
            ],
            "classes": {
                "TheaResponseHandler": {
                    "methods": [
                        "__init__",
                        "validate_response",
                        "process_response",
                        "get_response",
                        "mark_as_escalated"
                    ],
                    "docstring": "Handles THEA responses with validation and processing.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 10
        },
        "src\\dreamos\\integrations\\cursor\\bridge\\run_bridge_loop.py": {
            "language": ".py",
            "functions": [
                "cli"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "src\\dreamos\\integrations\\cursor\\bridge\\feedback\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\dreamos\\integrations\\cursor\\bridge\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\dreamos\\integrations\\cursor\\bridge\\relay\\response_relay.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_get_agent_inbox",
                "_safe_read_json",
                "_safe_write_json",
                "_relay_response",
                "process_outbox",
                "run"
            ],
            "classes": {
                "ResponseRelay": {
                    "methods": [
                        "__init__",
                        "_get_agent_inbox",
                        "_safe_read_json",
                        "_safe_write_json",
                        "_relay_response",
                        "process_outbox",
                        "run"
                    ],
                    "docstring": "Relays THEA responses to agent inboxes.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "ActionAgent"
                }
            },
            "routes": [],
            "complexity": 14
        },
        "src\\dreamos\\integrations\\cursor\\bridge\\relay\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\dreamos\\integrations\\cursor\\bridge\\schemas\\thea_response_schema.py": {
            "language": ".py",
            "functions": [
                "load_schema",
                "to_dict",
                "to_json",
                "from_dict",
                "from_json",
                "validate"
            ],
            "classes": {
                "ResponseType": {
                    "methods": [],
                    "docstring": "Types of responses that THEA can return.",
                    "base_classes": [
                        "Enum"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ResponseStatus": {
                    "methods": [],
                    "docstring": "Status codes for THEA responses.",
                    "base_classes": [
                        "Enum"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "TheaResponse": {
                    "methods": [
                        "to_dict",
                        "to_json",
                        "from_dict",
                        "from_json",
                        "validate"
                    ],
                    "docstring": "Schema for THEA responses.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 11
        },
        "src\\dreamos\\integrations\\cursor\\bridge\\schemas\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\dreamos\\integrations\\cursor\\bridge\\tests\\test_bridge_pipeline.py": {
            "language": ".py",
            "functions": [
                "temp_bridge_dir",
                "bridge_components",
                "test_schema_validation",
                "test_response_processing",
                "test_response_relay",
                "test_escalation_handling",
                "test_full_pipeline",
                "test_error_handling"
            ],
            "classes": {},
            "routes": [],
            "complexity": 8
        },
        "src\\dreamos\\integrations\\cursor\\bridge\\tests\\test_bridge_e2e.py": {
            "language": ".py",
            "functions": [
                "bridge_config",
                "bridge_loop",
                "test_bridge_prompt_response_flow",
                "test_bridge_config_loading"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "src\\dreamos\\integrations\\cursor\\bridge\\tests\\simulate_bridge_loop.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "_generate_response",
                "_create_test_prompt"
            ],
            "classes": {
                "BridgeSimulator": {
                    "methods": [
                        "__init__",
                        "_generate_response",
                        "_create_test_prompt"
                    ],
                    "docstring": "Simulates the bridge loop for testing.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 7
        },
        "src\\dreamos\\integrations\\cursor\\bridge\\tests\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\dreamos\\integrations\\cursor\\utils\\cursor_injector.py": {
            "language": ".py",
            "functions": [],
            "classes": {
                "CursorInjector": {
                    "methods": [],
                    "docstring": "Placeholder for CursorInjector functionality.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 0
        },
        "src\\dreamos\\tools\\agent0_bootstrap_runner.py": {
            "language": ".py",
            "functions": [
                "_fail",
                "_validate_json",
                "_validate_coords",
                "_archive_inbox",
                "_read_inbox",
                "_read_input",
                "display_onboarding"
            ],
            "classes": {},
            "routes": [],
            "complexity": 7
        },
        "src\\dreamos\\tools\\advanced_project_scanner.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_init_tree_sitter_language",
                "analyze_file",
                "_analyze_python",
                "_analyze_rust",
                "_analyze_javascript",
                "__init__",
                "run",
                "__init__",
                "add_task",
                "start_workers",
                "wait_for_completion",
                "__init__",
                "hash_file",
                "should_exclude",
                "process_file",
                "__init__",
                "load_existing_report",
                "save_project_analysis_report",
                "export_chatgpt_context",
                "__init__",
                "load_cache",
                "save_cache",
                "scan_project",
                "_process_file_internal",
                "export_chatgpt_context",
                "find_name_collisions",
                "_traverse_rust",
                "get_node_text",
                "_traverse_js"
            ],
            "classes": {
                "LanguageAnalyzer": {
                    "methods": [
                        "__init__",
                        "_init_tree_sitter_language",
                        "analyze_file",
                        "_analyze_python",
                        "_analyze_rust",
                        "_analyze_javascript"
                    ],
                    "docstring": "Handles language-specific code analysis for different programming languages.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "BotWorker": {
                    "methods": [
                        "__init__",
                        "run"
                    ],
                    "docstring": "Worker thread for processing files from a queue.",
                    "base_classes": [
                        "threading.Thread"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "ActionAgent"
                },
                "MultibotManager": {
                    "methods": [
                        "__init__",
                        "add_task",
                        "start_workers",
                        "wait_for_completion"
                    ],
                    "docstring": "Manages multiple BotWorker threads for parallel file processing.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "FileProcessor": {
                    "methods": [
                        "__init__",
                        "hash_file",
                        "should_exclude",
                        "process_file"
                    ],
                    "docstring": "Handles individual file processing including hashing, exclusion checks, and analysis calling.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ReportGenerator": {
                    "methods": [
                        "__init__",
                        "load_existing_report",
                        "save_project_analysis_report",
                        "export_chatgpt_context"
                    ],
                    "docstring": "Generates project analysis and ChatGPT context reports.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "ProjectScanner": {
                    "methods": [
                        "__init__",
                        "load_cache",
                        "save_cache",
                        "scan_project",
                        "_process_file_internal",
                        "export_chatgpt_context",
                        "find_name_collisions"
                    ],
                    "docstring": "Scans a software project, analyzes files, and generates reports.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 57
        },
        "src\\dreamos\\tools\\agent_bootstrap_runner.py": {
            "language": ".py",
            "functions": [
                "main",
                "agent_num",
                "agent_traits",
                "__init__",
                "setup_logging"
            ],
            "classes": {
                "AgentConfig": {
                    "methods": [
                        "agent_num",
                        "agent_traits"
                    ],
                    "docstring": "Configuration for agent bootstrap process.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "AgentBootstrapRunner": {
                    "methods": [
                        "__init__",
                        "setup_logging"
                    ],
                    "docstring": "Core runner for agent bootstrap process.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 9
        },
        "src\\dreamos\\tools\\launch_all_agents.py": {
            "language": ".py",
            "functions": [
                "parse_args",
                "__init__",
                "is_alive",
                "terminate",
                "restart",
                "__init__",
                "_setup_logging",
                "_save_state",
                "launch_agents",
                "shutdown",
                "signal_handler"
            ],
            "classes": {
                "AgentProcess": {
                    "methods": [
                        "__init__",
                        "is_alive",
                        "terminate",
                        "restart"
                    ],
                    "docstring": "Represents a running agent process with metadata",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "AgentLauncher": {
                    "methods": [
                        "__init__",
                        "_setup_logging",
                        "_save_state",
                        "launch_agents",
                        "shutdown"
                    ],
                    "docstring": "Manages launching and monitoring of multiple agent processes",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 20
        },
        "src\\dreamos\\tools\\shutdown_all_agents.py": {
            "language": ".py",
            "functions": [
                "load_state",
                "shutdown_agent",
                "shutdown_all",
                "parse_args",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5
        },
        "src\\dreamos\\tools\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\dreamos\\tools\\run_agent2.py": {
            "language": ".py",
            "functions": [
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "src\\dreamos\\tools\\status_all_agents.py": {
            "language": ".py",
            "functions": [
                "format_duration",
                "load_state",
                "load_metrics",
                "update_metrics",
                "show_status",
                "parse_args",
                "main",
                "__init__",
                "check_process",
                "get_uptime",
                "get_last_activity",
                "format_status",
                "display_status"
            ],
            "classes": {
                "AgentStatus": {
                    "methods": [
                        "__init__",
                        "check_process",
                        "get_uptime",
                        "get_last_activity",
                        "format_status"
                    ],
                    "docstring": "Represents an agent's current status and metrics",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 18
        },
        "src\\dreamos\\tools\\agent_bootstrap_runner\\agent_traits.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load_custom_traits",
                "validate_traits",
                "get_prompt_context",
                "apply_validation_policy",
                "to_dict"
            ],
            "classes": {
                "TraitsConfigError": {
                    "methods": [],
                    "docstring": "Error raised for invalid traits configuration.",
                    "base_classes": [
                        "Exception"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "AgentTraits": {
                    "methods": [
                        "__init__",
                        "_load_custom_traits",
                        "validate_traits",
                        "get_prompt_context",
                        "apply_validation_policy",
                        "to_dict"
                    ],
                    "docstring": "Manages agent-specific traits and validation policies.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 12
        },
        "src\\dreamos\\tools\\agent_bootstrap_runner\\config.py": {
            "language": ".py",
            "functions": [
                "validate_agent_id",
                "create_directories",
                "get_coords_file_path",
                "get_copy_coords_file_path",
                "parse_args",
                "__init__",
                "_ensure_directories",
                "clone_for_agent"
            ],
            "classes": {
                "AgentConfig": {
                    "methods": [
                        "__init__",
                        "_ensure_directories",
                        "clone_for_agent"
                    ],
                    "docstring": "Configuration for agent bootstrap runner",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 11
        },
        "src\\dreamos\\tools\\agent_bootstrap_runner\\agent_loop.py": {
            "language": ".py",
            "functions": [
                "__init__"
            ],
            "classes": {
                "AgentLoopManager": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Manages the main agent loop.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 2
        },
        "src\\dreamos\\tools\\agent_bootstrap_runner\\cursor_messaging.py": {
            "language": ".py",
            "functions": [
                "__init__"
            ],
            "classes": {
                "CursorAgentMessenger": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Handles Cursor-based messaging for agents.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 2
        },
        "src\\dreamos\\tools\\agent_bootstrap_runner\\dry_run_simulator.py": {
            "language": ".py",
            "functions": [
                "simulate_agent_bootstrap",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "src\\dreamos\\tools\\agent_bootstrap_runner\\inbox_management.py": {
            "language": ".py",
            "functions": [
                "create_seed_inbox",
                "update_inbox_with_prompt"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "src\\dreamos\\tools\\agent_bootstrap_runner\\logging_setup.py": {
            "language": ".py",
            "functions": [
                "setup_logging"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "src\\dreamos\\tools\\agent_bootstrap_runner\\maintenance.py": {
            "language": ".py",
            "functions": [
                "__init__"
            ],
            "classes": {
                "MaintenanceManager": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Manages system maintenance tasks within the agent bootstrap framework.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 2
        },
        "src\\dreamos\\tools\\agent_bootstrap_runner\\messaging.py": {
            "language": ".py",
            "functions": [
                "archive_inbox",
                "load_inbox",
                "read_input_file",
                "create_seed_inbox",
                "process_message",
                "send_message",
                "update_inbox_with_prompt",
                "list_inbox_files",
                "archive_inbox_file",
                "update_agent_state",
                "__init__",
                "to_dict",
                "from_dict"
            ],
            "classes": {
                "MessageFormat": {
                    "methods": [
                        "__init__",
                        "to_dict",
                        "from_dict"
                    ],
                    "docstring": "Standard message format for agent communications.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 16
        },
        "src\\dreamos\\tools\\agent_bootstrap_runner\\onboarding.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_generate_onboarding_prompt"
            ],
            "classes": {
                "AgentOnboardingManager": {
                    "methods": [
                        "__init__",
                        "_generate_onboarding_prompt"
                    ],
                    "docstring": "Manages onboarding for multiple agents.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "src\\dreamos\\tools\\agent_bootstrap_runner\\onboard_all_agents.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\dreamos\\tools\\agent_bootstrap_runner\\resume_autonomy_loop.py": {
            "language": ".py",
            "functions": [
                "validate_environment",
                "__init__",
                "load_status",
                "save_status",
                "update_agent",
                "check_stalled",
                "increment_cycle",
                "reset_cycle"
            ],
            "classes": {
                "AgentStatus": {
                    "methods": [
                        "__init__",
                        "load_status",
                        "save_status",
                        "update_agent",
                        "check_stalled",
                        "increment_cycle",
                        "reset_cycle"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 15
        },
        "src\\dreamos\\tools\\agent_bootstrap_runner\\runner.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "setup_logging",
                "ensure_directories"
            ],
            "classes": {
                "AgentBootstrapRunner": {
                    "methods": [
                        "__init__",
                        "setup_logging",
                        "ensure_directories"
                    ],
                    "docstring": "Core runner for agent bootstrap process.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "src\\dreamos\\tools\\agent_bootstrap_runner\\ui_interaction.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "log_failure",
                "screenshot_failure",
                "__init__",
                "find_agent_window",
                "ensure_window_focus",
                "__init__",
                "initialize",
                "_validate_coordinates"
            ],
            "classes": {
                "UIFailureLogger": {
                    "methods": [
                        "__init__",
                        "log_failure",
                        "screenshot_failure"
                    ],
                    "docstring": "Handles logging of UI automation failures",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "SmartWindowManager": {
                    "methods": [
                        "__init__",
                        "find_agent_window",
                        "ensure_window_focus"
                    ],
                    "docstring": "Handles intelligent window focus and recovery",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "AgentUIInteractor": {
                    "methods": [
                        "__init__",
                        "initialize",
                        "_validate_coordinates"
                    ],
                    "docstring": "Handles UI interaction for agent bootstrap operations with enhanced error handling",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 18
        },
        "src\\dreamos\\tools\\agent_bootstrap_runner\\validation.py": {
            "language": ".py",
            "functions": [
                "validate_directory_structure",
                "validate_message_format",
                "validate_message_file",
                "validate_all_files",
                "validate_coords",
                "validate_json_file",
                "validate_message",
                "validate_file_size",
                "validate_line_count"
            ],
            "classes": {
                "ValidationResult": {
                    "methods": [],
                    "docstring": "Result of a validation check.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 9
        },
        "src\\dreamos\\tools\\agent_bootstrap_runner\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\dreamos\\tools\\agent_bootstrap_runner\\__main__.py": {
            "language": ".py",
            "functions": [
                "parse_args"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "src\\dreamos\\tools\\captain_tools\\env_check_env.py": {
            "language": ".py",
            "functions": [
                "get_system_info",
                "check_package",
                "check_import",
                "get_env_status",
                "print_env_status",
                "generate_md_report",
                "verify_runtime_env",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 8
        },
        "src\\dreamos\\tools\\captain_tools\\map_single_agent.py": {
            "language": ".py",
            "functions": [
                "countdown",
                "get_coordinates",
                "show_coordinates",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "src\\dreamos\\tools\\captain_tools\\map_all_coords.py": {
            "language": ".py",
            "functions": [
                "countdown",
                "get_coordinates",
                "show_coordinates",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "src\\dreamos\\tools\\captain_tools\\onboarding_enforcer.py": {
            "language": ".py",
            "functions": [
                "load_coordinates",
                "save_to_thea_outbox",
                "create_onboarding_prompt",
                "send_prompt",
                "copy_response",
                "enforce_onboarding"
            ],
            "classes": {},
            "routes": [],
            "complexity": 6
        },
        "src\\dreamos\\tools\\captain_tools\\onboarding_enforcer_async.py": {
            "language": ".py",
            "functions": [
                "load_coords",
                "__init__",
                "save_to_thea",
                "onboarding_msg"
            ],
            "classes": {
                "AgentFSM": {
                    "methods": [
                        "__init__",
                        "save_to_thea",
                        "onboarding_msg"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Prototype",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 7
        },
        "src\\dreamos\\tools\\captain_tools\\remap_coords.py": {
            "language": ".py",
            "functions": [
                "show_current_coords",
                "get_new_coords",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "src\\dreamos\\tools\\captain_tools\\onboarding_enforcer_hardened.py": {
            "language": ".py",
            "functions": [
                "load_coordinates",
                "clear_and_copy",
                "focus_guard",
                "send_text",
                "onboarding_msg",
                "save_to_thea",
                "enforce_for",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 8
        },
        "src\\dreamos\\tools\\captain_tools\\system_reset.py": {
            "language": ".py",
            "functions": [
                "load_coordinates",
                "send_to_agent",
                "get_agent_tasks",
                "create_onboarding_message",
                "reset_agent",
                "main",
                "__init__",
                "_get_agent_paths",
                "_archive_agent_files",
                "reset_agent_mailbox",
                "reset_all_mailboxes"
            ],
            "classes": {
                "SystemReset": {
                    "methods": [
                        "__init__",
                        "_get_agent_paths",
                        "_archive_agent_files",
                        "reset_agent_mailbox",
                        "reset_all_mailboxes"
                    ],
                    "docstring": "Tool for resetting agent mailboxes and tasks to a clean state.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 16
        },
        "src\\dreamos\\tools\\captain_tools\\validate_coords.py": {
            "language": ".py",
            "functions": [
                "get_window_info",
                "verify_agent_number",
                "show_coordinate_grid",
                "test_coordinates",
                "main",
                "mark_point"
            ],
            "classes": {},
            "routes": [],
            "complexity": 6
        },
        "src\\dreamos\\tools\\captain_tools\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\dreamos\\tools\\system_maintenance\\cleanup_duplicates.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "get_dir_size",
                "backup_before_delete",
                "cleanup_recursive_backups",
                "consolidate_empathy_logs",
                "rotate_task_migration_backups",
                "consolidate_test_directories",
                "run_cleanup"
            ],
            "classes": {
                "DuplicatesCleaner": {
                    "methods": [
                        "__init__",
                        "get_dir_size",
                        "backup_before_delete",
                        "cleanup_recursive_backups",
                        "consolidate_empathy_logs",
                        "rotate_task_migration_backups",
                        "consolidate_test_directories",
                        "run_cleanup"
                    ],
                    "docstring": "Manages cleanup of duplicate directories with safety measures.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 17
        },
        "src\\dreamos\\tools\\system_maintenance\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\dreamos\\tools\\system_maintenance\\maintenance_service.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "is_running"
            ],
            "classes": {
                "MaintenanceService": {
                    "methods": [
                        "__init__",
                        "is_running"
                    ],
                    "docstring": "Service that manages scheduled system maintenance tasks.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "src\\dreamos\\ui\\store\\empathyStore.ts": {
            "language": ".ts",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\dreamos\\utils\\config.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "get",
                "set"
            ],
            "classes": {
                "ConfigManager": {
                    "methods": [
                        "__init__",
                        "get",
                        "set"
                    ],
                    "docstring": "Manages system configuration.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "src\\dreamos\\utils\\gui_utils.py": {
            "language": ".py",
            "functions": [
                "is_window_focused",
                "get_cursor_window_handle",
                "get_cursor_window_rect",
                "is_cursor_window_active",
                "wait_for_cursor_window"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5
        },
        "src\\dreamos\\utils\\memory_manager.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "acquire",
                "release",
                "__enter__",
                "__exit__",
                "__init__",
                "add_interaction",
                "add_memory",
                "retrieve_recent",
                "search",
                "clear",
                "size",
                "load",
                "save",
                "set_max_items",
                "_compact_memory",
                "archive_old_memories",
                "__str__"
            ],
            "classes": {
                "FileLock": {
                    "methods": [
                        "__init__",
                        "acquire",
                        "release",
                        "__enter__",
                        "__exit__"
                    ],
                    "docstring": "File locking utility for cross-process synchronization with Windows compatibility.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MemoryManager": {
                    "methods": [
                        "__init__",
                        "add_interaction",
                        "add_memory",
                        "retrieve_recent",
                        "search",
                        "clear",
                        "size",
                        "load",
                        "save",
                        "set_max_items",
                        "_compact_memory",
                        "archive_old_memories",
                        "__str__"
                    ],
                    "docstring": "Memory management system for JARVIS.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 36
        },
        "src\\dreamos\\utils\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\dreamos\\utils\\dream_mode_utils\\browser.py": {
            "language": ".py",
            "functions": [
                "launch_browser",
                "navigate_to_page",
                "wait_for_login",
                "close_browser"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "src\\dreamos\\utils\\dream_mode_utils\\html_parser.py": {
            "language": ".py",
            "functions": [
                "is_still_generating",
                "extract_latest_reply",
                "extract_latest_reply",
                "extract_code_blocks",
                "extract_web_element_text",
                "clean_html_text"
            ],
            "classes": {},
            "routes": [],
            "complexity": 6
        },
        "src\\dreamos\\utils\\dream_mode_utils\\task_parser.py": {
            "language": ".py",
            "functions": [
                "extract_task_metadata",
                "extract_task_id"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "src\\dreamos\\utils\\gui\\retriever.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load_agent_coordinates",
                "_get_specific_agent_coords",
                "_pause",
                "retrieve"
            ],
            "classes": {
                "ResponseRetriever": {
                    "methods": [
                        "__init__",
                        "_load_agent_coordinates",
                        "_get_specific_agent_coords",
                        "_pause",
                        "retrieve"
                    ],
                    "docstring": "Handles retrieving agent responses by interacting with the GUI, typically by clicking a 'copy' button and reading the clipboard.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 10
        },
        "src\\dreamos\\utils\\gui\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\dreamos\\utils\\gui\\injector.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load_agent_coordinates",
                "_get_specific_agent_coords",
                "_pause",
                "focus_window",
                "_type_or_paste",
                "_clear_input_field",
                "inject",
                "take_screenshot_on_error"
            ],
            "classes": {
                "CursorInjector": {
                    "methods": [
                        "__init__",
                        "_load_agent_coordinates",
                        "_get_specific_agent_coords",
                        "_pause",
                        "focus_window",
                        "_type_or_paste",
                        "_clear_input_field",
                        "inject",
                        "take_screenshot_on_error"
                    ],
                    "docstring": "Handles direct GUI interactions to inject prompts into an agent's input field.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 18
        },
        "src\\dreamos\\utils\\validation\\inbox_message_validator.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "_load_schema",
                "validate_message"
            ],
            "classes": {
                "MessageValidator": {
                    "methods": [
                        "__init__",
                        "_load_schema",
                        "validate_message"
                    ],
                    "docstring": "Validates messages against the Dream.OS inbox message schema.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 7
        },
        "src\\tests\\test_agent_loop.py": {
            "language": ".py",
            "functions": [
                "mock_config",
                "mock_pbm",
                "mock_agent_bus",
                "agent_loop",
                "__init__"
            ],
            "classes": {
                "MockAgent": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Mock agent for testing.",
                    "base_classes": [
                        "BaseAgent"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "src\\dreamscape\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\tests\\test_agent_utils.py": {
            "language": ".py",
            "functions": [
                "test_placeholder_agent_monitor",
                "test_placeholder_command_supervisor"
            ],
            "classes": {
                "TestAgentMonitor": {
                    "methods": [
                        "test_placeholder_agent_monitor"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Prototype",
                    "agent_type": "Utility"
                },
                "TestCommandSupervisor": {
                    "methods": [
                        "test_placeholder_command_supervisor"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Prototype",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "src\\tests\\test_config_utils.py": {
            "language": ".py",
            "functions": [
                "test_placeholder_config_manager"
            ],
            "classes": {
                "TestConfigManager": {
                    "methods": [
                        "test_placeholder_config_manager"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Prototype",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 2
        },
        "src\\tests\\test_dashboard.py": {
            "language": ".py",
            "functions": [
                "test_placeholder_validation_dashboard"
            ],
            "classes": {
                "TestValidationDashboard": {
                    "methods": [
                        "test_placeholder_validation_dashboard"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Prototype",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 2
        },
        "src\\tests\\test_empathy_intelligence.py": {
            "language": ".py",
            "functions": [
                "drift_detector",
                "predictive_model",
                "websocket_manager",
                "test_client",
                "run_smoke_test",
                "test_initialization",
                "test_add_action",
                "test_add_violation",
                "test_predict_compliance",
                "test_initialization",
                "test_extract_features",
                "test_update_model",
                "test_predict_drift",
                "test_get_agent_insights",
                "test_log_parsing",
                "test_log_endpoints"
            ],
            "classes": {
                "TestDriftDetector": {
                    "methods": [
                        "test_initialization",
                        "test_add_action",
                        "test_add_violation",
                        "test_predict_compliance"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "TestPredictiveModel": {
                    "methods": [
                        "test_initialization",
                        "test_extract_features",
                        "test_update_model",
                        "test_predict_drift",
                        "test_get_agent_insights"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "TestWebSocketIntegration": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Prototype",
                    "agent_type": "Utility"
                },
                "TestAPIIntegration": {
                    "methods": [
                        "test_log_parsing",
                        "test_log_endpoints"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Prototype",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 27
        },
        "src\\tests\\test_promotion_system.py": {
            "language": ".py",
            "functions": [
                "promotion_system",
                "test_initialization",
                "test_award_points",
                "test_promotion_eligibility",
                "test_update_streak",
                "test_invalid_agent"
            ],
            "classes": {},
            "routes": [],
            "complexity": 6
        },
        "src\\tests\\test_task_utils.py": {
            "language": ".py",
            "functions": [
                "test_placeholder_task_completion_detector"
            ],
            "classes": {
                "TestTaskCompletionDetector": {
                    "methods": [
                        "test_placeholder_task_completion_detector"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Prototype",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 2
        },
        "src\\tests\\test_validation_utils.py": {
            "language": ".py",
            "functions": [
                "validator",
                "test_initialization",
                "test_validate_improvement",
                "test_validate_incomplete_improvement",
                "test_get_validation_status"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5
        },
        "src\\tests\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\tests\\agents\\utils\\test_agent_identity.py": {
            "language": ".py",
            "functions": [
                "sample_config",
                "temp_config_dir",
                "temp_log_dir",
                "test_agent_identity_creation",
                "test_agent_identity_to_dict",
                "test_agent_awareness_initialization",
                "test_identity_confirmation",
                "test_identity_validation",
                "test_get_identity_prefix",
                "test_awareness_level_increase"
            ],
            "classes": {},
            "routes": [],
            "complexity": 10
        },
        "src\\tests\\core\\test_devlog_formatter.py": {
            "language": ".py",
            "functions": [
                "temp_log_dir",
                "formatter",
                "sample_violation",
                "sample_compliance_report",
                "sample_identity_update",
                "test_init_default_path",
                "test_init_custom_path",
                "test_format_violation",
                "test_format_violation_edge_cases",
                "test_format_compliance_report",
                "test_format_identity_update",
                "test_write_devlog",
                "test_format_and_write_violation",
                "test_get_recent_violations",
                "test_get_compliance_history",
                "test_duplicate_log_avoidance",
                "test_malformed_data_handling",
                "test_file_permission_handling"
            ],
            "classes": {
                "TestDevlogFormatter": {
                    "methods": [
                        "test_init_default_path",
                        "test_init_custom_path",
                        "test_format_violation",
                        "test_format_violation_edge_cases",
                        "test_format_compliance_report",
                        "test_format_identity_update",
                        "test_write_devlog",
                        "test_format_and_write_violation",
                        "test_get_recent_violations",
                        "test_get_compliance_history",
                        "test_duplicate_log_avoidance",
                        "test_malformed_data_handling",
                        "test_file_permission_handling"
                    ],
                    "docstring": "Test suite for DevlogFormatter class.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 31
        },
        "src\\tests\\core\\test_ethos.py": {
            "language": ".py",
            "functions": [
                "validator",
                "sample_action",
                "sample_behavior_log",
                "test_validator_initialization",
                "test_validate_action_compliant",
                "test_validate_action_non_compliant",
                "test_validate_agent_behavior",
                "test_generate_compliance_report",
                "test_check_ethos_alignment",
                "test_human_centricity_check",
                "test_context_awareness_check",
                "test_uncertainty_handling_check",
                "test_ethical_boundaries_check",
                "test_value_alignment_calculation",
                "test_ethos_structure_validation"
            ],
            "classes": {},
            "routes": [],
            "complexity": 15
        },
        "src\\tests\\core\\validation\\test_validation_engine.py": {
            "language": ".py",
            "functions": [
                "mock_config",
                "mock_ethos_validator",
                "mock_event_bus",
                "validation_engine"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "tests\\test_agent_utils.py": {
            "language": ".py",
            "functions": [
                "test_placeholder_agent_monitor",
                "test_placeholder_command_supervisor"
            ],
            "classes": {
                "TestAgentMonitor": {
                    "methods": [
                        "test_placeholder_agent_monitor"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Prototype",
                    "agent_type": "Utility"
                },
                "TestCommandSupervisor": {
                    "methods": [
                        "test_placeholder_command_supervisor"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Prototype",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "tests\\conftest.py": {
            "language": ".py",
            "functions": [
                "mock_api",
                "test_client",
                "__init__",
                "__init__",
                "parse_log_content"
            ],
            "classes": {
                "MockLogFileHandler": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Mock LogFileHandler for testing.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MockWebSocketManager": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Mock WebSocketManager for testing.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MockEmpathyWebSocket": {
                    "methods": [],
                    "docstring": "Mock empathy_websocket module.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MockEmpathyLogs": {
                    "methods": [
                        "parse_log_content"
                    ],
                    "docstring": "Mock empathy_logs module.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MockAPI": {
                    "methods": [],
                    "docstring": "Mock dreamos.api package.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 8
        },
        "tests\\test_agent_loop.py": {
            "language": ".py",
            "functions": [
                "mock_config",
                "mock_pbm",
                "mock_agent_bus",
                "agent_loop",
                "__init__"
            ],
            "classes": {
                "MockAgent": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Mock agent for testing.",
                    "base_classes": [
                        "BaseAgent"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 6
        },
        "tests\\test_config_utils.py": {
            "language": ".py",
            "functions": [
                "test_placeholder_config_manager"
            ],
            "classes": {
                "TestConfigManager": {
                    "methods": [
                        "test_placeholder_config_manager"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Prototype",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 2
        },
        "tests\\test_dashboard.py": {
            "language": ".py",
            "functions": [
                "test_placeholder_validation_dashboard"
            ],
            "classes": {
                "TestValidationDashboard": {
                    "methods": [
                        "test_placeholder_validation_dashboard"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Prototype",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 2
        },
        "tests\\test_empathy_intelligence.py": {
            "language": ".py",
            "functions": [
                "drift_detector",
                "predictive_model",
                "mock_websocket_manager",
                "test_client",
                "run_smoke_test",
                "test_initialization",
                "test_add_action",
                "test_add_violation",
                "test_predict_compliance",
                "test_initialization",
                "test_extract_features",
                "test_update_model",
                "test_predict_drift",
                "test_get_agent_insights",
                "test_log_parsing",
                "test_log_endpoints",
                "empathy_engine",
                "test_initialization",
                "test_analyze_interaction",
                "test_analyze_interaction_edge_cases",
                "metrics",
                "test_calculate_metrics",
                "validator",
                "test_validate_empathy",
                "test_validate_empathy_edge_cases"
            ],
            "classes": {
                "TestDriftDetector": {
                    "methods": [
                        "test_initialization",
                        "test_add_action",
                        "test_add_violation",
                        "test_predict_compliance"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "TestPredictiveModel": {
                    "methods": [
                        "test_initialization",
                        "test_extract_features",
                        "test_update_model",
                        "test_predict_drift",
                        "test_get_agent_insights"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "TestWebSocketIntegration": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Prototype",
                    "agent_type": "Utility"
                },
                "TestAPIIntegration": {
                    "methods": [
                        "test_log_parsing",
                        "test_log_endpoints"
                    ],
                    "docstring": "Test suite for API integration.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "TestEmpathyEngine": {
                    "methods": [
                        "empathy_engine",
                        "test_initialization",
                        "test_analyze_interaction",
                        "test_analyze_interaction_edge_cases"
                    ],
                    "docstring": "Test suite for EmpathyEngine.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "TestEmpathyMetrics": {
                    "methods": [
                        "metrics",
                        "test_calculate_metrics"
                    ],
                    "docstring": "Test suite for EmpathyMetrics.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "TestEmpathyValidator": {
                    "methods": [
                        "validator",
                        "test_validate_empathy",
                        "test_validate_empathy_edge_cases"
                    ],
                    "docstring": "Test suite for EmpathyValidator.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 45
        },
        "tests\\test_jarvis_integration.py": {
            "language": ".py",
            "functions": [
                "setUp",
                "tearDown",
                "test_activation",
                "test_basic_input_processing",
                "test_command_pattern",
                "test_query_pattern",
                "test_memory_persistence"
            ],
            "classes": {
                "TestJarvisIntegration": {
                    "methods": [
                        "setUp",
                        "tearDown",
                        "test_activation",
                        "test_basic_input_processing",
                        "test_command_pattern",
                        "test_query_pattern",
                        "test_memory_persistence"
                    ],
                    "docstring": "Integration tests for JARVIS system.",
                    "base_classes": [
                        "unittest.TestCase"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 14
        },
        "tests\\test_task_utils.py": {
            "language": ".py",
            "functions": [
                "test_placeholder_task_completion_detector"
            ],
            "classes": {
                "TestTaskCompletionDetector": {
                    "methods": [
                        "test_placeholder_task_completion_detector"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Prototype",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 2
        },
        "tests\\test_promotion_system.py": {
            "language": ".py",
            "functions": [
                "promotion_system",
                "test_initialization",
                "test_award_points",
                "test_promotion_eligibility",
                "test_update_streak",
                "test_invalid_agent"
            ],
            "classes": {},
            "routes": [],
            "complexity": 6
        },
        "tests\\test_validation_utils.py": {
            "language": ".py",
            "functions": [
                "validator",
                "test_initialization",
                "test_validate_improvement",
                "test_validate_incomplete_improvement",
                "test_get_validation_status"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5
        },
        "tests\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "tests\\agents\\utils\\test_agent_identity.py": {
            "language": ".py",
            "functions": [
                "sample_config",
                "temp_config_dir",
                "temp_log_dir",
                "test_agent_identity_creation",
                "test_agent_identity_to_dict",
                "test_agent_awareness_initialization",
                "test_identity_confirmation",
                "test_identity_validation",
                "test_get_identity_prefix",
                "test_awareness_level_increase"
            ],
            "classes": {},
            "routes": [],
            "complexity": 10
        },
        "tests\\api\\test_empathy_scoring_api.py": {
            "language": ".py",
            "functions": [
                "setUp",
                "tearDown",
                "test_get_agent_scores",
                "test_get_agent_scores_force_update",
                "test_get_agent_score",
                "test_get_agent_comparison",
                "test_recalculate_agent_score",
                "test_get_empathy_threshold_status",
                "test_update_score_cache"
            ],
            "classes": {
                "TestEmpathyScoringAPI": {
                    "methods": [
                        "setUp",
                        "tearDown",
                        "test_get_agent_scores",
                        "test_get_agent_scores_force_update",
                        "test_get_agent_score",
                        "test_get_agent_comparison",
                        "test_recalculate_agent_score",
                        "test_get_empathy_threshold_status",
                        "test_update_score_cache"
                    ],
                    "docstring": "Tests for the Empathy Scoring API endpoints.",
                    "base_classes": [
                        "unittest.TestCase"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 18
        },
        "tests\\core\\test_agent_identity.py": {
            "language": ".py",
            "functions": [
                "setUp",
                "tearDown",
                "test_initialize_agent_identity",
                "test_update_empathy_score_first_time",
                "test_update_empathy_score_multiple_times",
                "test_log_file_creation",
                "test_get_identity_summary_includes_history",
                "test_large_history_truncation",
                "test_get_score_history"
            ],
            "classes": {
                "TestAgentIdentity": {
                    "methods": [
                        "setUp",
                        "tearDown",
                        "test_initialize_agent_identity",
                        "test_update_empathy_score_first_time",
                        "test_update_empathy_score_multiple_times",
                        "test_log_file_creation",
                        "test_get_identity_summary_includes_history",
                        "test_large_history_truncation",
                        "test_get_score_history"
                    ],
                    "docstring": "Tests for the enhanced AgentIdentity class with score delta tracking.",
                    "base_classes": [
                        "unittest.TestCase"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 18
        },
        "tests\\core\\test_devlog_formatter.py": {
            "language": ".py",
            "functions": [
                "temp_log_dir",
                "formatter",
                "sample_violation",
                "sample_compliance_report",
                "sample_identity_update",
                "test_init_default_path",
                "test_init_custom_path",
                "test_format_violation",
                "test_format_violation_edge_cases",
                "test_format_compliance_report",
                "test_format_identity_update",
                "test_write_devlog",
                "test_format_and_write_violation",
                "test_get_recent_violations",
                "test_get_compliance_history",
                "test_duplicate_log_avoidance",
                "test_malformed_data_handling",
                "test_file_permission_handling"
            ],
            "classes": {
                "TestDevlogFormatter": {
                    "methods": [
                        "test_init_default_path",
                        "test_init_custom_path",
                        "test_format_violation",
                        "test_format_violation_edge_cases",
                        "test_format_compliance_report",
                        "test_format_identity_update",
                        "test_write_devlog",
                        "test_format_and_write_violation",
                        "test_get_recent_violations",
                        "test_get_compliance_history",
                        "test_duplicate_log_avoidance",
                        "test_malformed_data_handling",
                        "test_file_permission_handling"
                    ],
                    "docstring": "Test suite for DevlogFormatter class.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 31
        },
        "tests\\core\\test_empathy_scoring.py": {
            "language": ".py",
            "functions": [
                "setUp",
                "tearDown",
                "test_initialize",
                "test_initialize_with_config",
                "test_calculate_agent_score",
                "test_exponential_decay_trend_calculation",
                "test_decay_half_life_effect",
                "test_calculate_all_agent_scores",
                "test_get_agent_comparisons",
                "test_determine_agent_status",
                "test_weights",
                "test_config",
                "get_logs_side_effect"
            ],
            "classes": {
                "TestEmpathyScorer": {
                    "methods": [
                        "setUp",
                        "tearDown",
                        "test_initialize",
                        "test_initialize_with_config",
                        "test_calculate_agent_score",
                        "test_exponential_decay_trend_calculation",
                        "test_decay_half_life_effect",
                        "test_calculate_all_agent_scores",
                        "test_get_agent_comparisons",
                        "test_determine_agent_status",
                        "test_weights",
                        "test_config"
                    ],
                    "docstring": "Tests for the EmpathyScorer class.",
                    "base_classes": [
                        "unittest.TestCase"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 25
        },
        "tests\\core\\test_ethos.py": {
            "language": ".py",
            "functions": [
                "validator",
                "sample_action",
                "sample_behavior_log",
                "test_validator_initialization",
                "test_validate_action_compliant",
                "test_validate_action_non_compliant",
                "test_validate_agent_behavior",
                "test_generate_compliance_report",
                "test_check_ethos_alignment",
                "test_human_centricity_check",
                "test_context_awareness_check",
                "test_uncertainty_handling_check",
                "test_ethical_boundaries_check",
                "test_value_alignment_calculation",
                "test_ethos_structure_validation"
            ],
            "classes": {},
            "routes": [],
            "complexity": 15
        },
        "tests\\core\\tasks\\execution\\test_task_executor.py": {
            "language": ".py",
            "functions": [
                "mock_task_nexus",
                "task_executor",
                "test_init",
                "test_get_execution_history",
                "test_clear_execution_history_specific_task",
                "test_clear_execution_history_all"
            ],
            "classes": {
                "TestTaskExecutor": {
                    "methods": [
                        "test_init",
                        "test_get_execution_history",
                        "test_clear_execution_history_specific_task",
                        "test_clear_execution_history_all"
                    ],
                    "docstring": "Tests for the TaskExecutor class.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 10
        },
        "tests\\core\\tasks\\monitoring\\test_pending_monitor.py": {
            "language": ".py",
            "functions": [
                "mock_task_nexus",
                "config",
                "pending_task_monitor",
                "test_init"
            ],
            "classes": {
                "TestPendingTaskMonitor": {
                    "methods": [
                        "test_init"
                    ],
                    "docstring": "Tests for the PendingTaskMonitor class.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 5
        },
        "tests\\core\\validation\\test_validation_engine.py": {
            "language": ".py",
            "functions": [
                "mock_config",
                "mock_ethos_validator",
                "mock_event_bus",
                "validation_engine"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "tests\\tools\\agent_bootstrap_runner\\conftest.py": {
            "language": ".py",
            "functions": [
                "mock_logger",
                "mock_agent_config"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "tests\\tools\\agent_bootstrap_runner\\test_agent_loop.py": {
            "language": ".py",
            "functions": [
                "mock_config",
                "mock_bus",
                "mock_logger",
                "mock_ui_interactor",
                "test_initialization",
                "test_state_persistence",
                "test_performance_metrics",
                "__init__",
                "__init__",
                "info",
                "error",
                "warning",
                "debug",
                "__init__",
                "initialize"
            ],
            "classes": {
                "TestAgentStateManager": {
                    "methods": [
                        "test_initialization",
                        "test_state_persistence",
                        "test_performance_metrics"
                    ],
                    "docstring": "Tests for AgentStateManager",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "TestMessageProcessor": {
                    "methods": [],
                    "docstring": "Tests for MessageProcessor",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "TestAgentLoop": {
                    "methods": [],
                    "docstring": "Tests for AgentLoop",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MockBus": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Prototype",
                    "agent_type": "Utility"
                },
                "MockLogger": {
                    "methods": [
                        "__init__",
                        "info",
                        "error",
                        "warning",
                        "debug"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MockUIInteractor": {
                    "methods": [
                        "__init__",
                        "initialize"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Prototype",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 26
        },
        "tests\\tools\\agent_bootstrap_runner\\test_agent_traits.py": {
            "language": ".py",
            "functions": [
                "mock_traits_file",
                "test_initialization_defaults",
                "test_load_custom_traits",
                "test_invalid_traits_file",
                "test_missing_traits_file",
                "test_validate_traits",
                "test_get_prompt_context",
                "test_apply_validation_policy",
                "test_to_dict"
            ],
            "classes": {
                "TestAgentTraits": {
                    "methods": [
                        "test_initialization_defaults",
                        "test_load_custom_traits",
                        "test_invalid_traits_file",
                        "test_missing_traits_file",
                        "test_validate_traits",
                        "test_get_prompt_context",
                        "test_apply_validation_policy",
                        "test_to_dict"
                    ],
                    "docstring": "Tests for AgentTraits class",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 17
        },
        "tests\\tools\\agent_bootstrap_runner\\test_config.py": {
            "language": ".py",
            "functions": [
                "test_validate_agent_id",
                "test_agent_config_initialization",
                "test_agent_config_with_env_vars",
                "test_agent_config_invalid_id",
                "test_parse_args",
                "test_agent_config_directories",
                "test_agent_config_performance_limits"
            ],
            "classes": {},
            "routes": [],
            "complexity": 7
        },
        "tests\\tools\\agent_bootstrap_runner\\test_main.py": {
            "language": ".py",
            "functions": [
                "mock_config",
                "mock_bus",
                "mock_logger",
                "mock_ui_interactor",
                "test_successful_run",
                "test_keyboard_interrupt",
                "test_general_exception",
                "__init__"
            ],
            "classes": {
                "TestMainAsync": {
                    "methods": [],
                    "docstring": "Tests for main_async function",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "TestMain": {
                    "methods": [
                        "test_successful_run",
                        "test_keyboard_interrupt",
                        "test_general_exception"
                    ],
                    "docstring": "Tests for main function",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MockBus": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Prototype",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 12
        },
        "tests\\tools\\agent_bootstrap_runner\\test_messaging.py": {
            "language": ".py",
            "functions": [
                "mock_config",
                "mock_bus",
                "mock_logger",
                "test_validate_message",
                "test_archive_inbox",
                "test_read_input_file",
                "test_message_validation_with_markdown",
                "__init__",
                "__init__",
                "info",
                "error",
                "warning",
                "debug"
            ],
            "classes": {
                "MockBus": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Prototype",
                    "agent_type": "Utility"
                },
                "MockLogger": {
                    "methods": [
                        "__init__",
                        "info",
                        "error",
                        "warning",
                        "debug"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 19
        },
        "tests\\tools\\agent_bootstrap_runner\\test_runner.py": {
            "language": ".py",
            "functions": [
                "config",
                "mock_runtime_dir",
                "mock_bus",
                "mock_logger",
                "mock_ui_interactor"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5
        },
        "tests\\tools\\agent_bootstrap_runner\\test_ui_interaction.py": {
            "language": ".py",
            "functions": [
                "mock_config",
                "mock_bus",
                "mock_logger",
                "test_initialization",
                "test_initialization_missing_files",
                "test_coordinate_validation",
                "__init__",
                "__init__",
                "info",
                "error",
                "warning",
                "debug"
            ],
            "classes": {
                "TestAgentUIInteractor": {
                    "methods": [
                        "test_initialization",
                        "test_initialization_missing_files",
                        "test_coordinate_validation"
                    ],
                    "docstring": "Tests for AgentUIInteractor",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "MockBus": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Prototype",
                    "agent_type": "Utility"
                },
                "MockLogger": {
                    "methods": [
                        "__init__",
                        "info",
                        "error",
                        "warning",
                        "debug"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 21
        },
        "tests\\tools\\agent_bootstrap_runner\\test_validation.py": {
            "language": ".py",
            "functions": [
                "test_valid_dict_coords",
                "test_valid_list_coords",
                "test_missing_key",
                "test_wrong_dict_format",
                "test_wrong_list_format",
                "test_invalid_list_length",
                "test_file_not_found",
                "test_invalid_json",
                "test_valid_json_dict",
                "test_valid_json_list",
                "test_expect_list_with_list",
                "test_expect_list_with_dict",
                "test_inbox_json_not_exists",
                "test_other_file_not_exists",
                "test_invalid_json",
                "test_valid_files",
                "test_missing_coords_files",
                "test_inbox_not_exists"
            ],
            "classes": {
                "TestValidateCoords": {
                    "methods": [
                        "test_valid_dict_coords",
                        "test_valid_list_coords",
                        "test_missing_key",
                        "test_wrong_dict_format",
                        "test_wrong_list_format",
                        "test_invalid_list_length",
                        "test_file_not_found",
                        "test_invalid_json"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "TestValidateJsonFile": {
                    "methods": [
                        "test_valid_json_dict",
                        "test_valid_json_list",
                        "test_expect_list_with_list",
                        "test_expect_list_with_dict",
                        "test_inbox_json_not_exists",
                        "test_other_file_not_exists",
                        "test_invalid_json"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "TestValidateAllFiles": {
                    "methods": [
                        "test_valid_files",
                        "test_missing_coords_files",
                        "test_inbox_not_exists"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Prototype",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 36
        },
        "test_migration\\src\\example.py": {
            "language": ".py",
            "functions": [
                "bad_function",
                "unused_function"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "test_migration\\src\\test_example.py": {
            "language": ".py",
            "functions": [
                "test_bad_function",
                "test_unused_function",
                "test_main_block",
                "test_main_execution"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "tools\\calibrate_initial_agent_coords.py": {
            "language": ".py",
            "functions": [
                "load_coords",
                "save_coords",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "vendor\\reprism\\languages\\arff.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\arduino.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\applescript.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\abap.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\asciidoc.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\ada.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\bash.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\autoit.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\basic.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\asm6502.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\brainfuck.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\batch.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\autohotkey.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\bison.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\actionscript.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\apacheconf.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\clojure.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\aspnet.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\clike.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\c.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\coffeescript.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\bro.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\cpp.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\crystal.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\css-extras.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\apl.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\csp.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\docker.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\dart.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\csharp.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\css.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\d.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\diff.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\fsharp.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\elixir.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\erb.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\django.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\gherkin.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\flow.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\fortran.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\erlang.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\eiffel.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\gedcom.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\git.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\graphql.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\go.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\groovy.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\haml.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\hpkp.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\glsl.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\haskell.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\haxe.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\handlebars.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\http.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\ichigojam.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\hsts.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\icon.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\io.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\java.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\ini.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\j.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\inform7.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\jolie.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\json.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\keyman.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\kotlin.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\lisp.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\julia.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\latex.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\jsx.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\liquid.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\lolcode.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\livescript.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\makefile.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\lua.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\less.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\monkey.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\mizar.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\javascript.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\markdown.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\markup-templating.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\nasm.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\matlab.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\nginx.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\n4js.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\mel.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\nix.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\nim.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\nsis.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\oz.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\parser.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\opencl.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\objectivec.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\pascal.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\php-extras.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\markup.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\parigp.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\protobuf.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\properties.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\ocaml.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\perl.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\prolog.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\plsql.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\processing.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\pug.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\powershell.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\puppet.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\php.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\pure.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\r.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\python.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\reason.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\qore.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\q.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\rip.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\renpy.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\sass.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\rest.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\roboconf.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\ruby.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\sas.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\rust.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\smalltalk.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\scheme.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\scala.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\smarty.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\scss.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\stylus.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\tsx.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\soy.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\swift.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\twig.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\textile.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\tcl.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\velocity.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\vbnet.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\typescript.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\ada.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\wasm.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\verilog.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\actionscript.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\applescript.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\vim.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\apl.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\wiki.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\arff.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\arduino.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\xeora.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\vhdl.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\asm6502.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\yaml.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\visual-basic.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\aspnet.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\autoit.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\bash.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\brainfuck.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\batch.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\basic.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\bison.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\bro.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\c.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\xojo.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\abap.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\clojure.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\clike.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\cpp.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\crystal.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\csharp.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\css-extras.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\coffeescript.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\css.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\d.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\django.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\docker.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\erb.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\eiffel.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\erlang.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\elixir.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\flow.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\apacheconf.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\fortran.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\fsharp.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\gedcom.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\git.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\glsl.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\go.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\asciidoc.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\dart.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\groovy.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\haml.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\diff.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\graphql.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\handlebars.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\hpkp.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\hsts.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\ini.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\haxe.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\autohotkey.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\csp.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\haskell.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\http.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\icon.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\j.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\ichigojam.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\javascript.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\jolie.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\inform7.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\io.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\java.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\json.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\jsx.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\julia.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\kotlin.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\keyman.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\latex.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\less.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\lisp.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\liquid.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\livescript.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\lolcode.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\makefile.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\markdown.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\markup-templating.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\lua.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\markup.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\matlab.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\gherkin.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\mizar.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\n4js.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\nim.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\monkey.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\objectivec.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\nasm.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\nix.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\ocaml.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\nginx.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\nsis.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\oz.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\parser.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\pascal.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\perl.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\php-extras.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\parigp.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\plsql.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\php.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\prolog.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\processing.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\powershell.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\protobuf.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\properties.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\puppet.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\pure.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\pug.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\python.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\r.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\q.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\reason.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\rest.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\renpy.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\rip.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\qore.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\roboconf.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\ruby.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\rust.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\sas.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\sass.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\scala.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\scss.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\smalltalk.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\scheme.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\soy.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\smarty.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\stylus.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\swift.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\tsx.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\tcl.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\typescript.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\twig.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\velocity.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\vhdl.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\verilog.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\wasm.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\wiki.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\visual-basic.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\xojo.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\xeora.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\tree-sitter-grammars\\tree-sitter-javascript\\setup.py": {
            "language": ".py",
            "functions": [
                "run",
                "get_tag"
            ],
            "classes": {
                "Build": {
                    "methods": [
                        "run"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "build"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "ActionAgent"
                },
                "BdistWheel": {
                    "methods": [
                        "get_tag"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "bdist_wheel"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "vendor\\reprism\\languages\\languages\\yaml.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\tree-sitter-grammars\\tree-sitter-javascript\\bindings\\python\\tests\\test_binding.py": {
            "language": ".py",
            "functions": [
                "test_can_load_grammar"
            ],
            "classes": {
                "TestLanguage": {
                    "methods": [
                        "test_can_load_grammar"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "TestCase"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 2
        },
        "vendor\\tree-sitter-grammars\\tree-sitter-javascript\\bindings\\python\\tree_sitter_javascript\\__init__.py": {
            "language": ".py",
            "functions": [
                "_get_query",
                "__getattr__",
                "__dir__"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "vendor\\reprism\\languages\\languages\\opencl.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\mel.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\tree-sitter-grammars\\tree-sitter-javascript\\bindings\\node\\index.d.ts": {
            "language": ".ts",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\vbnet.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\tree-sitter-grammars\\tree-sitter-javascript\\bindings\\node\\binding_test.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\textile.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\tree-sitter-grammars\\tree-sitter-javascript\\bindings\\rust\\build.rs": {
            "language": ".rs",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\reprism\\languages\\languages\\vim.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\tree-sitter-grammars\\tree-sitter-javascript\\bindings\\node\\index.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\tree-sitter-grammars\\tree-sitter-javascript\\test\\highlight\\imports.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\tree-sitter-grammars\\tree-sitter-javascript\\test\\highlight\\injection.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\tree-sitter-grammars\\tree-sitter-python\\setup.py": {
            "language": ".py",
            "functions": [
                "run",
                "get_tag"
            ],
            "classes": {
                "Build": {
                    "methods": [
                        "run"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "build"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "ActionAgent"
                },
                "BdistWheel": {
                    "methods": [
                        "get_tag"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "bdist_wheel"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "vendor\\tree-sitter-grammars\\tree-sitter-javascript\\test\\tags\\classes.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\tree-sitter-grammars\\tree-sitter-javascript\\bindings\\rust\\lib.rs": {
            "language": ".rs",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\tree-sitter-grammars\\tree-sitter-python\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\tree-sitter-grammars\\tree-sitter-python\\bindings\\python\\tests\\test_binding.py": {
            "language": ".py",
            "functions": [
                "test_can_load_grammar"
            ],
            "classes": {
                "TestLanguage": {
                    "methods": [
                        "test_can_load_grammar"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "TestCase"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 2
        },
        "vendor\\tree-sitter-grammars\\tree-sitter-python\\bindings\\python\\tests\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\tree-sitter-grammars\\tree-sitter-python\\bindings\\python\\tree_sitter_python\\__init__.py": {
            "language": ".py",
            "functions": [
                "_get_query",
                "__getattr__",
                "__dir__"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "vendor\\tree-sitter-grammars\\tree-sitter-javascript\\test\\highlight\\functions.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\tree-sitter-grammars\\tree-sitter-javascript\\grammar.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\tree-sitter-grammars\\tree-sitter-javascript\\test\\highlight\\keywords.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\tree-sitter-grammars\\tree-sitter-javascript\\test\\tags\\functions.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\tree-sitter-grammars\\tree-sitter-javascript\\test\\highlight\\variables.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar.py": {
            "language": ".py",
            "functions": [
                "test_main",
                "testBackslash",
                "testPlainIntegers",
                "testLongIntegers",
                "testUnderscoresInNumbers",
                "testFloats",
                "testEllipsis",
                "testEvalInput",
                "testFuncdef",
                "testLambdef",
                "testSimpleStmt",
                "testExprStmt",
                "testDelStmt",
                "testPassStmt",
                "testBreakStmt",
                "testContinueStmt",
                "test_break_continue_loop",
                "testReturn",
                "testYield",
                "testRaise",
                "testImport",
                "testGlobal",
                "testNonlocal",
                "testAssert",
                "testIf",
                "testWhile",
                "testFor",
                "testTry",
                "testSuite",
                "testTest",
                "testComparison",
                "testBinaryMaskOps",
                "testShiftOps",
                "testAdditiveOps",
                "testMultiplicativeOps",
                "testUnaryOps",
                "testSelectors",
                "testAtoms",
                "testClassdef",
                "testDictcomps",
                "testListcomps",
                "testGenexps",
                "testComprehensionSpecials",
                "test_with_statement",
                "testIfElseExpr",
                "testStringLiterals",
                "f1",
                "f2",
                "f3",
                "a1",
                "a2",
                "v0",
                "v1",
                "v2",
                "d01",
                "d11",
                "d21",
                "d02",
                "d12",
                "d22",
                "d01v",
                "d11v",
                "d21v",
                "d02v",
                "d12v",
                "d22v",
                "pos0key1",
                "pos2key2",
                "pos2key2dict",
                "f",
                "f",
                "f",
                "f",
                "f",
                "f",
                "f",
                "f",
                "f",
                "null",
                "f",
                "f",
                "f",
                "f",
                "f",
                "foo",
                "test_inner",
                "g1",
                "g2",
                "f",
                "class_decorator",
                "test_in_func",
                "test_nested_front",
                "_checkeval",
                "__init__",
                "__len__",
                "__getitem__",
                "meth1",
                "meth2",
                "meth3",
                "__enter__",
                "__exit__"
            ],
            "classes": {
                "TokenTests": {
                    "methods": [
                        "testBackslash",
                        "testPlainIntegers",
                        "testLongIntegers",
                        "testUnderscoresInNumbers",
                        "testFloats",
                        "testEllipsis"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "unittest.TestCase"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "GrammarTests": {
                    "methods": [
                        "testEvalInput",
                        "testFuncdef",
                        "testLambdef",
                        "testSimpleStmt",
                        "testExprStmt",
                        "testDelStmt",
                        "testPassStmt",
                        "testBreakStmt",
                        "testContinueStmt",
                        "test_break_continue_loop",
                        "testReturn",
                        "testYield",
                        "testRaise",
                        "testImport",
                        "testGlobal",
                        "testNonlocal",
                        "testAssert",
                        "testIf",
                        "testWhile",
                        "testFor",
                        "testTry",
                        "testSuite",
                        "testTest",
                        "testComparison",
                        "testBinaryMaskOps",
                        "testShiftOps",
                        "testAdditiveOps",
                        "testMultiplicativeOps",
                        "testUnaryOps",
                        "testSelectors",
                        "testAtoms",
                        "testClassdef",
                        "testDictcomps",
                        "testListcomps",
                        "testGenexps",
                        "testComprehensionSpecials",
                        "test_with_statement",
                        "testIfElseExpr",
                        "testStringLiterals"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "unittest.TestCase"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "Squares": {
                    "methods": [
                        "__init__",
                        "__len__",
                        "__getitem__"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Prototype",
                    "agent_type": "Utility"
                },
                "B": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Prototype",
                    "agent_type": "Utility"
                },
                "B2": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Prototype",
                    "agent_type": "Utility"
                },
                "C1": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "B"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "C2": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "B"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "D": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "C1",
                        "C2",
                        "B"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "C": {
                    "methods": [
                        "meth1",
                        "meth2",
                        "meth3"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Prototype",
                    "agent_type": "Utility"
                },
                "G": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Prototype",
                    "agent_type": "Utility"
                },
                "manager": {
                    "methods": [
                        "__enter__",
                        "__exit__"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "object"
                    ],
                    "maturity": "Kiddie Script",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 154
        },
        "vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar-crlf.py": {
            "language": ".py",
            "functions": [
                "test_main",
                "testBackslash",
                "testPlainIntegers",
                "testLongIntegers",
                "testUnderscoresInNumbers",
                "testFloats",
                "testEllipsis",
                "testEvalInput",
                "testFuncdef",
                "testLambdef",
                "testSimpleStmt",
                "testExprStmt",
                "testDelStmt",
                "testPassStmt",
                "testBreakStmt",
                "testContinueStmt",
                "test_break_continue_loop",
                "testReturn",
                "testYield",
                "testRaise",
                "testImport",
                "testGlobal",
                "testNonlocal",
                "testAssert",
                "testIf",
                "testWhile",
                "testFor",
                "testTry",
                "testSuite",
                "testTest",
                "testComparison",
                "testBinaryMaskOps",
                "testShiftOps",
                "testAdditiveOps",
                "testMultiplicativeOps",
                "testUnaryOps",
                "testSelectors",
                "testAtoms",
                "testClassdef",
                "testDictcomps",
                "testListcomps",
                "testGenexps",
                "testComprehensionSpecials",
                "test_with_statement",
                "testIfElseExpr",
                "testStringLiterals",
                "f1",
                "f2",
                "f3",
                "a1",
                "a2",
                "v0",
                "v1",
                "v2",
                "d01",
                "d11",
                "d21",
                "d02",
                "d12",
                "d22",
                "d01v",
                "d11v",
                "d21v",
                "d02v",
                "d12v",
                "d22v",
                "pos0key1",
                "pos2key2",
                "pos2key2dict",
                "f",
                "f",
                "f",
                "f",
                "f",
                "f",
                "f",
                "f",
                "f",
                "null",
                "f",
                "f",
                "f",
                "f",
                "f",
                "foo",
                "test_inner",
                "g1",
                "g2",
                "f",
                "class_decorator",
                "test_in_func",
                "test_nested_front",
                "_checkeval",
                "__init__",
                "__len__",
                "__getitem__",
                "meth1",
                "meth2",
                "meth3",
                "__enter__",
                "__exit__"
            ],
            "classes": {
                "TokenTests": {
                    "methods": [
                        "testBackslash",
                        "testPlainIntegers",
                        "testLongIntegers",
                        "testUnderscoresInNumbers",
                        "testFloats",
                        "testEllipsis"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "unittest.TestCase"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "GrammarTests": {
                    "methods": [
                        "testEvalInput",
                        "testFuncdef",
                        "testLambdef",
                        "testSimpleStmt",
                        "testExprStmt",
                        "testDelStmt",
                        "testPassStmt",
                        "testBreakStmt",
                        "testContinueStmt",
                        "test_break_continue_loop",
                        "testReturn",
                        "testYield",
                        "testRaise",
                        "testImport",
                        "testGlobal",
                        "testNonlocal",
                        "testAssert",
                        "testIf",
                        "testWhile",
                        "testFor",
                        "testTry",
                        "testSuite",
                        "testTest",
                        "testComparison",
                        "testBinaryMaskOps",
                        "testShiftOps",
                        "testAdditiveOps",
                        "testMultiplicativeOps",
                        "testUnaryOps",
                        "testSelectors",
                        "testAtoms",
                        "testClassdef",
                        "testDictcomps",
                        "testListcomps",
                        "testGenexps",
                        "testComprehensionSpecials",
                        "test_with_statement",
                        "testIfElseExpr",
                        "testStringLiterals"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "unittest.TestCase"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "Squares": {
                    "methods": [
                        "__init__",
                        "__len__",
                        "__getitem__"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Prototype",
                    "agent_type": "Utility"
                },
                "B": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Prototype",
                    "agent_type": "Utility"
                },
                "B2": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Prototype",
                    "agent_type": "Utility"
                },
                "C1": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "B"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "C2": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "B"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "D": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "C1",
                        "C2",
                        "B"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "C": {
                    "methods": [
                        "meth1",
                        "meth2",
                        "meth3"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Prototype",
                    "agent_type": "Utility"
                },
                "G": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Prototype",
                    "agent_type": "Utility"
                },
                "manager": {
                    "methods": [
                        "__enter__",
                        "__exit__"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "object"
                    ],
                    "maturity": "Kiddie Script",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 154
        },
        "vendor\\tree-sitter-grammars\\tree-sitter-python\\bindings\\rust\\lib.rs": {
            "language": ".rs",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\tree-sitter-grammars\\tree-sitter-python\\bindings\\node\\index.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\tree-sitter-grammars\\tree-sitter-python\\bindings\\rust\\build.rs": {
            "language": ".rs",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\tree-sitter-grammars\\tree-sitter-python\\grammar.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\tree-sitter-grammars\\tree-sitter-javascript\\examples\\text-editor-component.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\tabs.py": {
            "language": ".py",
            "functions": [
                "set_password",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "vendor\\tree-sitter-grammars\\tree-sitter-javascript\\examples\\jquery.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\tree-sitter-grammars\\tree-sitter-python\\test\\highlight\\keywords.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\tree-sitter-grammars\\tree-sitter-python\\test\\highlight\\parameters.py": {
            "language": ".py",
            "functions": [
                "g"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "vendor\\tree-sitter-grammars\\tree-sitter-python\\test\\highlight\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\tree-sitter-grammars\\tree-sitter-python\\test\\tags\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\tree-sitter-grammars\\tree-sitter-rust\\setup.py": {
            "language": ".py",
            "functions": [
                "run",
                "get_tag"
            ],
            "classes": {
                "Build": {
                    "methods": [
                        "run"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "build"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "ActionAgent"
                },
                "BdistWheel": {
                    "methods": [
                        "get_tag"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "bdist_wheel"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 4
        },
        "vendor\\tree-sitter-grammars\\tree-sitter-rust\\bindings\\python\\tests\\test_binding.py": {
            "language": ".py",
            "functions": [
                "test_can_load_grammar"
            ],
            "classes": {
                "TestLanguage": {
                    "methods": [
                        "test_can_load_grammar"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "TestCase"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 2
        },
        "vendor\\tree-sitter-grammars\\tree-sitter-rust\\bindings\\python\\tree_sitter_rust\\__init__.py": {
            "language": ".py",
            "functions": [
                "_get_query",
                "__getattr__",
                "__dir__"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "vendor\\tree-sitter-grammars\\tree-sitter-rust\\bindings\\rust\\build.rs": {
            "language": ".rs",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\tree-sitter-grammars\\tree-sitter-rust\\bindings\\node\\index.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\tree-sitter-grammars\\tree-sitter-rust\\examples\\ast.rs": {
            "language": ".rs",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\tree-sitter-grammars\\tree-sitter-rust\\bindings\\rust\\lib.rs": {
            "language": ".rs",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\tree-sitter-grammars\\tree-sitter-rust\\examples\\weird-exprs.rs": {
            "language": ".rs",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "vendor\\tree-sitter-grammars\\tree-sitter-rust\\grammar.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        }
    }
}