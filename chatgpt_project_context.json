{
    "project_root": "D:\\Dream.os",
    "num_files_analyzed": 331,
    "analysis_details": {
        "apply_proposals.py": {
            "language": ".py",
            "functions": [
                "get_existing_rule_ids",
                "parse_proposal",
                "update_proposal_block_status",
                "append_rule_to_rulebook"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "chunk_tasks.py": {
            "language": ".py",
            "functions": [
                "dedupe_and_chunk"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "chatgpt_interface.py": {
            "language": ".py",
            "functions": [
                "refine"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "conftest.py": {
            "language": ".py",
            "functions": [
                "pytest_collection_modifyitems",
                "pytest_ignore_collect",
                "__init__",
                "append",
                "at",
                "__init__",
                "setStacked",
                "isStacked",
                "append",
                "attachAxis",
                "__init__",
                "setTitle",
                "addAxis",
                "removeAllSeries",
                "addSeries",
                "series",
                "legend",
                "__init__",
                "setRenderHint",
                "clear",
                "append",
                "setRange",
                "connect",
                "setVisible",
                "setAlignment"
            ],
            "classes": {
                "DummyBarSet": {
                    "methods": [
                        "__init__",
                        "append",
                        "at"
                    ],
                    "docstring": null,
                    "base_classes": []
                },
                "DummySeries": {
                    "methods": [
                        "__init__",
                        "setStacked",
                        "isStacked",
                        "append",
                        "attachAxis"
                    ],
                    "docstring": null,
                    "base_classes": []
                },
                "DummyChart": {
                    "methods": [
                        "__init__",
                        "setTitle",
                        "addAxis",
                        "removeAllSeries",
                        "addSeries",
                        "series",
                        "legend"
                    ],
                    "docstring": null,
                    "base_classes": []
                },
                "DummyChartView": {
                    "methods": [
                        "__init__",
                        "setRenderHint"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "QWidget"
                    ]
                },
                "DummyAxis": {
                    "methods": [
                        "clear",
                        "append",
                        "setRange"
                    ],
                    "docstring": null,
                    "base_classes": []
                },
                "Hover": {
                    "methods": [
                        "connect"
                    ],
                    "docstring": null,
                    "base_classes": []
                },
                "Legend": {
                    "methods": [
                        "setVisible",
                        "setAlignment"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 48
        },
        "evaluator.py": {
            "language": ".py",
            "functions": [
                "evaluate"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "move_uncomplete_tasks.py": {
            "language": ".py",
            "functions": [
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "cursor_interface.py": {
            "language": ".py",
            "functions": [
                "send_prompt",
                "fetch_reply"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "cli.py": {
            "language": ".py",
            "functions": [
                "configure_logging",
                "run",
                "log_stats",
                "validate_config",
                "version"
            ],
            "classes": {
                "ConfigError": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "Exception"
                    ]
                }
            },
            "routes": [],
            "complexity": 5
        },
        "test_scraper.py": {
            "language": ".py",
            "functions": [
                "run_scraper_test"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "governance_scraper.py": {
            "language": ".py",
            "functions": [
                "load_recent_governance_events",
                "load_recent_reflections",
                "load_proposals",
                "get_rulebook_summary",
                "generate_governance_data"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5
        },
        "streamlit.py": {
            "language": ".py",
            "functions": [
                "set_page_config",
                "title",
                "caption",
                "empty",
                "subheader",
                "dataframe",
                "info",
                "error",
                "__init__",
                "container",
                "__enter__",
                "__exit__"
            ],
            "classes": {
                "_Container": {
                    "methods": [
                        "__init__",
                        "container",
                        "__enter__",
                        "__exit__"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 16
        },
        "validate_onboarding_prompts.py": {
            "language": ".py",
            "functions": [
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "_internal_test_loop.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "chat_mate_config.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "get"
            ],
            "classes": {
                "Config": {
                    "methods": [
                        "__init__",
                        "get"
                    ],
                    "docstring": "Stub Config for chat_cycle_controller dependencies",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 4
        },
        "monitor_analyzer_agent.py": {
            "language": ".py",
            "functions": [
                "load_rules_from_rulebook",
                "load_tasks",
                "is_halt_unnecessary",
                "log_unnecessary_halt",
                "broadcast_alert",
                "request_rulebook_update",
                "__init__",
                "process_status_file"
            ],
            "classes": {
                "HaltStatusHandler": {
                    "methods": [
                        "__init__",
                        "process_status_file"
                    ],
                    "docstring": "Handler for processing agent status files, especially 'halted' status.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 10
        },
        "apps\\examples\\onboarding_message_injector.py": {
            "language": ".py",
            "functions": [
                "inject_initial_onboarding_message"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "agents\\recovery\\stall_agent.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "perform_stall_check",
                "_is_system_busy",
                "check_for_stall",
                "log_stall_event",
                "dispatch_recovery_task",
                "attempt_recovery",
                "run",
                "_on_agent_stalled",
                "_on_agent_heartbeat_lost",
                "_on_any_system_event",
                "_escalation_event",
                "read_tasks",
                "produce_project_context",
                "log_event"
            ],
            "classes": {
                "StallRecoveryAgent": {
                    "methods": [
                        "__init__",
                        "perform_stall_check",
                        "_is_system_busy",
                        "check_for_stall",
                        "log_stall_event",
                        "dispatch_recovery_task",
                        "attempt_recovery",
                        "run",
                        "_on_agent_stalled",
                        "_on_agent_heartbeat_lost",
                        "_on_any_system_event",
                        "_escalation_event"
                    ],
                    "docstring": "Detects system stalls by monitoring logs and dispatches recovery tasks via AgentBus.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 27
        },
        "apps\\browser\\main.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "navigate_to_url"
            ],
            "classes": {
                "BrowserMainWindow": {
                    "methods": [
                        "__init__",
                        "navigate_to_url"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "QMainWindow"
                    ]
                }
            },
            "routes": [],
            "complexity": 4
        },
        "apps\\examples\\reflection_agent.py": {
            "language": ".py",
            "functions": [
                "load_rules_from_rulebook",
                "generate_reflection",
                "save_reflection",
                "submit_proposal",
                "start_monitoring",
                "__init__",
                "on_created"
            ],
            "classes": {
                "AlertHandler": {
                    "methods": [
                        "__init__",
                        "on_created"
                    ],
                    "docstring": "Handles new alert files in the inbox directory.",
                    "base_classes": [
                        "FileSystemEventHandler"
                    ]
                }
            },
            "routes": [],
            "complexity": 9
        },
        "apps\\examples\\stubs\\agent_1_stub.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_handle_plan"
            ],
            "classes": {
                "Agent1Stub": {
                    "methods": [
                        "__init__",
                        "_handle_plan"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 4
        },
        "dreamforge\\main.py": {
            "language": ".py",
            "functions": [
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "dreamforge\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "dreamforge\\services\\discord_service.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_register_events",
                "_register_commands",
                "load_config",
                "save_config",
                "run",
                "stop",
                "send_message",
                "send_file",
                "send_template",
                "get_status",
                "set_log_callback",
                "_log",
                "map_prompt_to_channel",
                "unmap_prompt_channel",
                "get_channel_for_prompt",
                "send_dreamscape_episode",
                "send_prompt_response",
                "update_status",
                "get_prompt_status",
                "run_bot"
            ],
            "classes": {
                "UnifiedDiscordService": {
                    "methods": [
                        "__init__",
                        "_register_events",
                        "_register_commands",
                        "load_config",
                        "save_config",
                        "run",
                        "stop",
                        "send_message",
                        "send_file",
                        "send_template",
                        "get_status",
                        "set_log_callback",
                        "_log",
                        "map_prompt_to_channel",
                        "unmap_prompt_channel",
                        "get_channel_for_prompt",
                        "send_dreamscape_episode",
                        "send_prompt_response",
                        "update_status",
                        "get_prompt_status"
                    ],
                    "docstring": "Centralized Discord integration service that handles:\n- Bot lifecycle management\n- Message/file dispatch\n- Template rendering\n- Channel mapping\n- Status monitoring\n- Event notifications\n- Dreamscape episode management\n- Prompt response handling",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 41
        },
        "dreamforge\\services\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "dreamforge\\tests\\conftest.py": {
            "language": ".py",
            "functions": [
                "mock_log_event",
                "mock_file_ops",
                "mock_web_driver",
                "mock_wait",
                "assert_event_structure",
                "test_data_dir",
                "snapshot_dir"
            ],
            "classes": {},
            "routes": [],
            "complexity": 7
        },
        "dreamforge\\tests\\agents\\test_calendar_agent.py": {
            "language": ".py",
            "functions": [
                "calendar_agent",
                "original_tasks",
                "assert_list_of_dicts_equal",
                "test_parse_schedule_partial",
                "test_parse_schedule_full_success",
                "test_parse_schedule_invalid_item",
                "test_parse_schedule_invalid_json",
                "test_parse_schedule_non_json",
                "test_parse_schedule_wrong_type",
                "test_parse_schedule_empty_response",
                "test_parse_schedule_empty_input_tasks"
            ],
            "classes": {},
            "routes": [],
            "complexity": 11
        },
        "dreamforge\\tests\\agents\\test_chatgpt_commander.py": {
            "language": ".py",
            "functions": [
                "mock_agent_bus",
                "commander",
                "test_send_generate_tests_task",
                "test_send_code_fix_task",
                "test_send_analysis_task",
                "test_wait_for_task_completion",
                "test_wait_for_task_timeout",
                "test_get_task_status",
                "test_cleanup_old_tasks"
            ],
            "classes": {},
            "routes": [],
            "complexity": 9
        },
        "dreamforge\\tests\\agents\\test_cursor_dispatcher.py": {
            "language": ".py",
            "functions": [
                "mock_agent_bus",
                "cursor_dispatcher",
                "test_execute_cursor_task_test_generation",
                "test_execute_cursor_task_code_fix",
                "test_execute_cursor_task_file_analysis",
                "test_dispatcher_loop_integration",
                "test_error_handling"
            ],
            "classes": {},
            "routes": [],
            "complexity": 7
        },
        "dreamforge\\tests\\agents\\test_planner_agent.py": {
            "language": ".py",
            "functions": [
                "planner_agent",
                "test_parse_valid_json_list",
                "test_parse_valid_json_in_markdown",
                "test_parse_valid_json_dict_wrapper",
                "test_parse_invalid_json",
                "test_parse_non_json_text",
                "test_parse_json_wrong_type",
                "test_parse_empty_string",
                "test_parse_none_input",
                "test_plan_from_goal_mocked_llm",
                "test_plan_from_goal_template_render_fails",
                "mock_stage_prompt",
                "mock_stage_prompt_should_not_run"
            ],
            "classes": {},
            "routes": [],
            "complexity": 13
        },
        "dreamforge\\tests\\agents\\test_workflow_agent.py": {
            "language": ".py",
            "functions": [
                "mock_agent_bus",
                "mock_feedback_engine",
                "mock_prompt_staging",
                "workflow_agent",
                "test_plan_task_capable_agent_selection",
                "test_plan_task_no_capable_agents",
                "test_plan_task_load_balancing",
                "test_assign_agent_success",
                "test_assign_agent_fallback",
                "test_assign_agent_all_fail",
                "test_check_status_metrics_format",
                "test_check_status_unknown_task",
                "test_route_feedback_success_case",
                "test_route_feedback_failure_and_retry",
                "test_route_feedback_prompt_update",
                "test_find_capable_agents",
                "test_select_optimal_agent",
                "test_full_task_lifecycle"
            ],
            "classes": {},
            "routes": [],
            "complexity": 18
        },
        "dreamforge\\tests\\coordination\\test_agent_bus.py": {
            "language": ".py",
            "functions": [
                "clean_agent_bus",
                "agent_a",
                "agent_b",
                "test_singleton_instance",
                "test_register_agent_success",
                "test_register_agent_no_receive_method",
                "test_register_agent_overwrite",
                "test_unregister_agent_success",
                "test_unregister_agent_not_found",
                "test_send_message_success",
                "test_send_message_recipient_not_found",
                "test_send_message_recipient_error",
                "test_list_agents",
                "test_get_agent",
                "__init__",
                "receive_message",
                "__str__"
            ],
            "classes": {
                "MockAgent": {
                    "methods": [
                        "__init__",
                        "receive_message",
                        "__str__"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 20
        },
        "dreamforge\\tests\\core\\test_feedback_engine.py": {
            "language": ".py",
            "functions": [
                "feedback_engine",
                "test_process_feedback_success",
                "test_process_feedback_failure_with_retry",
                "test_max_retries_exceeded",
                "test_process_multiple_feedback_entries",
                "test_get_nonexistent_feedback",
                "test_clear_feedback",
                "test_invalid_feedback_data",
                "test_feedback_timestamp_tracking"
            ],
            "classes": {},
            "routes": [],
            "complexity": 9
        },
        "dreamforge\\tests\\core\\test_governance_memory_engine.py": {
            "language": ".py",
            "functions": [
                "mock_file_ops",
                "test_log_event_success",
                "test_log_event_makedirs_error",
                "test_log_event_write_error",
                "test_log_event_invalid_params",
                "test_get_events_empty_file",
                "test_get_events_with_filter",
                "test_get_events_with_limit",
                "test_get_events_invalid_json",
                "test_get_events_file_not_found",
                "test_source_id_constant",
                "test_governance_log_file_path"
            ],
            "classes": {},
            "routes": [],
            "complexity": 12
        },
        "dreamforge\\tests\\core\\test_llm_bridge.py": {
            "language": ".py",
            "functions": [
                "mock_log_event",
                "test_call_llm_task_list_response",
                "test_call_llm_default_response",
                "test_call_llm_with_custom_model",
                "test_call_llm_with_temperature",
                "test_call_llm_invalid_prompts",
                "test_call_llm_example_prompts",
                "test_call_llm_error_handling",
                "test_source_id_constant"
            ],
            "classes": {},
            "routes": [],
            "complexity": 9
        },
        "dreamforge\\tests\\core\\test_prompt_staging_service.py": {
            "language": ".py",
            "functions": [
                "mock_log_event",
                "mock_call_llm_success",
                "mock_call_llm_failure",
                "setup_mocks",
                "test_stage_and_execute_success",
                "test_stage_and_execute_llm_failure",
                "test_stage_and_execute_no_config",
                "test_stage_and_execute_invalid_inputs",
                "test_stage_and_execute_invalid_config",
                "test_stage_and_execute_logging_failure",
                "test_stage_and_execute_long_prompt",
                "test_stage_and_execute_retry_logic",
                "test_stage_and_execute_outbox_error",
                "test_stage_and_execute_memory_pressure",
                "test_stage_and_execute_transaction_rollback",
                "test_stage_and_execute_cleanup_on_success",
                "test_stage_and_execute_rate_limiting",
                "test_stage_and_execute_partial_failure_recovery",
                "test_stage_and_execute_prompt_validation",
                "test_stage_and_execute_file_permissions",
                "test_stage_and_execute_disk_full",
                "test_stage_and_execute_integration_llm",
                "test_stage_and_execute_malformed_response",
                "test_stage_and_execute_unicode_handling",
                "mock_log_event_failure",
                "mock_llm_with_retry",
                "mock_write_failure",
                "mock_stage_failure",
                "mock_cleanup",
                "mock_partial_success",
                "mock_disk_full_write",
                "mock_malformed_response"
            ],
            "classes": {},
            "routes": [],
            "complexity": 32
        },
        "dreamforge\\tests\\core\\test_template_engine.py": {
            "language": ".py",
            "functions": [
                "mock_log_event",
                "setup_mocks",
                "test_render_template_success",
                "test_render_template_not_found",
                "test_render_template_render_error",
                "test_render_template_complex_context",
                "test_render_template_io_error",
                "test_gme_ready_fallback",
                "test_environment_configuration",
                "test_render_empty_context",
                "test_main_execution_with_sample_data",
                "test_main_execution_fallback_context",
                "test_main_execution_json_error"
            ],
            "classes": {},
            "routes": [],
            "complexity": 13
        },
        "dreamforge\\tests\\services\\test_discord_service.py": {
            "language": ".py",
            "functions": [
                "mock_bot",
                "mock_channel",
                "service",
                "test_init_with_config",
                "test_run_bot_already_running",
                "test_run_bot_no_token",
                "test_send_message_not_running",
                "test_send_file_not_found",
                "test_send_template",
                "test_get_status",
                "test_logging_with_callback",
                "test_prompt_channel_mapping",
                "test_status_management",
                "test_prompt_channel_mapping_extended",
                "callback"
            ],
            "classes": {},
            "routes": [],
            "complexity": 15
        },
        "dreamforge\\utils\\common_utils.py": {
            "language": ".py",
            "functions": [
                "parse_cursor_result_file",
                "log_event"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "dreamforge\\utils\\image_utils.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "dreamforge\\utils\\text_utils.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "dream_mode\\config.py": {
            "language": ".py",
            "functions": [
                "load_config"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "dream_mode\\DreamModeSleep.py": {
            "language": ".py",
            "functions": [
                "run_chatgpt_web_agent",
                "run_cursor_dispatcher",
                "run_task_feedback_router"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "dream_mode\\cursor_fleet_launcher.py": {
            "language": ".py",
            "functions": [
                "launch_cursor_instance",
                "move_window",
                "get_cursor_windows",
                "assign_windows_to_monitors",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5
        },
        "dream_mode\\swarm_controller.py": {
            "language": ".py",
            "functions": [
                "_resolve_config_args",
                "_resolve_config",
                "_resolve_stats_interval",
                "__init__",
                "start",
                "_worker_loop",
                "_route_loop",
                "_handle_result",
                "shutdown",
                "_start_stats_autologger",
                "_stats_loop"
            ],
            "classes": {
                "SwarmController": {
                    "methods": [
                        "_resolve_config_args",
                        "_resolve_config",
                        "_resolve_stats_interval",
                        "__init__",
                        "start",
                        "_worker_loop",
                        "_route_loop",
                        "_handle_result",
                        "shutdown",
                        "_start_stats_autologger",
                        "_stats_loop"
                    ],
                    "docstring": "Controls a fleet of Cursor agents using LocalBlobChannel for task/result exchange.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 22
        },
        "dream_mode\\thea_feedback_ingestor.py": {
            "language": ".py",
            "functions": [
                "load_recent_feedback",
                "inject_feedback_to_thea"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "dream_mode\\virtual_desktop_runner.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "launch_cursor_headless",
                "inject_keystrokes",
                "teardown"
            ],
            "classes": {
                "VirtualDesktopController": {
                    "methods": [
                        "__init__",
                        "launch_cursor_headless",
                        "inject_keystrokes",
                        "teardown"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 8
        },
        "dream_mode\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "dream_mode\\agents\\chatgpt_web_agent.py": {
            "language": ".py",
            "functions": [
                "run_loop",
                "__init__",
                "_load_pending_responses",
                "_save_pending_responses",
                "_initialize_browser",
                "_is_result_injected",
                "_mark_result_injected",
                "inject_response",
                "_get_and_cache_results",
                "run_cycle",
                "close"
            ],
            "classes": {
                "ChatGPTWebAgent": {
                    "methods": [
                        "__init__",
                        "_load_pending_responses",
                        "_save_pending_responses",
                        "_initialize_browser",
                        "_is_result_injected",
                        "_mark_result_injected",
                        "inject_response",
                        "_get_and_cache_results",
                        "run_cycle",
                        "close"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 21
        },
        "dream_mode\\agents\\cursor_dispatcher.py": {
            "language": ".py",
            "functions": [
                "render_task_prompt",
                "load_queue",
                "save_queue",
                "dispatch_tasks",
                "run_loop"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5
        },
        "dream_mode\\agents\\cursor_worker.py": {
            "language": ".py",
            "functions": [
                "run",
                "click_button",
                "wait_for_idle",
                "process_task_ui"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "dream_mode\\agents\\supervisor_agent.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "load_directives",
                "dispatch_tasks",
                "gather_results",
                "save_results",
                "run_loop"
            ],
            "classes": {
                "SupervisorAgent": {
                    "methods": [
                        "__init__",
                        "load_directives",
                        "dispatch_tasks",
                        "gather_results",
                        "save_results",
                        "run_loop"
                    ],
                    "docstring": "Orchestrates tasks between ChatGPT WebAgents and Cursor workers.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 12
        },
        "dream_mode\\agents\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "dream_mode\\agents\\task_feedback_router.py": {
            "language": ".py",
            "functions": [
                "find_task_file",
                "route_feedback",
                "run_loop"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "dream_mode\\tests\\test_azure_blob_channel.py": {
            "language": ".py",
            "functions": [
                "test_push_and_pull_task",
                "test_push_and_pull_result"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "dream_mode\\task_nexus\\task_nexus.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load",
                "_save",
                "_load_agents",
                "_save_agents",
                "record_heartbeat",
                "get_all_registered_agents",
                "get_next_task",
                "add_task",
                "update_task_status",
                "get_all_tasks",
                "stats",
                "reclaim_stale_tasks"
            ],
            "classes": {
                "TaskNexus": {
                    "methods": [
                        "__init__",
                        "_load",
                        "_save",
                        "_load_agents",
                        "_save_agents",
                        "record_heartbeat",
                        "get_all_registered_agents",
                        "get_next_task",
                        "add_task",
                        "update_task_status",
                        "get_all_tasks",
                        "stats",
                        "reclaim_stale_tasks"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 26
        },
        "dream_mode\\utils\\browser.py": {
            "language": ".py",
            "functions": [
                "launch_browser",
                "navigate_to_page",
                "wait_for_login",
                "close_browser"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "dream_mode\\utils\\channel_loader.py": {
            "language": ".py",
            "functions": [
                "get_blob_channel"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "dream_mode\\utils\\html_parser.py": {
            "language": ".py",
            "functions": [
                "is_still_generating",
                "extract_latest_reply"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "dream_mode\\utils\\prompt_renderer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "render"
            ],
            "classes": {
                "PromptRenderer": {
                    "methods": [
                        "__init__",
                        "render"
                    ],
                    "docstring": "Loads and renders Jinja2 templates from a specified directory.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 4
        },
        "dream_mode\\utils\\cursor_session_manager.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "on_created",
                "start"
            ],
            "classes": {
                "CursorSessionManager": {
                    "methods": [
                        "__init__",
                        "on_created",
                        "start"
                    ],
                    "docstring": "Watches a directory for Cursor task files and launches Cursor IDE sessions to execute them.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 6
        },
        "dream_mode\\utils\\task_parser.py": {
            "language": ".py",
            "functions": [
                "_extract_json_block",
                "_extract_regex_fallback",
                "extract_task_metadata"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "dream_mode\\utils\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "dream_os\\adapters\\base_adapter.py": {
            "language": ".py",
            "functions": [
                "execute",
                "register",
                "get"
            ],
            "classes": {
                "Adapter": {
                    "methods": [
                        "execute"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "ABC"
                    ]
                },
                "AdapterRegistry": {
                    "methods": [
                        "register",
                        "get"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 6
        },
        "dream_os\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "dream_os\\adapters\\cursor_rpc_adapter.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "execute"
            ],
            "classes": {
                "CursorRPCAdapter": {
                    "methods": [
                        "__init__",
                        "execute"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "Adapter"
                    ]
                }
            },
            "routes": [],
            "complexity": 4
        },
        "dream_os\\adapters\\openai_adapter.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "execute"
            ],
            "classes": {
                "OpenAIAdapter": {
                    "methods": [
                        "__init__",
                        "execute"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "Adapter"
                    ]
                }
            },
            "routes": [],
            "complexity": 4
        },
        "dream_os\\adapters\\discord_adapter.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "execute"
            ],
            "classes": {
                "DiscordAdapter": {
                    "methods": [
                        "__init__",
                        "execute"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "Adapter"
                    ]
                }
            },
            "routes": [],
            "complexity": 4
        },
        "dream_os\\core\\crew_agent_base.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "can_handle",
                "execute"
            ],
            "classes": {
                "CrewAgent": {
                    "methods": [
                        "__init__",
                        "can_handle",
                        "execute"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 6
        },
        "dream_os\\cli\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "dream_os\\core\\crew_roles.py": {
            "language": ".py",
            "functions": [
                "get_role"
            ],
            "classes": {
                "CrewRole": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 1
        },
        "dream_os\\services\\prompt_router_service.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "run",
                "_select_agent"
            ],
            "classes": {
                "PromptRouterService": {
                    "methods": [
                        "__init__",
                        "run",
                        "_select_agent"
                    ],
                    "docstring": "Continuously pulls tasks, routes to best-fit agent, logs outcome.",
                    "base_classes": [
                        "threading.Thread"
                    ]
                }
            },
            "routes": [],
            "complexity": 6
        },
        "dream_os\\services\\task_nexus.py": {
            "language": ".py",
            "functions": [
                "_get_nexus_file",
                "_load",
                "_save",
                "add_task",
                "pop_task",
                "log_result"
            ],
            "classes": {},
            "routes": [],
            "complexity": 6
        },
        "dream_os\\services\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "dream_os\\ui\\main_window.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_make_placeholder",
                "closeEvent"
            ],
            "classes": {
                "MainWindow": {
                    "methods": [
                        "__init__",
                        "_make_placeholder",
                        "closeEvent"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "QMainWindow"
                    ]
                }
            },
            "routes": [],
            "complexity": 6
        },
        "dream_os\\ui\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "htmlcov\\coverage_html_cb_497bf287.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "integrations\\agent_services\\cursor_shadow_controller.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "send_prompt_to_cursor",
                "monitor_output",
                "run_prompt_cycle"
            ],
            "classes": {
                "CursorShadowController": {
                    "methods": [
                        "__init__",
                        "send_prompt_to_cursor",
                        "monitor_output",
                        "run_prompt_cycle"
                    ],
                    "docstring": "Shadow controller that allows background execution of prompts in Cursor\nwithout requiring visible GUI interaction, using a file-based inbox/outbox.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 8
        },
        "integrations\\cursor\\cursor_prompt_controller.py": {
            "language": ".py",
            "functions": [
                "_activate_cursor_window",
                "_focus_chat_input",
                "send_prompt_to_chat"
            ],
            "classes": {
                "CursorPromptController": {
                    "methods": [
                        "_activate_cursor_window",
                        "_focus_chat_input",
                        "send_prompt_to_chat"
                    ],
                    "docstring": "Uses pyautogui to send prompts to the Cursor chat interface.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 6
        },
        "integrations\\cursor\\window_controller.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_setup_os_specific_handlers",
                "detect_all_instances",
                "activate_window",
                "get_window_by_id",
                "print_window_map",
                "enum_callback",
                "get_window_info"
            ],
            "classes": {
                "WindowWrapper": {
                    "methods": [],
                    "docstring": "Cross-platform window handle wrapper.",
                    "base_classes": []
                },
                "CursorWindowController": {
                    "methods": [
                        "__init__",
                        "_setup_os_specific_handlers",
                        "detect_all_instances",
                        "activate_window",
                        "get_window_by_id",
                        "print_window_map"
                    ],
                    "docstring": "Controls multiple Cursor window instances.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 14
        },
        "scripts\\auto_claim_tasks_agent_002.py": {
            "language": ".py",
            "functions": [
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "scripts\\agent_auto_storyteller.py": {
            "language": ".py",
            "functions": [
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "scripts\\claim_one_task_agent_002.py": {
            "language": ".py",
            "functions": [
                "claim_one_task"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "scripts\\deduplicate_tasks.py": {
            "language": ".py",
            "functions": [
                "load_tasks",
                "dedupe",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "scripts\\find_duplicate_tasks.py": {
            "language": ".py",
            "functions": [
                "parse_json_file",
                "parse_md_file",
                "find_task_files",
                "normalize",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5
        },
        "scripts\\convert_task_lists_to_json.py": {
            "language": ".py",
            "functions": [
                "parse_markdown_tasks",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "scripts\\normalize_imports.py": {
            "language": ".py",
            "functions": [
                "normalize_file",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "scripts\\organize_task_pool_v1.py": {
            "language": ".py",
            "functions": [
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "scripts\\refactor_imports.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "sky_viewer\\sky_viewer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "send_fullscreen_toggle",
                "toggle_fullscreen",
                "open_splash"
            ],
            "classes": {
                "SkyViewer": {
                    "methods": [
                        "__init__",
                        "send_fullscreen_toggle",
                        "toggle_fullscreen",
                        "open_splash"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "QMainWindow"
                    ]
                }
            },
            "routes": [],
            "complexity": 8
        },
        "src\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\dreamos\\agent_bus.py": {
            "language": ".py",
            "functions": [],
            "classes": {
                "AgentStatus": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "Enum"
                    ]
                }
            },
            "routes": [],
            "complexity": 0
        },
        "src\\dreamos\\config.py": {
            "language": ".py",
            "functions": [
                "setup_logging",
                "resolve_log_dir",
                "resolve_relative_path",
                "resolve_target_files",
                "resolve_output_path",
                "load",
                "_ensure_dirs_exist"
            ],
            "classes": {
                "LoggingConfig": {
                    "methods": [
                        "resolve_log_dir"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "BaseModel"
                    ]
                },
                "PathsConfig": {
                    "methods": [
                        "resolve_relative_path"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "BaseModel"
                    ]
                },
                "TaskDetailsConfig": {
                    "methods": [
                        "resolve_target_files",
                        "resolve_output_path"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "BaseModel"
                    ]
                },
                "AppConfig": {
                    "methods": [
                        "load",
                        "_ensure_dirs_exist"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "BaseModel"
                    ]
                },
                "ConfigError": {
                    "methods": [],
                    "docstring": "Exception raised for errors in the configuration process.",
                    "base_classes": [
                        "Exception"
                    ]
                },
                "Config": {
                    "methods": [],
                    "docstring": "Central configuration for Dream.OS Auto-Fix Loop",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 13
        },
        "src\\dreamos\\FileManager.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "save",
                "load"
            ],
            "classes": {
                "FileManager": {
                    "methods": [
                        "__init__",
                        "save",
                        "load"
                    ],
                    "docstring": "Stub FileManager to satisfy imports. Implement actual file operations as needed.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 6
        },
        "src\\dreamos\\orchestrator.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\dreamos\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\dreamos\\agents\\utils.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\dreamos\\agents\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\dreamos\\agents\\agents\\task_executor_agent.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load_tasks",
                "_check_dependencies",
                "handle_response",
                "run_cycle"
            ],
            "classes": {
                "TaskStatus": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": []
                },
                "TaskExecutorAgent": {
                    "methods": [
                        "__init__",
                        "_load_tasks",
                        "_check_dependencies",
                        "handle_response",
                        "run_cycle"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 10
        },
        "src\\dreamos\\agents\\agents\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\dreamos\\chat_engine\\chat_cycle_controller.py": {
            "language": ".py",
            "functions": [
                "sanitize_filename",
                "__init__",
                "_default_output_callback",
                "append_output",
                "start",
                "process_chat",
                "run_single_chat",
                "_save_prompt_response",
                "_save_run_summary",
                "shutdown",
                "__init__",
                "get"
            ],
            "classes": {
                "ChatCycleController": {
                    "methods": [
                        "__init__",
                        "_default_output_callback",
                        "append_output",
                        "start",
                        "process_chat",
                        "run_single_chat",
                        "_save_prompt_response",
                        "_save_run_summary",
                        "shutdown"
                    ],
                    "docstring": "Master orchestrator for chat scraping, prompt cycles,\nmemory updates, and Discord dispatching.",
                    "base_classes": []
                },
                "Config": {
                    "methods": [
                        "__init__",
                        "get"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 23
        },
        "src\\dreamos\\agents\\agents\\tool_executor_agent.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "execute_plan"
            ],
            "classes": {
                "ToolExecutionAgent": {
                    "methods": [
                        "__init__",
                        "execute_plan"
                    ],
                    "docstring": "Executes a plan (list of tool call steps) sequentially.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 4
        },
        "src\\dreamos\\automation\\run_loop.py": {
            "language": ".py",
            "functions": [
                "main",
                "chatgpt_loop"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "src\\dreamos\\chat_engine\\chat_scraper_service.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "get_all_chats",
                "get_filtered_chats",
                "validate_login",
                "manual_login_flow"
            ],
            "classes": {
                "ChatScraperService": {
                    "methods": [
                        "__init__",
                        "get_all_chats",
                        "get_filtered_chats",
                        "validate_login",
                        "manual_login_flow"
                    ],
                    "docstring": "ChatScraperService retrieves available chat titles and links from the chat UI.\nIt handles exclusions and filtering for downstream execution cycles.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 10
        },
        "src\\dreamos\\chat_engine\\discord_dispatcher.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_setup_events",
                "send_message",
                "dispatch_memory_update",
                "dispatch_dreamscape_episode",
                "dispatch_feedback_loop",
                "run_bot",
                "shutdown"
            ],
            "classes": {
                "DiscordDispatcher": {
                    "methods": [
                        "__init__",
                        "_setup_events",
                        "send_message",
                        "dispatch_memory_update",
                        "dispatch_dreamscape_episode",
                        "dispatch_feedback_loop",
                        "run_bot",
                        "shutdown"
                    ],
                    "docstring": "DiscordDispatcher - Manages communication to a Discord server.\nSends updates on system events, memory updates, and AI output.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 16
        },
        "src\\dreamos\\chat_engine\\driver_manager.py": {
            "language": ".py",
            "functions": [
                "setup_logger",
                "example_main",
                "get_instance",
                "__init__",
                "__enter__",
                "__exit__",
                "_get_cached_driver_path",
                "_download_driver_if_needed",
                "_is_session_expired",
                "_renew_driver_session",
                "get_session_info",
                "set_session_timeout",
                "_create_chrome_options",
                "get_driver",
                "_quit_driver_instance",
                "release_driver",
                "save_cookies",
                "load_cookies",
                "clear_cookies",
                "is_logged_in",
                "execute_with_retry",
                "scroll_into_view",
                "scroll_page",
                "scroll_to_bottom_smoothly",
                "update_options",
                "shutdown",
                "_force_kill_browsers",
                "__del__"
            ],
            "classes": {
                "DriverManager": {
                    "methods": [
                        "get_instance",
                        "__init__",
                        "__enter__",
                        "__exit__",
                        "_get_cached_driver_path",
                        "_download_driver_if_needed",
                        "_is_session_expired",
                        "_renew_driver_session",
                        "get_session_info",
                        "set_session_timeout",
                        "_create_chrome_options",
                        "get_driver",
                        "_quit_driver_instance",
                        "release_driver",
                        "save_cookies",
                        "load_cookies",
                        "clear_cookies",
                        "is_logged_in",
                        "execute_with_retry",
                        "scroll_into_view",
                        "scroll_page",
                        "scroll_to_bottom_smoothly",
                        "update_options",
                        "shutdown",
                        "_force_kill_browsers",
                        "__del__"
                    ],
                    "docstring": "Unified DriverManager for Selenium-based browser automation.\n\nFeatures:\n  - Singleton pattern to ensure a single active driver instance per configuration hash\n  - Session management with automatic expiration (default 1 hour) and renewal\n  - Persistent profile support (or temporary profiles in headless mode)\n  - Cookie saving/loading for session persistence\n  - Support for headless mode, mobile emulation, and optional undetected mode\n  - Auto-downloading and caching of the ChromeDriver executable\n  - Robust retry mechanisms for resilient browser operations\n  - Utilities for waiting, scrolling, and option updates",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 54
        },
        "src\\dreamos\\chat_engine\\feedback_engine.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load_memory",
                "_save_memory",
                "save_memory_async",
                "parse_and_update_memory",
                "apply_memory_updates",
                "log_feedback",
                "export_feedback_log",
                "analyze_feedback",
                "review_memory",
                "feedback_loop",
                "save_context_memory_async",
                "save_context_db",
                "review_context_memory"
            ],
            "classes": {
                "FeedbackEngine": {
                    "methods": [
                        "__init__",
                        "_load_memory",
                        "_save_memory",
                        "save_memory_async",
                        "parse_and_update_memory",
                        "apply_memory_updates",
                        "log_feedback",
                        "export_feedback_log",
                        "analyze_feedback",
                        "review_memory",
                        "feedback_loop",
                        "save_context_memory_async",
                        "save_context_db",
                        "review_context_memory"
                    ],
                    "docstring": "FeedbackEngine - Parses AI responses, updates persistent memory,\ntracks reinforcement loops, and evolves Victor.OS intelligence.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 28
        },
        "src\\dreamos\\chat_engine\\gui_event_handler.py": {
            "language": ".py",
            "functions": [
                "run_gui",
                "__init__",
                "init_ui",
                "toggle_headless",
                "toggle_reverse",
                "toggle_archive",
                "start_dispatcher",
                "stop_dispatcher",
                "log",
                "__init__",
                "exec_",
                "__init__",
                "__init__",
                "__init__",
                "__init__",
                "__init__"
            ],
            "classes": {
                "GUIEventHandler": {
                    "methods": [
                        "__init__",
                        "init_ui",
                        "toggle_headless",
                        "toggle_reverse",
                        "toggle_archive",
                        "start_dispatcher",
                        "stop_dispatcher",
                        "log"
                    ],
                    "docstring": "GUI Event Handler for ChatMate Agent Control Panel\n- Control Config Flags (Headless, Reverse Order, Archive)\n- Start/Stop the Agent Dispatcher\n- Display logs or status updates",
                    "base_classes": [
                        "QMainWindow"
                    ]
                },
                "QtWidgets": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": []
                },
                "QtCore": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": []
                },
                "QApplication": {
                    "methods": [
                        "__init__",
                        "exec_"
                    ],
                    "docstring": null,
                    "base_classes": []
                },
                "QMainWindow": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": null,
                    "base_classes": []
                },
                "QPushButton": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": null,
                    "base_classes": []
                },
                "QLabel": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": null,
                    "base_classes": []
                },
                "QCheckBox": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": null,
                    "base_classes": []
                },
                "QTextEdit": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 31
        },
        "src\\dreamos\\chat_engine\\feedback_engine_v2.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "analyze_failures",
                "save_analysis"
            ],
            "classes": {
                "FeedbackEngineV2": {
                    "methods": [
                        "__init__",
                        "analyze_failures",
                        "save_analysis"
                    ],
                    "docstring": "FeedbackEngineV2 analyzes failed prompts using an LLM and provides root cause analysis\nand recommended fixes based on archived failure data.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 6
        },
        "src\\dreamos\\chat_engine\\prompt_execution_service.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "get_prompt",
                "execute_prompt_cycle",
                "execute_prompts_single_chat",
                "execute_prompts_concurrently",
                "_execute_single_prompt_thread",
                "_determine_wait_time",
                "_post_process_jawbone_response",
                "_send_prompt",
                "_fetch_response"
            ],
            "classes": {
                "PromptExecutionService": {
                    "methods": [
                        "__init__",
                        "get_prompt",
                        "execute_prompt_cycle",
                        "execute_prompts_single_chat",
                        "execute_prompts_concurrently",
                        "_execute_single_prompt_thread",
                        "_determine_wait_time",
                        "_post_process_jawbone_response",
                        "_send_prompt",
                        "_fetch_response"
                    ],
                    "docstring": "PromptExecutionService handles sending prompts and retrieving responses.\nIt manages execution cycles for single chats or cycles across multiple prompts.\nNow supports model switching, feedback integration, and parallel execution.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 20
        },
        "src\\dreamos\\chat_engine\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\dreamos\\cli\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\dreamos\\cli\\main.py": {
            "language": ".py",
            "functions": [
                "setup_logging"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "src\\dreamos\\coordination\\agent_bus.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_start_event_system",
                "register_handler"
            ],
            "classes": {
                "AgentBus": {
                    "methods": [
                        "__init__",
                        "_start_event_system",
                        "register_handler"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 6
        },
        "src\\dreamos\\coordination\\dispatchers\\base_dispatcher.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\dreamos\\coordination\\dispatchers\\dispatchers\\base_dispatcher.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "add_task",
                "run_dispatcher_loop",
                "stop",
                "get_status"
            ],
            "classes": {
                "BaseDispatcher": {
                    "methods": [
                        "__init__",
                        "add_task",
                        "run_dispatcher_loop",
                        "stop",
                        "get_status"
                    ],
                    "docstring": "Base dispatcher that manages a task queue and processes tasks.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 10
        },
        "src\\dreamos\\coordination\\dispatchers\\dispatchers\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\dreamos\\core\\coordination\\base_agent.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "register_command_handler",
                "_get_priority_value"
            ],
            "classes": {
                "BaseAgent": {
                    "methods": [
                        "__init__",
                        "register_command_handler",
                        "_get_priority_value"
                    ],
                    "docstring": "Base class for all Dream.OS agents providing common functionality.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 6
        },
        "src\\dreamos\\core\\coordination\\message_patterns.py": {
            "language": ".py",
            "functions": [
                "create_task_message",
                "update_task_status",
                "to_dict",
                "from_dict"
            ],
            "classes": {
                "TaskStatus": {
                    "methods": [],
                    "docstring": "Task execution status.",
                    "base_classes": [
                        "Enum"
                    ]
                },
                "TaskPriority": {
                    "methods": [],
                    "docstring": "Task priority levels.",
                    "base_classes": [
                        "Enum"
                    ]
                },
                "TaskMessage": {
                    "methods": [
                        "to_dict",
                        "from_dict"
                    ],
                    "docstring": "Standard task message format, used as the 'data' field in AgentBus messages.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 6
        },
        "src\\dreamos\\core\\utils\\agent_utils.py": {
            "language": ".py",
            "functions": [
                "with_error_handling",
                "with_performance_tracking",
                "log_task_performance",
                "decorator",
                "decorator"
            ],
            "classes": {
                "AgentError": {
                    "methods": [],
                    "docstring": "Base exception for agent-related errors.",
                    "base_classes": [
                        "Exception"
                    ]
                },
                "TaskProcessingError": {
                    "methods": [],
                    "docstring": "Error during task processing.",
                    "base_classes": [
                        "AgentError"
                    ]
                },
                "MessageHandlingError": {
                    "methods": [],
                    "docstring": "Error during message handling.",
                    "base_classes": [
                        "AgentError"
                    ]
                }
            },
            "routes": [],
            "complexity": 5
        },
        "src\\dreamos\\core\\utils\\performance_logger.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "track_operation",
                "log_outcome",
                "_log_entry"
            ],
            "classes": {
                "PerformanceLogger": {
                    "methods": [
                        "__init__",
                        "track_operation",
                        "log_outcome",
                        "_log_entry"
                    ],
                    "docstring": "Logs performance metrics for agent operations and tasks.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 8
        },
        "src\\dreamos\\dashboard\\dashboard_ui.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "refresh",
                "_load_box",
                "_render_messages",
                "_send_reply",
                "_ai_reply",
                "_create_mailbox",
                "_inject_task",
                "_claim_next",
                "_capture_spot",
                "_flip_mode",
                "keyPressEvent",
                "handle_system_event",
                "_flash_color",
                "_show_bar_tooltip",
                "_handle_stacked_toggle"
            ],
            "classes": {
                "Dashboard": {
                    "methods": [
                        "__init__",
                        "refresh",
                        "_load_box",
                        "_render_messages",
                        "_send_reply",
                        "_ai_reply",
                        "_create_mailbox",
                        "_inject_task",
                        "_claim_next",
                        "_capture_spot",
                        "_flip_mode",
                        "keyPressEvent",
                        "handle_system_event",
                        "_flash_color",
                        "_show_bar_tooltip",
                        "_handle_stacked_toggle"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "QMainWindow"
                    ]
                }
            },
            "routes": [],
            "complexity": 32
        },
        "src\\dreamos\\hooks\\chatgpt_responder.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "get_response",
                "respond_to_mailbox"
            ],
            "classes": {
                "ChatGPTResponder": {
                    "methods": [
                        "__init__",
                        "get_response",
                        "respond_to_mailbox"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 6
        },
        "src\\dreamos\\gui\\main_window.py": {
            "language": ".py",
            "functions": [
                "add_task",
                "__init__",
                "_create_navigation",
                "add_navigation_item",
                "get_sidebar_items",
                "log_event",
                "notify_mailbox",
                "sync_event_with_board",
                "save_state",
                "_append_task_to_list",
                "load_state_fallback",
                "closeEvent",
                "cleanup_resources",
                "_save_state",
                "_load_state",
                "_update_agents_list",
                "_update_escalated_agents_list",
                "_subscribe_prompt_event"
            ],
            "classes": {
                "DummyTaskManager": {
                    "methods": [
                        "add_task"
                    ],
                    "docstring": null,
                    "base_classes": []
                },
                "TaskManager": {
                    "methods": [],
                    "docstring": "Alias for DummyTaskManager for testing compatibility.",
                    "base_classes": [
                        "DummyTaskManager"
                    ]
                },
                "FeedbackEngine": {
                    "methods": [],
                    "docstring": "Placeholder for feedback engine in tests.",
                    "base_classes": []
                },
                "DreamOSTabManager": {
                    "methods": [],
                    "docstring": "Placeholder for tab manager in tests.",
                    "base_classes": [
                        "QTabWidget"
                    ]
                },
                "TabSystemShutdownManager": {
                    "methods": [],
                    "docstring": "Placeholder for tab system shutdown in tests.",
                    "base_classes": []
                },
                "DreamOSMainWindow": {
                    "methods": [
                        "__init__",
                        "_create_navigation",
                        "add_navigation_item",
                        "get_sidebar_items",
                        "log_event",
                        "notify_mailbox",
                        "sync_event_with_board",
                        "save_state",
                        "_append_task_to_list",
                        "load_state_fallback",
                        "closeEvent",
                        "cleanup_resources",
                        "_save_state",
                        "_load_state",
                        "_update_agents_list",
                        "_update_escalated_agents_list"
                    ],
                    "docstring": "Main application window for Dream.OS using Sidebar Navigation.",
                    "base_classes": [
                        "QMainWindow"
                    ]
                }
            },
            "routes": [],
            "complexity": 35
        },
        "src\\dreamos\\hooks\\stats_logger.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "log_snapshot"
            ],
            "classes": {
                "StatsLoggingHook": {
                    "methods": [
                        "__init__",
                        "log_snapshot"
                    ],
                    "docstring": "Logs periodic snapshots of TaskNexus stats to a JSON file.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 4
        },
        "src\\dreamos\\llm_bridge\\bridge_adapters\\base_adapter.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "name",
                "_validate_config",
                "get_config_value",
                "__init__",
                "__str__"
            ],
            "classes": {
                "BaseAdapter": {
                    "methods": [
                        "__init__",
                        "name",
                        "_validate_config",
                        "get_config_value"
                    ],
                    "docstring": "Abstract Base Class for LLM Bridge Adapters.\n\nDefines the common interface required for interacting with different\nLLM services or models through a unified bridge.",
                    "base_classes": [
                        "ABC"
                    ]
                },
                "AdapterError": {
                    "methods": [
                        "__init__",
                        "__str__"
                    ],
                    "docstring": "Custom exception for errors originating from an adapter.",
                    "base_classes": [
                        "Exception"
                    ]
                }
            },
            "routes": [],
            "complexity": 12
        },
        "src\\dreamos\\llm_bridge\\bridge_adapters\\another_fancy_adapter.py": {
            "language": ".py",
            "functions": [],
            "classes": {
                "AnotherFancyAdapter": {
                    "methods": [],
                    "docstring": "Placeholder for AnotherFancyAdapter.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 0
        },
        "src\\dreamos\\llm_bridge\\bridge_adapters\\fancy_adapter.py": {
            "language": ".py",
            "functions": [],
            "classes": {
                "FancyAdapter": {
                    "methods": [],
                    "docstring": "Placeholder for FancyAdapter.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 0
        },
        "src\\dreamos\\memory\\azure_blob_channel_memory.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_safe_upload",
                "_safe_download",
                "_safe_delete",
                "push_task",
                "pull_tasks",
                "push_result",
                "pull_results",
                "healthcheck"
            ],
            "classes": {
                "AzureBlobChannel": {
                    "methods": [
                        "__init__",
                        "_safe_upload",
                        "_safe_download",
                        "_safe_delete",
                        "push_task",
                        "pull_tasks",
                        "push_result",
                        "pull_results",
                        "healthcheck"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 18
        },
        "src\\dreamos\\memory\\memory_manager.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_ensure_store",
                "load_memory",
                "save_memory",
                "save_fragment",
                "load_fragment",
                "delete_fragment",
                "list_fragment_ids",
                "__init__",
                "_init_schema",
                "record_interaction",
                "initialize_conversation",
                "fetch_conversation",
                "close",
                "__init__",
                "_segment_file",
                "_load_segments",
                "_save_segment",
                "set",
                "get",
                "delete",
                "clear_segment",
                "get_stats",
                "optimize",
                "record_interaction",
                "initialize_conversation",
                "fetch_conversation",
                "export_conversation_finetune",
                "render_narrative",
                "close"
            ],
            "classes": {
                "MemoryManager": {
                    "methods": [
                        "__init__",
                        "_ensure_store",
                        "load_memory",
                        "save_memory",
                        "save_fragment",
                        "load_fragment",
                        "delete_fragment",
                        "list_fragment_ids"
                    ],
                    "docstring": "Lightweight dict-of-dicts persisted to a single JSON file.\nGood for small, human-inspectable fragments.",
                    "base_classes": []
                },
                "DatabaseManager": {
                    "methods": [
                        "__init__",
                        "_init_schema",
                        "record_interaction",
                        "initialize_conversation",
                        "fetch_conversation",
                        "close"
                    ],
                    "docstring": "Thread-safe wrapper around SQLite for long-term interaction storage.",
                    "base_classes": []
                },
                "UnifiedMemoryManager": {
                    "methods": [
                        "__init__",
                        "_segment_file",
                        "_load_segments",
                        "_save_segment",
                        "set",
                        "get",
                        "delete",
                        "clear_segment",
                        "get_stats",
                        "optimize",
                        "record_interaction",
                        "initialize_conversation",
                        "fetch_conversation",
                        "export_conversation_finetune",
                        "render_narrative",
                        "close"
                    ],
                    "docstring": "\u2022 LRU + compressed JSON per segment (system / prompts / feedback / context / interactions)\n\u2022 SQLite long-term store\n\u2022 Jinja2 narrative helpers",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 60
        },
        "src\\dreamos\\memory\\governance_memory_engine.py": {
            "language": ".py",
            "functions": [
                "log_event"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "src\\dreamos\\memory\\blob_channel_memory.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "push_task",
                "pull_tasks",
                "push_result",
                "pull_results",
                "healthcheck"
            ],
            "classes": {
                "LocalBlobChannel": {
                    "methods": [
                        "__init__",
                        "push_task",
                        "pull_tasks",
                        "push_result",
                        "pull_results",
                        "healthcheck"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 12
        },
        "src\\dreamos\\memory\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\dreamos\\rendering\\template_engine.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "render"
            ],
            "classes": {
                "TemplateEngine": {
                    "methods": [
                        "__init__",
                        "render"
                    ],
                    "docstring": "Wraps Jinja2 for rendering template strings.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 4
        },
        "src\\dreamos\\monitoring\\prompt_execution_monitor.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "start_monitoring",
                "report_success",
                "report_failure",
                "_monitor_loop",
                "recover_and_requeue"
            ],
            "classes": {
                "PromptExecutionMonitor": {
                    "methods": [
                        "__init__",
                        "start_monitoring",
                        "report_success",
                        "report_failure",
                        "_monitor_loop",
                        "recover_and_requeue"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 12
        },
        "src\\dreamos\\rendering\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\dreamos\\scripts\\operation_flameproof_migration.py": {
            "language": ".py",
            "functions": [
                "migrate_structure"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "src\\dreamos\\scripts\\run_qa.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\dreamos\\services\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\dreamos\\services\\services\\event_logger.py": {
            "language": ".py",
            "functions": [
                "log_structured_event"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "src\\dreamos\\services\\services\\failed_prompt_archive.py": {
            "language": ".py",
            "functions": [
                "load_json_safe",
                "write_json_safe",
                "__init__",
                "log_failure",
                "get_failures",
                "get_by_prompt_id"
            ],
            "classes": {
                "FailedPromptArchiveService": {
                    "methods": [
                        "__init__",
                        "log_failure",
                        "get_failures",
                        "get_by_prompt_id"
                    ],
                    "docstring": "Service to archive failed prompts with full metadata.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 10
        },
        "src\\dreamos\\services\\services\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\dreamos\\services\\utils\\common.py": {
            "language": ".py",
            "functions": [
                "retry_on_exception",
                "decorator",
                "sync_wrapper"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "src\\dreamos\\services\\utils\\cursor.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "update_context",
                "add_to_history",
                "set_current_file",
                "record_command",
                "get_file_context",
                "clear_history",
                "_save_state",
                "_load_state",
                "__init__",
                "add_message",
                "get_context",
                "clear"
            ],
            "classes": {
                "CursorState": {
                    "methods": [
                        "__init__",
                        "update_context",
                        "add_to_history",
                        "set_current_file",
                        "record_command",
                        "get_file_context",
                        "clear_history",
                        "_save_state",
                        "_load_state"
                    ],
                    "docstring": "Manages cursor state and context for chat interactions.",
                    "base_classes": []
                },
                "ChatContext": {
                    "methods": [
                        "__init__",
                        "add_message",
                        "get_context",
                        "clear"
                    ],
                    "docstring": "Manages chat context and history for conversations.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 26
        },
        "src\\dreamos\\services\\utils\\chatgpt_scraper.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "__enter__",
                "__exit__",
                "setup_browser",
                "cleanup",
                "save_cookies",
                "load_cookies",
                "_perform_login",
                "scrape_single_chat",
                "write_json"
            ],
            "classes": {
                "ChatGPTScraper": {
                    "methods": [
                        "__init__",
                        "__enter__",
                        "__exit__",
                        "setup_browser",
                        "cleanup",
                        "save_cookies",
                        "load_cookies",
                        "_perform_login",
                        "scrape_single_chat"
                    ],
                    "docstring": "Manages ChatGPT web scraping operations with session persistence.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 20
        },
        "src\\dreamos\\services\\utils\\devlog_dispatcher.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "on_created",
                "__init__",
                "_initialize_strategies",
                "start",
                "handle_new_blog_post",
                "handle_new_social_content",
                "schedule_post",
                "_generate_post_id",
                "_extract_tags",
                "_get_next_optimal_time",
                "publish_job"
            ],
            "classes": {
                "ContentHandler": {
                    "methods": [
                        "__init__",
                        "on_created"
                    ],
                    "docstring": "Handles file system events for new content.",
                    "base_classes": [
                        "FileSystemEventHandler"
                    ]
                },
                "DevLogDispatcher": {
                    "methods": [
                        "__init__",
                        "_initialize_strategies",
                        "start",
                        "handle_new_blog_post",
                        "handle_new_social_content",
                        "schedule_post",
                        "_generate_post_id",
                        "_extract_tags",
                        "_get_next_optimal_time"
                    ],
                    "docstring": "Autonomous agent that watches for new content and publishes it\nto appropriate platforms using configured strategies.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 24
        },
        "src\\dreamos\\services\\utils\\devlog_analyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_get_connection",
                "_init_db",
                "track_post",
                "update_metrics",
                "get_best_posting_times",
                "get_top_performing_tags",
                "get_content_insights"
            ],
            "classes": {
                "DevLogAnalyzer": {
                    "methods": [
                        "__init__",
                        "_get_connection",
                        "_init_db",
                        "track_post",
                        "update_metrics",
                        "get_best_posting_times",
                        "get_top_performing_tags",
                        "get_content_insights"
                    ],
                    "docstring": "Analyzes post performance and provides optimization insights.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 16
        },
        "src\\dreamos\\services\\utils\\feedback_processor.py": {
            "language": ".py",
            "functions": [
                "_extract_potential_suggestions",
                "_create_task_message",
                "process_feedback",
                "log_event",
                "__init__",
                "send_message"
            ],
            "classes": {
                "DummyMailboxHandler": {
                    "methods": [
                        "__init__",
                        "send_message"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 8
        },
        "src\\dreamos\\services\\utils\\devlog_generator.py": {
            "language": ".py",
            "functions": [
                "initialize_strategies",
                "main",
                "__init__",
                "process_conversation",
                "_process_message",
                "generate_blog_post",
                "generate_social_content",
                "_generate_title",
                "_generate_description",
                "_extract_tags",
                "_detect_language",
                "_extract_metadata",
                "auto_publish"
            ],
            "classes": {
                "ContentBlock": {
                    "methods": [],
                    "docstring": "Represents a block of content from the conversation.",
                    "base_classes": []
                },
                "DevLogPost": {
                    "methods": [],
                    "docstring": "Represents a structured blog post from a conversation.",
                    "base_classes": []
                },
                "DevLogGenerator": {
                    "methods": [
                        "__init__",
                        "process_conversation",
                        "_process_message",
                        "generate_blog_post",
                        "generate_social_content",
                        "_generate_title",
                        "_generate_description",
                        "_extract_tags",
                        "_detect_language",
                        "_extract_metadata",
                        "auto_publish"
                    ],
                    "docstring": "Transforms ChatGPT conversations into various content formats.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 24
        },
        "src\\dreamos\\services\\utils\\gui_utils.py": {
            "language": ".py",
            "functions": [
                "_load_coords",
                "_save_coords",
                "save_agent_spot",
                "get_agent_spot",
                "click_agent_spot",
                "screenshot_spot",
                "copy_to_clipboard",
                "paste_from_clipboard"
            ],
            "classes": {},
            "routes": [],
            "complexity": 8
        },
        "src\\dreamos\\services\\utils\\selenium_utils.py": {
            "language": ".py",
            "functions": [
                "wait_for_element",
                "safe_click",
                "safe_send_keys",
                "navigate_to"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "src\\dreamos\\services\\utils\\logging_utils.py": {
            "language": ".py",
            "functions": [
                "log_event",
                "get_logger"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "src\\dreamos\\services\\utils\\content\\post_context_generator.py": {
            "language": ".py",
            "functions": [
                "generate_context_from_governance"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "src\\dreamos\\services\\utils\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\dreamos\\tools\\base.py": {
            "language": ".py",
            "functions": [
                "name",
                "description",
                "execute",
                "_log_execution"
            ],
            "classes": {
                "AgentTool": {
                    "methods": [
                        "name",
                        "description",
                        "execute",
                        "_log_execution"
                    ],
                    "docstring": "Abstract base class for all tools usable by agents.",
                    "base_classes": [
                        "ABC"
                    ]
                }
            },
            "routes": [],
            "complexity": 8
        },
        "src\\dreamos\\tools\\context.py": {
            "language": ".py",
            "functions": [
                "produce_project_context"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "src\\dreamos\\tools\\registry.py": {
            "language": ".py",
            "functions": [
                "get_registry",
                "_populate_default_tools",
                "__init__",
                "register",
                "get_tool",
                "list_tools"
            ],
            "classes": {
                "ToolRegistry": {
                    "methods": [
                        "__init__",
                        "register",
                        "get_tool",
                        "list_tools"
                    ],
                    "docstring": "Manages a collection of available AgentTools.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 10
        },
        "src\\dreamos\\tools\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\dreamos\\tools\\functional\\context_planner_tool.py": {
            "language": ".py",
            "functions": [
                "name",
                "description",
                "_extract_targets",
                "execute",
                "_rule_copy_file",
                "_rule_extract_symbol",
                "_rule_refactor_symbol",
                "_rule_create_file",
                "_rule_migrate_update_generic_refactor",
                "_rule_read_analyze",
                "_rule_search",
                "_rule_fallback_log",
                "_generate_plan_narration",
                "_log_execution"
            ],
            "classes": {
                "ContextPlannerTool": {
                    "methods": [
                        "name",
                        "description",
                        "_extract_targets",
                        "execute",
                        "_rule_copy_file",
                        "_rule_extract_symbol",
                        "_rule_refactor_symbol",
                        "_rule_create_file",
                        "_rule_migrate_update_generic_refactor",
                        "_rule_read_analyze",
                        "_rule_search",
                        "_rule_fallback_log",
                        "_generate_plan_narration",
                        "_log_execution"
                    ],
                    "docstring": "Generates a execution plan based on keywords and patterns in the task description.\nNOTE: This is a simplified rule-based planner, NOT an LLM-based planner.",
                    "base_classes": [
                        "AgentTool"
                    ]
                }
            },
            "routes": [],
            "complexity": 28
        },
        "src\\dreamos\\tools\\functional\\file_tools.py": {
            "language": ".py",
            "functions": [
                "name",
                "description",
                "execute",
                "name",
                "description",
                "execute"
            ],
            "classes": {
                "FileReadTool": {
                    "methods": [
                        "name",
                        "description",
                        "execute"
                    ],
                    "docstring": "Reads the content of a specified file.",
                    "base_classes": [
                        "AgentTool"
                    ]
                },
                "FileWriteTool": {
                    "methods": [
                        "name",
                        "description",
                        "execute"
                    ],
                    "docstring": "Writes content to a specified file, overwriting if it exists.",
                    "base_classes": [
                        "AgentTool"
                    ]
                },
                "SecurityException": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "Exception"
                    ]
                }
            },
            "routes": [],
            "complexity": 12
        },
        "src\\dreamos\\tools\\functional\\search_tools.py": {
            "language": ".py",
            "functions": [
                "name",
                "description",
                "_check_ripgrep_installed",
                "execute"
            ],
            "classes": {
                "GrepSearchTool": {
                    "methods": [
                        "name",
                        "description",
                        "_check_ripgrep_installed",
                        "execute"
                    ],
                    "docstring": "Performs a search using Ripgrep (rg) command.",
                    "base_classes": [
                        "AgentTool"
                    ]
                }
            },
            "routes": [],
            "complexity": 8
        },
        "src\\dreamos\\tools\\functional\\utils_tools.py": {
            "language": ".py",
            "functions": [
                "name",
                "description",
                "execute"
            ],
            "classes": {
                "LogMessageTool": {
                    "methods": [
                        "name",
                        "description",
                        "execute"
                    ],
                    "docstring": "A simple tool that logs a message using the standard logger.",
                    "base_classes": [
                        "AgentTool"
                    ]
                }
            },
            "routes": [],
            "complexity": 6
        },
        "src\\dreamos\\utils\\base.py": {
            "language": ".py",
            "functions": [
                "generate_id",
                "save_json_file",
                "load_json_file",
                "validate_required_fields",
                "validate_field_type",
                "__call__",
                "__init__",
                "__init__",
                "__init__"
            ],
            "classes": {
                "Singleton": {
                    "methods": [
                        "__call__"
                    ],
                    "docstring": "Metaclass for single-instance classes.",
                    "base_classes": [
                        "type"
                    ]
                },
                "AsyncLockManager": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Async context manager for asyncio.Lock with optional timeout.",
                    "base_classes": []
                },
                "Cache": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "In-memory cache with time-to-live (TTL) expiration.",
                    "base_classes": [
                        null
                    ]
                },
                "RetryManager": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Manager to retry async operations with backoff.",
                    "base_classes": []
                },
                "ValidationError": {
                    "methods": [],
                    "docstring": "Raised when data validation fails.",
                    "base_classes": [
                        "Exception"
                    ]
                }
            },
            "routes": [],
            "complexity": 13
        },
        "src\\dreamos\\tools\\functional\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\dreamos\\utils\\json_io.py": {
            "language": ".py",
            "functions": [
                "write_json_safe"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "src\\dreamos\\utils\\task_utils.py": {
            "language": ".py",
            "functions": [
                "read_tasks",
                "write_tasks",
                "update_task_status"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "src\\dreamos\\utils\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\dreamos\\_archive\\login_utils.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\dreamos\\_archive\\thea_orchestrator.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "dispatch_directive",
                "extract_json_from_response",
                "run",
                "run_loop",
                "list_history"
            ],
            "classes": {
                "TheaOrchestrator": {
                    "methods": [
                        "__init__",
                        "dispatch_directive",
                        "extract_json_from_response",
                        "run",
                        "run_loop",
                        "list_history"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 12
        },
        "src\\dreamos\\_archive\\voice_engine.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "speak",
                "_inject_persona_context",
                "_get_tone_directives",
                "__init__",
                "ask"
            ],
            "classes": {
                "VictorVoiceEngine": {
                    "methods": [
                        "__init__",
                        "speak",
                        "_inject_persona_context",
                        "_get_tone_directives"
                    ],
                    "docstring": "Unified voice engine to generate persona-aligned text.",
                    "base_classes": []
                },
                "AIChatAgent": {
                    "methods": [
                        "__init__",
                        "ask"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 12
        },
        "src\\social\\core\\exceptions\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\social\\core\\strategies\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\social\\core\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\social\\digital_dreamscape\\utils.py": {
            "language": ".py",
            "functions": [
                "log_event",
                "post_to_discord",
                "load_models_yaml",
                "load_prompt_templates",
                "sanitize_filename",
                "__init__",
                "emit"
            ],
            "classes": {
                "QtLogEmitter": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "QObject"
                    ]
                },
                "GuiLogHandler": {
                    "methods": [
                        "__init__",
                        "emit"
                    ],
                    "docstring": "Emits each formatted record via Qt signal so the GUI thread\ncan safely append to a QTextEdit.",
                    "base_classes": [
                        "logging.Handler"
                    ]
                }
            },
            "routes": [],
            "complexity": 9
        },
        "src\\social\\digital_dreamscape\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\social\\digital_dreamscape\\dreamscape_generator\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\social\\digital_dreamscape\\dreamscape_generator\\src\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\social\\digital_dreamscape\\dreamscape_generator\\src\\core\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\social\\digital_dreamscape\\dreamscape_generator\\src\\core\\monitoring\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\social\\digital_dreamscape\\dreamscape_generator\\threads\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "src\\social\\tests\\social\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "tests\\conftest.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "tests\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "tests\\adapters\\test_registry.py": {
            "language": ".py",
            "functions": [
                "test_registry_contains_adapters",
                "test_openai_adapter_instantiation",
                "test_cursor_rpc_adapter_instantiation",
                "test_discord_adapter_instantiation",
                "test_invalid_adapter_name",
                "test_crew_agent_uses_default_adapter",
                "__init__",
                "execute"
            ],
            "classes": {
                "DummyAdapter": {
                    "methods": [
                        "__init__",
                        "execute"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 10
        },
        "tests\\cli\\test_cli_smoke.py": {
            "language": ".py",
            "functions": [
                "test_cli_smoke"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "tests\\coordination\\cursor\\test_cursor_chat_coordinator.py": {
            "language": ".py",
            "functions": [
                "setUp",
                "test_interpret_response_code_block",
                "test_interpret_response_accept_prompt",
                "test_interpret_response_task_complete",
                "test_interpret_response_no_action"
            ],
            "classes": {
                "TestCursorChatCoordinator": {
                    "methods": [
                        "setUp",
                        "test_interpret_response_code_block",
                        "test_interpret_response_accept_prompt",
                        "test_interpret_response_task_complete",
                        "test_interpret_response_no_action"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "unittest.TestCase"
                    ]
                }
            },
            "routes": [],
            "complexity": 10
        },
        "tests\\coordination\\test_orchestrator.py": {
            "language": ".py",
            "functions": [
                "test_run_cycle_single",
                "test_run_cycle_loop",
                "fake_send",
                "fake_fetch"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "tests\\coordination\\dispatchers\\test_base_dispatcher.py": {
            "language": ".py",
            "functions": [
                "test_base_dispatcher_initialization",
                "test_add_task",
                "test_run_dispatcher_loop",
                "test_stop_dispatcher",
                "test_get_status",
                "__init__",
                "execute_task"
            ],
            "classes": {
                "MockDispatcher": {
                    "methods": [
                        "__init__",
                        "execute_task"
                    ],
                    "docstring": "Mock dispatcher for testing.",
                    "base_classes": [
                        "BaseDispatcher"
                    ]
                }
            },
            "routes": [],
            "complexity": 9
        },
        "tests\\core\\coordination\\test_base_dispatcher.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "tests\\core\\chat_engine\\test_feedback_engine_v2.py": {
            "language": ".py",
            "functions": [
                "clear_openai_api_key",
                "test_analyze_failures_success",
                "test_analyze_failures_handles_exception",
                "test_save_analysis_writes_file",
                "__init__",
                "get_failures",
                "__init__",
                "fake_create"
            ],
            "classes": {
                "DummyArchiveService": {
                    "methods": [
                        "__init__",
                        "get_failures"
                    ],
                    "docstring": null,
                    "base_classes": []
                },
                "DummyResponse": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 11
        },
        "tests\\core\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "tests\\core\\gui\\test_main_window_state.py": {
            "language": ".py",
            "functions": [
                "get_tasks",
                "get_events",
                "log_event",
                "__init__",
                "add_tab",
                "widget",
                "tabText",
                "count",
                "get_tab_by_name",
                "__init__",
                "get_state",
                "restore_state",
                "prepare_for_shutdown",
                "setUpClass",
                "setUp",
                "tearDown",
                "test_01_save_state_creates_file",
                "test_02_load_state_restores_tabs",
                "test_03_load_state_no_file",
                "test_04_load_state_corrupt_file",
                "test_05_manual_save_state",
                "test_06_auto_save_state"
            ],
            "classes": {
                "MockTaskManager": {
                    "methods": [
                        "get_tasks"
                    ],
                    "docstring": null,
                    "base_classes": []
                },
                "MockFeedbackEngine": {
                    "methods": [
                        "get_events",
                        "log_event"
                    ],
                    "docstring": null,
                    "base_classes": []
                },
                "MockTabManager": {
                    "methods": [
                        "__init__",
                        "add_tab",
                        "widget",
                        "tabText",
                        "count",
                        "get_tab_by_name"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "QTabWidget"
                    ]
                },
                "MockTab": {
                    "methods": [
                        "__init__",
                        "get_state",
                        "restore_state",
                        "prepare_for_shutdown"
                    ],
                    "docstring": null,
                    "base_classes": []
                },
                "TestMainWindowState": {
                    "methods": [
                        "setUpClass",
                        "setUp",
                        "tearDown",
                        "test_01_save_state_creates_file",
                        "test_02_load_state_restores_tabs",
                        "test_03_load_state_no_file",
                        "test_04_load_state_corrupt_file",
                        "test_05_manual_save_state",
                        "test_06_auto_save_state"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "unittest.TestCase"
                    ]
                }
            },
            "routes": [],
            "complexity": 44
        },
        "tests\\core\\gui\\test_tab_system_shutdown.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "log_event",
                "__init__",
                "get_state",
                "prepare_for_shutdown",
                "setUp",
                "tearDown",
                "test_01_initiate_shutdown_happy_path",
                "test_02_shutdown_with_failing_prepare",
                "test_03_shutdown_persisted_state_error",
                "test_04_handle_shutdown_error_logging"
            ],
            "classes": {
                "MockFeedbackEngine": {
                    "methods": [
                        "__init__",
                        "log_event"
                    ],
                    "docstring": null,
                    "base_classes": []
                },
                "MockTab": {
                    "methods": [
                        "__init__",
                        "get_state",
                        "prepare_for_shutdown"
                    ],
                    "docstring": null,
                    "base_classes": []
                },
                "TestTabSystemShutdown": {
                    "methods": [
                        "setUp",
                        "tearDown",
                        "test_01_initiate_shutdown_happy_path",
                        "test_02_shutdown_with_failing_prepare",
                        "test_03_shutdown_persisted_state_error",
                        "test_04_handle_shutdown_error_logging"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "unittest.TestCase"
                    ]
                }
            },
            "routes": [],
            "complexity": 22
        },
        "tests\\core\\monitoring\\test_prompt_execution_monitor.py": {
            "language": ".py",
            "functions": [
                "make_monitor",
                "test_success_removes_from_tracking",
                "test_duplicate_failure_not_archived_twice",
                "test_recovery_requeues_prompt",
                "test_monitor_timeout_triggers_failure",
                "fake_sleep",
                "__init__",
                "save_fragment",
                "load_fragment",
                "__init__",
                "queue_prompt",
                "__init__",
                "get_by_prompt_id",
                "log_failure"
            ],
            "classes": {
                "DummyMemory": {
                    "methods": [
                        "__init__",
                        "save_fragment",
                        "load_fragment"
                    ],
                    "docstring": null,
                    "base_classes": []
                },
                "DummyDispatcher": {
                    "methods": [
                        "__init__",
                        "queue_prompt"
                    ],
                    "docstring": null,
                    "base_classes": []
                },
                "DummyArchive": {
                    "methods": [
                        "__init__",
                        "get_by_prompt_id",
                        "log_failure"
                    ],
                    "docstring": null,
                    "base_classes": []
                },
                "Done": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "Exception"
                    ]
                }
            },
            "routes": [],
            "complexity": 22
        },
        "tests\\memory\\test_governance_memory_engine.py": {
            "language": ".py",
            "functions": [
                "setUp",
                "tearDown",
                "test_log_single_event",
                "test_log_multiple_events",
                "test_log_event_error_handling"
            ],
            "classes": {
                "TestGovernanceMemoryEngine": {
                    "methods": [
                        "setUp",
                        "tearDown",
                        "test_log_single_event",
                        "test_log_multiple_events",
                        "test_log_event_error_handling"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "unittest.TestCase"
                    ]
                }
            },
            "routes": [],
            "complexity": 10
        },
        "tests\\monitoring\\test_monitor_analyzer.py": {
            "language": ".py",
            "functions": [
                "temp_rulebook_for_monitor",
                "temp_task_pool_empty",
                "temp_logs_path",
                "temp_agent_dirs_root",
                "temp_proposals_path",
                "test_load_rules",
                "test_load_tasks_file_not_found",
                "sample_rules",
                "test_halt_unnecessary_keyword_match",
                "test_halt_necessary_no_match",
                "test_halt_agent_specific_match",
                "test_halt_agent_specific_no_match",
                "test_log_unnecessary_halt",
                "test_broadcast_alert",
                "test_request_rulebook_update",
                "test_halt_status_handler"
            ],
            "classes": {},
            "routes": [],
            "complexity": 16
        },
        "tests\\monitors\\test_mailbox_monitor_agent.py": {
            "language": ".py",
            "functions": [
                "no_lock",
                "test_process_unread_messages_creates_task",
                "fake_acquire",
                "fake_release"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "tests\\rendering\\test_template_engine.py": {
            "language": ".py",
            "functions": [
                "setUpClass",
                "tearDownClass",
                "test_render_valid_template",
                "test_render_with_tojson_filter",
                "test_render_template_not_found",
                "test_render_with_missing_variable"
            ],
            "classes": {
                "TestTemplateEngine": {
                    "methods": [
                        "setUpClass",
                        "tearDownClass",
                        "test_render_valid_template",
                        "test_render_with_tojson_filter",
                        "test_render_template_not_found",
                        "test_render_with_missing_variable"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "unittest.TestCase"
                    ]
                }
            },
            "routes": [],
            "complexity": 12
        },
        "tests\\scripts\\test_run_qa.py": {
            "language": ".py",
            "functions": [
                "setUp",
                "test_generate_markdown_report_structure",
                "test_generate_markdown_report_cat_one_table",
                "test_generate_markdown_report_cat_two_table",
                "test_generate_markdown_report_summary_table",
                "test_generate_markdown_report_empty_checklist",
                "test_list_items_default_formatting",
                "test_list_items_filtering",
                "test_update_item_status_success",
                "test_update_item_status_not_found",
                "generate_markdown_report",
                "load_checklist",
                "save_checklist",
                "update_item_status",
                "list_items",
                "show_summary",
                "main"
            ],
            "classes": {
                "TestRunQAScript": {
                    "methods": [
                        "setUp",
                        "test_generate_markdown_report_structure",
                        "test_generate_markdown_report_cat_one_table",
                        "test_generate_markdown_report_cat_two_table",
                        "test_generate_markdown_report_summary_table",
                        "test_generate_markdown_report_empty_checklist",
                        "test_list_items_default_formatting",
                        "test_list_items_filtering",
                        "test_update_item_status_success",
                        "test_update_item_status_not_found"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "unittest.TestCase"
                    ]
                }
            },
            "routes": [],
            "complexity": 27
        },
        "tests\\services\\test_interpreter.py": {
            "language": ".py",
            "functions": [
                "interpreter",
                "test_parse_python_code_block",
                "test_parse_diff_code_block",
                "test_parse_generic_code_block",
                "test_parse_accept_prompt",
                "test_parse_task_complete",
                "test_parse_no_action",
                "test_parse_error_detected",
                "test_parse_clarification"
            ],
            "classes": {},
            "routes": [],
            "complexity": 9
        },
        "tests\\services\\test_prompt_router.py": {
            "language": ".py",
            "functions": [
                "test_routing_roundtrip"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "tests\\social\\tests\\conftest.py": {
            "language": ".py",
            "functions": [
                "pytest_configure",
                "mock_setup_logging",
                "mock_driver"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "tests\\social\\tests\\test_agent_load.py": {
            "language": ".py",
            "functions": [
                "generate_message_file",
                "run_load_test"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "tests\\social\\tests\\test_devlog_analyzer.py": {
            "language": ".py",
            "functions": [
                "test_db",
                "sample_post_data",
                "sample_metrics",
                "test_track_post",
                "test_update_metrics",
                "test_get_best_posting_times",
                "test_get_top_performing_tags",
                "test_get_content_insights"
            ],
            "classes": {},
            "routes": [],
            "complexity": 8
        },
        "tests\\social\\tests\\test_devlog_dispatcher.py": {
            "language": ".py",
            "functions": [
                "mock_twitter",
                "mock_linkedin",
                "test_content_dir",
                "dispatcher",
                "test_handle_new_blog_post",
                "test_handle_new_twitter_content",
                "test_handle_new_linkedin_content",
                "test_content_handler",
                "test_schedule_post",
                "test_duplicate_handling",
                "__init__"
            ],
            "classes": {
                "MockEvent": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 12
        },
        "tests\\social\\tests\\test_devlog_generator.py": {
            "language": ".py",
            "functions": [
                "mock_chat_data",
                "generator",
                "test_process_conversation",
                "test_generate_blog_post",
                "test_generate_social_content",
                "test_content_block_processing",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 7
        },
        "tests\\social\\tests\\test_linkedin_strategy.py": {
            "language": ".py",
            "functions": [
                "mock_setup_logging",
                "setUp",
                "start_patch",
                "tearDown",
                "test_login_success",
                "test_login_token_exchange_fails",
                "test_post_text_success",
                "test_post_requires_login",
                "test_post_handles_api_error",
                "test_register_image_upload_success",
                "test_upload_image_binary_success",
                "test_post_with_image_success"
            ],
            "classes": {
                "TestLinkedInStrategy": {
                    "methods": [
                        "setUp",
                        "start_patch",
                        "tearDown",
                        "test_login_success",
                        "test_login_token_exchange_fails",
                        "test_post_text_success",
                        "test_post_requires_login",
                        "test_post_handles_api_error",
                        "test_register_image_upload_success",
                        "test_upload_image_binary_success",
                        "test_post_with_image_success"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "unittest.TestCase"
                    ]
                }
            },
            "routes": [],
            "complexity": 23
        },
        "tests\\social\\tests\\test_reddit_strategy.py": {
            "language": ".py",
            "functions": [
                "setUp",
                "test_login_success",
                "test_post_text_success",
                "test_scrape_mentions_success",
                "test_post_praw_api_exception",
                "test_scrape_mentions_no_mentions"
            ],
            "classes": {
                "TestRedditStrategy": {
                    "methods": [
                        "setUp",
                        "test_login_success",
                        "test_post_text_success",
                        "test_scrape_mentions_success",
                        "test_post_praw_api_exception",
                        "test_scrape_mentions_no_mentions"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "unittest.TestCase"
                    ]
                }
            },
            "routes": [],
            "complexity": 12
        },
        "tests\\social\\tests\\test_social_agent_e2e.py": {
            "language": ".py",
            "functions": [
                "setUp",
                "tearDown",
                "test_cycle_post_success",
                "test_cycle_post_error",
                "test_cycle_unknown_command"
            ],
            "classes": {
                "TestSocialAgentE2E": {
                    "methods": [
                        "setUp",
                        "tearDown",
                        "test_cycle_post_success",
                        "test_cycle_post_error",
                        "test_cycle_unknown_command"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "unittest.TestCase"
                    ]
                }
            },
            "routes": [],
            "complexity": 10
        },
        "tests\\social\\tests\\test_twitter_strategy.py": {
            "language": ".py",
            "functions": [
                "setUp",
                "test_login_timeout_exception_handling",
                "test_post_element_not_found_handling",
                "find_element_side_effect"
            ],
            "classes": {
                "TestTwitterStrategyErrorHandling": {
                    "methods": [
                        "setUp",
                        "test_login_timeout_exception_handling",
                        "test_post_element_not_found_handling"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "unittest.TestCase"
                    ]
                }
            },
            "routes": [],
            "complexity": 7
        },
        "tests\\social\\tests\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "tests\\social\\tests\\test_social_media_agent.py": {
            "language": ".py",
            "functions": [
                "setUp",
                "test_agent_initialization_loads_config",
                "test_agent_initialization_initializes_mailbox",
                "test_process_incoming_message_valid_login",
                "test_process_incoming_message_unknown_command",
                "test_process_incoming_message_valid_post",
                "test_process_incoming_message_missing_command",
                "test_process_incoming_message_scrape_mentions",
                "test_process_incoming_message_check_login_status",
                "test_process_incoming_message_scrape_trends",
                "test_process_incoming_message_scrape_community",
                "test_process_incoming_message_agent_status",
                "test_initialize_driver_success",
                "test_initialize_driver_failure",
                "test_get_or_load_strategy_success_first_time",
                "test_get_or_load_strategy_already_loaded",
                "test_get_or_load_strategy_module_not_found",
                "test_agent_post_method_success",
                "test_agent_post_method_strategy_load_fails",
                "test_agent_post_method_strategy_post_fails",
                "test_agent_scrape_mentions_success",
                "test_agent_scrape_mentions_strategy_missing_method",
                "test_agent_scrape_mentions_strategy_fails",
                "test_agent_scrape_trends_success",
                "test_agent_scrape_community_success"
            ],
            "classes": {
                "TestSocialMediaAgent": {
                    "methods": [
                        "setUp",
                        "test_agent_initialization_loads_config",
                        "test_agent_initialization_initializes_mailbox",
                        "test_process_incoming_message_valid_login",
                        "test_process_incoming_message_unknown_command",
                        "test_process_incoming_message_valid_post",
                        "test_process_incoming_message_missing_command",
                        "test_process_incoming_message_scrape_mentions",
                        "test_process_incoming_message_check_login_status",
                        "test_process_incoming_message_scrape_trends",
                        "test_process_incoming_message_scrape_community",
                        "test_process_incoming_message_agent_status",
                        "test_initialize_driver_success",
                        "test_initialize_driver_failure",
                        "test_get_or_load_strategy_success_first_time",
                        "test_get_or_load_strategy_already_loaded",
                        "test_get_or_load_strategy_module_not_found",
                        "test_agent_post_method_success",
                        "test_agent_post_method_strategy_load_fails",
                        "test_agent_post_method_strategy_post_fails",
                        "test_agent_scrape_mentions_success",
                        "test_agent_scrape_mentions_strategy_missing_method",
                        "test_agent_scrape_mentions_strategy_fails",
                        "test_agent_scrape_trends_success",
                        "test_agent_scrape_community_success"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "unittest.TestCase"
                    ]
                }
            },
            "routes": [],
            "complexity": 50
        },
        "tests\\social\\tests\\core\\test_agent_monitor_agent.py": {
            "language": ".py",
            "functions": [
                "setUp",
                "test_log_event",
                "test_handle_event_message_task_completed",
                "test_handle_event_message_task_failed",
                "test_handle_event_message_generic_error",
                "test_handle_event_message_unknown"
            ],
            "classes": {
                "TestAgentMonitorAgent": {
                    "methods": [
                        "setUp",
                        "test_log_event",
                        "test_handle_event_message_task_completed",
                        "test_handle_event_message_task_failed",
                        "test_handle_event_message_generic_error",
                        "test_handle_event_message_unknown"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "unittest.TestCase"
                    ]
                }
            },
            "routes": [],
            "complexity": 12
        },
        "tests\\social\\tests\\core\\test_cursor_control_agent.py": {
            "language": ".py",
            "functions": [
                "setUp",
                "test_initialization",
                "test_initialization_coordinator_fails",
                "test_handle_message_get_editor_content_success",
                "test_handle_message_get_editor_content_fail",
                "test_handle_message_run_terminal_success",
                "test_handle_message_run_terminal_fail",
                "test_handle_message_run_terminal_missing_command",
                "test_handle_message_get_terminal_output_success",
                "test_handle_message_get_terminal_output_fail",
                "test_handle_message_open_file_success",
                "test_handle_message_open_file_fail",
                "test_handle_message_open_file_missing_path",
                "test_handle_message_unknown_action",
                "test_handle_message_no_coordinator",
                "test_shutdown_closes_launched_coordinator",
                "test_shutdown_does_not_close_existing_coordinator",
                "test_shutdown_handles_no_coordinator"
            ],
            "classes": {
                "TestCursorControlAgent": {
                    "methods": [
                        "setUp",
                        "test_initialization",
                        "test_initialization_coordinator_fails",
                        "test_handle_message_get_editor_content_success",
                        "test_handle_message_get_editor_content_fail",
                        "test_handle_message_run_terminal_success",
                        "test_handle_message_run_terminal_fail",
                        "test_handle_message_run_terminal_missing_command",
                        "test_handle_message_get_terminal_output_success",
                        "test_handle_message_get_terminal_output_fail",
                        "test_handle_message_open_file_success",
                        "test_handle_message_open_file_fail",
                        "test_handle_message_open_file_missing_path",
                        "test_handle_message_unknown_action",
                        "test_handle_message_no_coordinator",
                        "test_shutdown_closes_launched_coordinator",
                        "test_shutdown_does_not_close_existing_coordinator",
                        "test_shutdown_handles_no_coordinator"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "unittest.TestCase"
                    ]
                }
            },
            "routes": [],
            "complexity": 36
        },
        "tests\\social\\tests\\core\\test_meredith_resonance_scanner.py": {
            "language": ".py",
            "functions": [
                "setUp",
                "test_initialization",
                "test_handle_message_request_scan",
                "test_handle_message_direct_message",
                "test_handle_message_ignored_type",
                "test_perform_scan_sends_result"
            ],
            "classes": {
                "TestMeredithResonanceScanner": {
                    "methods": [
                        "setUp",
                        "test_initialization",
                        "test_handle_message_request_scan",
                        "test_handle_message_direct_message",
                        "test_handle_message_ignored_type",
                        "test_perform_scan_sends_result"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "unittest.TestCase"
                    ]
                }
            },
            "routes": [],
            "complexity": 12
        },
        "tests\\social\\tests\\core\\test_prompt_feedback_loop_agent.py": {
            "language": ".py",
            "functions": [
                "setUp",
                "test_mark_repair_triggered_success",
                "test_mark_repair_triggered_increment",
                "test_mark_repair_triggered_not_found",
                "test_create_diagnostic_task_run_terminal",
                "test_create_diagnostic_task_open_file",
                "test_create_diagnostic_task_cursor_action",
                "test_create_diagnostic_task_unknown_action"
            ],
            "classes": {
                "TestPromptFeedbackLoopAgent": {
                    "methods": [
                        "setUp",
                        "test_mark_repair_triggered_success",
                        "test_mark_repair_triggered_increment",
                        "test_mark_repair_triggered_not_found",
                        "test_create_diagnostic_task_run_terminal",
                        "test_create_diagnostic_task_open_file",
                        "test_create_diagnostic_task_cursor_action",
                        "test_create_diagnostic_task_unknown_action"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "unittest.TestCase"
                    ]
                }
            },
            "routes": [],
            "complexity": 16
        },
        "tests\\social\\tests\\core\\test_prompt_staging_service.py": {
            "language": ".py",
            "functions": [
                "test_render_prompt_success",
                "test_render_prompt_state_load_failure",
                "test_render_prompt_analysis_load_failure",
                "test_render_prompt_engine_unavailable",
                "test_render_prompt_render_itself_fails"
            ],
            "classes": {
                "TestPromptStagingServiceRender": {
                    "methods": [
                        "test_render_prompt_success",
                        "test_render_prompt_state_load_failure",
                        "test_render_prompt_analysis_load_failure",
                        "test_render_prompt_engine_unavailable",
                        "test_render_prompt_render_itself_fails"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "unittest.TestCase"
                    ]
                }
            },
            "routes": [],
            "complexity": 10
        },
        "tests\\social\\tests\\core\\test_task_injector.py": {
            "language": ".py",
            "functions": [
                "setUp",
                "tearDown",
                "test_initialization",
                "test_run_cycle_injects_tasks_from_file",
                "test_run_cycle_no_input_file"
            ],
            "classes": {
                "TestTaskInjector": {
                    "methods": [
                        "setUp",
                        "tearDown",
                        "test_initialization",
                        "test_run_cycle_injects_tasks_from_file",
                        "test_run_cycle_no_input_file"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "unittest.TestCase"
                    ]
                }
            },
            "routes": [],
            "complexity": 10
        },
        "tests\\social\\tests\\core\\test_task_executor_agent.py": {
            "language": ".py",
            "functions": [
                "setUp",
                "tearDown",
                "test_initialization",
                "test_initialization_creates_task_file",
                "test_load_tasks_valid",
                "test_load_tasks_empty_list",
                "test_load_tasks_invalid_json",
                "test_load_tasks_file_not_found",
                "test_check_dependencies_no_deps",
                "test_check_dependencies_met",
                "test_check_dependencies_unmet_pending",
                "test_check_dependencies_unmet_failed",
                "test_check_dependencies_missing",
                "test_handle_response_success",
                "test_handle_response_failure",
                "test_handle_response_execution_error",
                "test_handle_response_no_task_id",
                "test_handle_response_unhandled_status",
                "test_run_cycle_dispatches_pending_task",
                "test_run_cycle_skips_completed_task",
                "test_run_cycle_skips_unmet_dependencies"
            ],
            "classes": {
                "TestTaskExecutorAgent": {
                    "methods": [
                        "setUp",
                        "tearDown",
                        "test_initialization",
                        "test_initialization_creates_task_file",
                        "test_load_tasks_valid",
                        "test_load_tasks_empty_list",
                        "test_load_tasks_invalid_json",
                        "test_load_tasks_file_not_found",
                        "test_check_dependencies_no_deps",
                        "test_check_dependencies_met",
                        "test_check_dependencies_unmet_pending",
                        "test_check_dependencies_unmet_failed",
                        "test_check_dependencies_missing",
                        "test_handle_response_success",
                        "test_handle_response_failure",
                        "test_handle_response_execution_error",
                        "test_handle_response_no_task_id",
                        "test_handle_response_unhandled_status",
                        "test_run_cycle_dispatches_pending_task",
                        "test_run_cycle_skips_completed_task",
                        "test_run_cycle_skips_unmet_dependencies"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "unittest.TestCase"
                    ]
                }
            },
            "routes": [],
            "complexity": 42
        },
        "tests\\social\\tests\\core\\test_template_engine.py": {
            "language": ".py",
            "functions": [
                "setUp",
                "tearDown",
                "test_render_generic_event_success",
                "test_render_proposal_update_success",
                "test_render_template_not_found",
                "test_render_template_syntax_error",
                "test_render_engine_unavailable",
                "test_render_complex_template",
                "test_render_with_undefined_variables",
                "test_render_with_custom_filters",
                "test_render_with_general_exception",
                "custom_upper"
            ],
            "classes": {
                "TestRenderTemplateFunction": {
                    "methods": [
                        "setUp",
                        "tearDown",
                        "test_render_generic_event_success",
                        "test_render_proposal_update_success",
                        "test_render_template_not_found",
                        "test_render_template_syntax_error",
                        "test_render_engine_unavailable",
                        "test_render_complex_template",
                        "test_render_with_undefined_variables",
                        "test_render_with_custom_filters",
                        "test_render_with_general_exception"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "unittest.TestCase"
                    ]
                }
            },
            "routes": [],
            "complexity": 23
        },
        "tests\\social\\tests\\core\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "tests\\social\\tests\\core\\memory\\test_governance_memory_engine.py": {
            "language": ".py",
            "functions": [
                "setUp",
                "tearDown",
                "test_log_single_event",
                "test_log_multiple_events_consistency_and_order",
                "test_log_event_write_failure"
            ],
            "classes": {
                "TestGovernanceMemoryEngine": {
                    "methods": [
                        "setUp",
                        "tearDown",
                        "test_log_single_event",
                        "test_log_multiple_events_consistency_and_order",
                        "test_log_event_write_failure"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "unittest.TestCase"
                    ]
                }
            },
            "routes": [],
            "complexity": 10
        },
        "tests\\social\\tests\\integration\\test_core_task_execution.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_get_next_id",
                "register_agent",
                "register_handler",
                "send_message",
                "process_messages",
                "get_agents_with_capability",
                "setUp",
                "tearDown",
                "_create_test_task_list",
                "test_simple_task_execution_success",
                "test_simple_task_execution_failure",
                "test_task_dependency_flow"
            ],
            "classes": {
                "MockQueueAgentBus": {
                    "methods": [
                        "__init__",
                        "_get_next_id",
                        "register_agent",
                        "register_handler",
                        "send_message",
                        "process_messages",
                        "get_agents_with_capability"
                    ],
                    "docstring": null,
                    "base_classes": []
                },
                "TestCoreTaskExecution": {
                    "methods": [
                        "setUp",
                        "tearDown",
                        "_create_test_task_list",
                        "test_simple_task_execution_success",
                        "test_simple_task_execution_failure",
                        "test_task_dependency_flow"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "unittest.TestCase"
                    ]
                }
            },
            "routes": [],
            "complexity": 26
        },
        "tests\\social\\tests\\integration\\test_error_recovery.py": {
            "language": ".py",
            "functions": [
                "social_agent",
                "mock_log_event",
                "test_login_failure_authentication",
                "test_post_failure_rate_limit",
                "test_scrape_failure_timeout"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5
        },
        "tests\\social\\tests\\integration\\test_full_prompt_cycle.py": {
            "language": ".py",
            "functions": [
                "test_simulated_prompt_cycle"
            ],
            "classes": {
                "TestFullPromptCycleSimulation": {
                    "methods": [
                        "test_simulated_prompt_cycle"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "unittest.TestCase"
                    ]
                }
            },
            "routes": [],
            "complexity": 2
        },
        "tests\\social\\tests\\integration\\test_posting_workflow.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "get_platform_name",
                "login",
                "post",
                "check_login_status",
                "quit",
                "setUp",
                "_create_post_message",
                "test_post_twitter_success",
                "test_post_reddit_success",
                "test_post_linkedin_success",
                "test_post_strategy_returns_false",
                "test_post_strategy_raises_post_error",
                "test_post_strategy_raises_auth_error",
                "test_post_with_image",
                "side_effect_import"
            ],
            "classes": {
                "MockPostingStrategy": {
                    "methods": [
                        "__init__",
                        "get_platform_name",
                        "login",
                        "post",
                        "check_login_status",
                        "quit"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "BaseSocialStrategy"
                    ]
                },
                "TestPostingWorkflow": {
                    "methods": [
                        "setUp",
                        "_create_post_message",
                        "test_post_twitter_success",
                        "test_post_reddit_success",
                        "test_post_linkedin_success",
                        "test_post_strategy_returns_false",
                        "test_post_strategy_raises_post_error",
                        "test_post_strategy_raises_auth_error",
                        "test_post_with_image"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "unittest.TestCase"
                    ]
                }
            },
            "routes": [],
            "complexity": 31
        },
        "tests\\social\\tests\\integration\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "tests\\social\\tests\\integration\\test_social_agent_loop.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "get_platform_name",
                "login",
                "post",
                "check_login_status",
                "scrape_mentions",
                "scrape_trends",
                "scrape_community",
                "quit",
                "setUp",
                "test_01_process_valid_post_message",
                "test_02_process_valid_scrape_message",
                "test_03_process_message_strategy_fails",
                "test_04_process_invalid_command",
                "test_05_process_post_not_logged_in",
                "test_06_process_post_with_governance_context",
                "test_07_loop_runs_multiple_cycles_empty_inbox",
                "test_08_loop_processes_message_then_empty",
                "test_09_loop_handles_check_messages_error",
                "test_10_loop_shutdown_called_on_interrupt",
                "side_effect_import",
                "shutdown_wrapper"
            ],
            "classes": {
                "MockStrategy": {
                    "methods": [
                        "__init__",
                        "get_platform_name",
                        "login",
                        "post",
                        "check_login_status",
                        "scrape_mentions",
                        "scrape_trends",
                        "scrape_community",
                        "quit"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "BaseSocialStrategy"
                    ]
                },
                "TestSocialAgentLoop": {
                    "methods": [
                        "setUp",
                        "test_01_process_valid_post_message",
                        "test_02_process_valid_scrape_message",
                        "test_03_process_message_strategy_fails",
                        "test_04_process_invalid_command",
                        "test_05_process_post_not_logged_in",
                        "test_06_process_post_with_governance_context",
                        "test_07_loop_runs_multiple_cycles_empty_inbox",
                        "test_08_loop_processes_message_then_empty",
                        "test_09_loop_handles_check_messages_error",
                        "test_10_loop_shutdown_called_on_interrupt"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "unittest.TestCase"
                    ]
                }
            },
            "routes": [],
            "complexity": 42
        },
        "tests\\social\\tests\\social\\test_facebook_strategy.py": {
            "language": ".py",
            "functions": [
                "mock_config",
                "facebook_strategy",
                "test_reply_posting_success",
                "test_reply_posting_failure",
                "test_reward_mechanism",
                "test_missing_credentials",
                "test_end_to_end_post_and_reply",
                "test_sentiment_integration"
            ],
            "classes": {
                "TestFacebookStrategy": {
                    "methods": [
                        "test_reply_posting_success",
                        "test_reply_posting_failure",
                        "test_reward_mechanism",
                        "test_missing_credentials",
                        "test_end_to_end_post_and_reply",
                        "test_sentiment_integration"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 14
        },
        "tests\\social\\tests\\social\\test_linkedin_strategy.py": {
            "language": ".py",
            "functions": [
                "mock_config",
                "linkedin_strategy",
                "test_post_creation_success",
                "test_metric_gathering_success",
                "test_metric_gathering_failure",
                "test_connection_growth_tracking",
                "test_sentiment_analysis_integration",
                "test_missing_credentials",
                "test_end_to_end_post_workflow",
                "test_post_template_snapshot"
            ],
            "classes": {
                "TestLinkedInStrategy": {
                    "methods": [
                        "test_post_creation_success",
                        "test_metric_gathering_success",
                        "test_metric_gathering_failure",
                        "test_connection_growth_tracking",
                        "test_sentiment_analysis_integration",
                        "test_missing_credentials",
                        "test_end_to_end_post_workflow",
                        "test_post_template_snapshot"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "unittest.TestCase"
                    ]
                }
            },
            "routes": [],
            "complexity": 18
        },
        "tests\\social\\tests\\social\\test_twitter_strategy.py": {
            "language": ".py",
            "functions": [
                "mock_config",
                "twitter_strategy",
                "test_tweet_posting_success",
                "test_reply_posting_success",
                "test_rate_limit_handling",
                "test_intermediate_screen_handling",
                "test_sentiment_analysis_integration",
                "test_missing_credentials",
                "test_end_to_end_tweet_workflow",
                "test_tweet_template_snapshot"
            ],
            "classes": {
                "TestTwitterStrategy": {
                    "methods": [
                        "test_tweet_posting_success",
                        "test_reply_posting_success",
                        "test_rate_limit_handling",
                        "test_intermediate_screen_handling",
                        "test_sentiment_analysis_integration",
                        "test_missing_credentials",
                        "test_end_to_end_tweet_workflow",
                        "test_tweet_template_snapshot"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 18
        },
        "tests\\social\\tests\\social\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "tests\\social\\tests\\social\\strategies\\base_strategy_test.py": {
            "language": ".py",
            "functions": [
                "mock_config",
                "mock_api",
                "strategy",
                "snapshot_dir",
                "save_snapshot",
                "load_snapshot",
                "test_init_with_valid_credentials",
                "test_init_with_missing_credentials",
                "test_feedback_on_rate_limit",
                "verify_template_rendering"
            ],
            "classes": {
                "BaseStrategyTest": {
                    "methods": [
                        "mock_config",
                        "mock_api",
                        "strategy",
                        "snapshot_dir",
                        "save_snapshot",
                        "load_snapshot",
                        "test_init_with_valid_credentials",
                        "test_init_with_missing_credentials",
                        "test_feedback_on_rate_limit",
                        "verify_template_rendering"
                    ],
                    "docstring": "Base test class for all social media strategy tests.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 20
        },
        "tests\\social\\tests\\social\\strategies\\test_twitter_strategy.py": {
            "language": ".py",
            "functions": [
                "mock_config",
                "mock_api",
                "strategy",
                "snapshot_dir",
                "save_snapshot",
                "load_snapshot",
                "test_init_with_valid_credentials",
                "test_init_with_missing_credentials",
                "test_feedback_on_rate_limit",
                "test_post_tweet_success",
                "test_post_tweet_rate_limit",
                "test_post_reply_success",
                "test_analyze_tweet_sentiment",
                "test_detect_and_handle_intermediate_screens_phone",
                "test_detect_and_handle_intermediate_screens_email",
                "test_detect_and_handle_intermediate_screens_no_screens",
                "test_render_tweet_template",
                "test_render_tweet_template_no_hashtags",
                "test_render_tweet_template_empty_content",
                "test_render_tweet_template_missing_content",
                "test_post_tweet_with_max_length"
            ],
            "classes": {
                "TestTwitterStrategy": {
                    "methods": [
                        "test_post_tweet_success",
                        "test_post_tweet_rate_limit",
                        "test_post_reply_success",
                        "test_analyze_tweet_sentiment",
                        "test_detect_and_handle_intermediate_screens_phone",
                        "test_detect_and_handle_intermediate_screens_email",
                        "test_detect_and_handle_intermediate_screens_no_screens",
                        "test_render_tweet_template",
                        "test_render_tweet_template_no_hashtags",
                        "test_render_tweet_template_empty_content",
                        "test_render_tweet_template_missing_content",
                        "test_post_tweet_with_max_length"
                    ],
                    "docstring": "Test suite for Twitter platform strategy.",
                    "base_classes": [
                        "BaseStrategyTest"
                    ]
                }
            },
            "routes": [],
            "complexity": 33
        },
        "tests\\social\\tests\\strategies\\base_strategy_test.py": {
            "language": ".py",
            "functions": [
                "login",
                "post_content",
                "scrape_mentions",
                "mock_config",
                "mock_driver",
                "strategy",
                "test_init_with_valid_config",
                "test_init_with_missing_config",
                "test_validate_media_files_success",
                "test_validate_media_files_missing",
                "test_wait_for_element_success",
                "test_wait_for_element_timeout",
                "test_safe_click_success",
                "test_safe_click_retry_success",
                "test_safe_click_failure",
                "test_safe_send_keys_success",
                "test_safe_send_keys_retry_success",
                "test_safe_send_keys_failure",
                "test_extract_error_details_success",
                "test_extract_error_details_failure"
            ],
            "classes": {
                "MockStrategy": {
                    "methods": [
                        "login",
                        "post_content",
                        "scrape_mentions"
                    ],
                    "docstring": "Mock strategy for testing base functionality.",
                    "base_classes": [
                        "BaseStrategy"
                    ]
                },
                "BaseStrategyTest": {
                    "methods": [
                        "mock_config",
                        "mock_driver",
                        "strategy",
                        "test_init_with_valid_config",
                        "test_init_with_missing_config",
                        "test_validate_media_files_success",
                        "test_validate_media_files_missing",
                        "test_wait_for_element_success",
                        "test_wait_for_element_timeout",
                        "test_safe_click_success",
                        "test_safe_click_retry_success",
                        "test_safe_click_failure",
                        "test_safe_send_keys_success",
                        "test_safe_send_keys_retry_success",
                        "test_safe_send_keys_failure",
                        "test_extract_error_details_success",
                        "test_extract_error_details_failure"
                    ],
                    "docstring": "Base test class for all strategy tests.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 40
        },
        "tests\\social\\tests\\strategies\\test_facebook_strategy.py": {
            "language": ".py",
            "functions": [
                "mock_setup_logging",
                "strategy",
                "test_validate_api_credentials_success",
                "test_validate_api_credentials_missing",
                "test_login_success",
                "test_login_failure_email",
                "test_login_failure_password",
                "test_post_content_success",
                "test_post_content_with_media",
                "test_post_content_failure",
                "test_scrape_mentions_success",
                "test_scrape_mentions_with_since",
                "test_scrape_mentions_empty",
                "test_post_reply_success",
                "test_analyze_post_sentiment",
                "test_calculate_engagement_reward",
                "test_render_post_template"
            ],
            "classes": {
                "TestFacebookStrategy": {
                    "methods": [
                        "strategy",
                        "test_validate_api_credentials_success",
                        "test_validate_api_credentials_missing",
                        "test_login_success",
                        "test_login_failure_email",
                        "test_login_failure_password",
                        "test_post_content_success",
                        "test_post_content_with_media",
                        "test_post_content_failure",
                        "test_scrape_mentions_success",
                        "test_scrape_mentions_with_since",
                        "test_scrape_mentions_empty",
                        "test_post_reply_success",
                        "test_analyze_post_sentiment",
                        "test_calculate_engagement_reward",
                        "test_render_post_template"
                    ],
                    "docstring": "Test cases for FacebookStrategy.",
                    "base_classes": [
                        "BaseStrategyTest"
                    ]
                }
            },
            "routes": [],
            "complexity": 33
        },
        "tests\\social\\tests\\strategies\\base_test.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "find_element",
                "find_elements",
                "get",
                "quit",
                "__init__",
                "click",
                "send_keys",
                "is_displayed",
                "get_attribute",
                "setUp",
                "tearDown",
                "assert_logged_event",
                "simulate_element_present",
                "simulate_element_not_found",
                "simulate_login_success",
                "simulate_login_failure",
                "simulate_post_success",
                "simulate_post_failure"
            ],
            "classes": {
                "MockWebDriver": {
                    "methods": [
                        "__init__",
                        "find_element",
                        "find_elements",
                        "get",
                        "quit"
                    ],
                    "docstring": "Mock Selenium WebDriver for testing.",
                    "base_classes": []
                },
                "MockElement": {
                    "methods": [
                        "__init__",
                        "click",
                        "send_keys",
                        "is_displayed",
                        "get_attribute"
                    ],
                    "docstring": "Mock Selenium WebElement for testing.",
                    "base_classes": []
                },
                "BaseStrategyTest": {
                    "methods": [
                        "setUp",
                        "tearDown",
                        "assert_logged_event",
                        "simulate_element_present",
                        "simulate_element_not_found",
                        "simulate_login_success",
                        "simulate_login_failure",
                        "simulate_post_success",
                        "simulate_post_failure"
                    ],
                    "docstring": "Base test class for all social media strategy tests.",
                    "base_classes": [
                        "unittest.TestCase"
                    ]
                }
            },
            "routes": [],
            "complexity": 38
        },
        "tests\\social\\tests\\strategies\\test_sentiment_analysis.py": {
            "language": ".py",
            "functions": [
                "setUp",
                "test_direct_sentiment_analysis_benchmarks",
                "test_twitter_strategy_sentiment_integration",
                "find_element_side_effect"
            ],
            "classes": {
                "TestSentimentAnalysisIntegration": {
                    "methods": [
                        "setUp",
                        "test_direct_sentiment_analysis_benchmarks",
                        "test_twitter_strategy_sentiment_integration"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "unittest.TestCase"
                    ]
                }
            },
            "routes": [],
            "complexity": 7
        },
        "tests\\social\\tests\\strategies\\test_linkedin_strategy.py": {
            "language": ".py",
            "functions": [
                "mock_driver",
                "mock_wait",
                "strategy",
                "test_initialize_success",
                "test_initialize_failure",
                "test_login_success",
                "test_login_without_init",
                "test_login_failure",
                "test_post_update_success",
                "test_post_update_not_logged_in",
                "test_post_update_with_media",
                "test_post_update_failure",
                "test_close",
                "test_close_with_error",
                "test_context_manager",
                "strategy",
                "test_validate_api_credentials_success",
                "test_validate_api_credentials_missing",
                "test_login_success",
                "test_login_failure_username",
                "test_login_failure_password",
                "test_post_content_success",
                "test_post_content_with_media",
                "test_post_content_failure",
                "test_scrape_mentions_success",
                "test_scrape_mentions_with_since",
                "test_scrape_mentions_empty",
                "test_gather_post_metrics_success",
                "test_gather_post_metrics_failure",
                "test_track_connection_growth_success",
                "test_track_connection_growth_threshold",
                "test_analyze_post_sentiment",
                "test_render_post_template"
            ],
            "classes": {
                "TestLinkedInStrategy": {
                    "methods": [
                        "strategy",
                        "test_validate_api_credentials_success",
                        "test_validate_api_credentials_missing",
                        "test_login_success",
                        "test_login_failure_username",
                        "test_login_failure_password",
                        "test_post_content_success",
                        "test_post_content_with_media",
                        "test_post_content_failure",
                        "test_scrape_mentions_success",
                        "test_scrape_mentions_with_since",
                        "test_scrape_mentions_empty",
                        "test_gather_post_metrics_success",
                        "test_gather_post_metrics_failure",
                        "test_track_connection_growth_success",
                        "test_track_connection_growth_threshold",
                        "test_analyze_post_sentiment",
                        "test_render_post_template"
                    ],
                    "docstring": "Test cases for LinkedInStrategy.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 51
        },
        "tests\\social\\tests\\strategies\\test_twitter_strategy.py": {
            "language": ".py",
            "functions": [
                "strategy",
                "test_validate_api_credentials_success",
                "test_validate_api_credentials_missing",
                "test_login_success",
                "test_login_failure_username",
                "test_login_failure_password",
                "test_post_content_success",
                "test_post_content_with_media",
                "test_post_content_rate_limit",
                "test_scrape_mentions_success",
                "test_scrape_mentions_with_since",
                "test_scrape_mentions_empty",
                "test_post_reply_success",
                "test_analyze_tweet_sentiment",
                "test_detect_and_handle_intermediate_screens",
                "test_render_tweet_template"
            ],
            "classes": {
                "TestTwitterStrategy": {
                    "methods": [
                        "strategy",
                        "test_validate_api_credentials_success",
                        "test_validate_api_credentials_missing",
                        "test_login_success",
                        "test_login_failure_username",
                        "test_login_failure_password",
                        "test_post_content_success",
                        "test_post_content_with_media",
                        "test_post_content_rate_limit",
                        "test_scrape_mentions_success",
                        "test_scrape_mentions_with_since",
                        "test_scrape_mentions_empty",
                        "test_post_reply_success",
                        "test_analyze_tweet_sentiment",
                        "test_detect_and_handle_intermediate_screens",
                        "test_render_tweet_template"
                    ],
                    "docstring": "Test cases for TwitterStrategy.",
                    "base_classes": [
                        "BaseStrategyTest"
                    ]
                }
            },
            "routes": [],
            "complexity": 32
        },
        "tests\\social\\tests\\tools\\test_chat_cursor_bridge.py": {
            "language": ".py",
            "functions": [
                "mock_config_manager",
                "tearDown",
                "test_write_to_cursor_input_success",
                "test_write_to_cursor_input_failure",
                "test_read_from_cursor_output_success",
                "test_read_from_cursor_output_file_not_found",
                "test_read_from_cursor_output_empty_file",
                "test_read_from_cursor_output_invalid_json"
            ],
            "classes": {
                "TestCursorBridgeFunctions": {
                    "methods": [
                        "tearDown",
                        "test_write_to_cursor_input_success",
                        "test_write_to_cursor_input_failure",
                        "test_read_from_cursor_output_success",
                        "test_read_from_cursor_output_file_not_found",
                        "test_read_from_cursor_output_empty_file",
                        "test_read_from_cursor_output_invalid_json"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "unittest.TestCase"
                    ]
                }
            },
            "routes": [],
            "complexity": 15
        },
        "tests\\social\\tests\\strategies\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "tests\\social\\tests\\tools\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "tests\\social\\tests\\utils\\test_chatgpt_scraper.py": {
            "language": ".py",
            "functions": [
                "mock_driver",
                "mock_webdriver",
                "temp_cookie_file",
                "valid_cookies",
                "test_initialization",
                "test_context_manager",
                "test_setup_browser_success",
                "test_setup_browser_failure",
                "test_cleanup_success",
                "test_cleanup_failure",
                "test_save_cookies_success",
                "test_save_cookies_failure",
                "test_load_cookies_success",
                "test_load_cookies_missing_file",
                "test_inject_jquery_success",
                "test_inject_jquery_failure",
                "test_scroll_and_capture_chats_success",
                "test_scroll_and_capture_chats_empty",
                "test_run_scraper_success",
                "test_run_scraper_navigation_error",
                "test_integration_full_workflow"
            ],
            "classes": {
                "TestChatGPTScraper": {
                    "methods": [
                        "test_initialization",
                        "test_context_manager",
                        "test_setup_browser_success",
                        "test_setup_browser_failure",
                        "test_cleanup_success",
                        "test_cleanup_failure",
                        "test_save_cookies_success",
                        "test_save_cookies_failure",
                        "test_load_cookies_success",
                        "test_load_cookies_missing_file",
                        "test_inject_jquery_success",
                        "test_inject_jquery_failure",
                        "test_scroll_and_capture_chats_success",
                        "test_scroll_and_capture_chats_empty",
                        "test_run_scraper_success",
                        "test_run_scraper_navigation_error",
                        "test_integration_full_workflow"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 38
        },
        "tests\\social\\tests\\utils\\test_browser_utils.py": {
            "language": ".py",
            "functions": [
                "mock_uc",
                "mock_options",
                "test_get_undetected_driver_headless",
                "test_get_undetected_driver_with_proxy",
                "test_get_undetected_driver_with_user_agent",
                "test_get_undetected_driver_all_options",
                "test_get_undetected_driver_import_error",
                "test_get_undetected_driver_chrome_error",
                "test_get_undetected_driver_options_error"
            ],
            "classes": {},
            "routes": [],
            "complexity": 9
        },
        "tests\\social\\tests\\utils\\test_cursor_utils.py": {
            "language": ".py",
            "functions": [
                "valid_prompt_payload",
                "temp_cursor_dir",
                "test_export_prompt_success",
                "test_export_prompt_invalid_payload",
                "test_export_prompt_none_payload",
                "test_export_prompt_directory_creation",
                "test_export_prompt_os_error",
                "test_export_prompt_json_error",
                "test_export_prompt_write_error",
                "test_export_prompt_filename_generation",
                "test_export_prompt_special_chars_in_id",
                "test_export_prompt_no_prompt_id",
                "test_integration_file_persistence"
            ],
            "classes": {
                "TestCursorUtils": {
                    "methods": [
                        "test_export_prompt_success",
                        "test_export_prompt_invalid_payload",
                        "test_export_prompt_none_payload",
                        "test_export_prompt_directory_creation",
                        "test_export_prompt_os_error",
                        "test_export_prompt_json_error",
                        "test_export_prompt_write_error",
                        "test_export_prompt_filename_generation",
                        "test_export_prompt_special_chars_in_id",
                        "test_export_prompt_no_prompt_id",
                        "test_integration_file_persistence"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 24
        },
        "tests\\social\\tests\\utils\\test_devlog_analyzer.py": {
            "language": ".py",
            "functions": [
                "create_sample_data",
                "test_track_post_with_publish_time",
                "test_get_best_posting_times_no_data"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "tests\\social\\tests\\utils\\test_performance_logger.py": {
            "language": ".py",
            "functions": [
                "test_log_successful_outcome",
                "test_log_failed_outcome",
                "test_log_file_write_error"
            ],
            "classes": {
                "TestPerformanceLogger": {
                    "methods": [
                        "test_log_successful_outcome",
                        "test_log_failed_outcome",
                        "test_log_file_write_error"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "unittest.TestCase"
                    ]
                }
            },
            "routes": [],
            "complexity": 6
        },
        "tests\\social\\tests\\utils\\test_mailbox_handler.py": {
            "language": ".py",
            "functions": [
                "mailbox_dirs",
                "test_mailbox_init_creates_dirs",
                "test_check_for_messages_empty_inbox",
                "test_check_for_messages_valid_message",
                "test_check_for_messages_invalid_json",
                "test_check_for_messages_not_dict",
                "test_check_for_messages_inbox_not_found",
                "test_send_message_success",
                "test_send_message_write_fails",
                "mock_logging",
                "test_init_dir_creation_fails",
                "test_check_messages_read_io_error",
                "test_move_file_fails",
                "test_check_messages_empty_file",
                "test_check_messages_file_disappears_before_open",
                "setUp",
                "tearDown",
                "test_01_initialization_creates_directories",
                "test_02_send_message_creates_file",
                "test_03_check_messages_empty_inbox",
                "test_04_check_messages_valid_json",
                "test_05_check_messages_invalid_json",
                "test_06_check_messages_non_dict_json",
                "test_07_check_messages_non_json_file",
                "test_08_check_messages_mixed_files"
            ],
            "classes": {
                "TestMailboxHandler": {
                    "methods": [
                        "setUp",
                        "tearDown",
                        "test_01_initialization_creates_directories",
                        "test_02_send_message_creates_file",
                        "test_03_check_messages_empty_inbox",
                        "test_04_check_messages_valid_json",
                        "test_05_check_messages_invalid_json",
                        "test_06_check_messages_non_dict_json",
                        "test_07_check_messages_non_json_file",
                        "test_08_check_messages_mixed_files"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "unittest.TestCase"
                    ]
                },
                "TestMailboxHandlerUnittestStyle": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "unittest.TestCase"
                    ]
                }
            },
            "routes": [],
            "complexity": 35
        },
        "tests\\social\\tests\\utils\\test_retry_utils.py": {
            "language": ".py",
            "functions": [
                "test_successful_execution_no_retry",
                "test_retry_on_timeout_exception",
                "test_retry_on_stale_element",
                "test_retry_on_element_intercepted",
                "test_max_retries_exceeded",
                "test_custom_retry_parameters",
                "test_exponential_backoff",
                "test_preserve_function_metadata",
                "test_mixed_exceptions",
                "test_args_kwargs_passing",
                "test_integration_with_selenium",
                "test_func",
                "click_element",
                "__init__",
                "click"
            ],
            "classes": {
                "TestRetryUtils": {
                    "methods": [
                        "test_successful_execution_no_retry",
                        "test_retry_on_timeout_exception",
                        "test_retry_on_stale_element",
                        "test_retry_on_element_intercepted",
                        "test_max_retries_exceeded",
                        "test_custom_retry_parameters",
                        "test_exponential_backoff",
                        "test_preserve_function_metadata",
                        "test_mixed_exceptions",
                        "test_args_kwargs_passing",
                        "test_integration_with_selenium"
                    ],
                    "docstring": null,
                    "base_classes": []
                },
                "MockWebElement": {
                    "methods": [
                        "__init__",
                        "click"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 28
        },
        "tests\\social\\tests\\utils\\test_utils.py": {
            "language": ".py",
            "functions": [
                "create_mock_strategy_config",
                "simulate_timeout_exception",
                "setup_driver",
                "create_mock_agent_config",
                "initialize_mock_strategy",
                "__init__",
                "get",
                "find_element",
                "find_elements",
                "add_mock_element",
                "clear_mock_elements",
                "quit",
                "__init__",
                "click",
                "send_keys",
                "is_displayed",
                "get_attribute",
                "clear",
                "__init__",
                "json",
                "raise_for_status",
                "__init__",
                "_log_call",
                "login",
                "create_post",
                "get_analytics",
                "check_login_status",
                "upload_media",
                "add_tags",
                "schedule_post",
                "set_mock_login",
                "set_mock_create_post",
                "set_mock_analytics",
                "reset_call_log",
                "get_call_log"
            ],
            "classes": {
                "MockWebDriver": {
                    "methods": [
                        "__init__",
                        "get",
                        "find_element",
                        "find_elements",
                        "add_mock_element",
                        "clear_mock_elements",
                        "quit"
                    ],
                    "docstring": "Mock Selenium WebDriver for testing.",
                    "base_classes": []
                },
                "MockElement": {
                    "methods": [
                        "__init__",
                        "click",
                        "send_keys",
                        "is_displayed",
                        "get_attribute",
                        "clear"
                    ],
                    "docstring": "Mock Selenium WebElement for testing.",
                    "base_classes": []
                },
                "MockResponse": {
                    "methods": [
                        "__init__",
                        "json",
                        "raise_for_status"
                    ],
                    "docstring": "Mock requests.Response for testing.",
                    "base_classes": []
                },
                "MockBaseSocialStrategy": {
                    "methods": [
                        "__init__",
                        "_log_call",
                        "login",
                        "create_post",
                        "get_analytics",
                        "check_login_status",
                        "upload_media",
                        "add_tags",
                        "schedule_post",
                        "set_mock_login",
                        "set_mock_create_post",
                        "set_mock_analytics",
                        "reset_call_log",
                        "get_call_log"
                    ],
                    "docstring": "Mock implementation of BaseSocialStrategy for testing purposes.",
                    "base_classes": [
                        "BaseSocialStrategy"
                    ]
                }
            },
            "routes": [],
            "complexity": 65
        },
        "tests\\social\\tests\\utils\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "tests\\task_nexus\\test_task_nexus.py": {
            "language": ".py",
            "functions": [
                "temp_task_file",
                "test_add_and_load_task",
                "test_get_next_task_marks_claimed",
                "test_get_next_task_filters_by_type",
                "test_update_task_status",
                "test_stats_summary"
            ],
            "classes": {},
            "routes": [],
            "complexity": 6
        },
        "tests\\tools\\test_code_applicator.py": {
            "language": ".py",
            "functions": [
                "write_file",
                "temp_file",
                "backup_file",
                "test_overwrite_mode",
                "test_append_mode",
                "test_replace_markers_mode",
                "test_backup_creation"
            ],
            "classes": {},
            "routes": [],
            "complexity": 7
        },
        "tests\\tools\\test_compile_lore_cli.py": {
            "language": ".py",
            "functions": [
                "translation_yaml",
                "tasks_json",
                "test_compile_lore_cli"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "tests\\tools\\test_compile_lore.py": {
            "language": ".py",
            "functions": [
                "create_file",
                "translation_yaml",
                "tasks_json",
                "test_compile_lore_cli"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "tests\\tools\\functional\\test_context_planner.py": {
            "language": ".py",
            "functions": [
                "test_parse_context_structure",
                "test_extract_entities_v3_basic",
                "test_extract_entities_v3_empty",
                "test_generate_context_plan_v3_returns_list",
                "test_generate_context_plan_v3_empty_plan",
                "test_create_plan_step_defaults",
                "test_create_plan_step_with_store"
            ],
            "classes": {},
            "routes": [],
            "complexity": 7
        },
        "tests\\_archive\\test_apply_proposals.py": {
            "language": ".py",
            "functions": [
                "temp_rulebook",
                "temp_proposals_file",
                "test_get_existing_rule_ids_success",
                "test_get_existing_rule_ids_empty",
                "test_get_existing_rule_ids_no_file",
                "test_parse_proposal_valid",
                "test_parse_proposal_already_accepted",
                "test_parse_proposal_already_rejected",
                "test_parse_proposal_bad_yaml",
                "test_parse_proposal_no_yaml",
                "test_parse_proposal_invalid_structure",
                "test_parse_proposal_missing_id",
                "test_update_proposal_block_status_add_accepted",
                "test_update_proposal_block_status_add_rejected",
                "test_update_proposal_block_status_replace_status",
                "empty_rulebook_path",
                "test_append_rule_creates_header",
                "test_append_rule_uses_existing_header",
                "test_main_logic"
            ],
            "classes": {},
            "routes": [],
            "complexity": 19
        },
        "tests\\_archive\\test_cli.py": {
            "language": ".py",
            "functions": [
                "test_cli_help",
                "test_run_missing_config"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "tests\\_archive\\test_emotion_detector.py": {
            "language": ".py",
            "functions": [
                "detector",
                "test_detect_frustration",
                "test_detect_insight",
                "test_detect_inspiration",
                "test_detect_neutral"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5
        },
        "tests\\_archive\\test_fragment_forge_tab.py": {
            "language": ".py",
            "functions": [
                "test_init_requires_managers",
                "test_init_success"
            ],
            "classes": {
                "DummyMemoryManager": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": []
                },
                "DummyTemplateEngine": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 2
        },
        "tests\\_archive\\test_gpt_command_router.py": {
            "language": ".py",
            "functions": [
                "setUp",
                "tearDown",
                "test_parse_accept_command",
                "test_parse_reject_command_with_reason",
                "test_parse_multiple_commands",
                "test_parse_no_commands",
                "test_parse_case_insensitivity",
                "test_update_status_accept",
                "test_update_status_reject_with_reason",
                "test_update_status_proposal_not_found",
                "test_update_status_file_not_found",
                "test_update_status_bad_format_proposal",
                "test_execute_accept_command",
                "test_execute_reject_command",
                "test_main_flow"
            ],
            "classes": {
                "TestGptCommandRouter": {
                    "methods": [
                        "setUp",
                        "tearDown",
                        "test_parse_accept_command",
                        "test_parse_reject_command_with_reason",
                        "test_parse_multiple_commands",
                        "test_parse_no_commands",
                        "test_parse_case_insensitivity",
                        "test_update_status_accept",
                        "test_update_status_reject_with_reason",
                        "test_update_status_proposal_not_found",
                        "test_update_status_file_not_found",
                        "test_update_status_bad_format_proposal",
                        "test_execute_accept_command",
                        "test_execute_reject_command",
                        "test_main_flow"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "unittest.TestCase"
                    ]
                }
            },
            "routes": [],
            "complexity": 30
        },
        "tests\\_archive\\test_governance_scraper.py": {
            "language": ".py",
            "functions": [
                "setUp",
                "tearDown",
                "test_load_recent_governance_events",
                "test_load_recent_reflections",
                "test_load_proposals_proposed",
                "test_load_proposals_all",
                "test_get_rulebook_summary",
                "test_generate_governance_data"
            ],
            "classes": {
                "TestGovernanceScraper": {
                    "methods": [
                        "setUp",
                        "tearDown",
                        "test_load_recent_governance_events",
                        "test_load_recent_reflections",
                        "test_load_proposals_proposed",
                        "test_load_proposals_all",
                        "test_get_rulebook_summary",
                        "test_generate_governance_data"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "unittest.TestCase"
                    ]
                }
            },
            "routes": [],
            "complexity": 16
        },
        "tests\\_archive\\test_reflection_agent.py": {
            "language": ".py",
            "functions": [
                "setUp",
                "tearDown",
                "test_parse_md_file",
                "test_decide_response_disagree_rule",
                "test_decide_response_disagree_monitor_halt",
                "test_decide_response_disagree_monitor_valid",
                "test_decide_response_agree",
                "test_process_alert_file_success",
                "test_process_alert_file_no_alert_id"
            ],
            "classes": {
                "TestReflectionAgent": {
                    "methods": [
                        "setUp",
                        "tearDown",
                        "test_parse_md_file",
                        "test_decide_response_disagree_rule",
                        "test_decide_response_disagree_monitor_halt",
                        "test_decide_response_disagree_monitor_valid",
                        "test_decide_response_agree",
                        "test_process_alert_file_success",
                        "test_process_alert_file_no_alert_id"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "unittest.TestCase"
                    ]
                }
            },
            "routes": [],
            "complexity": 18
        },
        "tests\\_archive\\test_saga_orchestrator.py": {
            "language": ".py",
            "functions": [
                "patch_dependencies",
                "test_orchestrator_run",
                "__init__",
                "run",
                "__init__",
                "start",
                "get",
                "set"
            ],
            "classes": {
                "DummyReflectionAgent": {
                    "methods": [
                        "__init__",
                        "run"
                    ],
                    "docstring": null,
                    "base_classes": []
                },
                "DummySagaWorker": {
                    "methods": [
                        "__init__",
                        "start"
                    ],
                    "docstring": null,
                    "base_classes": []
                },
                "FakeMemoryManager": {
                    "methods": [
                        "get",
                        "set"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 14
        },
        "tests\\_archive\\test_task_visualizer_app.py": {
            "language": ".py",
            "functions": [
                "temp_empty_file",
                "temp_invalid_json",
                "temp_valid_tasks",
                "test_read_tasks_empty",
                "test_read_tasks_invalid",
                "test_read_tasks_valid",
                "test_load_task_data_empty",
                "test_load_task_data_valid",
                "error"
            ],
            "classes": {
                "DummySt": {
                    "methods": [
                        "error"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 10
        },
        "tools\\code_applicator.py": {
            "language": ".py",
            "functions": [
                "apply_code"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "tools\\dreamscape_chronicle.py": {
            "language": ".py",
            "functions": [
                "generate_chronicle",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "tools\\thea_strategist.py": {
            "language": ".py",
            "functions": [
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "tools\\onboarding_splitter.py": {
            "language": ".py",
            "functions": [
                "split_onboarding",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "typer\\testing.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "invoke",
                "__init__"
            ],
            "classes": {
                "CliRunner": {
                    "methods": [
                        "__init__",
                        "invoke"
                    ],
                    "docstring": null,
                    "base_classes": []
                },
                "Result": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 6
        },
        "typer\\__init__.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "__init__",
                "__init__",
                "command",
                "__call__",
                "decorator"
            ],
            "classes": {
                "Exit": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "SystemExit"
                    ]
                },
                "Option": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": null,
                    "base_classes": []
                },
                "Typer": {
                    "methods": [
                        "__init__",
                        "command",
                        "__call__"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 11
        },
        "ui\\main_window.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "_archive\\app.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "run",
                "__init__",
                "_get_config_path",
                "_load_credentials",
                "_load_and_apply_credentials",
                "_save_credentials",
                "_delete_credentials",
                "init_ui",
                "refresh_chats",
                "update_progress",
                "update_chat_list",
                "show_error",
                "update_selection",
                "select_all_chats",
                "clear_selection",
                "export_selected"
            ],
            "classes": {
                "ChatScraperWorker": {
                    "methods": [
                        "__init__",
                        "run"
                    ],
                    "docstring": "Worker thread for running the ChatGPT scraper.",
                    "base_classes": [
                        "QThread"
                    ]
                },
                "DigitalDreamscapeWindow": {
                    "methods": [
                        "__init__",
                        "_get_config_path",
                        "_load_credentials",
                        "_load_and_apply_credentials",
                        "_save_credentials",
                        "_delete_credentials",
                        "init_ui",
                        "refresh_chats",
                        "update_progress",
                        "update_chat_list",
                        "show_error",
                        "update_selection",
                        "select_all_chats",
                        "clear_selection",
                        "export_selected"
                    ],
                    "docstring": "Main window for the Digital Dreamscape Chronicles application.",
                    "base_classes": [
                        "QMainWindow"
                    ]
                }
            },
            "routes": [],
            "complexity": 35
        },
        "_archive\\assistant_worker.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "job",
                "run",
                "stop"
            ],
            "classes": {
                "AssistantWorker": {
                    "methods": [
                        "__init__",
                        "job",
                        "run",
                        "stop"
                    ],
                    "docstring": "A background thread that periodically generates episodes.",
                    "base_classes": [
                        "threading.Thread"
                    ]
                }
            },
            "routes": [],
            "complexity": 8
        },
        "_archive\\base_strategy.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "login",
                "create_post",
                "get_analytics",
                "check_login_status",
                "upload_media",
                "add_tags",
                "schedule_post",
                "navigate_to",
                "wait_for_element",
                "_validate_media_files",
                "_wait_for_element",
                "_handle_verification",
                "_handle_email_verification",
                "_handle_phone_verification",
                "_extract_error_details",
                "log_agent_task",
                "update_agent_mailbox",
                "sync_task_board",
                "run_strategy_demo_task"
            ],
            "classes": {
                "BaseSocialStrategy": {
                    "methods": [
                        "__init__",
                        "login",
                        "create_post",
                        "get_analytics",
                        "check_login_status",
                        "upload_media",
                        "add_tags",
                        "schedule_post",
                        "navigate_to",
                        "wait_for_element",
                        "_validate_media_files",
                        "_wait_for_element",
                        "_handle_verification",
                        "_handle_email_verification",
                        "_handle_phone_verification",
                        "_extract_error_details"
                    ],
                    "docstring": "Abstract base class for social media platform interactions.",
                    "base_classes": [
                        "ABC"
                    ]
                }
            },
            "routes": [],
            "complexity": 36
        },
        "_archive\\chatgpt_locators.py": {
            "language": ".py",
            "functions": [],
            "classes": {
                "ChatGPTLocators": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 0
        },
        "_archive\\chatgpt_scraper.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_get_driver",
                "send_prompt",
                "_fetch_latest_response_text",
                "_wait_for_stable_response",
                "get_all_chat_titles",
                "scrape_current_chat_messages",
                "safe_get"
            ],
            "classes": {
                "ChatGPTScraper": {
                    "methods": [
                        "__init__",
                        "_get_driver",
                        "send_prompt",
                        "_fetch_latest_response_text",
                        "_wait_for_stable_response",
                        "get_all_chat_titles",
                        "scrape_current_chat_messages",
                        "safe_get"
                    ],
                    "docstring": "Handles interaction with the ChatGPT web UI using Selenium/undetected-chromedriver.",
                    "base_classes": []
                },
                "MockConfig": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 16
        },
        "_archive\\chat_scraper.py": {
            "language": ".py",
            "functions": [
                "process_all_chats"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "_archive\\cli.py": {
            "language": ".py",
            "functions": [
                "main",
                "get_recent_snippets"
            ],
            "classes": {
                "DummyHistoryManager": {
                    "methods": [
                        "get_recent_snippets"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 3
        },
        "_archive\\config.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "_archive\\constants.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "_archive\\context_manager.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "build_prompt_context"
            ],
            "classes": {
                "ContextManager": {
                    "methods": [
                        "__init__",
                        "build_prompt_context"
                    ],
                    "docstring": "Builds the context dictionary for Jinja2 prompt templates.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 4
        },
        "_archive\\cursor_editor_controller.py": {
            "language": ".py",
            "functions": [
                "_log_tool_action",
                "_update_status_file",
                "_append_to_task_list",
                "_update_project_board",
                "__init__",
                "_validate_pos",
                "get_text",
                "set_text",
                "insert_text",
                "get_cursor_position",
                "set_cursor_position",
                "get_selection",
                "set_selection",
                "get_current_file"
            ],
            "classes": {
                "CursorEditorController": {
                    "methods": [
                        "__init__",
                        "_validate_pos",
                        "get_text",
                        "set_text",
                        "insert_text",
                        "get_cursor_position",
                        "set_cursor_position",
                        "get_selection",
                        "set_selection",
                        "get_current_file"
                    ],
                    "docstring": "Manages interactions with the Cursor editor pane (Placeholders).",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 24
        },
        "_archive\\cursor_instance_controller.py": {
            "language": ".py",
            "functions": [
                "_log_tool_action",
                "_update_status_file",
                "_append_to_task_list",
                "_update_project_board",
                "__init__",
                "_find_cursor_executable",
                "launch_instance",
                "find_existing_instances",
                "focus_instance",
                "close_instance"
            ],
            "classes": {
                "CursorInstanceController": {
                    "methods": [
                        "__init__",
                        "_find_cursor_executable",
                        "launch_instance",
                        "find_existing_instances",
                        "focus_instance",
                        "close_instance"
                    ],
                    "docstring": "Manages Cursor application instances using subprocess and psutil (if available).",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 16
        },
        "_archive\\cursor_terminal_controller.py": {
            "language": ".py",
            "functions": [
                "_log_tool_action",
                "_update_status_file",
                "_append_to_task_list",
                "_update_project_board",
                "__init__",
                "_read_output",
                "_update_output_buffer",
                "_handle_cd",
                "run_command",
                "get_output",
                "get_current_directory",
                "send_input",
                "is_busy"
            ],
            "classes": {
                "CursorTerminalController": {
                    "methods": [
                        "__init__",
                        "_read_output",
                        "_update_output_buffer",
                        "_handle_cd",
                        "run_command",
                        "get_output",
                        "get_current_directory",
                        "send_input",
                        "is_busy"
                    ],
                    "docstring": "Manages interactions with the Cursor integrated terminal (using subprocess).",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 22
        },
        "_archive\\cursor_ui_trainer.py": {
            "language": ".py",
            "functions": [
                "_log_tool_action",
                "_update_status_file",
                "_append_to_task_list",
                "_update_project_board",
                "__init__",
                "start_recording_session",
                "_capture_ui_event",
                "stop_recording_session",
                "train_model_from_session"
            ],
            "classes": {
                "CursorUITrainer": {
                    "methods": [
                        "__init__",
                        "start_recording_session",
                        "_capture_ui_event",
                        "stop_recording_session",
                        "train_model_from_session"
                    ],
                    "docstring": "Placeholder class for training Cursor UI interaction models.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 14
        },
        "_archive\\cursor_window_controller.py": {
            "language": ".py",
            "functions": [
                "_log_tool_action",
                "_update_status_file",
                "_append_to_task_list",
                "_update_project_board",
                "__init__",
                "focus",
                "move",
                "resize",
                "close",
                "get_title",
                "get_position",
                "get_size",
                "is_visible"
            ],
            "classes": {
                "CursorWindowController": {
                    "methods": [
                        "__init__",
                        "focus",
                        "move",
                        "resize",
                        "close",
                        "get_title",
                        "get_position",
                        "get_size",
                        "is_visible"
                    ],
                    "docstring": "Manages interactions with the Cursor application window (Placeholders).",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 22
        },
        "_archive\\debug_imports.py": {
            "language": ".py",
            "functions": [
                "print_python_path",
                "check_module_structure"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "_archive\\DiscordManager.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "send_message"
            ],
            "classes": {
                "DiscordManager": {
                    "methods": [
                        "__init__",
                        "send_message"
                    ],
                    "docstring": "Placeholder for DiscordManager within the core package.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 4
        },
        "_archive\\dreamscape_cli.py": {
            "language": ".py",
            "functions": [
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "_archive\\dreamscape_tab.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "run",
                "__init__",
                "_init_ui",
                "_toggle_target_chat",
                "_load_initial_data",
                "_load_episode_list",
                "_display_episode_content",
                "_load_chat_list_async",
                "_update_chat_list_combo",
                "_show_chat_list_error",
                "_on_target_chat_selected",
                "_update_generate_button_state",
                "_on_send_context"
            ],
            "classes": {
                "ChatListWorker": {
                    "methods": [
                        "__init__",
                        "run"
                    ],
                    "docstring": "Worker thread to fetch chat list without blocking GUI.",
                    "base_classes": [
                        "QThread"
                    ]
                },
                "DreamscapeTabWidget": {
                    "methods": [
                        "__init__",
                        "_init_ui",
                        "_toggle_target_chat",
                        "_load_initial_data",
                        "_load_episode_list",
                        "_display_episode_content",
                        "_load_chat_list_async",
                        "_update_chat_list_combo",
                        "_show_chat_list_error",
                        "_on_target_chat_selected",
                        "_update_generate_button_state",
                        "_on_send_context"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "QWidget"
                    ]
                }
            },
            "routes": [],
            "complexity": 28
        },
        "_archive\\editor_service.py": {
            "language": ".py",
            "functions": [
                "__init__"
            ],
            "classes": {
                "CursorEditorService": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 2
        },
        "_archive\\engagement_dashboard.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "update_metrics",
                "get_aggregated_metrics",
                "calculate_unified_score",
                "display_dashboard",
                "log_event"
            ],
            "classes": {
                "EngagementDashboard": {
                    "methods": [
                        "__init__",
                        "update_metrics",
                        "get_aggregated_metrics",
                        "calculate_unified_score",
                        "display_dashboard"
                    ],
                    "docstring": "A simple class to aggregate and display social engagement metrics.\n    Now includes a basic weighted unified engagement score calculation.\n    ",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 11
        },
        "_archive\\episode_generator.py": {
            "language": ".py",
            "functions": [
                "_generation_worker",
                "__init__",
                "stop",
                "run",
                "_pump_queues",
                "__init__",
                "run",
                "_log_status",
                "stop",
                "__init__",
                "_template_selected",
                "_start",
                "_cancel",
                "_ctx_update",
                "_result_update",
                "_cycle_done",
                "_log",
                "_load_history_from_file",
                "_start_history_fetch",
                "_on_history_fetch_done",
                "on_saga_output_ready",
                "_saga_generation_finished",
                "_select_all_history",
                "_load_ignored_chat_titles",
                "on_generate_saga_clicked",
                "get_ordered_filtered_chats",
                "_on_tab_double_click"
            ],
            "classes": {
                "Config": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": []
                },
                "CycleThread": {
                    "methods": [
                        "__init__",
                        "stop",
                        "run",
                        "_pump_queues"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "QThread"
                    ]
                },
                "HistoryFetchThread": {
                    "methods": [
                        "__init__",
                        "run",
                        "_log_status",
                        "stop"
                    ],
                    "docstring": "Worker thread to fetch chat history non-headlessly.",
                    "base_classes": [
                        "QThread"
                    ]
                },
                "DreamscapeGenerator": {
                    "methods": [
                        "__init__",
                        "_template_selected",
                        "_start",
                        "_cancel",
                        "_ctx_update",
                        "_result_update",
                        "_cycle_done",
                        "_log",
                        "_load_history_from_file",
                        "_start_history_fetch",
                        "_on_history_fetch_done",
                        "on_saga_output_ready",
                        "_saga_generation_finished",
                        "_select_all_history",
                        "_load_ignored_chat_titles",
                        "on_generate_saga_clicked",
                        "get_ordered_filtered_chats",
                        "_on_tab_double_click"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "QMainWindow"
                    ]
                },
                "GenerationWorker": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "QThread"
                    ]
                }
            },
            "routes": [],
            "complexity": 53
        },
        "_archive\\experience_parser.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "parse"
            ],
            "classes": {
                "ExperienceParser": {
                    "methods": [
                        "__init__",
                        "parse"
                    ],
                    "docstring": "Parses LLM responses to extract narrative and structured experience updates.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 4
        },
        "_archive\\external_stubs.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "send_message"
            ],
            "classes": {
                "StubDiscordManager": {
                    "methods": [
                        "__init__",
                        "send_message"
                    ],
                    "docstring": "Placeholder for DiscordManager.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 4
        },
        "_archive\\facebook_strategy.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "login",
                "create_post",
                "get_analytics",
                "demo_facebook_capabilities",
                "_get_demo_config"
            ],
            "classes": {
                "FacebookStrategy": {
                    "methods": [
                        "__init__",
                        "login",
                        "create_post",
                        "get_analytics"
                    ],
                    "docstring": "Strategy for interacting with Facebook platform.",
                    "base_classes": [
                        "BaseSocialStrategy"
                    ]
                }
            },
            "routes": [],
            "complexity": 10
        },
        "_archive\\history_manager.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "find_history_files",
                "get_recent_snippets"
            ],
            "classes": {
                "HistoryManager": {
                    "methods": [
                        "__init__",
                        "find_history_files",
                        "get_recent_snippets"
                    ],
                    "docstring": "Manages access to chat history files.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 6
        },
        "_archive\\generation_engine.py": {
            "language": ".py",
            "functions": [
                "build_context",
                "generate_episode"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "_archive\\inject_task.py": {
            "language": ".py",
            "functions": [
                "parse_arguments",
                "validate_task_entry",
                "main",
                "write_task_line"
            ],
            "classes": {
                "TaskStatus": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 4
        },
        "_archive\\linkedin_strategy.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "login",
                "create_post",
                "get_analytics",
                "post_update",
                "post_article",
                "_get_user_id",
                "_get_blog_url",
                "demo_linkedin_capabilities",
                "_get_demo_config"
            ],
            "classes": {
                "LinkedInStrategy": {
                    "methods": [
                        "__init__",
                        "login",
                        "create_post",
                        "get_analytics",
                        "post_update",
                        "post_article",
                        "_get_user_id",
                        "_get_blog_url"
                    ],
                    "docstring": "Strategy for interacting with LinkedIn platform.",
                    "base_classes": [
                        "BaseSocialStrategy"
                    ]
                }
            },
            "routes": [],
            "complexity": 18
        },
        "_archive\\locator_service.py": {
            "language": ".py",
            "functions": [
                "__init__"
            ],
            "classes": {
                "CursorLocatorService": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Service layer for locating UI elements within Cursor.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 2
        },
        "_archive\\mailbox.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "create_mailbox",
                "send_message",
                "get_messages",
                "clear_mailbox",
                "delete_mailbox",
                "broadcast_message"
            ],
            "classes": {
                "MailboxHandler": {
                    "methods": [
                        "__init__",
                        "create_mailbox",
                        "send_message",
                        "get_messages",
                        "clear_mailbox",
                        "delete_mailbox",
                        "broadcast_message"
                    ],
                    "docstring": "Handles inter-service communication through file-based mailboxes.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 14
        },
        "_archive\\main_window.py": {
            "language": ".py",
            "functions": [
                "run_gui",
                "__init__",
                "closeEvent"
            ],
            "classes": {
                "MainWindow": {
                    "methods": [
                        "__init__",
                        "closeEvent"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "QMainWindow"
                    ]
                }
            },
            "routes": [],
            "complexity": 5
        },
        "_archive\\main.py": {
            "language": ".py",
            "functions": [
                "signal_handler",
                "setup_task_list",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "_archive\\MemoryManager.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load_state",
                "_save_state",
                "get_current_state_data",
                "get_full_state",
                "_deep_merge_dicts",
                "update_state",
                "save_task"
            ],
            "classes": {
                "MemoryManager": {
                    "methods": [
                        "__init__",
                        "_load_state",
                        "_save_state",
                        "get_current_state_data",
                        "get_full_state",
                        "_deep_merge_dicts",
                        "update_state"
                    ],
                    "docstring": "Manages the consolidated RPG world state stored in a single JSON file.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 15
        },
        "_archive\\memory_manager.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_initialize_db",
                "record_interaction",
                "initialize_conversation",
                "get_conversation",
                "close",
                "__init__",
                "_get_segment_file_path",
                "_load_segment",
                "_load_all_segments",
                "_save_segment",
                "set",
                "get",
                "delete",
                "clear_segment",
                "get_segment_keys",
                "get_segment_size",
                "get_stats",
                "optimize",
                "record_interaction",
                "initialize_conversation",
                "retrieve_conversation",
                "export_conversation_for_finetuning",
                "get_user_history",
                "user_sentiment_summary",
                "clear_user_history",
                "clear_platform_history",
                "generate_narrative",
                "close",
                "__del__"
            ],
            "classes": {
                "DatabaseManager": {
                    "methods": [
                        "__init__",
                        "_initialize_db",
                        "record_interaction",
                        "initialize_conversation",
                        "get_conversation",
                        "close"
                    ],
                    "docstring": "DatabaseManager stores interactions and conversation metadata for\nlong-term retention using SQLite.",
                    "base_classes": []
                },
                "UnifiedMemoryManager": {
                    "methods": [
                        "__init__",
                        "_get_segment_file_path",
                        "_load_segment",
                        "_load_all_segments",
                        "_save_segment",
                        "set",
                        "get",
                        "delete",
                        "clear_segment",
                        "get_segment_keys",
                        "get_segment_size",
                        "get_stats",
                        "optimize",
                        "record_interaction",
                        "initialize_conversation",
                        "retrieve_conversation",
                        "export_conversation_for_finetuning",
                        "get_user_history",
                        "user_sentiment_summary",
                        "clear_user_history",
                        "clear_platform_history",
                        "generate_narrative",
                        "close",
                        "__del__"
                    ],
                    "docstring": "UnifiedMemoryManager combines features from an optimized memory manager with:\n  - LRU caching and data compression (for fast short-term storage)\n  - JSON file storage for ephemeral memory segments\n  - SQLite-based long-term storage of interactions via DatabaseManager\n  - Narrative generation via Jinja2 templates\n\nMemory is segmented by context (e.g. \"system\", \"prompts\", \"interactions\").",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 60
        },
        "_archive\\prompt_execution_monitor.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "start_monitoring",
                "report_success",
                "report_failure"
            ],
            "classes": {
                "PromptExecutionMonitor": {
                    "methods": [
                        "__init__",
                        "start_monitoring",
                        "report_success",
                        "report_failure"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 8
        },
        "_archive\\saga_orchestrator.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_log",
                "run",
                "stop",
                "handle_output",
                "handle_finished",
                "handle_progress",
                "handle_error",
                "get",
                "set",
                "__init__",
                "text",
                "data"
            ],
            "classes": {
                "OrchestratedSagaRunner": {
                    "methods": [
                        "__init__",
                        "_log",
                        "run",
                        "stop"
                    ],
                    "docstring": "Coordinates running ReflectionAgent before starting SagaGenerationWorker,\ninjecting the detected emotion into the saga generation process.",
                    "base_classes": []
                },
                "MockMemoryManager": {
                    "methods": [
                        "get",
                        "set"
                    ],
                    "docstring": null,
                    "base_classes": []
                },
                "MockQListWidgetItem": {
                    "methods": [
                        "__init__",
                        "text",
                        "data"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 22
        },
        "_archive\\saga_worker.py": {
            "language": ".py",
            "functions": [
                "render_string",
                "__init__",
                "stop",
                "run"
            ],
            "classes": {
                "TemplateEngine": {
                    "methods": [
                        "render_string"
                    ],
                    "docstring": null,
                    "base_classes": []
                },
                "SagaGenerationWorker": {
                    "methods": [
                        "__init__",
                        "stop",
                        "run"
                    ],
                    "docstring": "Background thread to generate a full saga by iterating over chat items,\nrendering prompts via Jinja2, calling chat_completion, and emitting\nprogress, results, and errors back to the GUI.",
                    "base_classes": [
                        "QThread"
                    ]
                }
            },
            "routes": [],
            "complexity": 8
        },
        "_archive\\settings.py": {
            "language": ".py",
            "functions": [
                "get_all_config"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "_archive\\setup.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "_archive\\strategy_exceptions.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "__init__",
                "__init__",
                "__init__",
                "__init__",
                "__init__",
                "__init__"
            ],
            "classes": {
                "StrategyError": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Base class for strategy-related errors.",
                    "base_classes": [
                        "Exception"
                    ]
                },
                "LoginError": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Error during platform login.",
                    "base_classes": [
                        "StrategyError"
                    ]
                },
                "PostError": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Error during posting content.",
                    "base_classes": [
                        "StrategyError"
                    ]
                },
                "ScrapeError": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Error during scraping content.",
                    "base_classes": [
                        "StrategyError"
                    ]
                },
                "RateLimitError": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Error due to hitting API rate limits.",
                    "base_classes": [
                        "StrategyError"
                    ]
                },
                "AuthenticationError": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Error specifically related to invalid credentials or auth failure.",
                    "base_classes": [
                        "LoginError"
                    ]
                },
                "ContentError": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Error related to invalid or rejected content.",
                    "base_classes": [
                        "StrategyError"
                    ]
                }
            },
            "routes": [],
            "complexity": 14
        },
        "_archive\\story_generator.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_render_prompt",
                "_call_llm",
                "generate_episodes_from_web",
                "_generate_single_episode_from_scraped"
            ],
            "classes": {
                "StoryGenerator": {
                    "methods": [
                        "__init__",
                        "_render_prompt",
                        "_call_llm",
                        "generate_episodes_from_web",
                        "_generate_single_episode_from_scraped"
                    ],
                    "docstring": "Generates narrative episodes based on history and RPG state using LLMs.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 10
        },
        "_archive\\swarm_dashboard_tab.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "update_tasks",
                "update_agents",
                "update_stats",
                "update_lore",
                "_on_pause_clicked",
                "_on_retry_clicked"
            ],
            "classes": {
                "SwarmDashboardTab": {
                    "methods": [
                        "__init__",
                        "update_tasks",
                        "update_agents",
                        "update_stats",
                        "update_lore",
                        "_on_pause_clicked",
                        "_on_retry_clicked"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "QWidget"
                    ]
                }
            },
            "routes": [],
            "complexity": 14
        },
        "_archive\\swarm_data_bridge.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_run"
            ],
            "classes": {
                "SwarmDataBridge": {
                    "methods": [
                        "__init__",
                        "_run"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "QObject"
                    ]
                }
            },
            "routes": [],
            "complexity": 4
        },
        "_archive\\task_execution_monitor.py": {
            "language": ".py",
            "functions": [
                "_log_tool_action",
                "_update_status_file",
                "_append_to_task_list",
                "_update_project_board",
                "__init__",
                "start_monitoring_task",
                "update_task_status",
                "_check_tasks",
                "_monitor_loop",
                "_start_monitor_thread",
                "stop_monitoring",
                "get_task_summary"
            ],
            "classes": {
                "TaskExecutionMonitor": {
                    "methods": [
                        "__init__",
                        "start_monitoring_task",
                        "update_task_status",
                        "_check_tasks",
                        "_monitor_loop",
                        "_start_monitor_thread",
                        "stop_monitoring",
                        "get_task_summary"
                    ],
                    "docstring": "Placeholder class for monitoring agent task execution.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 20
        },
        "_archive\\terminal_service.py": {
            "language": ".py",
            "functions": [
                "__init__"
            ],
            "classes": {
                "CursorTerminalService": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Service layer for Cursor terminal operations.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 2
        },
        "_archive\\test_saga_generation_worker.py": {
            "language": ".py",
            "functions": [
                "saga_worker",
                "test_format_raw_excerpt_dict",
                "test_parse_result_no_json",
                "test_parse_result_with_json",
                "test_parse_result_invalid_json",
                "__init__",
                "get",
                "set"
            ],
            "classes": {
                "DummyMem": {
                    "methods": [
                        "__init__",
                        "get",
                        "set"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 11
        },
        "_archive\\test_saga_monitor_integration.py": {
            "language": ".py",
            "functions": [
                "create_worker",
                "test_saga_monitor_success",
                "test_saga_monitor_failure",
                "__init__",
                "emit",
                "__init__",
                "save_fragment",
                "load_fragment",
                "__init__",
                "start_monitoring",
                "report_success",
                "report_failure",
                "fake_chat_completion"
            ],
            "classes": {
                "DummySignal": {
                    "methods": [
                        "__init__",
                        "emit"
                    ],
                    "docstring": null,
                    "base_classes": []
                },
                "DummyMemory": {
                    "methods": [
                        "__init__",
                        "save_fragment",
                        "load_fragment"
                    ],
                    "docstring": null,
                    "base_classes": []
                },
                "DummyMonitor": {
                    "methods": [
                        "__init__",
                        "start_monitoring",
                        "report_success",
                        "report_failure"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 22
        },
        "_archive\\task_execution_state_machine.py": {
            "language": ".py",
            "functions": [
                "_log_tool_action",
                "_update_status_file",
                "_append_to_task_list",
                "_update_project_board",
                "__init__",
                "state",
                "_log_transition",
                "_trigger_callbacks",
                "register_callback",
                "transition_to",
                "set_received",
                "set_running",
                "set_paused",
                "set_completed",
                "set_failed",
                "set_error",
                "set_cancelled",
                "example_completion_callback"
            ],
            "classes": {
                "TaskState": {
                    "methods": [],
                    "docstring": "Enumeration of possible task states.",
                    "base_classes": [
                        "Enum"
                    ]
                },
                "TaskExecutionStateMachine": {
                    "methods": [
                        "__init__",
                        "state",
                        "_log_transition",
                        "_trigger_callbacks",
                        "register_callback",
                        "transition_to",
                        "set_received",
                        "set_running",
                        "set_paused",
                        "set_completed",
                        "set_failed",
                        "set_error",
                        "set_cancelled"
                    ],
                    "docstring": "Manages the state transitions for a single agent task.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 31
        },
        "_archive\\twitter_strategy.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "login",
                "create_post",
                "get_analytics",
                "post_update",
                "post_thread",
                "_get_bearer_token",
                "_split_into_tweets"
            ],
            "classes": {
                "TwitterStrategy": {
                    "methods": [
                        "__init__",
                        "login",
                        "create_post",
                        "get_analytics",
                        "post_update",
                        "post_thread",
                        "_get_bearer_token",
                        "_split_into_tweets"
                    ],
                    "docstring": "Strategy for interacting with Twitter platform.",
                    "base_classes": [
                        "BaseSocialStrategy"
                    ]
                }
            },
            "routes": [],
            "complexity": 16
        },
        "_archive\\UnifiedDriverManager.py": {
            "language": ".py",
            "functions": [
                "main",
                "_on_rm_error",
                "__new__",
                "__init__",
                "__enter__",
                "__exit__",
                "_get_cached_driver_path",
                "_download_driver_if_needed",
                "get_driver",
                "_get_chrome_major_version",
                "quit_driver",
                "save_cookies",
                "load_cookies",
                "is_logged_in"
            ],
            "classes": {
                "UnifiedDriverManager": {
                    "methods": [
                        "__new__",
                        "__init__",
                        "__enter__",
                        "__exit__",
                        "_get_cached_driver_path",
                        "_download_driver_if_needed",
                        "get_driver",
                        "_get_chrome_major_version",
                        "quit_driver",
                        "save_cookies",
                        "load_cookies",
                        "is_logged_in"
                    ],
                    "docstring": "Singleton class for managing an undetected Chrome WebDriver instance.\nFeatures:\n  - Persistent profile support (or temporary profiles in headless mode)\n  - Cookie saving and loading for session persistence\n  - Mobile emulation and headless mode support\n  - Context management for automatic cleanup\n  - Ability to update driver options dynamically",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 26
        },
        "_archive\\unified_chrome_driver.py": {
            "language": ".py",
            "functions": [
                "setup_logger",
                "main",
                "__new__",
                "__init__",
                "__enter__",
                "__exit__",
                "get_driver",
                "quit_driver",
                "save_cookies",
                "load_cookies",
                "is_logged_in",
                "scroll_into_view",
                "manual_scroll",
                "update_options",
                "__del__"
            ],
            "classes": {
                "UnifiedDriverManager": {
                    "methods": [
                        "__new__",
                        "__init__",
                        "__enter__",
                        "__exit__",
                        "get_driver",
                        "quit_driver",
                        "save_cookies",
                        "load_cookies",
                        "is_logged_in",
                        "scroll_into_view",
                        "manual_scroll",
                        "update_options",
                        "__del__"
                    ],
                    "docstring": "Singleton for managing an undetected Chrome WebDriver with:\n  - self\u2011healing retry logic\n  - cached driver download\n  - headless vs persistent profiles\n  - cookie persistence\n  - mobile emulation\n  - context\u2011manager support",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 28
        },
        "_archive\\utils.py": {
            "language": ".py",
            "functions": [
                "sanitize_filename",
                "save_episode_file"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "_archive\\vector_db.py": {
            "language": ".py",
            "functions": [
                "upsert",
                "query",
                "_load",
                "_save",
                "_vectorize"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5
        },
        "_archive\\window_service.py": {
            "language": ".py",
            "functions": [
                "__init__"
            ],
            "classes": {
                "CursorWindowService": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "High-level service wrapper for controlling the Cursor application window.\nDelegates to the injected low-level window controller.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 2
        },
        "_archive\\visual_cursor_control\\coordination\\cursor\\bridge_adapter.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "translate_goal_to_plan",
                "_build_refactor_plan",
                "_build_generate_tests_plan",
                "_build_execute_prompt_plan",
                "_build_type_text_plan"
            ],
            "classes": {
                "CursorGoal": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": []
                },
                "CursorBridgeAdapter": {
                    "methods": [
                        "__init__",
                        "translate_goal_to_plan",
                        "_build_refactor_plan",
                        "_build_generate_tests_plan",
                        "_build_execute_prompt_plan",
                        "_build_type_text_plan"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 12
        },
        "_archive\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "_archive\\visual_cursor_control\\coordination\\cursor\\cursor_instance_controller.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "capture",
                "__init__",
                "_init_instances",
                "get_available_instance",
                "get_instance_states",
                "chain_commands",
                "get_instance_by_id"
            ],
            "classes": {
                "CursorInstance": {
                    "methods": [
                        "__init__",
                        "capture"
                    ],
                    "docstring": "Controls a single Cursor window instance.",
                    "base_classes": []
                },
                "CursorInstanceController": {
                    "methods": [
                        "__init__",
                        "_init_instances",
                        "get_available_instance",
                        "get_instance_states",
                        "chain_commands",
                        "get_instance_by_id"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 16
        },
        "_archive\\visual_cursor_control\\coordination\\cursor\\task_execution_state_machine.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_step_to_commands"
            ],
            "classes": {
                "StepState": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "Enum"
                    ]
                },
                "TaskStep": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": []
                },
                "TaskExecutionPlan": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": []
                },
                "TaskExecutionStateMachine": {
                    "methods": [
                        "__init__",
                        "_step_to_commands"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 4
        }
    }
}