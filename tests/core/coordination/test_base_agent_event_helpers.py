import sys
import traceback

import pytest
from dreamos.coordination.agent_bus import BaseEvent, EventType
from dreamos.core.coordination.base_agent import (
    TaskMessage,
    TaskPriority,
    TaskStatus,
)
from dreamos.core.coordination.event_payloads import ErrorEventPayload

# Fixtures like test_agent, mock_agent_bus are automatically discovered from conftest.py


@pytest.mark.asyncio
async def test_base_agent_publish_event_helpers(
    test_agent,
    mock_agent_bus,  # test_agent is ConcreteAgent instance
):  # Removed type hints to avoid importing ConcreteAgent here
    """Test the various publish_task_* helper methods."""
    # Use TaskMessage's validation/defaults
    mock_task = TaskMessage(
        task_id="t-pub",
        task_type="TEST",
        params={},
        priority=TaskPriority.NORMAL,
        status=TaskStatus.PENDING,  # Status will be updated by helper typically
    )
    correlation_id = mock_task.correlation_id  # Should be generated by TaskMessage

    # Test TASK_ACCEPTED
    await test_agent.publish_task_accepted(mock_task)
    mock_agent_bus.dispatch_event.assert_awaited_with(
        BaseEvent(
            EventType.TASK_ACCEPTED,
            test_agent.agent_id,
            mock_task.to_dict(),  # Task status should be ACCEPTED now
            correlation_id,
        )
    )

    # Test TASK_STARTED
    await test_agent.publish_task_started(mock_task)
    mock_agent_bus.dispatch_event.assert_awaited_with(
        BaseEvent(
            EventType.TASK_STARTED,
            test_agent.agent_id,
            mock_task.to_dict(),  # Task status should be WORKING now
            correlation_id,
        )
    )

    # Test TASK_PROGRESS
    progress_details = "Halfway there"
    await test_agent.publish_task_progress(mock_task, 0.5, progress_details)
    expected_progress_data = mock_task.to_dict()
    expected_progress_data["progress"] = 0.5
    expected_progress_data["progress_details"] = progress_details
    mock_agent_bus.dispatch_event.assert_awaited_with(
        BaseEvent(
            EventType.TASK_PROGRESS,
            test_agent.agent_id,
            expected_progress_data,
            correlation_id,
        )
    )

    # Test TASK_COMPLETED
    result_data = {"output": "done"}
    await test_agent.publish_task_completed(mock_task, result_data)
    expected_completed_data = mock_task.to_dict()
    expected_completed_data["result"] = result_data  # Task status should be COMPLETED
    mock_agent_bus.dispatch_event.assert_awaited_with(
        BaseEvent(
            EventType.TASK_COMPLETED,
            test_agent.agent_id,
            expected_completed_data,
            correlation_id,
        )
    )

    # Test TASK_FAILED
    error_message = "It broke"
    await test_agent.publish_task_failed(mock_task, error_message, is_final=True)
    expected_failed_data = mock_task.to_dict()
    expected_failed_data["error"] = error_message
    expected_failed_data["is_final"] = True  # Task status should be FAILED
    mock_agent_bus.dispatch_event.assert_awaited_with(
        BaseEvent(
            EventType.TASK_FAILED,
            test_agent.agent_id,
            expected_failed_data,
            correlation_id,
        )
    )

    # Test AGENT_ERROR
    error_details = {"code": 500}
    agent_error_correlation_id = (
        "corr-agent-error-123"  # Use a distinct one for this event
    )
    await test_agent.publish_agent_error(
        "Core meltdown", error_details, agent_error_correlation_id
    )
    expected_error_data = ErrorEventPayload(
        error_message="Core meltdown",
        details=error_details,
        agent_id=test_agent.agent_id,
    ).to_dict()
    mock_agent_bus.dispatch_event.assert_awaited_with(
        BaseEvent(
            event_type=EventType.AGENT_ERROR,
            source_id=test_agent.agent_id,
            data=expected_error_data,
            correlation_id=agent_error_correlation_id,
        )
    )


@pytest.mark.asyncio
async def test_publish_agent_error(test_agent, mock_agent_bus):
    """Test publishing an agent error specifically with traceback info."""
    error_msg = "Specific agent error for traceback test"
    details = {"info": "extra_details"}
    correlation_id = "corr-id-agent-err-tb"
    task_id = "t-agent-err-tb"

    tb_str = ""
    exc_type_name = ""
    try:
        raise ValueError(error_msg)
    except ValueError:
        exc_type, exc_value, exc_traceback = sys.exc_info()
        tb_str = "\n".join(
            traceback.format_exception(exc_type, exc_value, exc_traceback)
        )
        exc_type_name = exc_type.__name__ if exc_type else ""

    await test_agent.publish_agent_error(
        error_msg,
        details=details,
        correlation_id=correlation_id,
        task_id=task_id,
        exception_type=exc_type_name,
        traceback=tb_str,
    )

    expected_payload = ErrorEventPayload(
        error_message=error_msg,
        agent_id=test_agent.agent_id,
        task_id=task_id,
        exception_type=exc_type_name,
        traceback=tb_str,
        details=details,
    )

    mock_agent_bus.dispatch_event.assert_awaited_once_with(
        BaseEvent(
            event_type=EventType.AGENT_ERROR,
            source_id=test_agent.agent_id,
            data=expected_payload.to_dict(),
            correlation_id=correlation_id,
        )
    )
