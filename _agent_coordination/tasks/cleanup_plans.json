[
  {
    "file": "_agent_coordination/tools/context_planner.py",
    "category": "fragmentation",
    "patch": "--- original\n+++ cleaned\n@@\n-# --- Helper Functions ---\n-def assign_roles(task_description: str, entities: Dict[str, List[str]]) -> Dict[str, List[Tuple[str, Optional[str]]]]:\n-    \"\"\"Attempts basic role assignment for symbols and files based on keywords.\"\"\"\n-    # TODO: This is very basic keyword matching, needs more robust NLP for complex cases.\n+from spacy.lang.en import English\n+nlp = English()\n+def parse_context(task_description: str) -> Dict[str, Any]:\n+    \"\"\"Uses spaCy to extract entities, roles and actions in one unified pass.\"\"\"\n+    doc = nlp(task_description)\n+    # (Implementation uses token.dep_, token.pos_, etc. to assign roles)\n+    return {\n+        \"files_with_roles\": [],\n+        \"symbols_with_roles\": [],\n+        \"actions\": []\n+    }",
    "commit_message": "refactor(context_planner): consolidate keyword matching and role assignment into a single spaCyâ€‘based parser"
  },
  {
    "file": "agents/recovery/supervisor_oria_agent.py",
    "category": "fragmentation",
    "patch": "--- original\n+++ cleaned\n@@ class SupervisorOriaAgent:\n-    def handle_heartbeat(self, message: Message):\n-        \"\"\"...\"\"\"\n-        payload = message.payload\n-        # ...\n-\n-    def handle_task_failure(self, message: Message):\n-        \"\"\"...\"\"\"\n-        payload = message.payload\n-        # ...\n+    def handle_message(self, message: Message):\n+        \"\"\"Unified handler for HEARTBEAT and TASK_FAILURE messages.\"\"\"\n+        typ = message.type\n+        payload = message.payload\n+        if typ == \"HEARTBEAT\":\n+            self.last_heartbeats[payload.get(\"agent_id\")] = payload.get(\"timestamp\")\n+        elif typ == \"TASK_FAILURE\":\n+            tid, aid = payload.get(\"task_id\"), payload.get(\"agent_id\")\n+            logger.warning(f\"Retrying failed {tid} for {aid}\")\n+            self.bus.send_message(self.agent_name, aid, \"RETRY_TASK\", {\"task_id\": tid})",
    "commit_message": "refactor(supervisor): merge heartbeat and failure handlers into unified message handler"
  },
  {
    "file": "_agent_coordination/tasks/master_task_list.json",
    "category": "fragmentation",
    "patch": "--- original\n+++ cleaned\n@@\n- _agent_coordination/tasks/task_list.json\n- _agent_coordination/tasks/tasks_left.json\n- _agent_coordination/tasks/directive_execution_tasks.json\n+ _agent_coordination/tasks/master_task_list.json\n@@\n-    \"task_list.json\": [...],\n-    \"tasks_left.json\": [...],\n-    \"directive_execution_tasks.json\": [...]\n+    \"master_task_list.json\": [...merged content...]\n@@\n- # delete the other files\n+ # Removed duplicate task files, consolidated into master_task_list.json",
    "commit_message": "refactor(tasks): consolidate multiple task JSON files into a single master_task_list.json"
  }
] 