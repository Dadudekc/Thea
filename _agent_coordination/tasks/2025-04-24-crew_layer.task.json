{
  "meta": {
    "project": "Dream.OS – Thea-Core v2",
    "batch": "2025-04-24-crew_layer",
    "notes": [
      "Hand this entire JSON to Cursor's queued_tasks loader.",
      "Order is top-to-bottom; downstream tasks assume upstream commits are merged."
    ]
  },
  "tasks": [
    {
      "id": "T-001",
      "title": "Create Adapter Interface Layer",
      "description": "Add a pluggable adapter pattern so CrewAgents can invoke external tools (OpenAI, Cursor RPC, Discord, Git, Browser) without hard dependencies.\n\n• New file: dream_os/adapters/base_adapter.py  – abstract Adapter + AdapterRegistry.\n• New file: dream_os/adapters/openai_adapter.py – wrapper around chat-completions.\n• New file: dream_os/adapters/cursor_rpc_adapter.py – local RPC or http to Cursor.\n• New file: dream_os/adapters/discord_adapter.py – minimal webhook sender.\n• Update dream_os/core/crew_agent_base.py  – inject AdapterRegistry, map role→default adapter.\n• Unit tests: tests/adapters/test_registry.py.",
      "acceptance_criteria": [
        "`AdapterRegistry.get(\"openai\")` returns a ready instance when OPENAI_API_KEY is set.",
        "`CrewAgent(role='Strategist').execute()` calls OpenAIAdapter by default.",
        "All new tests pass: `pytest -q tests/adapters`."
      ],
      "commit_message": "feat(adapters): add pluggable Adapter layer + registry with OpenAI, Cursor RPC, Discord",
      "model_recommendation": "gpt-4o (code-gen breadth across multiple files)"
    },
    {
      "id": "T-002",
      "title": "Wire Adapters Into PromptRouterService",
      "description": "Extend PromptRouterService so it routes *through* the appropriate adapter per agent.\n\n• Update dream_os/services/prompt_router_service.py – after `_select_agent`, call `agent.execute()` which now triggers adapters.\n• Log adapter results into TaskNexus (`status`, `latency_ms`).\n• Add fallback/errors to TaskNexus log.",
      "acceptance_criteria": [
        "Router prints `Thea ▸ plan ▸ ok` with adapter latency ≤ 5 s (mock).",
        "TaskNexus JSON now stores `adapter: openai`, `latency_ms`."
      ],
      "commit_message": "chore(router): channel execution through new adapter layer & persist metrics",
      "model_recommendation": "gpt-4 (surgical diff on one file)"
    },
    {
      "id": "T-003",
      "title": "Spin-Up PyQt Monitoring GUI",
      "description": "Create a lightweight PyQt5 dashboard that:\n1. Streams TaskNexus queue + log in two tables (refresh 1 s).\n2. Shows real-time agent stats (tasks, fail, avg_ms).\n3. Has an \"Add Task\" form (type dropdown, text field) → calls TaskNexus.add_task().\n\n• New dir: dream_os/gui/\n  – monitor.py  (QMainWindow)\n  – widgets.py  (TaskTable, AgentTable)\n• Entry script: dream_os/cli/gui_monitor.py\n• Requirements: ensure PyQt5 listed in README.\n• Optional: dark palette, no blocking calls.",
      "acceptance_criteria": [
        "`python -m dream_os.cli.gui_monitor` opens a window w/ live updating tables.",
        "Submitting a new task via GUI appears in queue and is processed when router loop is running."
      ],
      "commit_message": "feat(gui): add real-time PyQt5 monitoring dashboard for TaskNexus & agents",
      "model_recommendation": "gpt-4o-mini-high (UI scaffolding + slots/signals boilerplate)"
    },
    {
      "id": "T-004",
      "title": "End-to-End Smoke Script",
      "description": "Add `e2e_smoke.py` that:\n1. Starts Thea loop in a thread.\n2. Adds sample tasks (plan, code, social).\n3. Waits until all tasks logged.\n4. Prints summary timings.\n\nUsed for CI sanity-check.",
      "acceptance_criteria": [
        "Running `python e2e_smoke.py` exits with code 0 and prints ≈3 executed tasks.",
        "CI passes in < 60 s."
      ],
      "commit_message": "test(e2e): add end-to-end smoke test covering adapters, router, GUI optional",
      "model_recommendation": "gpt-4 (concise orchestration script)"
    }
  ]
} 