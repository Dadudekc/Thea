Cursor Prompt 5 — Scale Up: Subprocess & Event‑Driven Swarm

Target Files:
- `run_dream_os.py`
- `dream_mode/swarm_controller.py`
- (new) `dream_mode/utils/watchdog_dispatcher.py`

```markdown
You are extending the Dream.OS swarm to support dynamic scaling, event‑driven dispatch, and task-level QoS.

🎯 Objectives:
1. Add a `--workers N` CLI flag to `run_dream_os.py`:
   - Spawns N Cursor workers in separate subprocesses rather than fixed threads.
   - Each subprocess runs `python -m dream_mode.agents.cursor_worker --id=worker-X`.
2. In `dream_mode/swarm_controller.py`, integrate a filesystem watcher (using `watchdog`):
   - On new task file arrival under `runtime/local_blob/tasks`, immediately dispatch to a free worker.
   - Replace the fixed 5‑sec polling loop with an event‑driven callback.
3. Implement **Task TTLs**, **Retries**, and **Priority Queues** in the blob channel:
   - In `LocalBlobChannel`, attach `expires_at` timestamp to each pushed task.
   - On pull, drop expired tasks; requeue failed tasks up to 3 retries (with back‑off).
   - Allow tasks to carry a `priority` field and always pull highest‑priority first.

🔐 Keep all defaults backward‑compatible. Use `argparse` for the new flag, and ensure existing `--simulate` still works.

Save or create:
- `run_dream_os.py` (modify main CLI parsing)
- `dream_mode/utils/watchdog_dispatcher.py` (new event‑loop)
- `dream_mode/swarm_controller.py` (replace polling with watchdog)
- `dream_mode/local_blob_channel.py` (enhance TTL/retries/priority)

After generation, please run `pytest` to ensure no regressions.
``` 