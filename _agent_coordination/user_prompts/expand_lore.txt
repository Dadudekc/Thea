Cursor Prompt 6 — Expand Lore: Auto‑Compilation & Chronicle

Target Files:
- `dream_mode/agents/chatgpt_web_agent.py`
- (new) `_agent_coordination/tools/chronicle_logger.py`
- (new) `_agent_coordination/tools/lore_templates.py`

```markdown
You are enriching Dream.OS with an automated lore‑compilation and permanent "Dream Chronicle."

🎯 Objectives:
1. In `chatgpt_web_agent.py`, wrap every pulled result through `LoreCompilerAgent` before injection:
   ```python
   from _agent_coordination.tools.compile_lore import LoreCompilerAgent
   lore = LoreCompilerAgent().compile(res["content"])
   self.inject_response(lore)
   ```
2. Create `chronicle_logger.py`:
   - Append timestamped lore entries to `dream_logs/lore/chronicle.md`.
   - Ensure thread‑safe writes and daily file rotation.
3. Scaffold `lore_templates.py` with at least two Jinja2‑style templates for:
   - Single‑step epilogues
   - Multi‑step arc narratives

🔐 Design for plugging in new templates later. Use standard file‑locking on writes, and add unit tests for the templates module.
``` 