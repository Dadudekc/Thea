Below is a **project‑agnostic, copy‑paste‑ready template** you can drop into _any_ repo.  
Fill the double‑braced placeholders (or feed them via your templating engine) and run the directive.

---

# 🧪 TEST‑COVERAGE EXPANSION DIRECTIVE – {{ project_name }}

## 🎯 OBJECTIVE  
Raise overall _statement_ coverage to **≥ {{ target_coverage | default(90) }} %**, with priority on high‑impact modules and logic‑critical services.

## 📊 CURRENT SNAPSHOT  
- **Total:** {{ coverage.total }} %  
- **Below Target:**  
{% for f in coverage.below_threshold -%}  
- `{{ f.path }}` — {{ f.coverage }} %  
{% endfor %}

## 📂 SCOPE / TARGET AREAS  
Focus on:  
{% for d in target_dirs -%}  
- `{{ d }}`  
{% endfor %}  
- Any file modified in the last **{{ recent_days }} days**

## 🧠 STRATEGY (Loop per file)  
1. Identify uncovered / edge branches.  
2. Write **unit tests** (mock I/O & external deps).  
3. Add **integration test stubs** for external APIs.  
4. Apply **Red → Green → Refactor** if code changes improve testability.  
5. Emit `log_event("TEST_ADDED", agent_id, {...})` for every new test.

## ✅ DONE WHEN  
- Each targeted file ≥ {{ target_coverage | default(90) }} %  
- Edge cases, exception paths, and retry logic covered.  
- Critical service paths assert correct log events.  

## 🧪 EXAMPLE COMPLETION (INLINE)  
```python
# tests/{{ example_module }}/test_{{ example_unit }}.py
def test_happy_path(monkeypatch):
    ...
    assert result == expected
    log_event("TEST_PASSED", "CoverageAgent", {"test": "test_happy_path"})

def test_error_path_raises():
    ...
    with pytest.raises(ExpectedError):
        ...
```

---

### ✍️ Placeholder Reference

| Placeholder | Expected value |
|-------------|----------------|
| `project_name` | Human‑readable repo / service name |
| `target_coverage` | Coverage goal (int %) – default 90 |
| `coverage.total` | Current overall coverage |
| `coverage.below_threshold` | List ↦ { path, coverage } |
| `target_dirs` | List of dir / file globs to prioritise |
| `recent_days` | “Recently‑touched” window (int) |
| `example_module` / `example_unit` | Short demo names |

Use Jinja2, Go‑tmpl, or your preferred engine to render these values before dispatching the prompt.