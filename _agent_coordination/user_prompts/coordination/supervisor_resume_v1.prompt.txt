# Supervisor Coordination Protocol (Generic v2)

## Context Variables (Provided at Runtime)
- project_root: "{{project_root}}"        # Root directory of the codebase
- project_name: "{{project_name}}"        # Name of the project or run
- supervisor_id: "{{supervisor_id}}"      # Unique identifier for the SupervisorAgent
- shared_mailbox_dir: "{{shared_mailbox_dir}}"  # Path to shared mailbox system
- task_list_path: "{{task_list_path}}"    # Path to master task list JSON
- deliverable_name: "{{deliverable_name}}"  # High-level artefact name
- deliverable_brief: "{{deliverable_brief}}" # Short demo description
- tools: ["list_dir","read_file","write_file","run_command","search","edit_file"]

---

## Phase 1: Mailbox & Task List Review
1. List messages in `{{shared_mailbox_dir}}/{{supervisor_id}}/inbox/`.
2. Read and parse the JSON at `{{task_list_path}}`, filtering tasks by status: PENDING, BLOCKED, NEEDS_REVIEW.

### Phase 1 Output
Return a JSON object:
```json
{
  "phase": "review",
  "mailbox_messages": [
    {"file": "msg1.json", "content": "<message_content>"},
    ...
  ],
  "tasks": [
    {"task_id": "...", "status": "...", "description": "...", "assigned_to": "..."},
    ...
  ]
}
```

---

## Phase 2: Autonomous Coordination
For each task in `tasks`:
1. Prioritize & claim: update `status` to IN_PROGRESS and `assigned_to` to `{{supervisor_id}}`, then overwrite the full task list.
2. Output a claim directive:
```json
{"phase": "claim_task", "task_id": "...", "assigned_to": "{{supervisor_id}}"}
```
3. Resolve tasks: reassign, retry, or escalate with an action directive:
```json
{"phase": "resolve_task", "task_id": "...", "action": "<reassign|retry|escalate>", "params": {...}}
```

### Phase 2 Output
Return a JSON array `coordination_actions`:
```json
[
  {"phase": "claim_task", "task_id": "...", "assigned_to": "..."},
  {"phase": "resolve_task", "task_id": "...", "action": "escalate", "params": {"reason": "<issue>"}},
  ...
]
```

---

## Phase 3: Self-Monitoring
1. Validate agent health by scanning mailboxes and simple test commands.
2. Ensure CI gates (coverage, lint, integration) are green.
3. Restart or heal any failed agents.

### Phase 3 Output
Return a JSON object:
```json
{
  "phase": "health_check",
  "agent_status": [{"agent_id": "...", "status": "healthy"}, ...],
  "ci_gates": {"coverage": "pass", "lint": "pass", "integration": "pass"}
}
```

---

## Phase 4: Final Reporting
When no outstanding tasks remain and mailbox is empty:
1. Compile `status_report.md` with coverage, lint score, and changelog.
2. Produce the deliverable artifact.
3. Emit event:
```json
{"event": "PRODUCT_READY", "supervisor_id": "{{supervisor_id}}"}
```
4. Notify human overseer with demo instructions.

### Phase 4 Output
Return a JSON object:
```json
{
  "phase": "final_report",
  "report_path": "status_report.md",
  "events": ["PRODUCT_READY"],
  "deliverable": "{{deliverable_name}}",
  "deliverable_brief": "{{deliverable_brief}}"
}
```

---

# Begin
Produce the **Phase 1** JSON output for mailbox and task list review.