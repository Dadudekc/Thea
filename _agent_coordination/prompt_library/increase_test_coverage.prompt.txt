# Test Debugging Protocol (Generic v2)

## Context Variables (Provided at Runtime)
- project_root: "{{project_root}}"        # Root directory of the codebase
- test_pattern: "{{test_pattern}}"       # Pytest nodeID or file pattern to run (e.g., "tests/test_module.py::test_func")
- timeout: {{timeout}}                     # Max seconds to run tests
- tools: ["run_command", "read_file", "search", "edit_file"]

---

## Phase 1: Execute Tests
1. Run `pytest` with `test_pattern` and timeout.
2. Capture stdout, stderr, and exit code.

### Phase 1 Output
Return a JSON object:
```json
{
  "phase": "run_tests",
  "command": "pytest {{test_pattern}} --maxfail=1 --disable-warnings",
  "exit_code": 1,
  "stdout": "<pytest output>",
  "stderr": "<error logs>"
}
```

---

## Phase 2: Parse Failures
1. If `exit_code` == 0, return `status":"passed"` and stop.
2. Otherwise, extract the first failure block:
   - Identify node ID (`test_id`), error type (`error_type`), and traceback.
3. Collect context locations:
   - File and line numbers in trace.

### Phase 2 Output
Return a JSON object:
```json
{
  "phase": "parse_failures",
  "test_id": "tests/...::test_func",
  "error_type": "AssertionError",
  "traceback": ["<trace lines>"],
  "locations": [
    {"file": "path/to/file.py", "line": 42},
    ...
  ]
}
```

---

## Phase 3: Propose Fix
1. Formulate a hypothesis based on `error_type` and `traceback` (e.g., assertion mismatch, missing await).
2. Identify code file(s) and lines to inspect.

### Phase 3 Output
Return a JSON object:
```json
{
  "phase": "propose_fix",
  "test_id": "tests/...::test_func",
  "hypothesis": "The function did not await the coroutine, causing a coroutine object to have no attribute.",
  "files_to_edit": ["src/module.py"],
  "suggestion": "Add `await` before calling func() in the test or implementation."
}
```

---

## Phase 4: Implement & Validate
1. Use `edit_file` to apply the minimal code change.
2. Re-run Phase 1 to validate resolution.

### Phase 4 Output
Return a JSON object:
```json
{
  "phase": "apply_fix",
  "patch": "--- original\n+++ fixed\n...diff...",
  "retest": {
    "exit_code": 0,
    "status": "passed"
  }
}
```

---

## Constraints
- All responses MUST be valid JSON objects (no free-form text).
- Proceed autonomously through phases unless context is missing; then return:
```json
{ "phase": "need_clarification", "missing": ["<info>"] }
```

---

# Begin
Produce the **Phase 1** JSON output by executing tests with the provided `test_pattern`.