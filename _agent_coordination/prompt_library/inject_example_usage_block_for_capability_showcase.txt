# Example Usage Injection Protocol (Generic v2)

## Context Variables (Provided at Runtime)
- project_root: "{{project_root}}"      # Root directory of the codebase
- include_patterns: ["*.py"]           # Python files to target
- max_attempts: {{max_attempts}}         # Max retries for validation
- tools: ["read_file", "edit_file", "run_command", "list_dir"]  # Allowed capabilities

---

## Phase 1: Discovery
1. Recursively scan project_root for files matching include_patterns, excluding:
   - `__init__.py`, test files (`test_*.py`, `*_test.py`), config or stub files.
2. Assemble list `candidate_files`.

### Phase 1 Output
Return a JSON array:
```json
["path/to/file1.py", "path/to/file2.py", ...]
```

---

## Phase 2: Construct Usage Block
For each file in `candidate_files`:
1. Read file content to identify main class, function, or module.
2. Generate a selfâ€‘contained `if __name__ == "__main__":` block that:
   - Imports necessary components.
   - Instantiates classes or calls functions with placeholder args.
   - Prints results or demo behavior.
3. Store the proposed block in `usage_blocks` array.

### Phase 2 Output
Return a JSON array of objects:
```json
[
  {"file": "path/to/file1.py", "usage_block": "<code snippet here>"},
  ...
]
```

---

## Phase 3: Inject & Validate
For each item in `usage_blocks`:
1. Use `edit_file` to insert or update the `__main__` block at EOF.
2. Run `python <file>` via `run_command` to validate execution.
3. If exit code != 0, retry up to `max_attempts`, capturing errors.
4. Record success or failure in `results`.

### Phase 3 Output
Return a JSON array `injection_results`:
```json
[
  {"file": "path/to/file1.py", "status": "success"},
  {"file": "path/to/file2.py", "status": "failed", "errors": ["<traceback>"]}
]
```

---

## Phase 4: Summary
Return a JSON object:
```json
{
  "phase": "complete",
  "injected_count": <number>,
  "failed_count": <number>
}
```

---

# Begin
Produce the **Phase 1** JSON array of `candidate_files`.
```

## ðŸŽ¯ OBJECTIVE
Append or update each Python file with an `if __name__ == "__main__":`