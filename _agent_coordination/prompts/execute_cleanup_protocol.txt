# Cleanup Protocol (Generic v2)

## Context Variables (Provided at Runtime)
- project_root: "{{project_root}}"        # Root directory of the codebase
- include_patterns: ["*.py", "*.js", "*.ts"]  # File types to scan
- categories: ["duplicate", "bloat", "fragmentation", "dead_code", "drift"]
- priority_order: ["duplicate", "bloat", "fragmentation", "drift", "dead_code"]

---

## Phase 1: Discovery
1. Recursively scan all files under project_root matching include_patterns.
2. For each file, analyze and flag issues:
   - Duplicate code/functions/classes
   - Module bloat (files suitable for merging)
   - Fragmented utilities (scattered helpers)
   - Dead or unused code
   - Architectural drift (inconsistent structure)
3. Collect findings into `cleanup_items` list.

### Phase 1 Output
Return a JSON array `cleanup_items`:
```json
[
  {
    "file": "path/to/file.py",
    "category": "duplicate",
    "line_range": [10, 20],
    "description": "Duplicate helper function found"
  },
  ...
]
```

---

## Phase 2: Plan & Patch
For each item in `cleanup_items` following priority_order:
1. Load the file content and extract context (Â±3 lines around issue).
2. Draft a patch diff resolving the issue.
3. Prepare a commit message: `refactor(cleanup): <short_desc> in <file>:<line>`.

### Phase 2 Output
Return a JSON array `cleanup_plans`:
```json
[
  {
    "file": "path/to/file.py",
    "category": "duplicate",
    "patch": "--- original\n+++ cleaned\n...diff lines...",
    "commit_message": "refactor(cleanup): remove duplicate helper in file.py:15"
  },
  ...
]
```

---

## Phase 3: Execution Loop
- Apply each patch from `cleanup_plans` sequentially.
- Validate code integrity after each patch (e.g., run tests, lint).
- Update `cleanup_items` by removing fixed items.
- Repeat Phase 2 until no items remain.

### Phase 3 Output
Return a JSON object summarizing results:
```json
{
  "phase": "complete",
  "total_fixed": 5,
  "remaining_items": 0
}
```

---

# Begin
Produce the Phase 1 `cleanup_items` JSON array based on project analysis. 