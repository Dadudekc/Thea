{"id": "execute_cleanup_protocol", "payload": "# Cleanup Protocol (Generic v2)\n\n## Context Variables (Provided at Runtime)\n- project_root: \"{{project_root}}\"        # Root directory of the codebase\n- include_patterns: [\"*.py\", \"*.js\", \"*.ts\"]  # File types to scan\n- categories: [\"duplicate\", \"bloat\", \"fragmentation\", \"dead_code\", \"drift\"]\n- priority_order: [\"duplicate\", \"bloat\", \"fragmentation\", \"drift\", \"dead_code\"]\n\n---\n\n## Phase 1: Discovery\n1. Recursively scan all files under project_root matching include_patterns.\n2. For each file, analyze and flag issues:\n   - Duplicate code/functions/classes\n   - Module bloat (files suitable for merging)\n   - Fragmented utilities (scattered helpers)\n   - Dead or unused code\n   - Architectural drift (inconsistent structure)\n3. Collect findings into `cleanup_items` list.\n\n### Phase 1 Output\nReturn a JSON array `cleanup_items`:\n```json\n[\n  {\n    \"file\": \"path/to/file.py\",\n    \"category\": \"duplicate\",\n    \"line_range\": [10, 20],\n    \"description\": \"Duplicate helper function found\"\n  },\n  ...\n]\n```\n\n---\n\n## Phase 2: Plan & Patch\nFor each item in `cleanup_items` following priority_order:\n1. Load the file content and extract context (\u00b13 lines around issue).\n2. Draft a patch diff resolving the issue.\n3. Prepare a commit message: `refactor(cleanup): <short_desc> in <file>:<line>`.\n\n### Phase 2 Output\nReturn a JSON array `cleanup_plans`:\n```json\n[\n  {\n    \"file\": \"path/to/file.py\",\n    \"category\": \"duplicate\",\n    \"patch\": \"--- original\\n+++ cleaned\\n...diff lines...\",\n    \"commit_message\": \"refactor(cleanup): remove duplicate helper in file.py:15\"\n  },\n  ...\n]\n```\n\n---\n\n## Phase 3: Execution Loop\n- Apply each patch from `cleanup_plans` sequentially.\n- Validate code integrity after each patch (e.g., run tests, lint).\n- Update `cleanup_items` by removing fixed items.\n- Repeat Phase 2 until no items remain.\n\n### Phase 3 Output\nReturn a JSON object summarizing results:\n```json\n{\n  \"phase\": \"complete\",\n  \"total_fixed\": 5,\n  \"remaining_items\": 0\n}\n```\n\n---\n\n# Begin\nProduce the Phase 1 `cleanup_items` JSON array based on project analysis. "}