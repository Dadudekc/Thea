{"id": "scale_up_swarm", "payload": "Cursor Prompt 5 \u2014 Scale Up: Subprocess & Event\u2011Driven Swarm\n\nTarget Files:\n- `run_dream_os.py`\n- `dream_mode/swarm_controller.py`\n- (new) `dream_mode/utils/watchdog_dispatcher.py`\n\n```markdown\nYou are extending the Dream.OS swarm to support dynamic scaling, event\u2011driven dispatch, and task-level QoS.\n\n\ud83c\udfaf Objectives:\n1. Add a `--workers N` CLI flag to `run_dream_os.py`:\n   - Spawns N Cursor workers in separate subprocesses rather than fixed threads.\n   - Each subprocess runs `python -m dream_mode.agents.cursor_worker --id=worker-X`.\n2. In `dream_mode/swarm_controller.py`, integrate a filesystem watcher (using `watchdog`):\n   - On new task file arrival under `runtime/local_blob/tasks`, immediately dispatch to a free worker.\n   - Replace the fixed 5\u2011sec polling loop with an event\u2011driven callback.\n3. Implement **Task TTLs**, **Retries**, and **Priority Queues** in the blob channel:\n   - In `LocalBlobChannel`, attach `expires_at` timestamp to each pushed task.\n   - On pull, drop expired tasks; requeue failed tasks up to 3 retries (with back\u2011off).\n   - Allow tasks to carry a `priority` field and always pull highest\u2011priority first.\n\n\ud83d\udd10 Keep all defaults backward\u2011compatible. Use `argparse` for the new flag, and ensure existing `--simulate` still works.\n\nSave or create:\n- `run_dream_os.py` (modify main CLI parsing)\n- `dream_mode/utils/watchdog_dispatcher.py` (new event\u2011loop)\n- `dream_mode/swarm_controller.py` (replace polling with watchdog)\n- `dream_mode/local_blob_channel.py` (enhance TTL/retries/priority)\n\nAfter generation, please run `pytest` to ensure no regressions.\n``` "}