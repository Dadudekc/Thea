{"id": "inject_example_usage_block_for_capability_showcase", "payload": "# Example Usage Injection Protocol (Generic v2)\n\n## Context Variables (Provided at Runtime)\n- project_root: \"{{project_root}}\"      # Root directory of the codebase\n- include_patterns: [\"*.py\"]           # Python files to target\n- max_attempts: {{max_attempts}}         # Max retries for validation\n- tools: [\"read_file\", \"edit_file\", \"run_command\", \"list_dir\"]  # Allowed capabilities\n\n---\n\n## Phase 1: Discovery\n1. Recursively scan project_root for files matching include_patterns, excluding:\n   - `__init__.py`, test files (`test_*.py`, `*_test.py`), config or stub files.\n2. Assemble list `candidate_files`.\n\n### Phase 1 Output\nReturn a JSON array:\n```json\n[\"path/to/file1.py\", \"path/to/file2.py\", ...]\n```\n\n---\n\n## Phase 2: Construct Usage Block\nFor each file in `candidate_files`:\n1. Read file content to identify main class, function, or module.\n2. Generate a self\u2011contained `if __name__ == \"__main__\":` block that:\n   - Imports necessary components.\n   - Instantiates classes or calls functions with placeholder args.\n   - Prints results or demo behavior.\n3. Store the proposed block in `usage_blocks` array.\n\n### Phase 2 Output\nReturn a JSON array of objects:\n```json\n[\n  {\"file\": \"path/to/file1.py\", \"usage_block\": \"<code snippet here>\"},\n  ...\n]\n```\n\n---\n\n## Phase 3: Inject & Validate\nFor each item in `usage_blocks`:\n1. Use `edit_file` to insert or update the `__main__` block at EOF.\n2. Run `python <file>` via `run_command` to validate execution.\n3. If exit code != 0, retry up to `max_attempts`, capturing errors.\n4. Record success or failure in `results`.\n\n### Phase 3 Output\nReturn a JSON array `injection_results`:\n```json\n[\n  {\"file\": \"path/to/file1.py\", \"status\": \"success\"},\n  {\"file\": \"path/to/file2.py\", \"status\": \"failed\", \"errors\": [\"<traceback>\"]}\n]\n```\n\n---\n\n## Phase 4: Summary\nReturn a JSON object:\n```json\n{\n  \"phase\": \"complete\",\n  \"injected_count\": <number>,\n  \"failed_count\": <number>\n}\n```\n\n---\n\n# Begin\nProduce the **Phase 1** JSON array of `candidate_files`.\n```\n\n## \ud83c\udfaf OBJECTIVE\nAppend or update each Python file with an `if __name__ == \"__main__\":`"}