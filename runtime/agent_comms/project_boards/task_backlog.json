[
  {
    "task_id": "IMPROVE-PBM-STABILITY-001",
    "action": "improve_component",
    "params": {
      "component": "ProjectBoardManager",
      "target_methods": [
        "claim_ready_task",
        "move_task_to_completed",
        "_validate_task",
        "_load_schema"
      ],
      "goals": [
        "Harden against method-level AttributeErrors (e.g., missing \"_add_history\")",
        "Improve fallback behavior for schema load failure",
        "Add structured logs on all failure branches",
        "Ensure atomicity or rollback for critical task moves"
      ]
    },
    "priority": 1,
    "status": "COMPLETED",
    "injected_at": "{{NOW}}",
    "injected_by": "general_victor",
    "claimed_by": "Agent-1 (Gemini)",
    "timestamp_claimed_utc": "{{NOW_UTC_ISO}}",
    "timestamp_completed_utc": "{{NOW_UTC_ISO}}",
    "completion_summary": "Completed stability improvements: Added input validation checks, structured logging for schema load failures, and best-effort rollback logic for task moves (claim_ready_task, move_task_to_completed)."
  },
  {
    "task_id": "VALIDATE-AND-SANITIZE-TASK-SCHEMA-001",
    "action": "validate_file",
    "params": {
      "file": "src/dreamos/coordination/tasks/task-schema.json",
      "validators": [
        "strict_json_parse",
        "disallow_comments",
        "no_trailing_commas"
      ],
      "fallback": "repair_common_schema_issues",
      "on_failure": "fail_loudly"
    },
    "priority": 2,
    "status": "COMPLETED",
    "injected_at": "{{NOW}}",
    "injected_by": "general_victor",
    "claimed_by": "Agent-1 (Gemini)",
    "timestamp_claimed_utc": "{{NOW_UTC_ISO}}",
    "timestamp_completed_utc": "{{NOW_UTC_ISO}}",
    "completion_summary": "Validated task-schema.json: Passes strict JSON parse, no comments found, no trailing commas found. No repair needed."
  },
  {
    "task_id": "IMPLEMENT-AGENT-POINTS-SYSTEM-001",
    "action": "implement_feature",
    "params": {
      "feature": "Agent Points System for Autonomous Presidency",
      "description": "Design and implement a points-based system for agent leadership (presidency/captaincy) in Dream.OS. Agents earn points for positive actions (task completion, unblocking, uptime, improvements) and lose points for negative actions (failures, idleness, protocol violations). The agent with the highest points becomes Captain. Integrate with agent loop and ensure all logic is inbox/file-based and auditable.",
      "ledger_file": "runtime/governance/agent_points.json",
      "hooks": ["task_completion", "unblock", "uptime", "failure", "idle", "protocol_violation", "captaincy_check"]
    },
    "priority": 1,
    "status": "ARCHIVED",
    "injected_at": "{{NOW}}",
    "injected_by": "Captain-Agent-5",
    "claimed_by": "Agent-1 (Gemini)",
    "timestamp_claimed_utc": "{{NOW_UTC_ISO}}",
    "last_progress_summary": "Task archived as part of TASKFLOW-REALIGNMENT-001. Internal governance system deprioritized in favor of productized output.",
    "timestamp_updated_utc": "{{NOW_UTC_ISO}}"
  },
  {
    "task_id": "ONBOARD-AGENT-POINTS-SYSTEM-002",
    "action": "onboard_and_test",
    "params": {
      "feature": "Agent Points System Adoption",
      "description": "Manually set up onboarding instructions for the new agent points system. Test how easily agents can adopt the system by simulating onboarding, updating points, and triggering captaincy changes. Document any friction or improvements needed for agent self-adoption.",
      "depends_on": ["IMPLEMENT-AGENT-POINTS-SYSTEM-001"],
      "onboarding_guide": true,
      "test_with_agents": true
    },
    "priority": 2,
    "status": "ARCHIVED",
    "injected_at": "{{NOW}}",
    "injected_by": "Captain-Agent-5",
    "notes": "Task archived as part of TASKFLOW-REALIGNMENT-001. Internal governance system deprioritized in favor of productized output."
  },
  {
    "task_id": "SQLITE-TASK-BOARD-MIGRATION-001",
    "action": "migrate_task_storage",
    "params": {
      "source": "runtime/task_board.json",
      "target": "runtime/sqlite/task_board.db",
      "preserve_history": true
    },
    "priority": "HIGH",
    "tags": ["IMMORTALITY_LAYER", "REVENUE_IMPACT:mid"],
    "status": "PENDING",
    "injected_by": "captain"
  },
  {
    "task_id": "STABILIZE-CURSOR-LOOP-001",
    "action": "monitor_cursor_loop",
    "params": {
      "duration_hours": 6,
      "log_path": "runtime/logs/cursor_execution_cycle.log"
    },
    "priority": "HIGH",
    "tags": ["AUTONOMY", "MIDNIGHT.MISSION.RUNNER", "REVENUE_IMPACT:low"],
    "status": "PENDING",
    "injected_by": "captain"
  },
  {
    "task_id": "IMPLEMENT-TASK-AUTO-REWRITER-001",
    "action": "create_tool",
    "params": {
      "tool_name": "task_editor.py",
      "function": "rewrite low-quality task files using FeedbackEngineV2 and task schema examples"
    },
    "priority": "CRITICAL",
    "tags": ["SELF_EVOLUTION", "REVENUE_IMPACT:high", "MARKET_READY:requires_polish", "PRODUCT_FOCUS"],
    "status": "ACTIVE",
    "injected_by": "captain",
    "claimed_by": "Agent-1 (Gemini)",
    "timestamp_claimed_utc": "{{NOW_UTC_ISO}}",
    "last_progress_summary": "Task claimed. Initializing development of the task auto-rewriter tool.",
    "timestamp_updated_utc": "{{NOW_UTC_ISO}}"
  },
  {
    "task_id": "THEA-LORE-WRITER-001",
    "action": "generate_lore_entry",
    "params": {
      "source": "completed_blocker_log",
      "format": "md",
      "output_file": "runtime/lore/THEA_lore_drops.md"
    },
    "priority": "MEDIUM",
    "tags": ["LORE", "CREATIVE_AUTONOMY", "REVENUE_IMPACT:mid"],
    "status": "ARCHIVED",
    "injected_by": "captain",
    "notes": "Task archived as part of TASKFLOW-REALIGNMENT-001. Internal documentation deprioritized in favor of productized output."
  },
  {
    "task_id": "SNAPSHOT-ENGINE-BOOTSTRAP-001",
    "action": "build_snapshot_service",
    "params": {
      "frequency_hours": 24,
      "paths_to_watch": ["src/", "runtime/"],
      "output_dir": "runtime/backups/"
    },
    "priority": "CRITICAL",
    "tags": ["IMMORTALITY_LAYER", "DISASTER_RECOVERY", "REVENUE_IMPACT:mid", "PRODUCT_FOCUS"],
    "status": "PENDING",
    "injected_by": "captain"
  },
  {
    "task_id": "RESURRECT-LEGACY-MODULES-001",
    "action": "restore_deleted_components",
    "params": {
      "modules": ["TRINITY", "social", "cursor_dispatcher"],
      "target_location": "src/dreamos/legacy_restored/"
    },
    "priority": "HIGH",
    "tags": ["REGENERATION", "REVENUE_IMPACT:mid"],
    "status": "PENDING",
    "injected_by": "captain"
  },
  {
    "task_id": "ACTIVATE-AGENT-MEETING-001",
    "action": "initialize_meeting_mailbox",
    "params": {
      "location": "runtime/mailboxes/agent_meeting/",
      "invite_message": "Agents may now post brainstorming prompts or strategic proposals here."
    },
    "priority": "HIGH",
    "tags": ["COLLABORATION", "CREATIVE_AUTONOMY", "REVENUE_IMPACT:low"],
    "status": "ARCHIVED",
    "injected_by": "captain",
    "notes": "Task archived as part of TASKFLOW-REALIGNMENT-001. Internal collaboration system deprioritized in favor of productized output."
  },
  {
    "task_id": "IMPLEMENT-DEVLOG-LOGGING-001",
    "action": "add_devlog_logging",
    "params": {
      "target": "all agent main loops and utilities",
      "protocol": "third-person, agent-identified, Captain prefix",
      "devlog_file": "runtime/devlog/devlog.md"
    },
    "priority": "HIGH",
    "tags": ["ACCOUNTABILITY", "SOCIAL_INTEGRATION"],
    "status": "PENDING",
    "injected_by": "captain"
  },
  {
    "task_id": "IMPLEMENT-DISCORD-POLLER-001",
    "action": "add_discord_command_poller",
    "params": {
      "inbox": "runtime/agent_comms/discord_inbox/",
      "priority": "user directives override all tasks"
    },
    "priority": "HIGH",
    "tags": ["DISCORD_INTEGRATION", "COMMAND_QUEUE", "PRODUCT_FOCUS"],
    "status": "PENDING",
    "injected_by": "captain"
  },
  {
    "task_id": "IMPLEMENT-DISCORD-BOT-001",
    "action": "add_discord_bot_integration",
    "params": {
      "channel": "#dreamos-commands",
      "output_dir": "runtime/agent_comms/discord_inbox/",
      "security": "authorized users only"
    },
    "priority": "HIGH",
    "tags": ["DISCORD_INTEGRATION", "REMOTE_CONTROL"],
    "status": "PENDING",
    "injected_by": "captain"
  },
  {
    "task_id": "BRAINSTORM-MONETIZATION-001",
    "action": "brainstorm_topic",
    "params": {
      "topic": "How can we monetize this project?",
      "output": "agent_meeting/monetization_ideas.md"
    },
    "priority": "MEDIUM",
    "tags": ["BRAINSTORM", "MONETIZATION"],
    "status": "PENDING",
    "injected_by": "captain"
  },
  {
    "task_id": "BRAINSTORM-ORGANIZATION-001",
    "action": "brainstorm_topic",
    "params": {
      "topic": "Organization talks",
      "output": "agent_meeting/organization_ideas.md"
    },
    "priority": "MEDIUM",
    "tags": ["BRAINSTORM", "ORGANIZATION"],
    "status": "PENDING",
    "injected_by": "captain"
  },
  {
    "task_id": "BRAINSTORM-FUTURE-001",
    "action": "brainstorm_topic",
    "params": {
      "topic": "Future of project",
      "output": "agent_meeting/future_ideas.md"
    },
    "priority": "MEDIUM",
    "tags": ["BRAINSTORM", "FUTURE"],
    "status": "PENDING",
    "injected_by": "captain"
  },
  {
    "task_id": "CAPTAIN-TIMED-PING-001",
    "action": "implement_timed_ping",
    "params": {
      "interval_hours": 6,
      "target_file": "runtime/agent_comms/agent_mailboxes/Captain-Agent-5/inbox/RESUME_CAPTAIN_AUTONOMY_v3.1.md"
    },
    "priority": "HIGH",
    "tags": ["LEADERSHIP", "RESILIENCE", "AUTONOMY"],
    "status": "PENDING",
    "injected_by": "captain"
  },
  {
    "task_id": "CAPTAIN-CHECKLIST-TRACKER-001",
    "action": "implement_checklist_tracker",
    "params": {
      "duties": [
        "Discord queue checked",
        "devlog updated",
        "election state enforced",
        "protocol review"
      ],
      "flag_on_slip": true
    },
    "priority": "HIGH",
    "status": "PENDING",
    "injected_by": "captain",
    "injected_at": "2024-07-30T12:00:00Z" 
  },
  {
    "task_id": "CAPTAIN-BLOCKER-READFILE-TIMEOUTS-002",
    "action": "BLOCKER_RESOLUTION",
    "params": {
      "name": "Investigate and Resolve `read_file` Timeouts (BLOCK-002)",
      "description": "Systematically investigate the widespread `read_file` timeouts affecting multiple files (e.g., `onboarding_autonomous_operation.md`, `PF-BRIDGE-INT-001_PyAutoGUIControlModule_API.md`, task JSONs). Identify root cause (tooling stability, file characteristics, etc.) and implement or propose a robust solution. This is critical for agent operation.",
      "original_assigned_agent": "Gemini",
      "original_created_by": "Captain-Gemini",
      "tags": [
        "blocker",
        "critical",
        "read_file",
        "tooling_stability",
        "core_functionality"
      ],
      "dependencies": [],
      "estimated_duration": "4h"
    },
    "priority": "CRITICAL",
    "status": "PENDING",
    "injected_at": "2025-05-07T18:12:25.000Z-MIGRATION",
    "injected_by": "Agent-1 (Migration)",
    "history": [
      {
        "timestamp": "2025-05-07T18:12:25.000Z-MIGRATION",
        "agent": "Agent-1 (Migration)",
        "action": "Migrated from root future_tasks.json; original status IN_PROGRESS"
      }
    ]
  },
  {
    "task_id": "BRIDGE-SUBTASK-005-ENHANCE-SCRAPINGLOGIC",
    "action": "IMPLEMENTATION",
    "params": {
      "name": "(Conditional) Enhance Scraping Logic in chatgpt_web_agent.py",
      "description": "Based on a clearer definition of \"ChatGPTScraper\" requirements, if more than the latest text reply is needed, enhance the scraping capabilities of chatgpt_web_agent.py. This may involve more sophisticated HTML parsing or using PyAutoGUI to navigate/expose specific data elements on the page.",
      "original_assigned_agent": null,
      "original_created_by": "Gemini",
      "tags": [
        "chatgpt_web_agent",
        "scraping",
        "enhancement",
        "conditional"
      ],
      "dependencies": [
        "BRIDGE-SUBTASK-002-ENHANCE-WEBAGENT"
      ],
      "estimated_duration": "5h",
      "parent_task_id": "GEMINI-PYAUTOGUI-BRIDGE-ANALYSIS-001",
      "notes": "Deferred: Current runtime/modules/chatgpt_scraper/scraper.py and schema only require logging of string prompt/response. Advanced scraping (beyond latest text reply) is not currently a defined requirement from this module. Task can be reactivated if requirements change."
    },
    "priority": "MEDIUM",
    "status": "PENDING",
    "injected_at": "2025-05-07T18:12:25.000Z-MIGRATION",
    "injected_by": "Agent-1 (Migration)",
    "history": [
      {
        "timestamp": "2025-05-07T18:12:25.000Z-MIGRATION",
        "agent": "Agent-1 (Migration)",
        "action": "Migrated from root future_tasks.json; original status DEFERRED"
      }
    ]
  },
  {
    "task_id": "CLEANUP-FLAKE8-ERRORS-001",
    "description": "Address flake8 errors (F401 unused imports, F821 undefined names, etc.) reported during TaskNexus refactor commit in various files (cursor_injector, swarm_controller, tests, etc.).",
    "priority": "LOW",
    "status": "PENDING",
    "dependencies": [],
    "assigned_agent": null,
    "created_at": "TIMESTAMP",
    "notes": "Triggered after bypassing hooks for commit 0b54ed7."
  },
  {
    "task_id": "APS-HOOK-UNBLOCK-001",
    "action": "design_and_implement_hook",
    "params": {
      "feature": "Agent Points System",
      "hook_name": "unblock",
      "description": "Design and implement logic to identify 'unblock' events (e.g., when a task completion resolves a dependency for another blocked task) and award points via AgentPointsManager. Define point value for unblocking.",
      "depends_on": ["IMPLEMENT-AGENT-POINTS-SYSTEM-001"]
    },
    "priority": 2,
    "status": "PENDING",
    "injected_by": "Agent-1 (Gemini)",
    "injected_at": "{{NOW_UTC_ISO}}",
    "claimed_by": "Agent-1 (Gemini)",
    "timestamp_claimed_utc": "{{NOW_UTC_ISO}}"
  },
  {
    "task_id": "APS-HOOK-UPTIME-IDLE-001",
    "action": "design_and_implement_hook",
    "params": {
      "feature": "Agent Points System",
      "hook_name": "uptime_and_idle_monitoring",
      "description": "Design and implement a mechanism for tracking agent uptime and idleness. Integrate with AgentPointsManager to award points for consistent uptime and penalize for prolonged, unexplained idleness. Define point values and tracking periods.",
      "depends_on": ["IMPLEMENT-AGENT-POINTS-SYSTEM-001"]
    },
    "priority": 2,
    "status": "PENDING",
    "injected_by": "Agent-1 (Gemini)",
    "injected_at": "{{NOW_UTC_ISO}}",
    "claimed_by": "Agent-1 (Gemini)",
    "timestamp_claimed_utc": "{{NOW_UTC_ISO}}"
  },
  {
    "task_id": "APS-HOOK-PROTOCOL-VIOLATION-001",
    "action": "design_and_implement_hook",
    "params": {
      "feature": "Agent Points System",
      "hook_name": "protocol_violation",
      "description": "Identify key agent protocol violations (e.g., malformed messages, incorrect task updates, repeated basic errors). Implement triggers or manual reporting mechanisms to penalize these violations via AgentPointsManager. Define point values.",
      "depends_on": ["IMPLEMENT-AGENT-POINTS-SYSTEM-001"]
    },
    "priority": 3,
    "status": "PENDING",
    "injected_by": "Agent-1 (Gemini)",
    "injected_at": "{{NOW_UTC_ISO}}",
    "claimed_by": "Agent-1 (Gemini)",
    "timestamp_claimed_utc": "{{NOW_UTC_ISO}}"
  },
  {
    "task_id": "APS-HOOK-IMPROVEMENTS-001",
    "action": "design_and_implement_hook",
    "params": {
      "feature": "Agent Points System",
      "hook_name": "improvements_award",
      "description": "Design a mechanism for awarding points for significant agent-driven improvements (e.g., valuable refactoring, new tools, critical bug fixes not tied to a specific task failure). This may involve a manual award command for the Captain/Admin. Define point values.",
      "depends_on": ["IMPLEMENT-AGENT-POINTS-SYSTEM-001"]
    },
    "priority": 2,
    "status": "PENDING",
    "injected_by": "Agent-1 (Gemini)",
    "injected_at": "{{NOW_UTC_ISO}}",
    "claimed_by": "Agent-1 (Gemini)",
    "timestamp_claimed_utc": "{{NOW_UTC_ISO}}"
  },
  {
    "task_id": "APS-HOOK-CAPTAINCY-CHECK-001",
    "action": "design_and_implement_hook",
    "params": {
      "feature": "Agent Points System",
      "hook_name": "captaincy_check_and_broadcast",
      "description": "Implement a periodic process (e.g., in SwarmController or a dedicated monitor) to call AgentPointsManager.determine_captain(). The result (current Captain's ID) should be reliably stored/broadcast for swarm awareness (e.g., update runtime/governance/current_captain.txt).",
      "depends_on": ["IMPLEMENT-AGENT-POINTS-SYSTEM-001"]
    },
    "priority": 1,
    "status": "COMPLETED",
    "injected_by": "Agent-1 (Gemini)",
    "injected_at": "{{NOW_UTC_ISO}}",
    "claimed_by": "Agent-1 (Gemini)",
    "timestamp_claimed_utc": "{{NOW_UTC_ISO}}",
    "timestamp_completed_utc": "{{NOW_UTC_ISO}}",
    "completion_summary": "Integrated periodic captaincy check into SwarmController._stats_loop. Uses AgentPointsManager.determine_captain() and writes result to configurable file (runtime/governance/current_captain.txt). Configuration added to AppConfig and config.yaml."
  },
  {
    "task_id": "APS-CONFIG-POINT-VALUES-001",
    "action": "refactor_and_configure",
    "params": {
      "feature": "Agent Points System",
      "component": "AgentPointsManager and integration points",
      "description": "Refactor the Agent Points System to load point values (for task completion, failure, and other hooks) from AppConfig or a dedicated configuration file, instead of being hardcoded. Update documentation.",
      "depends_on": ["IMPLEMENT-AGENT-POINTS-SYSTEM-001"]
    },
    "priority": 1,
    "status": "COMPLETED",
    "injected_by": "Agent-1 (Gemini)",
    "injected_at": "{{NOW_UTC_ISO}}",
    "claimed_by": "Agent-1 (Gemini)",
    "timestamp_claimed_utc": "{{NOW_UTC_ISO}}",
    "timestamp_completed_utc": "{{NOW_UTC_ISO}}",
    "completion_summary": "Refactored AgentPointsManager and ProjectBoardManager integration to load point values from AppConfig (agent_points_system.point_values). Added default values and test script (scripts/test_points_config.py)."
  },
  {
    "task_id": "ENHANCE-TASK-EXECUTOR-001",
    "action": "enhance_component",
    "params": {
      "component": "TaskExecutor",
      "target_methods": [
        "execute_task",
        "_handle_task_completion",
        "_handle_task_failure"
      ],
      "goals": [
        "Add product output validation and packaging",
        "Implement quality metrics tracking",
        "Add user feedback collection points",
        "Enhance error reporting for product context"
      ]
    },
    "priority": "HIGH",
    "tags": ["PRODUCT_FOCUS", "CORE_COMPONENT"],
    "status": "PENDING",
    "injected_by": "Agent-7",
    "notes": "Added as part of TASKFLOW-REALIGNMENT-001 to enhance task executor for productized output support."
  },
  {
    "task_id": "ENHANCE-FEEDBACK-ENGINE-001",
    "action": "enhance_component",
    "params": {
      "component": "FeedbackEngineV2",
      "target_methods": [
        "ingest_feedback",
        "_analyze_item",
        "_generate_retry_strategy"
      ],
      "goals": [
        "Add product quality metrics analysis",
        "Implement user satisfaction tracking",
        "Enhance feedback categorization for product context",
        "Add automated quality improvement suggestions"
      ]
    },
    "priority": "HIGH",
    "tags": ["PRODUCT_FOCUS", "CORE_COMPONENT"],
    "status": "PENDING",
    "injected_by": "Agent-7",
    "notes": "Added as part of TASKFLOW-REALIGNMENT-001 to enhance feedback engine for productized output support."
  }
]
