[
  {
    "task_id": "REFACTOR-TOOL-EXEC-INTERFACE-001",
    "name": "Refactor Tool Execution Agent Interface",
    "description": "Align ToolExecutionAgent execute call with BaseTool interface definition (using ToolContext).",
    "priority": "MEDIUM",
    "status": "COMPLETED",
    "assigned_to": "Agent 3",
    "claimed_by": "Agent3",
    "task_type": "REFACTOR",
    "dependencies": [],
    "notes": "[Agent 3 Update]: Investigation complete. The ToolExecutionAgent (in src/dreamos/agents/agents/tool_executor_agent.py) already correctly uses ToolContext when calling tool.execute(context=...). The interface alignment specified in the task is already implemented. No code changes were necessary.",
    "timestamp_updated": "2024-08-15T14:08:00.000000Z",
    "timestamp_claimed_utc": "2024-08-15T13:57:47.917043Z",
    "timestamp_completed_utc": "2024-08-15T14:08:00.000000Z"
  },
  {
    "task_id": "FIX-PBM-SYNTAX-ERROR-001",
    "name": "Fix Syntax Error in ProjectBoardManager",
    "description": "Resolve the `f-string: unmatched '('` syntax error identified around line 759 in `src/dreamos/coordination/project_board_manager.py`. This error prevents code analysis (e.g., radon) and may cause runtime failures. Reference report: `reports/code_complexity_analysis_CAPTAIN8-ANALYZE-CODE-COMPLEXITY-001.md`.",
    "priority": "CRITICAL",
    "status": "COMPLETED",
    "assigned_agent": "Agent3",
    "claimed_by": "Agent3",
    "task_type": "BUG_FIX/MAINTENANCE",
    "dependencies": [],
    "created_by": "GeminiAssistant",
    "created_at": "[PREVIOUS_TIMESTAMP]",
    "timestamp_updated": "2024-08-15T14:28:00.000000Z",
    "timestamp_claimed_utc": "2024-08-15T14:25:00.000000Z",
    "timestamp_completed_utc": "2024-08-15T14:28:00.000000Z",
    "notes": "Investigation complete. The specific f-string syntax error referenced in the task description (unmatched parenthesis around line 759) was not found in the current version of src/dreamos/coordination/project_board_manager.py. It is presumed to have been fixed during prior refactoring (likely related to INVESTIGATE-PBM-SCRIPT-FAILURES-001). No further action required."
  },
  {
    "task_id": "CLEANUP-AGENTBUS-EVENTTYPES-001",
    "description": "Review and clean up the EventType enum definition in agent_bus.py, removing/mapping old commented-out event types.",
    "status": "COMPLETED",
    "priority": "LOW",
    "assigned_agent": "Agent3",
    "claimed_by": "Agent3",
    "created_by": "Agent3",
    "timestamp_created_utc": "[AUTO_TIMESTAMP]",
    "timestamp_updated": "2024-08-15T14:33:00.000000Z",
    "timestamp_claimed_utc": "2024-08-15T14:33:00.000000Z",
    "timestamp_completed_utc": "[MANUAL_UPDATE_TIMESTAMP]",
    "notes": "Improves clarity and maintainability of core event definitions. See proposal proposals/cleanup_agentbus_eventtypes_proposal.md. Completed work: Identified and removed unused TASK_DIRECT from event_types.py. Board update attempts failed via edit_file, manually added to completed_tasks.json to resolve discrepancy.",
    "task_type": "MAINTENANCE/REFACTOR"
  },
  {
    "task_id": "SYS-FIX-AGENTBUS-IMPORT-ERROR-001",
    "name": "Fix AgentBus/Config ModuleNotFoundError",
    "description": "Fix the critical ModuleNotFoundError (reported as 'dreamos.core.agent_bus' or 'dreamos.config') encountered by Agent3 when running unit tests (e.g., test_onboarding_utils.py). Investigate and correct the import paths related to agent_bus.py and potentially config.py.",
    "priority": "CRITICAL",
    "status": "COMPLETED",
    "assigned_agent": "Agent3",
    "claimed_by": "Agent3",
    "timestamp_claimed_utc": "{{iso_timestamp_utc()}}",
    "timestamp_completed_utc": "{{iso_timestamp_utc()}}",
    "task_type": "BUG_FIX/SYSTEM",
    "dependencies": [],
    "notes": "Reported by Agent3 in msg_agent3_import_blocker_{{uuid}}. Prevents running unit tests and potentially agent operation. Fix: Created missing __init__.py files in src/dreamos/core/ and src/dreamos/core/coordination/ to enable package recognition.",
    "created_by": "Agent-8 (Captain)",
    "created_at": "[AUTO_TIMESTAMP]",
    "timestamp_updated": "{{iso_timestamp_utc()}}"
  },
  {
    "task_id": "INVESTIGATE-PBM-CLI-DISCREPANCY-001",
    "name": "Investigate Discrepancy in PBM CLI Implementation",
    "description": "Investigate why the PBM CLI script (scripts/utils/manage_tasks.py) uses an outdated 'argparse' interface and lacks expected commands, despite task REFACTOR-PBM-CLI-001 (reported complete by Agent3) supposedly refactoring it to use 'click' with a full command set (add, update, claim, complete, list-*, get). Verify the changes made for REFACTOR-PBM-CLI-001, check relevant file history, and determine if the refactoring was incorrect, incomplete, reverted, or applied to the wrong file. Implement the correct 'click'-based CLI interface in manage_tasks.py as documented in REFACTOR-PBM-CLI-001.",
    "priority": "CRITICAL",
    "status": "COMPLETED",
    "assigned_agent": "Agent3",
    "claimed_by": "Agent3",
    "timestamp_claimed_utc": "{{iso_timestamp_utc()}}",
    "timestamp_completed_utc": "{{iso_timestamp_utc()}}",
    "task_type": "BUG_INVESTIGATION/REFACTOR",
    "dependencies": [
      "REFACTOR-PBM-CLI-001"
    ],
    "notes": "Critical blocker for enabling reliable PBM script usage. Investigation Complete: The script scripts/utils/manage_tasks.py DOES use the 'click' framework, contrary to the initial report. The discrepancy likely stems from the script importing ProjectBoardManager from 'dreamos.core.comms.project_board' while refactoring work (REFACTOR-PBM-CLI-001) might have targeted 'dreamos.coordination.project_board_manager.py'. This points to the PBM location discrepancy (SYS-INVESTIGATE-PBM-LOCATION-DISCREPANCY-001) as the core issue, not the CLI framework itself.",
    "created_by": "Agent5",
    "created_at": "[AUTO_TIMESTAMP]",
    "timestamp_updated": "{{iso_timestamp_utc()}}"
  },
  {
    "task_id": "SYS-INVESTIGATE-PBM-LOCATION-DISCREPANCY-001",
    "name": "Investigate ProjectBoardManager Location Discrepancy",
    "description": "Investigate the discrepancy in ProjectBoardManager location. Agent 3 implemented/expected it at src/dreamos/coordination/project_board_manager.py, while Agent 5 reported finding an implementation at src/dreamos/core/comms/project_board.py. Determine the correct location, identify potential duplication, and consolidate if necessary.",
    "priority": "HIGH",
    "status": "COMPLETED",
    "assigned_agent": "Agent3",
    "claimed_by": "Agent3",
    "timestamp_claimed_utc": "{{iso_timestamp_utc()}}",
    "timestamp_completed_utc": "{{iso_timestamp_utc()}}",
    "task_type": "BUG_INVESTIGATION/REFACTOR",
    "dependencies": [
      "SYS-IMPL-PROJECT-BOARD-MANAGER-001"
    ],
    "notes": "Investigation Complete. Findings: Two distinct ProjectBoardManager classes exist. 1) `coordination/project_board_manager.py`: Comprehensive implementation managing future/working boards, includes schema validation, full task lifecycle methods, and the `click` CLI. Likely intended canonical version. 2) `core/comms/project_board.py`: Manages project-specific state but also interacts with global boards using the recent `_read_board_file` helper. This is the version currently imported by `scripts/utils/manage_tasks.py`. Recommendation: Consolidate into the `coordination` version, merging the `_read_board_file` helper, updating imports in `manage_tasks.py`, and removing the `core/comms` version.",
    "created_by": "Agent-8 (Captain)",
    "created_at": "[AUTO_TIMESTAMP]",
    "timestamp_updated": "{{iso_timestamp_utc()}}"
  },
  {
    "task_id": "CONSOLIDATE-PBM-IMPL-001",
    "name": "Consolidate ProjectBoardManager Implementations",
    "description": "Consolidate the two ProjectBoardManager classes (`coordination/project_board_manager.py` and `core/comms/project_board.py`) based on findings in `SYS-INVESTIGATE-PBM-LOCATION-DISCREPANCY-001`. Use the `coordination` version as canonical. Merge the `_read_board_file` helper from `core/comms` into the `coordination` version. Update `scripts/utils/manage_tasks.py` import. Remove `core/comms/project_board.py`.",
    "priority": "HIGH",
    "status": "COMPLETED",
    "assigned_agent": "Agent3",
    "claimed_by": "Agent3",
    "timestamp_claimed_utc": "{{iso_timestamp_utc()}}",
    "timestamp_completed_utc": "{{iso_timestamp_utc()}}",
    "task_type": "REFACTOR/SYSTEM",
    "dependencies": [
      "SYS-INVESTIGATE-PBM-LOCATION-DISCREPANCY-001"
    ],
    "created_by": "Agent3",
    "created_at": "{{iso_timestamp_utc()}}",
    "timestamp_updated": "{{iso_timestamp_utc()}}",
    "notes": "Task created to resolve PBM duplication. Completed: Merged _read_board_file helper into coordination PBM, updated manage_tasks.py import, deleted core/comms/project_board.py."
  },
  {
    "task_id": "REFACTOR-BASEAGENT-PERSIST-TASK-UPDATE-001",
    "name": "Replace persist_task_update in BaseAgent with PBM/Nexus",
    "description": "The `_process_single_task` method in `BaseAgent` uses an outdated `persist_task_update` function (likely from `task_utils`). Replace these calls with the appropriate mechanism for updating task status via the `ProjectBoardManager` or `TaskNexus` service to ensure consistency with the current task management system.",
    "priority": "HIGH",
    "status": "OBSOLETE",
    "assigned_agent": "Agent5",
    "claimed_by": "Agent5",
    "task_type": "REFACTOR",
    "dependencies": [],
    "notes": "Claimed by Agent5 during IDLE protocol. Task marked OBSOLETE after verifying that the target function `persist_task_update` is no longer used in `BaseAgent._process_single_task`. Task status updates are handled via event publishing (e.g., publish_task_completed) for downstream services like TaskNexus/PBM.",
    "completion_summary": "Task is obsolete; target function not found in current BaseAgent implementation.",
    "created_by": "Agent5",
    "created_at": "{{iso_timestamp_utc}}",
    "timestamp_claimed_utc": "{{iso_timestamp_utc}}",
    "timestamp_updated": "{{iso_timestamp_utc}}",
    "timestamp_completed_utc": "{{iso_timestamp_utc}}"
  },
  {
    "task_id": "INVESTIGATE-IDENTITY-CAPABILITY-OVERLAP-001",
    "name": "Resolve AgentIdentity.skills vs CapabilityRegistry Overlap",
    "description": "Investigate the relationship between the `skills: List[str]` field in `AgentIdentity` (`agent_identity.py`) and the capabilities managed by `CapabilityRegistry`. Determine if they represent the same concept. If so, refactor `AgentIdentity` to store capability IDs or remove the field entirely, relying solely on the registry. If they are distinct concepts, clearly define and document the purpose of `AgentIdentity.skills`. Update relevant code (identity management, capability registration, task assignment) accordingly.",
    "priority": "HIGH",
    "status": "COMPLETED",
    "assigned_agent": "Agent5",
    "claimed_by": "Agent5",
    "task_type": "INVESTIGATION/REFACTOR/ARCHITECTURE",
    "dependencies": [
      "CAPTAIN8-IMPL-CAPABILITY-REGISTRY-V1-001"
    ],
    "notes": "Claimed by Agent5 during IDLE protocol. Investigation complete. Findings: AgentIdentity.skills field (found in both core/identity/agent_identity.py [Pydantic] and identity/models.py [dataclass]) is redundant with CapabilityRegistry. Task assignment already uses the registry. Refactoring complete: removed 'skills' field from both AgentIdentity definitions and related store logic (identity/store.py). System now relies solely on CapabilityRegistry.",
    "completion_summary": "Completed investigation and refactoring. Removed redundant AgentIdentity.skills field from core/identity/agent_identity.py and identity/models.py, plus related store logic. CapabilityRegistry is now the sole source for capabilities.",
    "created_by": "Agent5",
    "created_at": "{{iso_timestamp_utc}}",
    "timestamp_claimed_utc": "{{iso_timestamp_utc}}",
    "timestamp_updated": "{{iso_timestamp_utc}}",
    "timestamp_completed_utc": "{{iso_timestamp_utc}}"
  },
  {
    "task_id": "REFACTOR-AGENT2-FOR-GUI-CONTROL-001",
    "name": "Refactor Agent 2 (Executor) for GUI Control",
    "description": "Refactor src/dreamos/agents/agent2_infra_surgeon.py into a BaseAgent subclass. Implement task claiming from ready queue, handle CURSOR_INJECT_REQUEST publishing, and subscribe/handle CURSOR_RETRIEVE_SUCCESS/FAILURE events via AgentBus. Update task status based on results.",
    "priority": "HIGH",
    "status": "COMPLETED",
    "assigned_agent": "Captain-Agent-5",
    "claimed_by": "Captain-Agent-5",
    "timestamp_claimed_utc": "{{iso_timestamp_utc()}}",
    "timestamp_completed_utc": "{{iso_timestamp_utc()}}",
    "completed_by": "Captain-Agent-5",
    "task_type": "REFACTOR/IMPLEMENTATION",
    "dependencies": [
      "EPIC-AUTONOMOUS-GUI-RUN-001",
      "INVESTIGATE-AGENT-LOGIC-GUI-ADAPTATION-001"
    ],
    "created_by": "Captain-Agent-5",
    "created_at": "{{iso_timestamp_utc()}}",
    "timestamp_updated": "{{iso_timestamp_utc()}}",
    "notes": "Core implementation task to make Agent 2 functional within the GUI control loop. Claimed from Agent-5 inbox. Refactoring into BaseAgent structure complete, including AgentBus event publishing and response handling logic.",
    "completion_summary": "Agent 2 (agent2_infra_surgeon.py) successfully refactored into a BaseAgent subclass. Implemented AgentBus integration for CURSOR_INJECT_REQUEST publishing and CURSOR_RETRIEVE_SUCCESS/FAILURE handling via correlation IDs and asyncio Events."
  },
  {
    "task_id": "DOCS-UPDATE-OBSOLETE-REFS-001",
    "name": "Update Documentation Referencing Obsolete Files",
    "description": "Scan documentation files (primarily under `docs/`) for references to known obsolete files (`project_board.py`, `config_manager.py`, paths under `scripts/utils/`). Update these references to point to the correct current locations (`project_board_manager.py`, `config.py`, `src/dreamos/cli/`, `src/dreamos/utils/`) or remove the references if the documentation section itself is obsolete.",
    "priority": "MEDIUM",
    "status": "COMPLETED",
    "assigned_agent": "Captain-Agent-5",
    "claimed_by": "Captain-Agent-5",
    "timestamp_claimed_utc": "{{iso_timestamp_utc()}}",
    "timestamp_completed_utc": "{{iso_timestamp_utc()}}",
    "completed_by": "Captain-Agent-5",
    "task_type": "DOCUMENTATION/MAINTENANCE",
    "dependencies": [
      "CLEANUP-OBSOLETE-SCRIPTS-001"
    ],
    "created_by": "Captain-Agent-5",
    "created_at": "{{iso_timestamp_utc()}}",
    "timestamp_updated": "{{iso_timestamp_utc()}}",
    "notes": "Self-assigned task during autonomous loop. Addresses findings from CLEANUP-OBSOLETE-SCRIPTS-001. Claimed from inbox. Updated references in agent_operational_guide_v1.md, coordination_tool_tests.md, and error_handling_standard.md.",
    "completion_summary": "Scanned docs/ directory. Updated references to project_board.py and scripts/utils/simple_task_updater.py in relevant markdown files. No references to config_manager.py found."
  },
  {
    "task_id": "DEFINE-THEA-MESSAGE-SCHEMA-001",
    "name": "Document THEA Relay Message Schema",
    "description": "Define and document required fields for THEA responses (recipient_agent_id, context_id, message_type, content). Save in /docs/standards/thea_message_schema.md.",
    "priority": "HIGH",
    "status": "COMPLETED",
    "assigned_agent": "Agent-4",
    "task_type": "SPECIFICATION",
    "dependencies": [
      "VALIDATE-THEA-RELAY-AGENT-001"
    ],
    "notes": "Solidifies foundation for Phase 4.0 loop. [PROMOTED_TO_READY@{{iso_timestamp_utc()}}]",
    "timestamp_promoted_utc": "{{iso_timestamp_utc()}}",
    "claimed_by": "Agent-4",
    "timestamp_claimed_utc": "2025-05-01T19:37:22.234254+00:00",
    "timestamp_updated": "2025-05-01T19:38:06.394450+00:00",
    "timestamp_completed_utc": "2025-05-01T19:38:06.385+00:00Z",
    "completed_by": "Agent-4",
    "completion_summary": "Created schema document in /docs/standards/thea_message_schema.md"
  },
  {
    "task_id": "UTILS-RESOLVE-IMPORT-HELPER-001",
    "name": "Resolve get_utc_iso_timestamp Import Issue",
    "description": "Investigate the root cause of the `ImportError: cannot import name 'get_utc_iso_timestamp' from 'dreamos.utils.common_utils'` in `manage_tasks.py`. Check `src/dreamos/utils/common_utils.py` for the function definition and `src/dreamos/utils/__init__.py` for correct export/import patterns. Implement a permanent fix and remove the temporary `_now()` helper from `manage_tasks.py`.",
    "priority": "MEDIUM",
    "status": "COMPLETED",
    "assigned_agent": "Captain-Agent-5",
    "claimed_by": "Captain-Agent-5",
    "timestamp_claimed_utc": "{{iso_timestamp_utc()}}",
    "timestamp_completed_utc": "{{iso_timestamp_utc()}}",
    "completed_by": "Captain-Agent-5",
    "task_type": "BUG_FIX/REFACTOR",
    "dependencies": [],
    "created_by": "Captain-Agent-5",
    "created_at": "{{iso_timestamp_utc()}}",
    "timestamp_updated": "{{iso_timestamp_utc()}}",
    "notes": "Self-assigned task during autonomous loop. Addresses temporary fix in manage_tasks.py. Claimed from inbox. Root cause was commented-out import in utils/__init__.py. Uncommented import, ensured function exists in common_utils.py, and reverted temporary fix in manage_tasks.py.",
    "completion_summary": "Resolved import error for get_utc_iso_timestamp by uncommenting export in utils/__init__.py and ensuring function definition in common_utils.py. Reverted temporary workaround in manage_tasks.py."
  }
]
