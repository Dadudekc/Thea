name: Ethos Validation

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'src/dreamos/core/**'
      - 'tests/core/**'
      - 'dreamos_ai_organizer/ethos.json'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'src/dreamos/core/**'
      - 'tests/core/**'
      - 'dreamos_ai_organizer/ethos.json'

jobs:
  validate-ethos:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10]

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov
        pip install -e .
        
    - name: Run ethos validation tests
      run: |
        pytest tests/core/test_ethos.py -v --cov=dreamos.core.ethos_validator
        
    - name: Validate ethos structure
      run: |
        python -c "
        import json
        from pathlib import Path
        
        def validate_ethos():
            ethos_path = Path('dreamos_ai_organizer/ethos.json')
            if not ethos_path.exists():
                raise ValueError('ethos.json not found')
                
            with open(ethos_path) as f:
                ethos = json.load(f)
                
            required_sections = [
                'version', 'last_updated', 'core_mission',
                'core_values', 'operational_principles',
                'safeguards', 'system_behavior', 'legacy_commitment'
            ]
            
            for section in required_sections:
                if section not in ethos:
                    raise ValueError(f'Missing required section: {section}')
                    
            print('Ethos structure validation passed')
            
        validate_ethos()
        "
        
    - name: Check for ethos violations
      run: |
        python -c "
        from dreamos.core.ethos_validator import EthosValidator
        from pathlib import Path
        import json
        
        def check_violations():
            validator = EthosValidator()
            
            # Check all agent identities
            agent_dir = Path('config/agents')
            if agent_dir.exists():
                for agent_file in agent_dir.glob('*.json'):
                    with open(agent_file) as f:
                        agent_identity = json.load(f)
                        
                    # Validate agent identity
                    if not validator.validate_action({
                        'type': 'identity_validation',
                        'context': agent_identity
                    }):
                        raise ValueError(f'Agent {agent_file.name} violates ethos principles')
                        
            print('No ethos violations found')
            
        check_violations()
        "
        
    - name: Generate compliance report
      run: |
        python -c "
        from dreamos.core.ethos_validator import EthosValidator
        from pathlib import Path
        import json
        
        def generate_report():
            validator = EthosValidator()
            report = {
                'timestamp': datetime.now().isoformat(),
                'validation_results': []
            }
            
            # Validate all agent identities
            agent_dir = Path('config/agents')
            if agent_dir.exists():
                for agent_file in agent_dir.glob('*.json'):
                    with open(agent_file) as f:
                        agent_identity = json.load(f)
                        
                    # Check alignment
                    alignment = validator.check_ethos_alignment(agent_identity)
                    report['validation_results'].append({
                        'agent': agent_file.name,
                        'alignment': alignment
                    })
                    
            # Save report
            report_path = Path('reports/ethos_compliance.json')
            report_path.parent.mkdir(exist_ok=True)
            with open(report_path, 'w') as f:
                json.dump(report, f, indent=2)
                
            print('Compliance report generated')
            
        generate_report()
        "
        
    - name: Upload compliance report
      uses: actions/upload-artifact@v3
      with:
        name: ethos-compliance-report
        path: reports/ethos_compliance.json
        if-no-files-found: error 