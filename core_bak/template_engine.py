import os
import json # Keep json for potential future filters if needed
from jinja2 import Environment, FileSystemLoader, select_autoescape, TemplateNotFound
import sys
from pathlib import Path # Import pathlib

# --- Add project root for governance logger import ---
# Simplified assumption: script runs from project root or core
script_dir = Path(__file__).parent
project_root = script_dir.parent # project_root is one level up from core
if str(project_root) not in sys.path:
    sys.path.insert(0, str(project_root))
# ------------------------------------

# --- Import Governance Logger ---
try:
    # Adjust import path based on new location in core/memory
    from core.memory.governance_memory_engine import log_event
    _gme_ready = True
except ImportError:
    _gme_ready = False
    # Fallback dummy logger if log_event cannot be imported
    def log_event(event_type, source, details):
        print(f"[Dummy Logger - TemplateEngine] Event: {event_type}, Source: {source}, Details: {details}")
        return False
# --- End Governance Logger Import ---

# Configuration
TEMPLATE_DIR = project_root / "templates" # Use root templates dir, relative to project root
_SOURCE_ID = "TemplateEngine"

# Function to log engine messages using log_event if available
def _log_engine_message(level: str, details: dict):
    if _gme_ready:
        event_type = f"ENGINE_{level.upper()}" # e.g., ENGINE_INFO, ENGINE_ERROR
        log_event(event_type, _SOURCE_ID, details)
    else:
        # Fallback to print if logger failed to import
        print(f"[TE Log - {level.upper()}] {details.get('message', details)}")

# --- Setup the Jinja2 environment ---
env = None
_template_env_ready = False

try:
    if not TEMPLATE_DIR.is_dir(): # Use Path object method
        _log_engine_message("warning", {"message": f"Template directory '{TEMPLATE_DIR}' not found.", "path": str(TEMPLATE_DIR)})
    else:
        env = Environment(
            loader=FileSystemLoader(str(TEMPLATE_DIR)), # Pass path as string
            # Enable autoescape for common web types + .j2 files
            autoescape=select_autoescape(enabled_extensions=('html', 'xml', 'j2'), default_for_string=True, default=True),
            trim_blocks=True,
            lstrip_blocks=True
        )

        # Inject utility functions/filters
        # Simplified JSON-ish stringify, good for basic display in logs/prompts
        env.filters['tojson'] = lambda value: json.dumps(value, ensure_ascii=False, indent=None) # More robust JSON filter

        _log_engine_message("info", {"message": "Jinja2 Environment Initialized", "template_dir": str(TEMPLATE_DIR)})
        _template_env_ready = True

except Exception as e:
    _log_engine_message("error", {"error": "Failed to initialize Jinja2 Environment", "details": str(e)})
    # env remains None

def render_template(template_name: str, context: dict) -> str | None:
    """Renders a Jinja2 template using the given context.

    Args:
        template_name (str): The filename of the template within the TEMPLATE_DIR.
        context (dict): A dictionary of variables to pass to the template.

    Returns:
        str: The rendered template content, or None if rendering fails.
    """
    if not _template_env_ready or env is None:
        _log_engine_message("error", {"error": "Jinja2 environment not ready", "template_attempted": template_name})
        return None

    try:
        template = env.get_template(template_name)
        rendered_content = template.render(context)
        # Log success on debug level to avoid noise
        _log_engine_message("debug", {"message": "Template rendered successfully", "template": template_name})
        return rendered_content
    except TemplateNotFound:
        _log_engine_message("error", {"error": "Template not found", "template": template_name, "search_path": str(TEMPLATE_DIR)})
        return None
    except Exception as e:
        _log_engine_message("error", {"error": "Template rendering failed", "template": template_name, "details": str(e)})
        # Consider logging context snippet carefully here if needed
        return None

# --- Example Usage (Minimal, relies on other scripts creating templates/data) ---
if __name__ == "__main__":
    _log_engine_message("info", {"message": "Testing Template Engine by loading data..."})

    # Use relative path from project root for example data
    temp_data_file = project_root / "analysis" / "temp_governance_data.json"
    test_context = None

    # Load data from the temporary file generated by governance_scraper
    if temp_data_file.exists(): # Use Path object method
        try:
            with open(temp_data_file, 'r', encoding='utf-8') as f:
                test_context = json.load(f)
            print(f"Loaded test context from {temp_data_file}")
        except Exception as e:
            print(f"Error loading test context from {temp_data_file}: {e}")
    else:
        print(f"Test context file not found: {temp_data_file}. Run governance_scraper.py first.")

    if test_context:
        print("\n--- Test Case 1: Rendering chatgpt_governance.md.j2 --- ")
        rendered = render_template("chatgpt_governance.md.j2", test_context)
        if rendered:
            print("Successfully rendered chatgpt_governance.md.j2:")
            print("--- RENDERED PROMPT ---")
            print(rendered) # Print the whole thing for verification
            print("--- END RENDERED PROMPT ---")
        else:
            print("Failed to render chatgpt_governance.md.j2 (Check template existence and data).", file=sys.stderr)
    else:
        print("Skipping template rendering due to missing test context.", file=sys.stderr)

    print("\n--- Test Case 2: Rendering a non-existent template --- ")
    rendered_bad = render_template("non_existent_template.j2", {})
    if rendered_bad is None:
        print("Correctly failed to render non_existent_template.j2 (as expected).")
    else:
        print("Incorrectly rendered non_existent_template.j2?!", file=sys.stderr)

    print("\n[üèÅ] Template Engine test complete.") 