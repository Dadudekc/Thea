{
    "apps\\examples\\stubs\\agent_1_stub.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_handle_plan"
        ],
        "classes": {
            "Agent1Stub": {
                "methods": [
                    "__init__",
                    "_handle_plan"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 4
    },
    "apps\\sky_viewer\\sky_viewer.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "send_fullscreen_toggle",
            "toggle_fullscreen",
            "open_splash"
        ],
        "classes": {
            "SkyViewer": {
                "methods": [
                    "__init__",
                    "send_fullscreen_toggle",
                    "toggle_fullscreen",
                    "open_splash"
                ],
                "docstring": null,
                "base_classes": [
                    "QMainWindow"
                ]
            }
        },
        "routes": [],
        "complexity": 8
    },
    "apps\\examples\\onboarding_message_injector.py": {
        "language": ".py",
        "functions": [
            "inject_initial_onboarding_message"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "apps\\browser\\main.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "navigate_to_url"
        ],
        "classes": {
            "BrowserMainWindow": {
                "methods": [
                    "__init__",
                    "navigate_to_url"
                ],
                "docstring": null,
                "base_classes": [
                    "QMainWindow"
                ]
            }
        },
        "routes": [],
        "complexity": 4
    },
    "scripts\\auditing\\generate_import_graph.py": {
        "language": ".py",
        "functions": [
            "find_python_files",
            "get_imports_from_file",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "docs\\examples\\fix_tenacity_example.py": {
        "language": ".py",
        "functions": [
            "might_fail"
        ],
        "classes": {
            "TransientError": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "Exception"
                ]
            }
        },
        "routes": [],
        "complexity": 1
    },
    "scripts\\auditing\\find_unused_assets.py": {
        "language": ".py",
        "functions": [
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "scripts\\auditing\\analyze_asset_usage.py": {
        "language": ".py",
        "functions": [
            "find_code_files",
            "get_asset_files",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "scripts\\maintenance\\archive_agent_mailboxes.py": {
        "language": ".py",
        "functions": [
            "archive_mailbox",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2,
        "agent_role": "potential_agent"
    },
    "apps\\examples\\reflection_agent.py": {
        "language": ".py",
        "functions": [
            "load_rules_from_rulebook",
            "generate_reflection",
            "save_reflection",
            "submit_proposal",
            "start_monitoring",
            "__init__",
            "on_created"
        ],
        "classes": {
            "AlertHandler": {
                "methods": [
                    "__init__",
                    "on_created"
                ],
                "docstring": "Handles new alert files in the inbox directory.",
                "base_classes": [
                    "FileSystemEventHandler"
                ]
            }
        },
        "routes": [],
        "complexity": 9
    },
    "scripts\\auditing\\find_orphaned_files.py": {
        "language": ".py",
        "functions": [
            "find_orphaned_modules",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "scripts\\maintenance\\validate_onboarding_prompts.py": {
        "language": ".py",
        "functions": [
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "scripts\\auditing\\generate_summary.py": {
        "language": ".py",
        "functions": [
            "read_json_file",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "scripts\\maintenance\\archive_agent_comms.py": {
        "language": ".py",
        "functions": [
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1,
        "agent_role": "potential_agent"
    },
    "scripts\\testing\\load_generator_recovery_test.py": {
        "language": ".py",
        "functions": [
            "create_fail_test_task"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "scripts\\testing\\test_cursor_orchestrator.py": {
        "language": ".py",
        "functions": [],
        "classes": {
            "CursorOrchestrator": {
                "methods": [],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 0
    },
    "scripts\\testing\\test_task_timeout.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "scripts\\testing\\_internal_test_loop.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "scripts\\utils\\affirm_onboarding_contract.py": {
        "language": ".py",
        "functions": [
            "calculate_sha256",
            "get_current_utc_iso",
            "update_contract_yaml",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 4
    },
    "scripts\\testing\\auto_claim_tasks_agent_002.py": {
        "language": ".py",
        "functions": [
            "auto_claim_tasks"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1,
        "agent_role": "potential_agent"
    },
    "scripts\\utils\\claim_task.py": {
        "language": ".py",
        "functions": [
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "scripts\\utils\\simple_task_updater.py": {
        "language": ".py",
        "functions": [
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "scripts\\cli.py": {
        "language": ".py",
        "functions": [
            "configure_logging",
            "run",
            "log_stats",
            "validate_config",
            "version"
        ],
        "classes": {
            "ConfigError": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "Exception"
                ]
            }
        },
        "routes": [],
        "complexity": 5
    },
    "htmlcov\\coverage_html_cb_497bf287.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "scripts\\maintenance\\move_uncomplete_tasks.py": {
        "language": ".py",
        "functions": [
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "src\\dreamos\\agents\\agents\\task_executor_agent.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_load_tasks",
            "_check_dependencies",
            "handle_response",
            "run_cycle"
        ],
        "classes": {
            "TaskStatus": {
                "methods": [],
                "docstring": null,
                "base_classes": []
            },
            "TaskExecutorAgent": {
                "methods": [
                    "__init__",
                    "_load_tasks",
                    "_check_dependencies",
                    "handle_response",
                    "run_cycle"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 10
    },
    "scripts\\maintenance\\deduplicate_tasks.py": {
        "language": ".py",
        "functions": [
            "load_tasks",
            "deduplicate_tasks",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "scripts\\maintenance\\find_duplicate_tasks.py": {
        "language": ".py",
        "functions": [
            "is_excluded",
            "parse_json_file",
            "parse_md_file",
            "find_task_files",
            "normalize",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 6
    },
    "src\\dreamos\\agents\\agent9_response_injector.py": {
        "language": ".py",
        "functions": [
            "__init__"
        ],
        "classes": {
            "Agent9ResponseInjector": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Listens for CHATGPT_RESPONSE_SCRAPED events and triggers Cursor injection tasks.",
                "base_classes": [
                    "BaseAgent"
                ]
            }
        },
        "routes": [],
        "complexity": 2
    },
    "src\\dreamos\\agents\\agent2_infra_surgeon.py": {
        "language": ".py",
        "functions": [
            "__init__"
        ],
        "classes": {
            "Agent2InfraSurgeon": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Agent responsible for executing infrastructure-related tasks via GUI automation (Cursor).\nInteracts primarily by publishing CURSOR_INJECT_REQUEST events and listening for\nCURSOR_RETRIEVE_SUCCESS/FAILURE responses.",
                "base_classes": [
                    "BaseAgent"
                ]
            }
        },
        "routes": [],
        "complexity": 2
    },
    "scripts\\auditing\\classify_domains.py": {
        "language": ".py",
        "functions": [
            "classify_path",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "src\\dreamos\\agents\\cursor_worker.py": {
        "language": ".py",
        "functions": [
            "run",
            "pull_tasks",
            "push_result",
            "click_button",
            "wait_for_idle",
            "process_task_ui"
        ],
        "classes": {
            "TaskChannel": {
                "methods": [
                    "pull_tasks",
                    "push_result"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 8
    },
    "src\\dreamos\\agents\\mixins\\voting.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "decide_vote"
        ],
        "classes": {
            "AgentVoterMixin": {
                "methods": [
                    "__init__",
                    "decide_vote"
                ],
                "docstring": "A mixin for Agents to automatically participate in voting sessions using standard pub/sub.\n\nAgents using this mixin should have `agent_id`, `agent_bus` attributes.\nSubscribes to VOTE_INITIATED_TOPIC and publishes votes to VOTE_CAST_TOPIC.\nProvides a default handler to cast a simple vote.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 4
    },
    "src\\dreamos\\agents\\agents\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\dreamos\\agents\\recovery_coordinator.py": {
        "language": ".py",
        "functions": [
            "__init__"
        ],
        "classes": {
            "RecoveryCoordinatorAgent": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Monitors for failed and timed-out tasks.\nAttempts retries for failed tasks based on a configured strategy.\nMarks tasks as permanently failed if retries are exhausted or critical errors occur.\nMarks tasks as failed if they run longer than the configured timeout.",
                "base_classes": [
                    "BaseAgent"
                ]
            }
        },
        "routes": [],
        "complexity": 2
    },
    "scripts\\maintenance\\validate_logs.py": {
        "language": ".py",
        "functions": [
            "load_schema_map",
            "find_jsonl_files"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "scripts\\testing\\claim_one_task_agent_002.py": {
        "language": ".py",
        "functions": [
            "claim_one_task"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1,
        "agent_role": "potential_agent"
    },
    "src\\dreamos\\agents\\cursor_dispatcher.py": {
        "language": ".py",
        "functions": [
            "render_task_prompt",
            "load_queue",
            "save_queue",
            "dispatch_tasks",
            "run_loop"
        ],
        "classes": {},
        "routes": [],
        "complexity": 5
    },
    "scripts\\maintenance\\chunk_tasks.py": {
        "language": ".py",
        "functions": [
            "dedupe_and_chunk"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "scripts\\maintenance\\run_memory_summarizer.py": {
        "language": ".py",
        "functions": [
            "summarize_memory_file"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "src\\dreamos\\agents\\agents\\tool_executor_agent.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "execute_plan"
        ],
        "classes": {
            "ToolExecutionAgent": {
                "methods": [
                    "__init__",
                    "execute_plan"
                ],
                "docstring": "Executes a plan (list of tool call steps) sequentially.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 4
    },
    "src\\dreamos\\agents\\context_router_agent.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_load_routing_rules",
            "_determine_target_agent"
        ],
        "classes": {
            "ContextRouterAgent": {
                "methods": [
                    "__init__",
                    "_load_routing_rules",
                    "_determine_target_agent"
                ],
                "docstring": "Dynamically routes incoming requests (e.g., scraped prompts)\nto specific target agents based on context metadata.",
                "base_classes": [
                    "BaseAgent"
                ]
            }
        },
        "routes": [],
        "complexity": 6
    },
    "src\\dreamos\\agents\\supervisor_agent.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "load_directives",
            "dispatch_tasks",
            "gather_results",
            "save_results",
            "run_loop"
        ],
        "classes": {
            "SupervisorAgent": {
                "methods": [
                    "__init__",
                    "load_directives",
                    "dispatch_tasks",
                    "gather_results",
                    "save_results",
                    "run_loop"
                ],
                "docstring": "Orchestrates tasks between ChatGPT WebAgents and Cursor workers.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 12
    },
    "setup.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\dreamos\\agents\\chatgpt_web_agent.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_initialize_browser",
            "_is_result_injected",
            "_mark_result_injected",
            "_get_and_cache_results",
            "sync_inject_and_selenium_send",
            "sync_scrape",
            "sync_close",
            "sync_read",
            "sync_write",
            "sync_read_prompt",
            "sync_scrape"
        ],
        "classes": {
            "ChatGPTWebAgent": {
                "methods": [
                    "__init__",
                    "_initialize_browser",
                    "_is_result_injected",
                    "_mark_result_injected",
                    "_get_and_cache_results"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 17
    },
    "src\\dreamos\\agents\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\dreamos\\agents\\utils\\onboarding_utils.py": {
        "language": ".py",
        "functions": [
            "calculate_file_sha256",
            "_get_current_utc_iso",
            "update_onboarding_contract"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "src\\dreamos\\apps\\dreamscape\\dreamscape_generator\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\dreamos\\apps\\dreamscape\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "scripts\\utils\\manage_tasks.py": {
        "language": ".py",
        "functions": [
            "_now",
            "cli",
            "claim",
            "update",
            "complete",
            "list_future",
            "list_working",
            "get",
            "add"
        ],
        "classes": {},
        "routes": [],
        "complexity": 9
    },
    "src\\dreamos\\apps\\dreamscape\\dreamscape_generator\\src\\core\\monitoring\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\dreamos\\agents\\utils.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\dreamos\\apps\\dreamscape\\dreamscape_generator\\src\\core\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\dreamos\\agents\\task_feedback_router.py": {
        "language": ".py",
        "functions": [
            "find_task_file",
            "route_feedback",
            "run_loop"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "src\\dreamos\\apps\\dreamscape\\dreamscape_generator\\main.py": {
        "language": ".py",
        "functions": [
            "run_generation"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "src\\dreamos\\apps\\dreamscape\\dreamscape_generator\\threads\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\dreamos\\channels\\azure_eventhub_channel.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\dreamos\\automation\\cursor_injector.py": {
        "language": ".py",
        "functions": [
            "_next_prompt_file",
            "_mark_processed",
            "_pause",
            "_ensure_focus",
            "_type_or_paste",
            "inject_single",
            "loop",
            "_build_cli",
            "main"
        ],
        "classes": {
            "InjectorSettings": {
                "methods": [],
                "docstring": "Runtime configuration container \u2013 can be JSON\u2011serialised for debugging.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 9
    },
    "src\\dreamos\\channels\\channel_loader.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\dreamos\\automation\\execution\\swarm_controller.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "start",
            "shutdown",
            "_spawn_thread",
            "_run_cursor_orchestrator_listener_async",
            "_worker_loop",
            "_maybe_launch_headless_cursor",
            "_route_loop",
            "_run_feedback_engine",
            "_persist_lore_metadata",
            "_compile_lore",
            "_start_stats_autologger",
            "_stats_loop",
            "_process_agent_output",
            "_handle_agent_error",
            "_load_initial_captain_id"
        ],
        "classes": {
            "SwarmController": {
                "methods": [
                    "__init__",
                    "start",
                    "shutdown",
                    "_spawn_thread",
                    "_run_cursor_orchestrator_listener_async",
                    "_worker_loop",
                    "_maybe_launch_headless_cursor",
                    "_route_loop",
                    "_run_feedback_engine",
                    "_persist_lore_metadata",
                    "_compile_lore",
                    "_start_stats_autologger",
                    "_stats_loop",
                    "_process_agent_output",
                    "_handle_agent_error",
                    "_load_initial_captain_id"
                ],
                "docstring": "Top-level coordinator for Cursor agents (GUI & headless).",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 32
    },
    "src\\dreamos\\automation\\execution\\cursor_fleet_launcher.py": {
        "language": ".py",
        "functions": [
            "launch_cursor_instance",
            "move_window",
            "get_cursor_windows",
            "assign_windows_to_monitors",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 5
    },
    "src\\dreamos\\agents\\utils\\agent_utils.py": {
        "language": ".py",
        "functions": [
            "with_error_handling",
            "with_performance_tracking",
            "log_task_performance",
            "format_agent_report",
            "example_agent_util_function",
            "decorator",
            "decorator",
            "_task_done_callback"
        ],
        "classes": {
            "AgentError": {
                "methods": [],
                "docstring": "Base exception for agent-related errors.",
                "base_classes": [
                    "Exception"
                ]
            },
            "TaskProcessingError": {
                "methods": [],
                "docstring": "Error during task processing.",
                "base_classes": [
                    "AgentError"
                ]
            },
            "MessageHandlingError": {
                "methods": [],
                "docstring": "Error during message handling.",
                "base_classes": [
                    "AgentError"
                ]
            }
        },
        "routes": [],
        "complexity": 8
    },
    "src\\dreamos\\chat_engine\\discord_dispatcher.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_setup_events",
            "send_message",
            "dispatch_memory_update",
            "dispatch_dreamscape_episode",
            "dispatch_feedback_loop",
            "run_bot",
            "shutdown"
        ],
        "classes": {
            "DiscordDispatcher": {
                "methods": [
                    "__init__",
                    "_setup_events",
                    "send_message",
                    "dispatch_memory_update",
                    "dispatch_dreamscape_episode",
                    "dispatch_feedback_loop",
                    "run_bot",
                    "shutdown"
                ],
                "docstring": "DiscordDispatcher - Manages communication to a Discord server.\nSends updates on system events, memory updates, and AI output.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 16
    },
    "src\\dreamos\\apps\\dreamscape\\dreamscape_generator\\src\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\dreamos\\automation\\run_loop.py": {
        "language": ".py",
        "functions": [
            "main",
            "chatgpt_loop"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "src\\dreamos\\chat_engine\\chat_scraper_service.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "get_all_chats",
            "get_filtered_chats",
            "validate_login",
            "manual_login_flow"
        ],
        "classes": {
            "ChatScraperService": {
                "methods": [
                    "__init__",
                    "get_all_chats",
                    "get_filtered_chats",
                    "validate_login",
                    "manual_login_flow"
                ],
                "docstring": "ChatScraperService retrieves available chat titles and links from the chat UI.\nIt handles exclusions and filtering for downstream execution cycles.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 10
    },
    "src\\dreamos\\automation\\cursor_orchestrator.py": {
        "language": ".py",
        "functions": [
            "__new__",
            "__init__",
            "_load_all_coordinates",
            "_initialize_agent_status",
            "_check_and_recover_focus",
            "_perform_injection_sequence",
            "_perform_copy_sequence",
            "_perform_health_check_click",
            "_log_retry_attempt"
        ],
        "classes": {
            "CursorOrchestratorError": {
                "methods": [],
                "docstring": "Custom exception for Cursor Orchestrator errors.",
                "base_classes": [
                    "CoreToolError"
                ]
            },
            "CursorOrchestrator": {
                "methods": [
                    "__new__",
                    "__init__",
                    "_load_all_coordinates",
                    "_initialize_agent_status",
                    "_check_and_recover_focus",
                    "_perform_injection_sequence",
                    "_perform_copy_sequence",
                    "_perform_health_check_click",
                    "_log_retry_attempt"
                ],
                "docstring": "Manages interaction with multiple Cursor UI instances.\n\nProvides methods to inject prompts, retrieve responses, and manage the state\nof Cursor windows associated with specific agent IDs. Operates as a singleton.\nHandles coordinate loading and orchestrates UI automation via pyautogui/pyperclip.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 18
    },
    "src\\dreamos\\automation\\execution\\virtual_desktop_runner.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "launch_cursor_headless",
            "inject_keystrokes",
            "teardown"
        ],
        "classes": {
            "VirtualDesktopController": {
                "methods": [
                    "__init__",
                    "launch_cursor_headless",
                    "inject_keystrokes",
                    "teardown"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 8
    },
    "src\\dreamos\\automation\\response_retriever.py": {
        "language": ".py",
        "functions": [
            "get_response",
            "__init__",
            "retrieve_agent_response"
        ],
        "classes": {
            "ResponseRetriever": {
                "methods": [
                    "__init__",
                    "retrieve_agent_response"
                ],
                "docstring": "Handles retrieving agent responses by clicking 'Copy' and reading the clipboard.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 5
    },
    "src\\dreamos\\chat_engine\\base_chat_adapter.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\dreamos\\chat_engine\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\dreamos\\cli\\dream_cli.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\dreamos\\config_files\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\dreamos\\automation\\prompt_dispatcher.py": {
        "language": ".py",
        "functions": [
            "scrape_new_prompts",
            "determine_prompt_priority",
            "route_prompt_to_agent"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3,
        "agent_role": "potential_agent"
    },
    "src\\dreamos\\chat_engine\\feedback_engine_v2.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "save_analysis"
        ],
        "classes": {
            "FeedbackEngineV2": {
                "methods": [
                    "__init__",
                    "save_analysis"
                ],
                "docstring": "FeedbackEngineV2 analyzes failed prompts using an LLM and provides root cause analysis\nand recommended fixes based on archived failure data.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 4
    },
    "src\\dreamos\\chat_engine\\driver_manager.py": {
        "language": ".py",
        "functions": [
            "setup_logger",
            "example_main",
            "get_instance",
            "__init__",
            "__enter__",
            "__exit__",
            "_get_cached_driver_path",
            "_download_driver_if_needed",
            "_is_session_expired",
            "_renew_driver_session",
            "get_session_info",
            "set_session_timeout",
            "_create_chrome_options",
            "get_driver",
            "_quit_driver_instance",
            "release_driver",
            "save_cookies",
            "load_cookies",
            "clear_cookies",
            "is_logged_in",
            "execute_with_retry",
            "scroll_into_view",
            "scroll_page",
            "scroll_to_bottom_smoothly",
            "update_options",
            "shutdown",
            "_force_kill_browsers",
            "__del__"
        ],
        "classes": {
            "DriverManager": {
                "methods": [
                    "get_instance",
                    "__init__",
                    "__enter__",
                    "__exit__",
                    "_get_cached_driver_path",
                    "_download_driver_if_needed",
                    "_is_session_expired",
                    "_renew_driver_session",
                    "get_session_info",
                    "set_session_timeout",
                    "_create_chrome_options",
                    "get_driver",
                    "_quit_driver_instance",
                    "release_driver",
                    "save_cookies",
                    "load_cookies",
                    "clear_cookies",
                    "is_logged_in",
                    "execute_with_retry",
                    "scroll_into_view",
                    "scroll_page",
                    "scroll_to_bottom_smoothly",
                    "update_options",
                    "shutdown",
                    "_force_kill_browsers",
                    "__del__"
                ],
                "docstring": "Unified DriverManager for Selenium-based browser automation.\n\nFeatures:\n  - Singleton pattern to ensure a single active driver instance per configuration hash\n  - Session management with automatic expiration (default 1 hour) and renewal\n  - Persistent profile support (or temporary profiles in headless mode)\n  - Cookie saving/loading for session persistence\n  - Support for headless mode, mobile emulation, and optional undetected mode\n  - Auto-downloading and caching of the ChromeDriver executable\n  - Robust retry mechanisms for resilient browser operations\n  - Utilities for waiting, scrolling, and option updates",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 54
    },
    "src\\dreamos\\coordination\\dispatchers\\dispatchers\\base_dispatcher.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "add_task",
            "run_dispatcher_loop",
            "stop",
            "get_status"
        ],
        "classes": {
            "BaseDispatcher": {
                "methods": [
                    "__init__",
                    "add_task",
                    "run_dispatcher_loop",
                    "stop",
                    "get_status"
                ],
                "docstring": "Base dispatcher that manages a task queue and processes tasks.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 10,
        "agent_role": "potential_agent"
    },
    "src\\dreamos\\coordination\\dispatchers\\dispatchers\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\dreamos\\coordination\\tasks\\task_utils.py": {
        "language": ".py",
        "functions": [
            "read_tasks",
            "write_tasks",
            "_calculate_task_score",
            "update_task_status"
        ],
        "classes": {},
        "routes": [],
        "complexity": 4
    },
    "src\\dreamos\\coordination\\tasks\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\dreamos\\coordination\\agent_bus.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "__init__",
            "__init__",
            "__init__",
            "__init__",
            "__init__",
            "__init__",
            "__init__",
            "__init__",
            "__init__",
            "subscribe",
            "unsubscribe",
            "dispatch_event",
            "_handle_handler_task_completion",
            "__new__",
            "__init__",
            "subscribe",
            "unsubscribe",
            "dispatch_event",
            "register_agent",
            "unregister_agent",
            "get_agent_info",
            "update_agent_status"
        ],
        "classes": {
            "BusError": {
                "methods": [],
                "docstring": "Base class for AgentBus related errors.",
                "base_classes": [
                    "Exception"
                ]
            },
            "SubscriptionError": {
                "methods": [],
                "docstring": "Raised for errors during handler subscription or unsubscription.",
                "base_classes": [
                    "BusError"
                ]
            },
            "DispatchError": {
                "methods": [],
                "docstring": "Raised for errors during the event dispatch process itself (e.g., invalid event).",
                "base_classes": [
                    "BusError"
                ]
            },
            "EventHandlerError": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Raised specifically when an exception occurs within a subscribed event handler.\n\nAttributes:\n    original_exception: The exception caught from the handler.\n    handler: The handler function that caused the error.\n    event: The BaseEvent being processed when the error occurred.",
                "base_classes": [
                    "DispatchError"
                ]
            },
            "EventType": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "Enum"
                ]
            },
            "BaseEvent": {
                "methods": [],
                "docstring": "Base class for all events on the AgentBus.",
                "base_classes": []
            },
            "MemoryEvent": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Specific event type for memory operations.",
                "base_classes": [
                    "BaseEvent"
                ]
            },
            "TaskEvent": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Specific event for task lifecycle events.",
                "base_classes": [
                    "BaseEvent"
                ]
            },
            "ToolCallEvent": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Specific event for tool calls.",
                "base_classes": [
                    "BaseEvent"
                ]
            },
            "ToolResultEvent": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Specific event for tool results.",
                "base_classes": [
                    "BaseEvent"
                ]
            },
            "CursorInjectRequestEvent": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Specific event for cursor injection requests.",
                "base_classes": [
                    "BaseEvent"
                ]
            },
            "CursorRetrieveRequestEvent": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Specific event for cursor retrieval requests.",
                "base_classes": [
                    "BaseEvent"
                ]
            },
            "CursorResultEvent": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Specific event for cursor operation results (success/failure).",
                "base_classes": [
                    "BaseEvent"
                ]
            },
            "AgentErrorEvent": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Specific event type for agent or system error events.",
                "base_classes": [
                    "BaseEvent"
                ]
            },
            "SimpleEventBus": {
                "methods": [
                    "__init__",
                    "subscribe",
                    "unsubscribe",
                    "dispatch_event",
                    "_handle_handler_task_completion"
                ],
                "docstring": "A basic in-memory publish-subscribe event bus supporting wildcard subscriptions.\n\nNote: This implementation uses a single lock for subscriber modifications,\nmaking subscribe/unsubscribe thread-safe but potentially limiting concurrency\nunder very high subscription churn. Event dispatch calls handlers sequentially\nafter retrieving them under the lock.",
                "base_classes": []
            },
            "AgentBus": {
                "methods": [
                    "__new__",
                    "__init__",
                    "subscribe",
                    "unsubscribe",
                    "dispatch_event",
                    "register_agent",
                    "unregister_agent",
                    "get_agent_info",
                    "update_agent_status"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 46,
        "agent_role": "potential_agent"
    },
    "src\\dreamos\\chat_engine\\gui_event_handler.py": {
        "language": ".py",
        "functions": [
            "run_gui",
            "__init__",
            "init_ui",
            "toggle_headless",
            "toggle_reverse",
            "toggle_archive",
            "start_dispatcher",
            "stop_dispatcher",
            "log",
            "__init__",
            "exec_",
            "__init__",
            "__init__",
            "__init__",
            "__init__",
            "__init__"
        ],
        "classes": {
            "GUIEventHandler": {
                "methods": [
                    "__init__",
                    "init_ui",
                    "toggle_headless",
                    "toggle_reverse",
                    "toggle_archive",
                    "start_dispatcher",
                    "stop_dispatcher",
                    "log"
                ],
                "docstring": "GUI Event Handler for ChatMate Agent Control Panel\n- Control Config Flags (Headless, Reverse Order, Archive)\n- Start/Stop the Agent Dispatcher\n- Display logs or status updates",
                "base_classes": [
                    "QMainWindow"
                ]
            },
            "QtWidgets": {
                "methods": [],
                "docstring": null,
                "base_classes": []
            },
            "QtCore": {
                "methods": [],
                "docstring": null,
                "base_classes": []
            },
            "QApplication": {
                "methods": [
                    "__init__",
                    "exec_"
                ],
                "docstring": null,
                "base_classes": []
            },
            "QMainWindow": {
                "methods": [
                    "__init__"
                ],
                "docstring": null,
                "base_classes": []
            },
            "QPushButton": {
                "methods": [
                    "__init__"
                ],
                "docstring": null,
                "base_classes": []
            },
            "QLabel": {
                "methods": [
                    "__init__"
                ],
                "docstring": null,
                "base_classes": []
            },
            "QCheckBox": {
                "methods": [
                    "__init__"
                ],
                "docstring": null,
                "base_classes": []
            },
            "QTextEdit": {
                "methods": [
                    "__init__"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 31
    },
    "src\\dreamos\\chat_engine\\chat_cycle_controller.py": {
        "language": ".py",
        "functions": [
            "sanitize_filename",
            "__init__",
            "_default_output_callback",
            "append_output",
            "start",
            "process_chat",
            "run_single_chat",
            "_save_prompt_response",
            "_save_run_summary",
            "shutdown",
            "__init__",
            "get"
        ],
        "classes": {
            "ChatCycleController": {
                "methods": [
                    "__init__",
                    "_default_output_callback",
                    "append_output",
                    "start",
                    "process_chat",
                    "run_single_chat",
                    "_save_prompt_response",
                    "_save_run_summary",
                    "shutdown"
                ],
                "docstring": "Master orchestrator for chat scraping, prompt cycles,\nmemory updates, and Discord dispatching.",
                "base_classes": []
            },
            "Config": {
                "methods": [
                    "__init__",
                    "get"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 23
    },
    "src\\dreamos\\chat_engine\\prompt_execution_service.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "get_prompt",
            "execute_prompt_cycle",
            "execute_prompts_single_chat",
            "execute_prompts_concurrently",
            "_execute_single_prompt_thread",
            "_determine_wait_time",
            "_post_process_jawbone_response",
            "_send_prompt",
            "_fetch_response",
            "send_prompt_and_wait"
        ],
        "classes": {
            "PromptExecutionService": {
                "methods": [
                    "__init__",
                    "get_prompt",
                    "execute_prompt_cycle",
                    "execute_prompts_single_chat",
                    "execute_prompts_concurrently",
                    "_execute_single_prompt_thread",
                    "_determine_wait_time",
                    "_post_process_jawbone_response",
                    "_send_prompt",
                    "_fetch_response",
                    "send_prompt_and_wait"
                ],
                "docstring": "PromptExecutionService handles sending prompts and retrieving responses.\nIt manages execution cycles for single chats or cycles across multiple prompts.\nNow supports model switching, feedback integration, and parallel execution.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 22
    },
    "src\\dreamos\\coordination\\voting_coordinator.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "reset_session"
        ],
        "classes": {
            "VotingCoordinator": {
                "methods": [
                    "__init__",
                    "reset_session"
                ],
                "docstring": "Manages voting sessions initiated within the Dream.OS swarm using standard pub/sub.\n\nListens for events on VOTE_INITIATED_TOPIC, collects votes from VOTE_CAST_TOPIC,\ntallies results based on timeout or quorum, and publishes results to VOTE_RESULTS_TOPIC.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 4
    },
    "src\\dreamos\\automation\\execution\\dream_mode_sleep.py": {
        "language": ".py",
        "functions": [
            "run_chatgpt_web_agent",
            "run_cursor_dispatcher",
            "run_task_feedback_router"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "src\\dreamos\\config.py": {
        "language": ".py",
        "functions": [
            "setup_logging",
            "resolve_log_dir",
            "resolve_relative_path",
            "resolve_performance_log_path",
            "resolve_target_files",
            "resolve_output_path",
            "load",
            "_ensure_dirs_exist"
        ],
        "classes": {
            "LoggingConfig": {
                "methods": [
                    "resolve_log_dir"
                ],
                "docstring": null,
                "base_classes": [
                    "BaseModel"
                ]
            },
            "PathsConfig": {
                "methods": [
                    "resolve_relative_path",
                    "resolve_performance_log_path"
                ],
                "docstring": null,
                "base_classes": [
                    "BaseModel"
                ]
            },
            "TaskDetailsConfig": {
                "methods": [
                    "resolve_target_files",
                    "resolve_output_path"
                ],
                "docstring": null,
                "base_classes": [
                    "BaseModel"
                ]
            },
            "CursorOrchestratorConfig": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "BaseModel"
                ]
            },
            "BasePolicyConfig": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "BaseModel"
                ]
            },
            "CompactionPolicyConfig": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "BasePolicyConfig"
                ]
            },
            "SummarizationPolicyConfig": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "BasePolicyConfig"
                ]
            },
            "AgentMemoryPolicyOverride": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "BaseModel"
                ]
            },
            "MemoryMaintenanceConfig": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "BaseModel"
                ]
            },
            "ContextRouterRule": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "BaseModel"
                ]
            },
            "ContextRouterConfig": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "BaseModel"
                ]
            },
            "DeploymentConfig": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "BaseModel"
                ]
            },
            "AppConfig": {
                "methods": [
                    "load",
                    "_ensure_dirs_exist"
                ],
                "docstring": null,
                "base_classes": [
                    "BaseModel"
                ]
            },
            "ConfigError": {
                "methods": [],
                "docstring": "Exception raised for errors in the configuration process.",
                "base_classes": [
                    "CoreConfigurationError"
                ]
            }
        },
        "routes": [],
        "complexity": 15
    },
    "src\\dreamos\\cli\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\dreamos\\chat_engine\\feedback_engine.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_load_memory",
            "_save_memory",
            "save_memory_async",
            "parse_and_update_memory",
            "apply_memory_updates",
            "log_feedback",
            "export_feedback_log",
            "analyze_feedback",
            "review_memory",
            "feedback_loop",
            "save_context_memory_async",
            "save_context_db",
            "review_context_memory"
        ],
        "classes": {
            "FeedbackEngine": {
                "methods": [
                    "__init__",
                    "_load_memory",
                    "_save_memory",
                    "save_memory_async",
                    "parse_and_update_memory",
                    "apply_memory_updates",
                    "log_feedback",
                    "export_feedback_log",
                    "analyze_feedback",
                    "review_memory",
                    "feedback_loop",
                    "save_context_memory_async",
                    "save_context_db",
                    "review_context_memory"
                ],
                "docstring": "FeedbackEngine - Parses AI responses, updates persistent memory,\ntracks reinforcement loops, and evolves Victor.OS intelligence.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 28
    },
    "src\\dreamos\\core\\config_utils.py": {
        "language": ".py",
        "functions": [
            "load_config",
            "get_config_value",
            "find_project_root"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "src\\dreamos\\coordination\\dispatcher.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "__init__",
            "register_handler"
        ],
        "classes": {
            "Event": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Minimal Event class stub, likely for import compatibility.",
                "base_classes": []
            },
            "EventDispatcher": {
                "methods": [
                    "__init__",
                    "register_handler"
                ],
                "docstring": "Minimal EventDispatcher stub, likely for import compatibility.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 6
    },
    "src\\dreamos\\core\\coordination\\agent_bus.py": {
        "language": ".py",
        "functions": [
            "get_agent_bus",
            "__init__",
            "subscribe",
            "unsubscribe",
            "dispatch_event",
            "__new__",
            "__init__",
            "subscribe",
            "unsubscribe",
            "dispatch_event",
            "register_agent",
            "unregister_agent",
            "get_agent_info",
            "update_agent_status"
        ],
        "classes": {
            "BusError": {
                "methods": [],
                "docstring": "Base exception for AgentBus errors.",
                "base_classes": [
                    "Exception"
                ]
            },
            "TopicNotFoundError": {
                "methods": [],
                "docstring": "Raised when a topic is not found.",
                "base_classes": [
                    "BusError"
                ]
            },
            "SubscriberCallbackError": {
                "methods": [],
                "docstring": "Raised when a subscriber callback fails.",
                "base_classes": [
                    "BusError"
                ]
            },
            "MessageValidationError": {
                "methods": [],
                "docstring": "Raised when message validation fails.",
                "base_classes": [
                    "BusError"
                ]
            },
            "BaseEvent": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "BaseModel"
                ]
            },
            "SimpleEventBus": {
                "methods": [
                    "__init__",
                    "subscribe",
                    "unsubscribe",
                    "dispatch_event"
                ],
                "docstring": "A simple, thread-safe event bus implementation.",
                "base_classes": []
            },
            "AgentBus": {
                "methods": [
                    "__new__",
                    "__init__",
                    "subscribe",
                    "unsubscribe",
                    "dispatch_event",
                    "register_agent",
                    "unregister_agent",
                    "get_agent_info",
                    "update_agent_status"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 27
    },
    "src\\dreamos\\core\\awareness\\context_manager.py": {
        "language": ".py",
        "functions": [],
        "classes": {
            "ContextManager": {
                "methods": [],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 0
    },
    "src\\dreamos\\coordination\\dispatchers\\base_dispatcher.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "add_task",
            "execute_task",
            "run_dispatcher_loop",
            "stop",
            "get_status"
        ],
        "classes": {
            "BaseDispatcher": {
                "methods": [
                    "__init__",
                    "add_task",
                    "execute_task",
                    "run_dispatcher_loop",
                    "stop",
                    "get_status"
                ],
                "docstring": "Base dispatcher that manages a task queue and processes tasks.",
                "base_classes": [
                    "ABC"
                ]
            }
        },
        "routes": [],
        "complexity": 12
    },
    "src\\dreamos\\core\\comms\\mailbox.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_get_target_inbox",
            "archive_message"
        ],
        "classes": {
            "MailboxError": {
                "methods": [],
                "docstring": "Custom exception for mailbox operations.",
                "base_classes": [
                    "Exception"
                ]
            },
            "MailboxHandler": {
                "methods": [
                    "__init__",
                    "_get_target_inbox",
                    "archive_message"
                ],
                "docstring": "Handles file-based mailbox operations for an agent using standardized JSON format.\nProvides methods to send messages/tasks to other agents' inboxes\nand potentially manage the agent's own inbox/archive.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 6
    },
    "src\\dreamos\\cli\\main.py": {
        "language": ".py",
        "functions": [
            "cli",
            "run"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "src\\dreamos\\core\\coordination\\events.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\dreamos\\core\\coordination\\agent_manager.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0,
        "agent_role": "potential_agent"
    },
    "src\\dreamos\\core\\bots\\orchestrator_bot.py": {
        "language": ".py",
        "functions": [
            "handle_message",
            "__init__",
            "_check_enabled",
            "_check_clipboard_enabled",
            "typewrite",
            "press",
            "hotkey",
            "click",
            "scroll",
            "move_to",
            "screenshot",
            "get_windows_by_title",
            "locate_center_on_screen",
            "locate_on_screen",
            "activate_window",
            "get_clipboard_content",
            "copy_to_clipboard",
            "on_created"
        ],
        "classes": {
            "OrchestratorBot": {
                "methods": [
                    "__init__",
                    "_check_enabled",
                    "_check_clipboard_enabled",
                    "typewrite",
                    "press",
                    "hotkey",
                    "click",
                    "scroll",
                    "move_to",
                    "screenshot",
                    "get_windows_by_title",
                    "locate_center_on_screen",
                    "locate_on_screen",
                    "activate_window",
                    "get_clipboard_content",
                    "copy_to_clipboard"
                ],
                "docstring": "Provides centralized methods for GUI interaction via PyAutoGUI.",
                "base_classes": []
            },
            "NewMsgHandler": {
                "methods": [
                    "on_created"
                ],
                "docstring": null,
                "base_classes": [
                    "FileSystemEventHandler"
                ]
            }
        },
        "routes": [],
        "complexity": 35
    },
    "src\\dreamos\\core\\comms\\project_board.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_get_project_dir",
            "_get_state_file_path",
            "_get_lock_path",
            "_get_global_task_file_path",
            "_get_global_lock_path",
            "_locked_state_access",
            "update_task_status",
            "add_shared_artifact",
            "get_project_state",
            "get_task_status",
            "get_shared_artifact",
            "claim_future_task",
            "update_working_task",
            "update_global_task",
            "move_task_to_completed"
        ],
        "classes": {
            "ProjectBoardError": {
                "methods": [],
                "docstring": "Custom exception for project board operations.",
                "base_classes": [
                    "CoreBoardError"
                ]
            },
            "ProjectBoardManager": {
                "methods": [
                    "__init__",
                    "_get_project_dir",
                    "_get_state_file_path",
                    "_get_lock_path",
                    "_get_global_task_file_path",
                    "_get_global_lock_path",
                    "_locked_state_access",
                    "update_task_status",
                    "add_shared_artifact",
                    "get_project_state",
                    "get_task_status",
                    "get_shared_artifact",
                    "claim_future_task",
                    "update_working_task",
                    "update_global_task",
                    "move_task_to_completed"
                ],
                "docstring": "Manages shared project board state using a file-based approach.\nEach project has its own directory containing a state file and artifacts.\nUses file locking for safe concurrent access to the state file.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 32
    },
    "src\\dreamos\\core\\coordination\\message_patterns.py": {
        "language": ".py",
        "functions": [
            "create_task_message",
            "update_task_status"
        ],
        "classes": {
            "TaskStatus": {
                "methods": [],
                "docstring": "Task execution status.",
                "base_classes": [
                    "Enum"
                ]
            },
            "TaskPriority": {
                "methods": [],
                "docstring": "Task priority levels.",
                "base_classes": [
                    "Enum"
                ]
            },
            "TaskMessage": {
                "methods": [],
                "docstring": "Standard task message format, used as the 'data' field in AgentBus messages.",
                "base_classes": [
                    "BaseModel"
                ]
            },
            "Config": {
                "methods": [],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 2
    },
    "src\\dreamos\\core\\coordination\\base_agent.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "register_command_handler",
            "_get_priority_value",
            "_setup_logger",
            "get_status",
            "get_capabilities",
            "_get_default_agent_bus"
        ],
        "classes": {
            "BaseAgent": {
                "methods": [
                    "__init__",
                    "register_command_handler",
                    "_get_priority_value",
                    "_setup_logger",
                    "get_status",
                    "get_capabilities",
                    "_get_default_agent_bus"
                ],
                "docstring": "Base class for all Dream.OS agents providing common functionality.",
                "base_classes": [
                    "ABC",
                    "BaseAgentLifecycleMixin"
                ]
            }
        },
        "routes": [],
        "complexity": 14
    },
    "src\\dreamos\\core\\feedback\\thea_feedback_ingestor.py": {
        "language": ".py",
        "functions": [
            "load_recent_feedback",
            "inject_feedback_to_thea"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "src\\dreamos\\core\\coordination\\schemas\\voting_patterns.py": {
        "language": ".py",
        "functions": [],
        "classes": {
            "VoteQuestion": {
                "methods": [],
                "docstring": "Structure for a single question within a vote.",
                "base_classes": [
                    "BaseModel"
                ]
            },
            "VoteInitiated": {
                "methods": [],
                "docstring": "Message schema published to initiate an agent vote.",
                "base_classes": [
                    "BaseModel"
                ]
            },
            "AgentVote": {
                "methods": [],
                "docstring": "Message schema published by an agent casting its vote.",
                "base_classes": [
                    "BaseModel"
                ]
            },
            "VoteResults": {
                "methods": [],
                "docstring": "Message schema published by the coordinator with the outcome of a vote.",
                "base_classes": [
                    "BaseModel"
                ]
            }
        },
        "routes": [],
        "complexity": 0
    },
    "src\\dreamos\\core\\health_checks\\cursor_status_check.py": {
        "language": ".py",
        "functions": [
            "__init__"
        ],
        "classes": {
            "CursorStatusCheck": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Encapsulates the logic for the cursor agent status check.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 2
    },
    "src\\dreamos\\core\\identity\\agent_identity_store.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "write_sync",
            "read_sync",
            "write_empty_json"
        ],
        "classes": {
            "AgentIdentityStore": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Handles persistence of AgentIdentity objects to a JSON file.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 5
    },
    "src\\dreamos\\core\\health_checks\\cursor_window_check.py": {
        "language": ".py",
        "functions": [
            "_load_coordinates",
            "check_cursor_window_reachability",
            "__init__",
            "run_check"
        ],
        "classes": {
            "CursorWindowCheck": {
                "methods": [
                    "__init__",
                    "run_check"
                ],
                "docstring": "Encapsulates the logic for the cursor window reachability check.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 6
    },
    "src\\dreamos\\core\\identity\\agent_identity.py": {
        "language": ".py",
        "functions": [
            "validate_agent_id_format",
            "ensure_datetime_obj",
            "update"
        ],
        "classes": {
            "AgentIdentity": {
                "methods": [
                    "validate_agent_id_format",
                    "ensure_datetime_obj",
                    "update"
                ],
                "docstring": "Represents the persistent identity and metadata of an agent.",
                "base_classes": [
                    "BaseModel"
                ]
            },
            "Config": {
                "methods": [],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 6
    },
    "src\\dreamos\\core\\coordination\\event_payloads.py": {
        "language": ".py",
        "functions": [
            "to_dict"
        ],
        "classes": {
            "ErrorEventPayload": {
                "methods": [],
                "docstring": "Unified payload for system or agent-specific error events. Replaces SystemAgentErrorPayload and AgentErrorPayload.",
                "base_classes": [
                    "BaseModel"
                ]
            },
            "AgentStatusEventPayload": {
                "methods": [],
                "docstring": "Unified payload for various agent status update events. Replaces AgentStatusChangePayload and AgentStatusPayload.",
                "base_classes": [
                    "BaseModel"
                ]
            },
            "AgentRegistrationPayload": {
                "methods": [],
                "docstring": "Payload for SYSTEM_AGENT_REGISTERED / UNREGISTERED events.",
                "base_classes": [
                    "BaseModel"
                ]
            },
            "TaskEventPayload": {
                "methods": [],
                "docstring": "Base payload for Task Lifecycle events. Contains only common fields.",
                "base_classes": [
                    "BaseModel"
                ]
            },
            "TaskProgressPayload": {
                "methods": [],
                "docstring": "Payload for TASK_PROGRESS events.",
                "base_classes": [
                    "TaskEventPayload"
                ]
            },
            "TaskCompletionPayload": {
                "methods": [],
                "docstring": "Payload for TASK_COMPLETED events.",
                "base_classes": [
                    "TaskEventPayload"
                ]
            },
            "TaskFailurePayload": {
                "methods": [],
                "docstring": "Payload for TASK_FAILED events.",
                "base_classes": [
                    "TaskEventPayload"
                ]
            },
            "ToolCallPayload": {
                "methods": [],
                "docstring": "Payload for TOOL_CALL events.",
                "base_classes": [
                    "BaseModel"
                ]
            },
            "ToolResultPayload": {
                "methods": [],
                "docstring": "Payload for TOOL_RESULT events.",
                "base_classes": [
                    "BaseModel"
                ]
            },
            "MemoryEventData": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "BaseModel"
                ]
            },
            "CursorInjectRequestPayload": {
                "methods": [
                    "to_dict"
                ],
                "docstring": "Payload for when a prompt injection is requested for a specific agent.",
                "base_classes": [
                    "BaseModel"
                ]
            },
            "CursorRetrieveRequestPayload": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "BaseModel"
                ]
            },
            "CursorResultPayload": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "BaseModel"
                ]
            },
            "AgentContractStatusPayload": {
                "methods": [],
                "docstring": "Payload for AGENT_CONTRACT_STATUS event (response to query).",
                "base_classes": [
                    "BaseModel"
                ]
            },
            "RouteInjectPayload": {
                "methods": [],
                "docstring": "Payload for ROUTE_INJECTION_REQUEST event.",
                "base_classes": [
                    "BaseModel"
                ]
            },
            "CursorEventPayload": {
                "methods": [],
                "docstring": "Standard payload for Cursor Interaction events (CURSOR_*).",
                "base_classes": [
                    "BaseModel"
                ]
            },
            "ScrapedDataPayload": {
                "methods": [],
                "docstring": "Payload for CHATGPT_RESPONSE_SCRAPED event.",
                "base_classes": [
                    "BaseModel"
                ]
            },
            "ApprovalRequestPayload": {
                "methods": [],
                "docstring": "Payload for SUPERVISOR_APPROVAL_REQUESTED event.",
                "base_classes": [
                    "BaseModel"
                ]
            },
            "ApprovalResponsePayload": {
                "methods": [],
                "docstring": "Payload for SUPERVISOR_APPROVAL_RESPONSE event.",
                "base_classes": [
                    "BaseModel"
                ]
            },
            "SupervisorAlertPayload": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "BaseModel"
                ]
            },
            "TaskValidationFailedPayload": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "TaskEventPayload"
                ]
            },
            "CapabilityRegisteredPayload": {
                "methods": [],
                "docstring": "Payload for SYSTEM_CAPABILITY_REGISTERED event.",
                "base_classes": [
                    "BaseModel"
                ]
            },
            "CapabilityUnregisteredPayload": {
                "methods": [],
                "docstring": "Payload for SYSTEM_CAPABILITY_UNREGISTERED event.",
                "base_classes": [
                    "BaseModel"
                ]
            },
            "Config": {
                "methods": [],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 2
    },
    "src\\dreamos\\hooks\\conversation_logger.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_get_db_connection",
            "_setup_database",
            "register_event_handlers",
            "_log_turn",
            "_handle_agent_prompt_request",
            "_handle_agent_prompt_response",
            "close"
        ],
        "classes": {
            "ConversationLogger": {
                "methods": [
                    "__init__",
                    "_get_db_connection",
                    "_setup_database",
                    "register_event_handlers",
                    "_log_turn",
                    "_handle_agent_prompt_request",
                    "_handle_agent_prompt_response",
                    "close"
                ],
                "docstring": "Logs conversation turns (prompts/replies) to an SQLite database via AgentBus events.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 16
    },
    "src\\dreamos\\core\\utils\\file_locking.py": {
        "language": ".py",
        "functions": [],
        "classes": {
            "LockAcquisitionError": {
                "methods": [],
                "docstring": "Raised when a file lock cannot be acquired within the specified timeout.\n\nThis typically occurs if another process or thread holds the lock for too\nlong. The original `filelock.Timeout` exception is chained for context.",
                "base_classes": [
                    "DreamOSError"
                ]
            },
            "LockDirectoryError": {
                "methods": [],
                "docstring": "Raised when the directory for the lock file cannot be created or accessed.\n\nThis usually indicates a filesystem permission issue or an invalid base\npath. The original `OSError` is chained for context.",
                "base_classes": [
                    "DreamOSError"
                ]
            }
        },
        "routes": [],
        "complexity": 0
    },
    "src\\dreamos\\hooks\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\dreamos\\identity\\models.py": {
        "language": ".py",
        "functions": [
            "default_timestamp",
            "update_last_seen",
            "to_dict",
            "from_dict"
        ],
        "classes": {
            "AgentIdentity": {
                "methods": [
                    "update_last_seen",
                    "to_dict",
                    "from_dict"
                ],
                "docstring": "Represents the static and dynamic identity attributes of an agent.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 7
    },
    "src\\dreamos\\core\\identity\\agent_identity_manager.py": {
        "language": ".py",
        "functions": [
            "__new__",
            "__init__"
        ],
        "classes": {
            "AgentIdentityError": {
                "methods": [],
                "docstring": "Custom exception for Agent Identity Manager errors.",
                "base_classes": [
                    "Exception"
                ]
            },
            "AgentIdentityManager": {
                "methods": [
                    "__new__",
                    "__init__"
                ],
                "docstring": "Manages agent identities, including registration and updates.\n\nNOTE: This class uses an async initialization pattern.\nObtain the singleton instance using AgentIdentityManager()\nand then call `await instance.initialize()` before using other methods.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 4
    },
    "src\\dreamos\\hooks\\stats_logger.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "log_snapshot"
        ],
        "classes": {
            "StatsLoggingHook": {
                "methods": [
                    "__init__",
                    "log_snapshot"
                ],
                "docstring": "Logs periodic snapshots of TaskNexus stats to a JSON file.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 4
    },
    "src\\dreamos\\core\\tasks\\nexus\\task_nexus.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_load",
            "_save",
            "get_next_task",
            "add_task",
            "update_task_status",
            "get_all_tasks",
            "stats",
            "get_task_by_id"
        ],
        "classes": {
            "Task": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "BaseModel"
                ]
            },
            "TaskNexus": {
                "methods": [
                    "__init__",
                    "_load",
                    "_save",
                    "get_next_task",
                    "add_task",
                    "update_task_status",
                    "get_all_tasks",
                    "stats",
                    "get_task_by_id"
                ],
                "docstring": "Local task queue and state tracker reading/writing from JSON.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 18
    },
    "src\\dreamos\\core\\logging\\swarm_logger.py": {
        "language": ".py",
        "functions": [
            "_get_log_path",
            "log_agent_event"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "src\\dreamos\\hooks\\chronicle_logger.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_format_entry",
            "_handle_event",
            "stop",
            "start"
        ],
        "classes": {
            "ChronicleLoggerHook": {
                "methods": [
                    "__init__",
                    "_format_entry",
                    "_handle_event",
                    "stop",
                    "start"
                ],
                "docstring": "Listens to AgentBus events and logs them to the Dreamscape Chronicle.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 10
    },
    "src\\dreamos\\hooks\\chatgpt_responder.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "get_response",
            "respond_to_mailbox"
        ],
        "classes": {
            "ChatGPTResponder": {
                "methods": [
                    "__init__",
                    "get_response",
                    "respond_to_mailbox"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 6
    },
    "src\\dreamos\\core\\utils\\onboarding_utils.py": {
        "language": ".py",
        "functions": [
            "write_yaml_sync",
            "read_yaml_sync"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "src\\dreamos\\identity\\store.py": {
        "language": ".py",
        "functions": [
            "get_identity_store",
            "__new__",
            "__init__",
            "_ensure_store_exists",
            "load_identities",
            "save_identities",
            "register_agent",
            "get_identity",
            "list_agents",
            "get_agent_ids"
        ],
        "classes": {
            "AgentIdentityStore": {
                "methods": [
                    "__new__",
                    "__init__",
                    "_ensure_store_exists",
                    "load_identities",
                    "save_identities",
                    "register_agent",
                    "get_identity",
                    "list_agents",
                    "get_agent_ids"
                ],
                "docstring": "Manages the persistence and retrieval of AgentIdentity objects.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 19
    },
    "src\\dreamos\\gui\\supervisor_alert_viewer.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "load_alerts"
        ],
        "classes": {
            "AlertViewerWindow": {
                "methods": [
                    "__init__",
                    "load_alerts"
                ],
                "docstring": null,
                "base_classes": [
                    "QMainWindow"
                ]
            }
        },
        "routes": [],
        "complexity": 4
    },
    "src\\dreamos\\integrations\\cursor\\swarm_bootloader.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_resolve_cursor_path",
            "launch_instances",
            "wait_for_detection",
            "move_windows_to_desktop",
            "setup_swarm",
            "detect_all_instances"
        ],
        "classes": {
            "TheaSwarmBootloader": {
                "methods": [
                    "__init__",
                    "_resolve_cursor_path",
                    "launch_instances",
                    "wait_for_detection",
                    "move_windows_to_desktop",
                    "setup_swarm"
                ],
                "docstring": "Handles launching and preparing a swarm of Cursor instances.",
                "base_classes": []
            },
            "WindowWrapper": {
                "methods": [],
                "docstring": null,
                "base_classes": []
            },
            "CursorWindowController": {
                "methods": [
                    "detect_all_instances"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 14
    },
    "src\\dreamos\\dashboard\\dashboard_app.py": {
        "language": ".py",
        "functions": [
            "read_task_board",
            "index"
        ],
        "classes": {},
        "routes": [
            {
                "function": "index",
                "method": "ROUTE",
                "path": "/"
            }
        ],
        "complexity": 2
    },
    "src\\dreamos\\dashboard\\dashboard_ui.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "refresh",
            "_inject_task",
            "_refresh_health_summary",
            "_update_chronicle_viewer"
        ],
        "classes": {
            "Dashboard": {
                "methods": [
                    "__init__",
                    "refresh",
                    "_inject_task",
                    "_refresh_health_summary",
                    "_update_chronicle_viewer"
                ],
                "docstring": null,
                "base_classes": [
                    "QMainWindow"
                ]
            }
        },
        "routes": [],
        "complexity": 10
    },
    "src\\dreamos\\gui\\main_window.py": {
        "language": ".py",
        "functions": [
            "add_task",
            "__init__",
            "_run_async_bootstrap",
            "_create_navigation",
            "add_navigation_item",
            "get_sidebar_items",
            "log_event",
            "notify_mailbox",
            "sync_event_with_board",
            "save_state",
            "_append_task_to_list",
            "load_state_fallback",
            "closeEvent",
            "cleanup_resources",
            "_save_state",
            "_load_state",
            "_update_agents_list",
            "_update_escalated_agents_list",
            "_subscribe_prompt_event"
        ],
        "classes": {
            "DummyTaskManager": {
                "methods": [
                    "add_task"
                ],
                "docstring": null,
                "base_classes": []
            },
            "TaskManager": {
                "methods": [],
                "docstring": "Alias for DummyTaskManager for testing compatibility.",
                "base_classes": [
                    "DummyTaskManager"
                ]
            },
            "FeedbackEngine": {
                "methods": [],
                "docstring": "Placeholder for feedback engine in tests.",
                "base_classes": []
            },
            "DreamOSTabManager": {
                "methods": [],
                "docstring": "Placeholder for tab manager in tests.",
                "base_classes": [
                    "QTabWidget"
                ]
            },
            "TabSystemShutdownManager": {
                "methods": [],
                "docstring": "Placeholder for tab system shutdown in tests.",
                "base_classes": []
            },
            "DreamOSMainWindow": {
                "methods": [
                    "__init__",
                    "_run_async_bootstrap",
                    "_create_navigation",
                    "add_navigation_item",
                    "get_sidebar_items",
                    "log_event",
                    "notify_mailbox",
                    "sync_event_with_board",
                    "save_state",
                    "_append_task_to_list",
                    "load_state_fallback",
                    "closeEvent",
                    "cleanup_resources",
                    "_save_state",
                    "_load_state",
                    "_update_agents_list",
                    "_update_escalated_agents_list"
                ],
                "docstring": "Main application window for Dream.OS using Sidebar Navigation.",
                "base_classes": [
                    "QMainWindow"
                ]
            }
        },
        "routes": [],
        "complexity": 37
    },
    "src\\dreamos\\integrations\\cursor\\coordination\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\dreamos\\integrations\\cursor\\cursor_prompt_controller.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_activate_cursor_window",
            "_focus_chat_input",
            "send_prompt_to_chat"
        ],
        "classes": {
            "CursorPromptController": {
                "methods": [
                    "__init__",
                    "_activate_cursor_window",
                    "_focus_chat_input",
                    "send_prompt_to_chat"
                ],
                "docstring": "DEPRECATED: Uses fragile pyautogui to send prompts. Use AgentBus events instead.\n\nUses pyautogui to send prompts to the Cursor chat interface.\nWARNING: This approach is highly unreliable and prone to breaking with UI changes,\n         timing issues, or focus stealing. It should only be used as a last resort\n         if the AgentBus event mechanism is unavailable.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 8
    },
    "src\\dreamos\\integrations\\browser_client.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "is_functional"
        ],
        "classes": {
            "BrowserClient": {
                "methods": [
                    "__init__",
                    "is_functional"
                ],
                "docstring": "Asynchronous client for browser automation using Playwright.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 4
    },
    "src\\dreamos\\integrations\\azure_blob_client.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "is_functional"
        ],
        "classes": {
            "AzureBlobError": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "IntegrationError"
                ]
            },
            "AzureBlobClient": {
                "methods": [
                    "__init__",
                    "is_functional"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 4
    },
    "src\\dreamos\\integrations\\discord_client.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "is_webhook_functional",
            "is_bot_functional"
        ],
        "classes": {
            "DiscordClient": {
                "methods": [
                    "__init__",
                    "is_webhook_functional",
                    "is_bot_functional"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 6
    },
    "src\\dreamos\\integrations\\agent_services\\cursor_shadow_controller.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "send_prompt_to_cursor",
            "monitor_output",
            "run_prompt_cycle"
        ],
        "classes": {
            "CursorShadowController": {
                "methods": [
                    "__init__",
                    "send_prompt_to_cursor",
                    "monitor_output",
                    "run_prompt_cycle"
                ],
                "docstring": "Shadow controller that allows background execution of prompts in Cursor\nwithout requiring visible GUI interaction, using a file-based inbox/outbox.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 8
    },
    "src\\dreamos\\integrations\\cursor\\utils.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\dreamos\\memory\\azure_blob_channel_memory.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_safe_upload",
            "_safe_download",
            "_safe_delete",
            "push_task",
            "pull_tasks",
            "push_result",
            "pull_results",
            "healthcheck"
        ],
        "classes": {
            "AzureBlobChannel": {
                "methods": [
                    "__init__",
                    "_safe_upload",
                    "_safe_download",
                    "_safe_delete",
                    "push_task",
                    "pull_tasks",
                    "push_result",
                    "pull_results",
                    "healthcheck"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 18
    },
    "src\\dreamos\\integrations\\openai_client.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "is_functional"
        ],
        "classes": {
            "OpenAIClient": {
                "methods": [
                    "__init__",
                    "is_functional"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 4
    },
    "src\\dreamos\\integrations\\social\\core\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\dreamos\\memory\\layers\\task_memory_layer.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_sync_save",
            "_sync_load"
        ],
        "classes": {
            "TaskMemoryLayer": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Manages persistent storage and recall of task outcomes using a JSON file.\nEnsures basic safety for concurrent async updates and auto-saves on modification.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 4
    },
    "src\\dreamos\\integrations\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\dreamos\\memory\\blob_channel_memory.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "push_task",
            "pull_tasks",
            "push_result",
            "pull_results",
            "healthcheck"
        ],
        "classes": {
            "LocalBlobChannel": {
                "methods": [
                    "__init__",
                    "push_task",
                    "pull_tasks",
                    "push_result",
                    "pull_results",
                    "healthcheck"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 12
    },
    "src\\dreamos\\memory\\summarizer.py": {
        "language": ".py",
        "functions": [
            "_generate_placeholder_summary",
            "summarize_memory_file",
            "__init__",
            "summarize"
        ],
        "classes": {
            "SummarizationStrategy": {
                "methods": [],
                "docstring": "Base class for summarization strategies.",
                "base_classes": []
            },
            "SlidingWindowSummarization": {
                "methods": [],
                "docstring": "Placeholder for sliding window summarization.",
                "base_classes": [
                    "SummarizationStrategy"
                ]
            },
            "Summarizer": {
                "methods": [
                    "__init__",
                    "summarize"
                ],
                "docstring": "Placeholder for the main summarizer class.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 6
    },
    "src\\dreamos\\memory\\compaction_utils.py": {
        "language": ".py",
        "functions": [
            "compact_segment_data",
            "_sync_rewrite",
            "_sync_read_and_parse",
            "dt_serializer"
        ],
        "classes": {
            "CompactionError": {
                "methods": [],
                "docstring": "Exception raised for errors during memory compaction.",
                "base_classes": [
                    "CoreMemoryError"
                ]
            }
        },
        "routes": [],
        "complexity": 4
    },
    "src\\dreamos\\monitoring\\performance_logger.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "track_operation",
            "log_outcome",
            "_log_entry"
        ],
        "classes": {
            "PerformanceLogger": {
                "methods": [
                    "__init__",
                    "track_operation",
                    "log_outcome",
                    "_log_entry"
                ],
                "docstring": "Logs performance metrics for agent operations and tasks.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 8
    },
    "src\\dreamos\\rendering\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\dreamos\\schemas\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\dreamos\\memory\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\dreamos\\services\\failed_prompt_archive.py": {
        "language": ".py",
        "functions": [
            "load_json_safe",
            "write_json_safe",
            "__init__",
            "log_failure",
            "get_failures",
            "get_by_prompt_id"
        ],
        "classes": {
            "FailedPromptArchiveService": {
                "methods": [
                    "__init__",
                    "log_failure",
                    "get_failures",
                    "get_by_prompt_id"
                ],
                "docstring": "Service to archive failed prompts with full metadata.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 10
    },
    "src\\dreamos\\integrations\\cursor\\window_controller.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_setup_os_specific_handlers",
            "detect_all_instances",
            "activate_window",
            "get_window_by_id",
            "print_window_map",
            "close",
            "enum_callback",
            "get_window_info"
        ],
        "classes": {
            "WindowWrapper": {
                "methods": [],
                "docstring": "Cross-platform window handle wrapper.",
                "base_classes": []
            },
            "CursorWindowController": {
                "methods": [
                    "__init__",
                    "_setup_os_specific_handlers",
                    "detect_all_instances",
                    "activate_window",
                    "get_window_by_id",
                    "print_window_map",
                    "close"
                ],
                "docstring": "Controls multiple Cursor window instances.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 16
    },
    "src\\dreamos\\reporting\\scoring_analyzer.py": {
        "language": ".py",
        "functions": [
            "load_task_data",
            "calculate_metrics",
            "generate_console_report",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 4
    },
    "src\\dreamos\\memory\\governance_memory_engine.py": {
        "language": ".py",
        "functions": [
            "log_event"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "src\\dreamos\\memory\\summarization_utils.py": {
        "language": ".py",
        "functions": [
            "_build_llm_summary_prompt",
            "_sync_read_and_parse"
        ],
        "classes": {
            "SummarizationError": {
                "methods": [],
                "docstring": "Exception raised for errors during memory summarization.",
                "base_classes": [
                    "CoreMemoryError"
                ]
            }
        },
        "routes": [],
        "complexity": 2
    },
    "src\\dreamos\\memory\\maintenance_service.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_ensure_snapshot_dir",
            "_get_file_lock_path",
            "start",
            "stop",
            "_run_maintenance_job",
            "_create_snapshot",
            "_cleanup_snapshots",
            "_run_compaction",
            "_run_summarization",
            "trigger_compaction",
            "trigger_summarization",
            "trigger_snapshot_cleanup"
        ],
        "classes": {
            "MemoryMaintenanceService": {
                "methods": [
                    "__init__",
                    "_ensure_snapshot_dir",
                    "_get_file_lock_path",
                    "start",
                    "stop",
                    "_run_maintenance_job",
                    "_create_snapshot",
                    "_cleanup_snapshots",
                    "_run_compaction",
                    "_run_summarization",
                    "trigger_compaction",
                    "trigger_summarization",
                    "trigger_snapshot_cleanup"
                ],
                "docstring": "Orchestrates memory maintenance tasks: compaction, summarization, snapshotting.\n\nThis service is intended to be configured and potentially run periodically\n(e.g., via a scheduler or triggered manually) to manage memory segment files.\nIt uses file locking to prevent concurrent modification of the same segment file.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 26
    },
    "src\\dreamos\\monitoring\\prompt_execution_monitor.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "start_monitoring",
            "report_success",
            "report_failure",
            "_monitor_loop",
            "recover_and_requeue"
        ],
        "classes": {
            "PromptExecutionMonitor": {
                "methods": [
                    "__init__",
                    "start_monitoring",
                    "report_success",
                    "report_failure",
                    "_monitor_loop",
                    "recover_and_requeue"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 12
    },
    "src\\dreamos\\services\\event_logger.py": {
        "language": ".py",
        "functions": [
            "log_structured_event"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "src\\dreamos\\services\\utils\\devlog_analyzer.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_get_connection",
            "_init_db",
            "track_post",
            "update_metrics",
            "get_best_posting_times",
            "get_top_performing_tags",
            "get_content_insights"
        ],
        "classes": {
            "DevLogAnalyzer": {
                "methods": [
                    "__init__",
                    "_get_connection",
                    "_init_db",
                    "track_post",
                    "update_metrics",
                    "get_best_posting_times",
                    "get_top_performing_tags",
                    "get_content_insights"
                ],
                "docstring": "Analyzes post performance and provides optimization insights.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 16
    },
    "src\\dreamos\\llm_bridge\\bridge_adapters\\base_adapter.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "name",
            "_validate_config",
            "get_config_value",
            "__init__",
            "__str__"
        ],
        "classes": {
            "BaseAdapter": {
                "methods": [
                    "__init__",
                    "name",
                    "_validate_config",
                    "get_config_value"
                ],
                "docstring": "Abstract Base Class for LLM Bridge Adapters.\n\nDefines the common interface required for interacting with different\nLLM services or models through a unified bridge.",
                "base_classes": [
                    "ABC"
                ]
            },
            "AdapterError": {
                "methods": [
                    "__init__",
                    "__str__"
                ],
                "docstring": "Custom exception for errors originating from an adapter.",
                "base_classes": [
                    "ToolError"
                ]
            }
        },
        "routes": [],
        "complexity": 12
    },
    "src\\dreamos\\services\\utils\\cursor.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "update_context",
            "add_to_history",
            "set_current_file",
            "record_command",
            "get_file_context",
            "clear_history",
            "_save_state",
            "_load_state",
            "__init__",
            "add_message",
            "get_context",
            "clear"
        ],
        "classes": {
            "CursorState": {
                "methods": [
                    "__init__",
                    "update_context",
                    "add_to_history",
                    "set_current_file",
                    "record_command",
                    "get_file_context",
                    "clear_history",
                    "_save_state",
                    "_load_state"
                ],
                "docstring": "Manages cursor state and context for chat interactions.",
                "base_classes": []
            },
            "ChatContext": {
                "methods": [
                    "__init__",
                    "add_message",
                    "get_context",
                    "clear"
                ],
                "docstring": "Manages chat context and history for conversations.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 26
    },
    "src\\dreamos\\memory\\memory_manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "__init__",
            "_init_schema",
            "__init__",
            "_segment_file",
            "render_narrative",
            "_rewrite_memory_safely",
            "_compact_segment",
            "_check_and_compact",
            "_sync_record",
            "_sync_init",
            "_sync_fetch",
            "_sync_export",
            "_sync_write",
            "_sync_read"
        ],
        "classes": {
            "MemoryManager": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Lightweight dict-of-dicts persisted to a single JSON file.\nGood for small, human-inspectable fragments. Now async-friendly.",
                "base_classes": []
            },
            "DatabaseManager": {
                "methods": [
                    "__init__",
                    "_init_schema"
                ],
                "docstring": "Async wrapper around SQLite for long-term interaction storage.\nUses asyncio.Lock for safe concurrent access from async contexts.",
                "base_classes": []
            },
            "UnifiedMemoryManager": {
                "methods": [
                    "__init__",
                    "_segment_file",
                    "render_narrative",
                    "_rewrite_memory_safely",
                    "_compact_segment",
                    "_check_and_compact"
                ],
                "docstring": "\u2022 LRU + compressed JSON per segment (system / prompts / feedback / context / interactions)\n\u2022 SQLite long-term store\n\u2022 Jinja2 narrative helpers",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 24
    },
    "src\\dreamos\\rendering\\template_engine.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "render"
        ],
        "classes": {
            "TemplateEngine": {
                "methods": [
                    "__init__",
                    "render"
                ],
                "docstring": "Wraps Jinja2 for rendering template strings.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 4
    },
    "src\\dreamos\\services\\utils\\chatgpt_scraper.py": {
        "language": ".py",
        "functions": [
            "parse_hybrid_response",
            "__init__",
            "_init_driver",
            "save_cookies",
            "load_cookies",
            "is_logged_in",
            "_chat_box_present",
            "ensure_chat_page",
            "ensure_login_session",
            "send_prompt",
            "fetch_response",
            "wait_for_stable_response",
            "clean_response",
            "handle_hybrid_response",
            "execute_prompt_cycle",
            "execute_prompts_on_all_chats",
            "shutdown",
            "_get_message_elements",
            "get_conversation_content",
            "get_conversation_links",
            "get_available_models",
            "select_model",
            "is_rate_limited",
            "prompt_with_fallback",
            "scroll_to_bottom",
            "default_queue_fn"
        ],
        "classes": {
            "HybridResponseHandler": {
                "methods": [
                    "parse_hybrid_response"
                ],
                "docstring": "Parses a hybrid response that includes both narrative text and a MEMORY_UPDATE JSON block.\nReturns a tuple of (text_part, memory_update_json).",
                "base_classes": []
            },
            "ResponseHandler": {
                "methods": [
                    "__init__",
                    "_init_driver",
                    "save_cookies",
                    "load_cookies",
                    "is_logged_in",
                    "_chat_box_present",
                    "ensure_chat_page",
                    "ensure_login_session",
                    "send_prompt",
                    "fetch_response",
                    "wait_for_stable_response",
                    "clean_response",
                    "handle_hybrid_response",
                    "execute_prompt_cycle",
                    "execute_prompts_on_all_chats",
                    "shutdown",
                    "_get_message_elements",
                    "get_conversation_content",
                    "get_conversation_links",
                    "get_available_models",
                    "select_model",
                    "is_rate_limited",
                    "prompt_with_fallback",
                    "scroll_to_bottom"
                ],
                "docstring": "Handles sending prompts, fetching, and stabilizing ChatGPT responses.\nNow includes hybrid response processing: it will extract narrative text and MEMORY_UPDATE JSON.\nAlso hooks into the AI output logger for reinforcement training.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 51
    },
    "src\\dreamos\\services\\utils\\selenium_utils.py": {
        "language": ".py",
        "functions": [
            "wait_for_element",
            "safe_click",
            "safe_send_keys",
            "navigate_to"
        ],
        "classes": {},
        "routes": [],
        "complexity": 4
    },
    "src\\dreamos\\services\\utils\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\dreamos\\services\\utils\\content\\post_context_generator.py": {
        "language": ".py",
        "functions": [
            "generate_context_from_governance"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "src\\dreamos\\services\\utils\\devlog_generator.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_load_strategies_from_config",
            "process_conversation",
            "_process_message",
            "generate_blog_post",
            "generate_social_content",
            "_generate_title",
            "_generate_description",
            "_extract_tags",
            "_detect_language",
            "_extract_metadata",
            "auto_publish"
        ],
        "classes": {
            "ContentBlock": {
                "methods": [],
                "docstring": "Represents a block of content from the conversation.",
                "base_classes": []
            },
            "DevLogPost": {
                "methods": [],
                "docstring": "Represents a structured blog post from a conversation.",
                "base_classes": []
            },
            "DevLogGenerator": {
                "methods": [
                    "__init__",
                    "_load_strategies_from_config",
                    "process_conversation",
                    "_process_message",
                    "generate_blog_post",
                    "generate_social_content",
                    "_generate_title",
                    "_generate_description",
                    "_extract_tags",
                    "_detect_language",
                    "_extract_metadata",
                    "auto_publish"
                ],
                "docstring": "Transforms ChatGPT conversations into various content formats.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 24
    },
    "src\\dreamos\\services\\utils\\feedback_processor.py": {
        "language": ".py",
        "functions": [
            "_extract_potential_suggestions",
            "_create_task_message",
            "process_feedback",
            "__init__"
        ],
        "classes": {
            "FeedbackProcessor": {
                "methods": [
                    "__init__"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 5
    },
    "src\\dreamos\\social\\exceptions\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\dreamos\\social\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\dreamos\\services\\utils\\devlog_dispatcher.py": {
        "language": ".py",
        "functions": [
            "main",
            "__init__",
            "on_created",
            "__init__",
            "_initialize_strategies",
            "start",
            "stop",
            "_process_content_queue",
            "handle_new_blog_post",
            "handle_new_social_content",
            "schedule_post",
            "_generate_post_id",
            "_extract_tags",
            "_get_next_optimal_time",
            "publish_job"
        ],
        "classes": {
            "ContentHandler": {
                "methods": [
                    "__init__",
                    "on_created"
                ],
                "docstring": "Handles file system events for new content.",
                "base_classes": [
                    "FileSystemEventHandler"
                ]
            },
            "DevLogDispatcher": {
                "methods": [
                    "__init__",
                    "_initialize_strategies",
                    "start",
                    "stop",
                    "_process_content_queue",
                    "handle_new_blog_post",
                    "handle_new_social_content",
                    "schedule_post",
                    "_generate_post_id",
                    "_extract_tags",
                    "_get_next_optimal_time"
                ],
                "docstring": "Autonomous agent that watches for new content and publishes it\nto appropriate platforms using configured strategies.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 28
    },
    "src\\dreamos\\supervisor_tools\\command_supervisor.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "start",
            "stop",
            "_run"
        ],
        "classes": {
            "SupervisorEvent": {
                "methods": [],
                "docstring": "Represents an event structure specifically for the CommandSupervisor context.",
                "base_classes": []
            },
            "ApprovalStatus": {
                "methods": [],
                "docstring": "Represents the possible states of a command approval request.",
                "base_classes": [
                    "Enum"
                ]
            },
            "CommandSupervisor": {
                "methods": [
                    "__init__",
                    "start",
                    "stop",
                    "_run"
                ],
                "docstring": "Singleton class to manage potentially risky command execution requests.\n\nThis supervisor acts as a central gatekeeper for shell commands requested by\nvarious agents. It enforces a human-in-the-loop approval process before\nallowing any command execution, enhancing system safety.\n\nWorkflow:\n1. An agent publishes a `COMMAND_EXECUTION_REQUEST` event via AgentBus.\n2. `CommandSupervisor` receives the request (`handle_command_request`).\n3. It assigns a unique ID and publishes a `COMMAND_APPROVAL_REQUEST` event.\n4. A separate component (e.g., a UI Agent, a manual reviewer) observes the\n   approval request and publishes a `COMMAND_APPROVAL_RESPONSE` event.\n5. `CommandSupervisor` receives the response (`handle_approval_response`).\n6. If approved, it executes the command (`execute_command`) using asyncio\n   subprocesses.\n7. If rejected or upon completion/error, it publishes a\n   `COMMAND_EXECUTION_RESULT` event back to the original requesting agent.\n\nAttributes:\n    agent_bus (AgentBus): The shared AgentBus instance for communication.\n    pending_approvals (Dict[str, SupervisorEvent]): Stores requests awaiting approval.\n    approval_status (Dict[str, ApprovalStatus]): Tracks the status of each request.",
                "base_classes": [
                    "Singleton"
                ]
            }
        },
        "routes": [],
        "complexity": 8
    },
    "src\\dreamos\\social\\utils\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\dreamos\\services\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\dreamos\\services\\utils\\logging_utils.py": {
        "language": ".py",
        "functions": [
            "log_event",
            "get_logger"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "src\\dreamos\\tools\\analysis\\project_scanner\\concurrency.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "get_results"
        ],
        "classes": {
            "MultibotManager": {
                "methods": [
                    "__init__",
                    "get_results"
                ],
                "docstring": "Manages a pool of asyncio worker tasks for file processing.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 4
    },
    "src\\dreamos\\tools\\analysis\\dead_code.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\dreamos\\tools\\analysis\\project_scanner\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\dreamos\\tools\\analysis\\project_scanner\\file_processor.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_sync_hash",
            "_sync_check_cache_and_get_data",
            "_sync_remove_excluded_from_cache",
            "_sync_read_source",
            "_sync_update_cache_with_analysis",
            "_sync_remove_fnf_from_cache",
            "_sync_remove_perm_error_from_cache",
            "_sync_remove_encoding_error_from_cache",
            "_sync_remove_general_error_from_cache"
        ],
        "classes": {
            "FileProcessor": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Handles file hashing, ignoring, caching checks, etc. Now with async methods.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 11
    },
    "src\\dreamos\\tools\\discovery\\archive_defunct_tests.py": {
        "language": ".py",
        "functions": [
            "archive_defunct_tests"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "src\\dreamos\\tools\\calibration\\recalibrate_coords.py": {
        "language": ".py",
        "functions": [
            "capture_single_coordinate",
            "update_coords_file",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "src\\dreamos\\tools\\analysis\\project_scanner\\report_generator.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "categorize_agents",
            "_maturity_level",
            "_agent_type",
            "_sync_load",
            "_sync_final_write",
            "_sync_load_context",
            "_sync_io_for_init",
            "_sync_write_json_context",
            "_read_template",
            "_write_rendered"
        ],
        "classes": {
            "ReportGenerator": {
                "methods": [
                    "__init__",
                    "categorize_agents",
                    "_maturity_level",
                    "_agent_type"
                ],
                "docstring": "Handles merging new analysis into existing reports and context files. Async I/O.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 15
    },
    "src\\dreamos\\tools\\coordination\\broadcast_directive.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\dreamos\\tools\\dreamos_utils\\check_agent_pulse.py": {
        "language": ".py",
        "functions": [
            "get_core_timestamp_utility",
            "check_agent_pulse",
            "fallback_timestamp"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "src\\dreamos\\tools\\discovery\\find_defunct_tests.py": {
        "language": ".py",
        "functions": [
            "find_python_files",
            "map_test_to_source",
            "find_defunct_tests"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "src\\dreamos\\tools\\discovery\\find_todos.py": {
        "language": ".py",
        "functions": [
            "find_todos_in_file",
            "write_log_entry",
            "scan_directory",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 4
    },
    "src\\dreamos\\tools\\analysis\\project_scanner\\analyzer.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_init_tree_sitter_language_sync",
            "analyze_file",
            "_analyze_python",
            "_analyze_rust",
            "_analyze_javascript",
            "_traverse",
            "get_node_text",
            "_traverse"
        ],
        "classes": {
            "LanguageAnalyzer": {
                "methods": [
                    "__init__",
                    "_init_tree_sitter_language_sync",
                    "analyze_file",
                    "_analyze_python",
                    "_analyze_rust",
                    "_analyze_javascript"
                ],
                "docstring": "Handles language-specific code analysis for different programming languages.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 15
    },
    "src\\dreamos\\tools\\discovery\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\dreamos\\tools\\dreamos_utils\\archive_agent_mailboxes.py": {
        "language": ".py",
        "functions": [
            "archive_mailbox",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2,
        "agent_role": "potential_agent"
    },
    "src\\dreamos\\tools\\functional\\gui_interaction.py": {
        "language": ".py",
        "functions": [
            "find_and_activate_cursor_window",
            "type_prompt_and_send",
            "copy_cursor_response",
            "interact_with_cursor"
        ],
        "classes": {},
        "routes": [],
        "complexity": 4
    },
    "src\\dreamos\\tools\\dreamos_utils\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\dreamos\\tools\\functional\\context_planner_tool.py": {
        "language": ".py",
        "functions": [
            "name",
            "description",
            "_extract_targets",
            "execute",
            "_rule_copy_file",
            "_rule_extract_symbol",
            "_rule_refactor_symbol",
            "_rule_create_file",
            "_rule_migrate_update_generic_refactor",
            "_rule_read_analyze",
            "_rule_search",
            "_rule_fallback_log",
            "_generate_plan_narration",
            "_log_execution"
        ],
        "classes": {
            "ContextPlannerTool": {
                "methods": [
                    "name",
                    "description",
                    "_extract_targets",
                    "execute",
                    "_rule_copy_file",
                    "_rule_extract_symbol",
                    "_rule_refactor_symbol",
                    "_rule_create_file",
                    "_rule_migrate_update_generic_refactor",
                    "_rule_read_analyze",
                    "_rule_search",
                    "_rule_fallback_log",
                    "_generate_plan_narration",
                    "_log_execution"
                ],
                "docstring": "Generates a execution plan based on keywords and patterns in the task description.\nNOTE: This is a simplified rule-based planner, NOT an LLM-based planner.",
                "base_classes": [
                    "BaseTool"
                ]
            }
        },
        "routes": [],
        "complexity": 28
    },
    "src\\dreamos\\tools\\functional\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\dreamos\\tools\\validation\\check_dependencies.py": {
        "language": ".py",
        "functions": [
            "check_cli_dependencies",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "src\\dreamos\\tools\\_core\\context.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\dreamos\\tools\\_core\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\dreamos\\tools\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\dreamos\\utils\\coords.py": {
        "language": ".py",
        "functions": [
            "load_coordinates",
            "save_coordinates"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "src\\dreamos\\tools\\_core\\base.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "__repr__",
            "__init__",
            "get_argument",
            "__init__",
            "__repr__",
            "__init__"
        ],
        "classes": {
            "ToolParameter": {
                "methods": [
                    "__init__",
                    "__repr__"
                ],
                "docstring": null,
                "base_classes": []
            },
            "ToolContext": {
                "methods": [
                    "__init__",
                    "get_argument"
                ],
                "docstring": null,
                "base_classes": []
            },
            "BaseTool": {
                "methods": [
                    "__init__",
                    "__repr__"
                ],
                "docstring": null,
                "base_classes": [
                    "ABC"
                ]
            },
            "BaseToolExecutor": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Placeholder base class for a tool executor concept. Now async.",
                "base_classes": [
                    "ABC"
                ]
            }
        },
        "routes": [],
        "complexity": 14
    },
    "src\\dreamos\\tools\\_core\\registry.py": {
        "language": ".py",
        "functions": [
            "get_registry",
            "__init__",
            "register",
            "get_tool",
            "list_tools"
        ],
        "classes": {
            "ToolRegistry": {
                "methods": [
                    "__init__",
                    "register",
                    "get_tool",
                    "list_tools"
                ],
                "docstring": "Minimal placeholder for ToolRegistry to resolve import errors.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 9
    },
    "src\\dreamos\\utils\\core.py": {
        "language": ".py",
        "functions": [
            "generate_id",
            "get_utc_iso_timestamp",
            "__call__",
            "__init__",
            "__init__",
            "__init__"
        ],
        "classes": {
            "Singleton": {
                "methods": [
                    "__call__"
                ],
                "docstring": "Metaclass for single-instance classes.",
                "base_classes": [
                    "type"
                ]
            },
            "AsyncLockManager": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Provides an asynchronous context manager for asyncio.Lock with an optional timeout.",
                "base_classes": []
            },
            "Cache": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Simple in-memory cache with time-to-live (TTL) expiration.",
                "base_classes": [
                    null
                ]
            },
            "RetryManager": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Manager to retry async operations with exponential backoff.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 10
    },
    "src\\dreamos\\utils\\dream_mode_utils\\browser.py": {
        "language": ".py",
        "functions": [
            "launch_browser",
            "navigate_to_page",
            "wait_for_login",
            "close_browser"
        ],
        "classes": {},
        "routes": [],
        "complexity": 4
    },
    "src\\dreamos\\utils\\dream_mode_utils\\channel_loader.py": {
        "language": ".py",
        "functions": [
            "get_blob_channel"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "src\\dreamos\\utils\\dream_mode_utils\\html_parser.py": {
        "language": ".py",
        "functions": [
            "is_still_generating",
            "extract_latest_reply"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "src\\dreamos\\utils\\dream_mode_utils\\cursor_session_manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "on_created",
            "start"
        ],
        "classes": {
            "CursorSessionManager": {
                "methods": [
                    "__init__",
                    "on_created",
                    "start"
                ],
                "docstring": "Watches a directory for Cursor task files and launches Cursor IDE sessions to execute them.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 6
    },
    "src\\dreamos\\utils\\dream_mode_utils\\prompt_renderer.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "render"
        ],
        "classes": {
            "PromptRenderer": {
                "methods": [
                    "__init__",
                    "render"
                ],
                "docstring": "Loads and renders Jinja2 templates from a specified directory.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 4
    },
    "src\\dreamos\\utils\\dream_mode_utils\\task_parser.py": {
        "language": ".py",
        "functions": [
            "_extract_json_block",
            "_extract_regex_fallback",
            "extract_task_metadata"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "src\\dreamos\\utils\\dream_mode_utils\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\dreamos\\utils\\governance_utils.py": {
        "language": ".py",
        "functions": [
            "submit_platform",
            "cast_vote",
            "submit_agent_meeting_idea"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "src\\dreamos\\utils\\file_io.py": {
        "language": ".py",
        "functions": [
            "read_json_file",
            "write_json_atomic",
            "read_jsonl_file",
            "append_jsonl",
            "read_text_file",
            "write_text_file_atomic",
            "_extract_content_from_tool_response",
            "safe_read_with_tool"
        ],
        "classes": {},
        "routes": [],
        "complexity": 8
    },
    "src\\dreamos\\utils\\gui_bridge_utils.py": {
        "language": ".py",
        "functions": [
            "_find_and_activate_window",
            "_locate_element",
            "send_prompt_to_cursor",
            "retrieve_response_from_cursor"
        ],
        "classes": {},
        "routes": [],
        "complexity": 4
    },
    "src\\dreamos\\utils\\log_validator.py": {
        "language": ".py",
        "functions": [
            "validate_log_file"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "src\\dreamos\\utils\\protocol_compliance_utils.py": {
        "language": ".py",
        "functions": [
            "calculate_file_sha256",
            "load_yaml_registry",
            "check_mailbox_structure",
            "_find_agent_source_file",
            "check_agent_bus_usage",
            "check_task_status_reporting",
            "check_compliance",
            "__init__",
            "visit_ClassDef",
            "visit_Call",
            "report",
            "__init__",
            "visit_Assign",
            "visit_Call",
            "report"
        ],
        "classes": {
            "AgentBusAstVisitor": {
                "methods": [
                    "__init__",
                    "visit_ClassDef",
                    "visit_Call",
                    "report"
                ],
                "docstring": null,
                "base_classes": [
                    "ast.NodeVisitor"
                ]
            },
            "TaskStatusAstVisitor": {
                "methods": [
                    "__init__",
                    "visit_Assign",
                    "visit_Call",
                    "report"
                ],
                "docstring": null,
                "base_classes": [
                    "ast.NodeVisitor"
                ]
            }
        },
        "routes": [],
        "complexity": 23
    },
    "src\\dreamos\\utils\\project_root.py": {
        "language": ".py",
        "functions": [
            "find_project_root"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "src\\dreamos\\utils\\gui_automation.py": {
        "language": ".py",
        "functions": [
            "load_coordinates",
            "is_window_focused",
            "trigger_recalibration"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "src\\dreamos\\utils\\schema_validator.py": {
        "language": ".py",
        "functions": [
            "load_schema",
            "validate_payload"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "src\\dreamos\\utils\\search.py": {
        "language": ".py",
        "functions": [
            "is_ripgrep_installed",
            "run_ripgrep_search",
            "parse_ripgrep_output"
        ],
        "classes": {
            "RipgrepMatch": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "TypedDict"
                ]
            }
        },
        "routes": [],
        "complexity": 3
    },
    "src\\dreamos\\utils\\text.py": {
        "language": ".py",
        "functions": [
            "sanitize_filename"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "src\\dreamos\\utils\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\dreamos\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\dreamos\\utils\\validation.py": {
        "language": ".py",
        "functions": [
            "is_valid_uuid",
            "validate_task_data"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "src\\dreamscape\\agents\\writer_agent.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_build_writing_prompt",
            "_parse_llm_draft"
        ],
        "classes": {
            "ContentWriterAgent": {
                "methods": [
                    "__init__",
                    "_build_writing_prompt",
                    "_parse_llm_draft"
                ],
                "docstring": "Generates content drafts based on provided ContentPlans, handling tasks of type 'WRITE_CONTENT_DRAFT'.",
                "base_classes": [
                    "BaseAgent"
                ]
            }
        },
        "routes": [],
        "complexity": 6
    },
    "src\\dreamscape\\agents\\planner_agent.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_build_planning_prompt",
            "_parse_llm_outline"
        ],
        "classes": {
            "PlannerAgent": {
                "methods": [
                    "__init__",
                    "_build_planning_prompt",
                    "_parse_llm_outline"
                ],
                "docstring": "Agent responsible for decomposing high-level goals into actionable tasks.",
                "base_classes": [
                    "BaseAgent"
                ]
            }
        },
        "routes": [],
        "complexity": 6
    },
    "src\\dreamscape\\core\\content_models.py": {
        "language": ".py",
        "functions": [],
        "classes": {
            "ContentPlan": {
                "methods": [],
                "docstring": "Represents a plan for generating a piece of content.",
                "base_classes": [
                    "BaseModel"
                ]
            },
            "ContentDraft": {
                "methods": [],
                "docstring": "Represents a generated draft of content based on a plan.",
                "base_classes": [
                    "BaseModel"
                ]
            }
        },
        "routes": [],
        "complexity": 0
    },
    "src\\dreamscape\\events\\event_types.py": {
        "language": ".py",
        "functions": [],
        "classes": {
            "DreamscapeEventType": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "Enum"
                ]
            }
        },
        "routes": [],
        "complexity": 0
    },
    "src\\dreamscape\\agents\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\dreamscape\\events\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\dreamscape\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\dreamscape\\schemas\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\dreamscape\\utils\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "tests\\coordination\\test_voting_coordinator.py": {
        "language": ".py",
        "functions": [
            "mock_agent_bus",
            "mock_config",
            "coordinator",
            "test_coordinator_init",
            "test_initiate_vote",
            "test_cast_vote_valid",
            "test_cast_vote_invalid_topic",
            "test_cast_vote_invalid_choice",
            "test_tally_vote_simple_majority",
            "test_tally_vote_tie",
            "test_tally_vote_timeout",
            "__init__",
            "initiate_vote",
            "cast_vote",
            "tally_vote",
            "handle_event"
        ],
        "classes": {
            "VotingCoordinator": {
                "methods": [
                    "__init__",
                    "initiate_vote",
                    "cast_vote",
                    "tally_vote",
                    "handle_event"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 21
    },
    "src\\dreamscape\\core\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\dreamscape\\schemas\\event_schemas.py": {
        "language": ".py",
        "functions": [],
        "classes": {
            "BaseEventPayload": {
                "methods": [],
                "docstring": "Base model containing fields common to most Dreamscape events.",
                "base_classes": [
                    "BaseModel"
                ]
            },
            "PlanRequestedPayload": {
                "methods": [],
                "docstring": "Payload for requesting a new content plan.",
                "base_classes": [
                    "BaseEventPayload"
                ]
            },
            "PlanGeneratedPayload": {
                "methods": [],
                "docstring": "Payload for publishing a newly generated content plan.",
                "base_classes": [
                    "BaseEventPayload"
                ]
            },
            "WritingRequestedPayload": {
                "methods": [],
                "docstring": "Payload for requesting content generation based on a plan.",
                "base_classes": [
                    "BaseEventPayload"
                ]
            },
            "DraftGeneratedPayload": {
                "methods": [],
                "docstring": "Payload for publishing a newly generated content draft.",
                "base_classes": [
                    "BaseEventPayload"
                ]
            },
            "PublishRequestedPayload": {
                "methods": [],
                "docstring": "Payload for requesting the publication of a content draft.",
                "base_classes": [
                    "BaseEventPayload"
                ]
            },
            "PlanFailedPayload": {
                "methods": [],
                "docstring": "Payload indicating a failure during content plan generation.",
                "base_classes": [
                    "BaseEventPayload"
                ]
            },
            "DraftFailedPayload": {
                "methods": [],
                "docstring": "Payload indicating a failure during content draft generation.",
                "base_classes": [
                    "BaseEventPayload"
                ]
            }
        },
        "routes": [],
        "complexity": 0
    },
    "tests\\coordination\\dispatchers\\test_base_dispatcher.py": {
        "language": ".py",
        "functions": [
            "test_base_dispatcher_initialization",
            "test_add_task",
            "test_add_task_with_priority",
            "test_run_dispatcher_loop",
            "test_run_dispatcher_loop_priority",
            "test_run_dispatcher_handles_execution_error",
            "test_stop_dispatcher",
            "test_get_status",
            "__init__",
            "execute_task"
        ],
        "classes": {
            "MockDispatcher": {
                "methods": [
                    "__init__",
                    "execute_task"
                ],
                "docstring": "Mock dispatcher for testing.",
                "base_classes": [
                    "BaseDispatcher"
                ]
            }
        },
        "routes": [],
        "complexity": 12
    },
    "tests\\conftest.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "tests\\core\\coordination\\test_message_patterns.py": {
        "language": ".py",
        "functions": [
            "test_create_task_message_defaults",
            "test_create_task_message_explicit",
            "test_update_task_status",
            "test_task_message_to_from_dict",
            "test_task_message_from_dict_minimal",
            "test_task_message_from_dict_missing_required",
            "test_task_message_from_dict_invalid_enum"
        ],
        "classes": {},
        "routes": [],
        "complexity": 7
    },
    "tests\\coordination\\test_agent_bus.py": {
        "language": ".py",
        "functions": [
            "agent_bus",
            "test_agent_bus_singleton",
            "test_agent_bus_delegates_to_simple_bus",
            "test_unsubscribe_removes_handler",
            "test_unsubscribe_removes_topic_if_empty",
            "test_unsubscribe_nonexistent_handler",
            "test_unsubscribe_nonexistent_topic",
            "handler1",
            "handler2",
            "handler",
            "handler1",
            "handler_never_subscribed",
            "handler"
        ],
        "classes": {},
        "routes": [],
        "complexity": 13
    },
    "tests\\core\\coordination\\test_base_agent.py": {
        "language": ".py",
        "functions": [
            "mock_agent_bus",
            "test_agent",
            "test_base_agent_init",
            "create_sample_task",
            "mock_agent",
            "capture_task"
        ],
        "classes": {
            "ConcreteAgent": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "BaseAgent"
                ]
            },
            "MinimalAgent": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "BaseAgent"
                ]
            },
            "MockConcreteAgent": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "BaseAgent"
                ]
            }
        },
        "routes": [],
        "complexity": 6,
        "agent_role": "potential_agent"
    },
    "tests\\dashboard\\test_dashboard_ui.py": {
        "language": ".py",
        "functions": [
            "mock_dashboard_deps",
            "test_dashboard_initialization",
            "test_dashboard_refresh_smoke",
            "test_dashboard_ui_loads",
            "test_dashboard_event_handling"
        ],
        "classes": {},
        "routes": [],
        "complexity": 5
    },
    "tests\\core\\utils\\test_onboarding_utils.py": {
        "language": ".py",
        "functions": [
            "test_successful_affirmation_new_agent",
            "test_successful_affirmation_existing_agent",
            "test_fail_protocol_hash_error",
            "test_fail_invalid_yaml_load",
            "test_fail_yaml_dump_error",
            "test_fail_write_permission_error",
            "test_update_contract_successful_lock",
            "test_update_contract_no_filelock_library",
            "open_side_effect",
            "open_side_effect",
            "open_side_effect"
        ],
        "classes": {
            "TestUpdateOnboardingContract": {
                "methods": [
                    "test_successful_affirmation_new_agent",
                    "test_successful_affirmation_existing_agent",
                    "test_fail_protocol_hash_error",
                    "test_fail_invalid_yaml_load",
                    "test_fail_yaml_dump_error",
                    "test_fail_write_permission_error",
                    "test_update_contract_successful_lock",
                    "test_update_contract_no_filelock_library"
                ],
                "docstring": null,
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 19
    },
    "tests\\core\\utils\\test_agent_utils.py": {
        "language": ".py",
        "functions": [
            "test_format_agent_report",
            "__init__"
        ],
        "classes": {
            "MockAgent": {
                "methods": [
                    "__init__"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 3
    },
    "tests\\core\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "tests\\dreamscape\\agents\\test_planner_agent.py": {
        "language": ".py",
        "functions": [
            "mock_agent_bus",
            "mock_app_config",
            "planner_agent",
            "test_planner_agent_init"
        ],
        "classes": {},
        "routes": [],
        "complexity": 4
    },
    "tests\\hooks\\test_chronicle_logger.py": {
        "language": ".py",
        "functions": [
            "mock_agent_bus_instance",
            "test_chronicle_logger_init",
            "test_chronicle_logger_format_entry",
            "test_chronicle_logger_handle_event"
        ],
        "classes": {},
        "routes": [],
        "complexity": 4
    },
    "tests\\hooks\\test_stats_logger.py": {
        "language": ".py",
        "functions": [
            "mock_nexus",
            "test_stats_logger_log_snapshot"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "tests\\memory\\test_compaction_utils.py": {
        "language": ".py",
        "functions": [
            "temp_file",
            "sample_data",
            "setup_segment_file",
            "test_rewrite_memory_safely_basic_write",
            "test_rewrite_memory_safely_compressed_write",
            "test_rewrite_memory_safely_serializes_datetime",
            "test_rewrite_memory_safely_write_failure",
            "test_rewrite_memory_safely_replace_failure",
            "test_compact_segment_data_time_policy",
            "test_compact_segment_data_keep_n_policy",
            "test_compact_segment_data_unknown_policy_returns_original",
            "test_compact_segment_data_default_policy_values",
            "test_compact_segment_file_on_json",
            "test_compact_segment_file_on_compressed",
            "test_compact_segment_file_no_op",
            "test_compact_segment_file_missing_ok",
            "test_compact_segment_file_empty_ok",
            "test_compact_segment_file_invalid_json_raises",
            "test_compact_segment_file_non_list_json_raises",
            "test_compact_segment_file_load_failure_raises",
            "test_compact_segment_file_save_failure_raises",
            "test_compact_segment_data_time_policy_with_tz",
            "test_compact_segment_data_keep_n_edge_cases",
            "test_compact_segment_data_logs_warnings",
            "test_rewrite_memory_safely_non_serializable_fails",
            "test_compact_segment_file_invalid_json_fails",
            "test_compact_segment_file_rewrite_failure",
            "test_compact_segment_file_logs_rewrite_failure"
        ],
        "classes": {
            "NonSerializable": {
                "methods": [],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 28
    },
    "tests\\hooks\\test_chatgpt_responder.py": {
        "language": ".py",
        "functions": [
            "test_responder_init_dev_mode",
            "test_responder_init_prod_mode",
            "test_get_response_dev_mode",
            "test_get_response_prod_mode",
            "test_respond_to_mailbox",
            "test_respond_to_mailbox_no_messages",
            "test_responder_init_dev_mode_scraper_missing"
        ],
        "classes": {},
        "routes": [],
        "complexity": 7
    },
    "tests\\dreamscape\\agents\\test_writer_agent.py": {
        "language": ".py",
        "functions": [
            "mock_agent_bus",
            "mock_app_config",
            "writer_agent",
            "sample_plan",
            "test_writer_agent_init"
        ],
        "classes": {},
        "routes": [],
        "complexity": 5
    },
    "tests\\integrations\\test_discord_client.py": {
        "language": ".py",
        "functions": [
            "discord_client"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "tests\\integrations\\azure\\test_azure_blob_channel.py": {
        "language": ".py",
        "functions": [
            "test_push_and_pull_task",
            "test_push_and_pull_result"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "tests\\memory\\test_database_manager.py": {
        "language": ".py",
        "functions": [
            "temp_db_file",
            "db_manager",
            "test_db_manager_initialization_creates_db_and_tables",
            "test_record_interaction_inserts_data",
            "test_initialize_conversation_inserts_metadata",
            "test_initialize_conversation_ignores_duplicate",
            "test_fetch_conversation_retrieves_interactions",
            "test_fetch_conversation_empty_result"
        ],
        "classes": {},
        "routes": [],
        "complexity": 8
    },
    "tests\\memory\\test_governance_memory_engine.py": {
        "language": ".py",
        "functions": [
            "setUp",
            "tearDown",
            "test_log_single_event",
            "test_log_multiple_events",
            "test_log_event_error_handling"
        ],
        "classes": {
            "TestGovernanceMemoryEngine": {
                "methods": [
                    "setUp",
                    "tearDown",
                    "test_log_single_event",
                    "test_log_multiple_events",
                    "test_log_event_error_handling"
                ],
                "docstring": null,
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 10
    },
    "tests\\memory\\test_memory_manager.py": {
        "language": ".py",
        "functions": [
            "mock_config",
            "temp_memory_file",
            "memory_manager",
            "test_memory_manager_initialization_creates_file",
            "test_memory_manager_initialization_loads_existing",
            "test_load_memory_handles_empty_file",
            "test_load_memory_handles_invalid_json",
            "test_load_memory_handles_non_dict_json",
            "test_save_memory_writes_correctly",
            "test_save_memory_handles_write_error",
            "test_save_fragment_adds_new",
            "test_save_fragment_updates_existing",
            "test_save_fragment_invalid_input",
            "test_load_fragment_returns_data",
            "test_load_fragment_returns_none_for_missing",
            "test_delete_fragment_removes_existing",
            "test_delete_fragment_handles_missing",
            "test_list_fragment_ids",
            "test_list_fragment_ids_empty"
        ],
        "classes": {},
        "routes": [],
        "complexity": 19
    },
    "tests\\memory\\test_memory_compaction.py": {
        "language": ".py",
        "functions": [
            "memory_manager",
            "create_segment_file",
            "test_compaction_triggered_by_size",
            "test_compaction_triggered_by_entries",
            "test_compaction_not_triggered_below_thresholds",
            "test_time_based_compaction_list",
            "test_time_based_compaction_dict",
            "test_keep_n_compaction_list",
            "test_safe_rewrite",
            "test_compaction_handles_invalid_json",
            "test_compaction_handles_missing_timestamp",
            "_create"
        ],
        "classes": {},
        "routes": [],
        "complexity": 12
    },
    "tests\\memory\\test_summarization_utils.py": {
        "language": ".py",
        "functions": [
            "mock_summarizer_instance",
            "sample_policy",
            "create_segment_file",
            "sample_chunk",
            "test_summarize_segment_chunk_placeholder",
            "test_summarize_segment_chunk_with_summarizer",
            "test_summarize_segment_chunk_summarizer_error",
            "test_summarize_segment_chunk_empty_chunk",
            "sample_conversations",
            "test_summarize_conversations_simple_concat",
            "test_summarize_conversations_simple_concat_truncation",
            "test_summarize_conversations_simple_concat_empty",
            "test_summarize_conversations_llm_placeholder",
            "test_summarize_conversations_llm_placeholder_truncation",
            "test_summarize_conversations_llm_no_client_raises",
            "test_summarize_conversations_llm_empty_input",
            "test_summarize_conversations_unknown_strategy_raises",
            "test_build_llm_summary_prompt_basic",
            "test_build_llm_summary_prompt_missing_fields",
            "test_build_llm_summary_prompt_empty",
            "_creator"
        ],
        "classes": {
            "MockSummarizer": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "BaseSummarizer"
                ]
            }
        },
        "routes": [],
        "complexity": 21
    },
    "tests\\services\\test_event_logger.py": {
        "language": ".py",
        "functions": [
            "test_log_structured_event_creates_file_and_logs",
            "test_log_structured_event_appends",
            "test_log_structured_event_creates_directory"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "tests\\services\\test_failed_prompt_archive.py": {
        "language": ".py",
        "functions": [
            "archive_service",
            "test_archive_initialization_new",
            "test_archive_initialization_loads_existing",
            "test_log_failure_appends_and_writes",
            "test_get_failures_no_filter",
            "test_get_failures_filter_by_reason",
            "test_get_failures_filter_by_max_retry",
            "test_get_by_prompt_id"
        ],
        "classes": {},
        "routes": [],
        "complexity": 8
    },
    "tests\\memory\\test_summarizer.py": {
        "language": ".py",
        "functions": [
            "sample_memory_file",
            "test_generate_summary_basic",
            "test_generate_summary_empty_chunk",
            "test_generate_summary_missing_timestamps",
            "test_summarize_file_no_summarization_needed_too_few",
            "test_summarize_file_no_summarization_needed_all_recent",
            "test_summarize_file_simple_case",
            "test_summarize_handles_missing_timestamps",
            "test_summarize_file_does_not_summarize_summaries",
            "test_summarize_safe_write_and_backup",
            "test_summarize_file_not_found",
            "test_summarize_file_invalid_json",
            "test_summarize_file_empty_json",
            "test_summarize_file_json_not_list",
            "_create"
        ],
        "classes": {},
        "routes": [],
        "complexity": 15
    },
    "tests\\social\\tests\\conftest.py": {
        "language": ".py",
        "functions": [
            "pytest_configure",
            "mock_setup_logging",
            "mock_driver"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "tests\\social\\tests\\integration\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "tests\\rendering\\test_template_engine.py": {
        "language": ".py",
        "functions": [
            "setUpClass",
            "tearDownClass",
            "test_render_valid_template",
            "test_render_with_tojson_filter",
            "test_render_template_not_found",
            "test_render_with_missing_variable"
        ],
        "classes": {
            "TestTemplateEngine": {
                "methods": [
                    "setUpClass",
                    "tearDownClass",
                    "test_render_valid_template",
                    "test_render_with_tojson_filter",
                    "test_render_template_not_found",
                    "test_render_with_missing_variable"
                ],
                "docstring": null,
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 12
    },
    "tests\\social\\tests\\social\\strategies\\base_strategy_test.py": {
        "language": ".py",
        "functions": [
            "mock_config",
            "mock_api",
            "strategy",
            "snapshot_dir",
            "save_snapshot",
            "load_snapshot",
            "test_init_with_valid_credentials",
            "test_init_with_missing_credentials",
            "test_feedback_on_rate_limit",
            "verify_template_rendering"
        ],
        "classes": {
            "BaseStrategyTest": {
                "methods": [
                    "mock_config",
                    "mock_api",
                    "strategy",
                    "snapshot_dir",
                    "save_snapshot",
                    "load_snapshot",
                    "test_init_with_valid_credentials",
                    "test_init_with_missing_credentials",
                    "test_feedback_on_rate_limit",
                    "verify_template_rendering"
                ],
                "docstring": "Base test class for all social media strategy tests.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 20
    },
    "tests\\social\\tests\\core\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "tests\\social\\tests\\strategies\\base_test.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "find_element",
            "find_elements",
            "get",
            "quit",
            "__init__",
            "click",
            "send_keys",
            "is_displayed",
            "get_attribute",
            "setUp",
            "tearDown",
            "assert_logged_event",
            "simulate_element_present",
            "simulate_element_not_found",
            "simulate_login_success",
            "simulate_login_failure",
            "simulate_post_success",
            "simulate_post_failure"
        ],
        "classes": {
            "MockWebDriver": {
                "methods": [
                    "__init__",
                    "find_element",
                    "find_elements",
                    "get",
                    "quit"
                ],
                "docstring": "Mock Selenium WebDriver for testing.",
                "base_classes": []
            },
            "MockElement": {
                "methods": [
                    "__init__",
                    "click",
                    "send_keys",
                    "is_displayed",
                    "get_attribute"
                ],
                "docstring": "Mock Selenium WebElement for testing.",
                "base_classes": []
            },
            "BaseStrategyTest": {
                "methods": [
                    "setUp",
                    "tearDown",
                    "assert_logged_event",
                    "simulate_element_present",
                    "simulate_element_not_found",
                    "simulate_login_success",
                    "simulate_login_failure",
                    "simulate_post_success",
                    "simulate_post_failure"
                ],
                "docstring": "Base test class for all social media strategy tests.",
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 38
    },
    "tests\\social\\tests\\social\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "tests\\services\\test_memory_maintenance_service.py": {
        "language": ".py",
        "functions": [
            "mock_app_config",
            "mock_summarizer",
            "maintenance_service",
            "get_memory_base_path",
            "get_snapshot_base_path"
        ],
        "classes": {
            "MockPathsConfig": {
                "methods": [
                    "get_memory_base_path",
                    "get_snapshot_base_path"
                ],
                "docstring": null,
                "base_classes": [
                    "PathsConfig"
                ]
            }
        },
        "routes": [],
        "complexity": 7
    },
    "tests\\tools\\discovery\\test_find_todos.py": {
        "language": ".py",
        "functions": [
            "test_find_todos_in_file_basic",
            "test_find_todos_in_file_no_matches",
            "test_find_todos_in_file_empty_file",
            "test_scan_directory",
            "test_scan_directory"
        ],
        "classes": {},
        "routes": [],
        "complexity": 5
    },
    "tests\\social\\tests\\utils\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "tests\\social\\tests\\strategies\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "tests\\social\\tests\\strategies\\base_strategy_test.py": {
        "language": ".py",
        "functions": [
            "login",
            "post_content",
            "scrape_mentions",
            "mock_config",
            "mock_driver",
            "strategy",
            "test_init_with_valid_config",
            "test_init_with_missing_config",
            "test_validate_media_files_success",
            "test_validate_media_files_missing",
            "test_wait_for_element_success",
            "test_wait_for_element_timeout",
            "test_safe_click_success",
            "test_safe_click_retry_success",
            "test_safe_click_failure",
            "test_safe_send_keys_success",
            "test_safe_send_keys_retry_success",
            "test_safe_send_keys_failure",
            "test_extract_error_details_success",
            "test_extract_error_details_failure"
        ],
        "classes": {
            "MockStrategy": {
                "methods": [
                    "login",
                    "post_content",
                    "scrape_mentions"
                ],
                "docstring": "Mock strategy for testing base functionality.",
                "base_classes": [
                    "BaseStrategy"
                ]
            },
            "BaseStrategyTest": {
                "methods": [
                    "mock_config",
                    "mock_driver",
                    "strategy",
                    "test_init_with_valid_config",
                    "test_init_with_missing_config",
                    "test_validate_media_files_success",
                    "test_validate_media_files_missing",
                    "test_wait_for_element_success",
                    "test_wait_for_element_timeout",
                    "test_safe_click_success",
                    "test_safe_click_retry_success",
                    "test_safe_click_failure",
                    "test_safe_send_keys_success",
                    "test_safe_send_keys_retry_success",
                    "test_safe_send_keys_failure",
                    "test_extract_error_details_success",
                    "test_extract_error_details_failure"
                ],
                "docstring": "Base test class for all strategy tests.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 40
    },
    "tests\\social\\tests\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "tests\\social\\tests\\tools\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "tests\\supervisor_tools\\test_command_supervisor.py": {
        "language": ".py",
        "functions": [
            "mock_agent_bus",
            "command_supervisor",
            "create_mock_process"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "tests\\utils\\test_protocol_compliance_utils.py": {
        "language": ".py",
        "functions": [
            "test_check_mailbox_structure_exists",
            "test_check_mailbox_structure_missing"
        ],
        "classes": {
            "TestProtocolComplianceUtils": {
                "methods": [
                    "test_check_mailbox_structure_exists",
                    "test_check_mailbox_structure_missing"
                ],
                "docstring": null,
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 4
    },
    "tests\\utils\\test_json_io.py": {
        "language": ".py",
        "functions": [
            "test_write_read_json_dict",
            "test_write_read_json_list",
            "test_read_json_file_not_found",
            "test_read_json_invalid_json",
            "test_append_read_jsonl",
            "test_read_jsonl_file_not_found",
            "test_read_jsonl_invalid_line",
            "test_write_read_text",
            "test_read_text_file_not_found",
            "test_extract_content_success",
            "test_extract_content_no_response",
            "test_extract_content_empty_dict_response",
            "test_extract_content_missing_read_file_response_key",
            "test_extract_content_missing_results_key",
            "test_extract_content_results_not_a_list",
            "test_extract_content_results_empty_list",
            "test_extract_content_results_list_with_none",
            "test_extract_content_results_list_with_non_string_becomes_string",
            "test_extract_content_tool_error_in_results_string",
            "test_extract_content_tool_error_in_error_field",
            "test_extract_content_malformed_response_completely_unexpected_structure",
            "test_safe_read_success_full_read",
            "test_safe_read_full_read_tool_error_fallback_succeeds",
            "test_safe_read_full_read_response_no_content_fallback_succeeds",
            "test_safe_read_no_full_read_request_fallback_succeeds",
            "test_safe_read_warmup_tool_call_fails_returns_none",
            "test_safe_read_warmup_response_no_content_full_read_succeeds",
            "test_safe_read_all_attempts_fail_various_reasons",
            "test_safe_read_full_read_not_requested_all_attempts_fail"
        ],
        "classes": {},
        "routes": [],
        "complexity": 29
    },
    "tests\\utils\\test_terminal_execution.py": {
        "language": ".py",
        "functions": [
            "test_security_avoids_shell_true",
            "test_security_prevents_command_injection"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "tests\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "scripts\\utility\\hello_world_script.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\dreamos\\agents\\utils\\agent1_taskboard_workaround.py": {
        "language": ".py",
        "functions": [
            "_acquire_lock_local",
            "_read_board_local",
            "_rewrite_memory_safely_local",
            "update_global_task_local",
            "__init__",
            "__enter__",
            "__exit__",
            "acquire",
            "release",
            "is_locked"
        ],
        "classes": {
            "_DummyLock": {
                "methods": [
                    "__init__",
                    "__enter__",
                    "__exit__",
                    "acquire",
                    "release",
                    "is_locked"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 16
    },
    "src\\dreamos\\core\\agents\\capabilities\\schema.py": {
        "language": ".py",
        "functions": [
            "ensure_datetime_utc"
        ],
        "classes": {
            "CapabilitySchema": {
                "methods": [],
                "docstring": "Defines the expected input, output, and error data structures for a capability.",
                "base_classes": [
                    "BaseModel"
                ]
            },
            "CapabilityMetadata": {
                "methods": [],
                "docstring": "Metadata associated with a capability.",
                "base_classes": [
                    "BaseModel"
                ]
            },
            "CapabilityPerformance": {
                "methods": [],
                "docstring": "Estimated or measured performance characteristics.",
                "base_classes": [
                    "BaseModel"
                ]
            },
            "CapabilityResourceRequirements": {
                "methods": [],
                "docstring": "Estimated resource needs for executing the capability.",
                "base_classes": [
                    "BaseModel"
                ]
            },
            "AgentCapability": {
                "methods": [
                    "ensure_datetime_utc"
                ],
                "docstring": "Represents a single capability offered by an agent, registered in the central registry.",
                "base_classes": [
                    "BaseModel"
                ]
            }
        },
        "routes": [],
        "complexity": 2
    },
    "src\\dreamos\\core\\errors.py": {
        "language": ".py",
        "functions": [],
        "classes": {
            "DreamOSError": {
                "methods": [],
                "docstring": "Base class for all custom exceptions raised within the Dream.OS framework.\n\nCatching this exception allows handling of any error originating specifically\nfrom Dream.OS components, distinguishing them from standard Python errors\nor errors from external libraries.",
                "base_classes": [
                    "Exception"
                ]
            },
            "ConfigurationError": {
                "methods": [],
                "docstring": "Indicates an error related to system configuration.\n\nThis could involve issues loading configuration files, missing required\nsettings, or invalid configuration values.",
                "base_classes": [
                    "DreamOSError"
                ]
            },
            "ToolError": {
                "methods": [],
                "docstring": "Indicates an error during the execution or interaction with an external tool.\n\nThis is used when a command-line tool, API call, or other external dependency\nfails or returns an unexpected result.",
                "base_classes": [
                    "DreamOSError"
                ]
            },
            "CommunicationError": {
                "methods": [],
                "docstring": "Indicates an error in inter-agent or system communication mechanisms.\n\nExamples include issues with the Agent Mailbox system, the AgentBus,\nor other message passing components.",
                "base_classes": [
                    "DreamOSError"
                ]
            },
            "MemoryError": {
                "methods": [],
                "docstring": "Indicates an error related to an agent's memory component operations.\n\nThis could involve failures in reading from, writing to, or managing\nthe agent's short-term or long-term memory stores.",
                "base_classes": [
                    "DreamOSError"
                ]
            },
            "TaskBoardError": {
                "methods": [],
                "docstring": "Indicates a conceptual or data integrity issue with a Task Board.\n\nThis is distinct from file I/O errors (covered by `ProjectBoardError`)\nand relates more to the structure, content, or state transitions of tasks\non the board (e.g., invalid status update, missing required field).",
                "base_classes": [
                    "DreamOSError"
                ]
            },
            "LockError": {
                "methods": [],
                "docstring": "Base class for errors related to file or resource locking mechanisms.",
                "base_classes": [
                    "DreamOSError"
                ]
            },
            "LockTimeoutError": {
                "methods": [],
                "docstring": "Raised specifically when acquiring a resource lock times out.",
                "base_classes": [
                    "LockError"
                ]
            },
            "ValidationError": {
                "methods": [],
                "docstring": "Indicates that data failed a validation check.\n\nUsed when input data, configuration, or internal state does not conform\nto expected rules or constraints.",
                "base_classes": [
                    "DreamOSError"
                ]
            },
            "ProjectBoardError": {
                "methods": [],
                "docstring": "Indicates an operational error within the ProjectBoardManager.\n\nThis typically relates to file system operations like reading/writing\nboard files, handling file locks specifically for the board manager,\nor JSON parsing errors related to board data.",
                "base_classes": [
                    "DreamOSError"
                ]
            },
            "CursorOrchestratorError": {
                "methods": [],
                "docstring": "Represents an error reported by the Cursor Orchestrator component.\n\nUsed to wrap or signify errors originating from interactions with the\nprimary orchestrator controlling the agent's execution within the IDE.",
                "base_classes": [
                    "DreamOSError"
                ]
            },
            "CoordinateError": {
                "methods": [],
                "docstring": "Indicates an error related to parsing or handling file coordinates.\n\nUsed when coordinate strings are malformed, cannot be resolved to actual\nfile locations, or are otherwise invalid.",
                "base_classes": [
                    "DreamOSError"
                ]
            },
            "ArchivingError": {
                "methods": [],
                "docstring": "Indicates an error during archiving or unarchiving operations.\n\nUsed for failures related to creating, reading, or managing archive files\n(e.g., zip, tar) used within the system.",
                "base_classes": [
                    "DreamOSError"
                ]
            }
        },
        "routes": [],
        "complexity": 0
    },
    "src\\dreamos\\core\\tasks\\nexus\\capability_registry.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_load_capabilities_from_db",
            "register_capability",
            "unregister_capability",
            "get_capability",
            "get_agent_capabilities",
            "find_capabilities",
            "find_agents_for_capability",
            "_dispatch_registry_event",
            "update_capability_status"
        ],
        "classes": {
            "CapabilityRegistry": {
                "methods": [
                    "__init__",
                    "_load_capabilities_from_db",
                    "register_capability",
                    "unregister_capability",
                    "get_capability",
                    "get_agent_capabilities",
                    "find_capabilities",
                    "find_agents_for_capability",
                    "_dispatch_registry_event",
                    "update_capability_status"
                ],
                "docstring": "Manages the registration and querying of agent capabilities via SQLiteAdapter.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 20
    },
    "src\\dreamos\\core\\tools\\script_runner.py": {
        "language": ".py",
        "functions": [
            "run_script",
            "__init__",
            "_resolve_script_path",
            "_run_script"
        ],
        "classes": {
            "ScriptExecutionError": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Custom exception for script execution failures.",
                "base_classes": [
                    "Exception"
                ]
            },
            "ScriptRunner": {
                "methods": [
                    "_resolve_script_path",
                    "_run_script"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 7
    },
    "tests\\core\\comms\\test_project_board.py": {
        "language": ".py",
        "functions": [
            "board_manager",
            "future_tasks_file",
            "working_tasks_file",
            "completed_tasks_file",
            "_read_json",
            "_write_json",
            "test_claim_success",
            "test_claim_not_found",
            "test_claim_already_working",
            "test_move_success",
            "test_move_not_found",
            "test_update_success",
            "test_update_not_found",
            "test_lock_timeout_on_read",
            "test_write_failure_on_update",
            "test_validation_calls_flake8",
            "test_validation_fails_on_flake8_error",
            "test_validation_handles_flake8_not_found",
            "test_update_task_on_future_board",
            "test_update_task_on_completed_board",
            "test_update_task_with_invalid_update_data_type",
            "test_validate_task_data_missing_id",
            "test_validate_task_data_valid",
            "test_validate_task_data_completed_missing_modified_files",
            "test_validate_task_data_completed_with_modified_files",
            "test_validate_task_data_schema_wrong_type",
            "test_validate_task_data_schema_missing_required"
        ],
        "classes": {
            "TestClaimFutureTask": {
                "methods": [
                    "test_claim_success",
                    "test_claim_not_found",
                    "test_claim_already_working"
                ],
                "docstring": null,
                "base_classes": []
            },
            "TestMoveTaskToCompleted": {
                "methods": [
                    "test_move_success",
                    "test_move_not_found"
                ],
                "docstring": null,
                "base_classes": []
            },
            "TestUpdateTask": {
                "methods": [
                    "test_update_success",
                    "test_update_not_found"
                ],
                "docstring": null,
                "base_classes": []
            },
            "TestErrorConditions": {
                "methods": [
                    "test_lock_timeout_on_read",
                    "test_write_failure_on_update"
                ],
                "docstring": null,
                "base_classes": []
            },
            "TestValidationLogic": {
                "methods": [
                    "test_validation_calls_flake8",
                    "test_validation_fails_on_flake8_error",
                    "test_validation_handles_flake8_not_found"
                ],
                "docstring": null,
                "base_classes": []
            },
            "TestUpdateTaskEdgeCases": {
                "methods": [
                    "test_update_task_on_future_board",
                    "test_update_task_on_completed_board",
                    "test_update_task_with_invalid_update_data_type"
                ],
                "docstring": null,
                "base_classes": []
            },
            "TestInternalValidation": {
                "methods": [
                    "test_validate_task_data_missing_id",
                    "test_validate_task_data_valid",
                    "test_validate_task_data_completed_missing_modified_files",
                    "test_validate_task_data_completed_with_modified_files",
                    "test_validate_task_data_schema_wrong_type",
                    "test_validate_task_data_schema_missing_required"
                ],
                "docstring": null,
                "base_classes": []
            },
            "ProjectBoardError": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "Exception"
                ]
            }
        },
        "routes": [],
        "complexity": 48
    },
    "tests\\coordination\\test_project_board_manager.py": {
        "language": ".py",
        "functions": [
            "mock_app_config",
            "pbm",
            "sample_task_1",
            "sample_task_2",
            "temp_test_dir",
            "sample_task_details",
            "mock_pbm_with_schema",
            "pbm_with_real_schema",
            "test_pbm_initialization",
            "test_add_task_future_success",
            "test_add_task_duplicate_id",
            "test_add_task_missing_id",
            "test_add_task_missing_description",
            "test_claim_task_success",
            "test_claim_task_not_found",
            "test_claim_task_wrong_status",
            "test_update_task_success",
            "test_update_task_not_found",
            "test_update_task_future_board",
            "test_delete_task_future_success",
            "test_delete_task_working_success",
            "test_delete_task_not_found",
            "test_claim_task_fail_save_working_rollback",
            "test_update_task_lock_timeout",
            "test_claim_task_lock_timeout",
            "test_add_task_schema_validation_fail",
            "test_update_task_schema_validation_success",
            "test_update_task_schema_validation_fail",
            "test_load_schema_success",
            "test_load_schema_not_found",
            "test_load_schema_invalid_json",
            "test_claim_ready_task_success",
            "test_claim_task_not_in_ready",
            "test_move_task_to_completed_success",
            "test_move_task_to_completed_not_found",
            "test_get_task_success",
            "test_get_task_not_found",
            "__init__",
            "__enter__",
            "__exit__",
            "save_side_effect",
            "side_effect_wrapper",
            "test_promote_success",
            "test_promote_not_found",
            "test_promote_already_ready",
            "test_promote_working_task",
            "test_promote_completed_task",
            "test_create_from_cli_basic",
            "test_create_from_cli_with_overrides"
        ],
        "classes": {
            "MockFileLock": {
                "methods": [
                    "__init__",
                    "__enter__",
                    "__exit__"
                ],
                "docstring": null,
                "base_classes": []
            },
            "TestPromoteTaskToReady": {
                "methods": [
                    "test_promote_success",
                    "test_promote_not_found",
                    "test_promote_already_ready",
                    "test_promote_working_task",
                    "test_promote_completed_task"
                ],
                "docstring": null,
                "base_classes": []
            },
            "TestCreateFromCliArgs": {
                "methods": [
                    "test_create_from_cli_basic",
                    "test_create_from_cli_with_overrides"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 59
    },
    "tests\\scripts\\utils\\test_simple_task_updater.py": {
        "language": ".py",
        "functions": [
            "mock_board_manager",
            "run_script",
            "test_claim_success",
            "test_claim_failure_board",
            "test_claim_missing_arg",
            "test_update_working_success",
            "test_update_completed_success",
            "test_update_failure_board",
            "test_update_move_failure_board",
            "test_update_missing_arg",
            "test_invalid_action",
            "test_board_file_argument"
        ],
        "classes": {
            "TestSimpleTaskUpdaterScript": {
                "methods": [
                    "test_claim_success",
                    "test_claim_failure_board",
                    "test_claim_missing_arg",
                    "test_update_working_success",
                    "test_update_completed_success",
                    "test_update_failure_board",
                    "test_update_move_failure_board",
                    "test_update_missing_arg",
                    "test_invalid_action",
                    "test_board_file_argument"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 22
    },
    "tests\\tools\\test_base.py": {
        "language": ".py",
        "functions": [
            "setUp",
            "tearDown",
            "test_base_tool_initialization",
            "test_base_tool_validate_arguments_missing_required",
            "test_base_tool_validate_arguments_valid",
            "test_base_tool_abstract_execute_enforcement",
            "test_tool_context_initialization",
            "test_tool_context_get_arg",
            "test_tool_parameter_initialization"
        ],
        "classes": {
            "TestBaseTool": {
                "methods": [
                    "setUp",
                    "tearDown",
                    "test_base_tool_initialization",
                    "test_base_tool_validate_arguments_missing_required",
                    "test_base_tool_validate_arguments_valid",
                    "test_base_tool_abstract_execute_enforcement",
                    "test_tool_context_initialization",
                    "test_tool_context_get_arg",
                    "test_tool_parameter_initialization"
                ],
                "docstring": null,
                "base_classes": [
                    "unittest.TestCase"
                ]
            },
            "DummyTool": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "BaseTool"
                ]
            },
            "SimpleReqTool": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "BaseTool"
                ]
            },
            "IncompleteTool": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "BaseTool"
                ]
            }
        },
        "routes": [],
        "complexity": 18
    },
    "_archive\\tests\\tests\\social\\tests\\utils\\test_browser_utils.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\dreamos\\core\\coordination\\event_types.py": {
        "language": ".py",
        "functions": [
            "__str__"
        ],
        "classes": {
            "EventType": {
                "methods": [
                    "__str__"
                ],
                "docstring": "Enumeration of standardized event types for AgentBus communication.\n\nUses hierarchical dot notation for topic structure:\ne.g., scope.domain.resource.action[.status]",
                "base_classes": [
                    "Enum"
                ]
            }
        },
        "routes": [],
        "complexity": 2
    },
    "src\\dreamos\\automation\\utils\\gui_bridge_utils.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\dreamos\\automation\\utils\\gui_automation.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "scripts\\utils\\safe_writer_cli.py": {
        "language": ".py",
        "functions": [
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "src\\dreamos\\coordination\\governance_utils.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\dreamos\\core\\config.py": {
        "language": ".py",
        "functions": [
            "find_project_root_marker",
            "setup_logging",
            "load_config",
            "get_config",
            "resolve_log_dir",
            "__init__",
            "_load_config",
            "get_field_value",
            "prepare_field_value",
            "__call__",
            "load"
        ],
        "classes": {
            "LoggingConfig": {
                "methods": [
                    "resolve_log_dir"
                ],
                "docstring": null,
                "base_classes": [
                    "BaseModel"
                ]
            },
            "PathsConfig": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "BaseModel"
                ]
            },
            "OpenAIConfig": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "BaseModel"
                ]
            },
            "ChatGPTScraperConfig": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "BaseModel"
                ]
            },
            "AgentActivationConfig": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "BaseModel"
                ]
            },
            "SwarmConfig": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "BaseModel"
                ]
            },
            "AzureBlobConfig": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "BaseModel"
                ]
            },
            "IntegrationsConfig": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "BaseModel"
                ]
            },
            "MonitoringConfig": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "BaseModel"
                ]
            },
            "HealthCheckConfig": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "BaseModel"
                ]
            },
            "OrchestratorConfig": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "BaseModel"
                ]
            },
            "PyAutoGUIBridgeConfig": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "BaseModel"
                ]
            },
            "YamlConfigSettingsSource": {
                "methods": [
                    "__init__",
                    "_load_config",
                    "get_field_value",
                    "prepare_field_value",
                    "__call__"
                ],
                "docstring": "A Pydantic settings source that loads configuration from a YAML file.\n\nThis class is used in conjunction with `AppConfig.settings_customise_sources`\nto enable loading application settings from a specified YAML configuration file.\nIt handles finding the YAML file (with priority to environment variables)\nand parsing its content.",
                "base_classes": [
                    "PydanticBaseSettingsSource"
                ]
            },
            "BasePolicyConfig": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "BaseModel"
                ]
            },
            "CompactionPolicyConfig": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "BasePolicyConfig"
                ]
            },
            "SummarizationConfig": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "BasePolicyConfig"
                ]
            },
            "AgentMemoryPolicyOverride": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "BaseModel"
                ]
            },
            "MemoryMaintenanceConfig": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "BaseModel"
                ]
            },
            "AgentPointsSystemConfig": {
                "methods": [],
                "docstring": "Configuration for the agent points system.",
                "base_classes": [
                    "BaseModel"
                ]
            },
            "LogLevel": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "str",
                    "Enum"
                ]
            },
            "OperatingMode": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "str",
                    "Enum"
                ]
            },
            "AppConfig": {
                "methods": [
                    "load"
                ],
                "docstring": "Main application configuration loaded from environment variables and/or config file.",
                "base_classes": [
                    "BaseSettings"
                ]
            },
            "Config": {
                "methods": [],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 18
    },
    "src\\dreamos\\core\\coordination\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\dreamos\\core\\utils\\safe_file_writer.py": {
        "language": ".py",
        "functions": [
            "safe_write_file"
        ],
        "classes": {
            "SafeWriteError": {
                "methods": [],
                "docstring": "Custom exception raised for errors during the safe file writing process.\n\nThis includes errors related to:\n- Invalid input parameters (path, content type).\n- Failure to acquire the file lock within the timeout period.\n- IOErrors during temporary file writing or final file replacement.\n- Unexpected exceptions during the write/rename process.",
                "base_classes": [
                    "IOError"
                ]
            }
        },
        "routes": [],
        "complexity": 1
    },
    "src\\dreamos\\core\\validation_utils.py": {
        "language": ".py",
        "functions": [
            "validate_required_fields",
            "validate_field_type",
            "validate_payload"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "src\\dreamos\\core\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\dreamos\\utils\\common_utils.py": {
        "language": ".py",
        "functions": [
            "get_utc_iso_timestamp"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "src\\dreamos\\channels\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\dreamos\\channels\\azure_blob_channel.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "push",
            "pull"
        ],
        "classes": {
            "AzureBlobChannel": {
                "methods": [
                    "__init__",
                    "push",
                    "pull"
                ],
                "docstring": "Placeholder for Azure Blob Channel.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 6
    },
    "src\\dreamos\\channels\\local_blob_channel.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_get_full_path",
            "push",
            "pull",
            "healthcheck"
        ],
        "classes": {
            "LocalBlobChannel": {
                "methods": [
                    "__init__",
                    "_get_full_path",
                    "push",
                    "pull",
                    "healthcheck"
                ],
                "docstring": "Placeholder for Local Blob Channel (File System based).",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 10
    },
    "src\\dreamos\\cli\\manage_tasks.py": {
        "language": ".py",
        "functions": [
            "cli",
            "claim",
            "update",
            "complete",
            "list_backlog",
            "list_ready",
            "list_working",
            "list_completed",
            "get",
            "add",
            "promote"
        ],
        "classes": {},
        "routes": [],
        "complexity": 11
    },
    "src\\dreamos\\cli\\safe_writer_cli.py": {
        "language": ".py",
        "functions": [
            "safe_write_cli"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "src\\dreamos\\coordination\\project_board_manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_resolve_path",
            "_get_lock",
            "_load_file",
            "_read_board_file",
            "_load_backlog",
            "_load_ready_queue",
            "_load_working_tasks",
            "_load_completed_tasks",
            "_save_backlog",
            "_save_ready_queue",
            "_save_working_tasks",
            "_save_completed_tasks",
            "_load_schema",
            "_validate_task",
            "_find_task_index",
            "_atomic_write",
            "_save_file",
            "get_task",
            "list_backlog_tasks",
            "list_ready_queue_tasks",
            "list_working_tasks",
            "add_task",
            "add_task_to_backlog",
            "_generate_task_id",
            "update_working_task",
            "delete_task",
            "move_task_to_completed",
            "claim_ready_task",
            "promote_task_to_ready",
            "_create_from_cli_args"
        ],
        "classes": {
            "ProjectBoardManager": {
                "methods": [
                    "__init__",
                    "_resolve_path",
                    "_get_lock",
                    "_load_file",
                    "_read_board_file",
                    "_load_backlog",
                    "_load_ready_queue",
                    "_load_working_tasks",
                    "_load_completed_tasks",
                    "_save_backlog",
                    "_save_ready_queue",
                    "_save_working_tasks",
                    "_save_completed_tasks",
                    "_load_schema",
                    "_validate_task",
                    "_find_task_index",
                    "_atomic_write",
                    "_save_file",
                    "get_task",
                    "list_backlog_tasks",
                    "list_ready_queue_tasks",
                    "list_working_tasks",
                    "add_task",
                    "add_task_to_backlog",
                    "_generate_task_id",
                    "update_working_task",
                    "delete_task",
                    "move_task_to_completed",
                    "claim_ready_task",
                    "promote_task_to_ready",
                    "_create_from_cli_args"
                ],
                "docstring": "Manages loading, saving, and modifying tasks on JSON-based project boards.\nEnsures safe concurrent access via file locking.\n\nSupports Backlog, Ready Queue, Working, and Completed boards.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 62
    },
    "src\\dreamos\\tools\\thea_relay_agent.py": {
        "language": ".py",
        "functions": [
            "validate_agent_id_format",
            "__init__",
            "_validate_response",
            "_sync_load",
            "_sync_move",
            "_sync_glob",
            "__init__"
        ],
        "classes": {
            "TheaMessage": {
                "methods": [
                    "validate_agent_id_format"
                ],
                "docstring": null,
                "base_classes": [
                    "BaseModel"
                ]
            },
            "TheaRelayAgent": {
                "methods": [
                    "__init__",
                    "_validate_response"
                ],
                "docstring": "An agent that monitors a directory for THEA responses, parses them,\nand dispatches them to the appropriate agent mailboxes.",
                "base_classes": [
                    "BaseAgent"
                ]
            },
            "BaseAgent": {
                "methods": [
                    "__init__"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 11
    },
    "scripts\\generate_dreamscape_from_session.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "scripts\\maintenance\\migrate_future_tasks_to_split.py": {
        "language": ".py",
        "functions": [
            "ensure_file"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "src\\dreamos\\automation\\run_orchestrator.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\dreamos\\cli\\calibrate_gui_coords.py": {
        "language": ".py",
        "functions": [
            "load_coords",
            "save_coords",
            "calibrate_coordinates",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 4
    },
    "src\\dreamos\\cli\\safe_edit_json_list.py": {
        "language": ".py",
        "functions": [
            "_atomic_write_json",
            "safe_edit_json_list"
        ],
        "classes": {
            "SafeEditError": {
                "methods": [],
                "docstring": "Custom exception for errors during safe JSON list editing.",
                "base_classes": [
                    "Exception"
                ]
            }
        },
        "routes": [],
        "complexity": 2
    },
    "src\\dreamos\\core\\comms\\mailbox_utils.py": {
        "language": ".py",
        "functions": [
            "validate_mailbox_message_schema",
            "create_mailbox_message",
            "get_agent_mailbox_path",
            "validate_agent_mailbox_path",
            "glob_sync",
            "write_sync",
            "read_sync"
        ],
        "classes": {},
        "routes": [],
        "complexity": 7
    },
    "src\\dreamos\\core\\coordination\\enums.py": {
        "language": ".py",
        "functions": [],
        "classes": {
            "AgentStatus": {
                "methods": [],
                "docstring": "Represents the possible operational statuses of an Agent.",
                "base_classes": [
                    "Enum"
                ]
            }
        },
        "routes": [],
        "complexity": 0
    },
    "src\\dreamos\\core\\errors\\exceptions.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "__str__"
        ],
        "classes": {
            "DreamOSError": {
                "methods": [
                    "__init__",
                    "__str__"
                ],
                "docstring": "Base class for all custom exceptions in Dream.OS.",
                "base_classes": [
                    "Exception"
                ]
            },
            "ConfigurationError": {
                "methods": [],
                "docstring": "Raised when there is an error related to configuration loading or validation.",
                "base_classes": [
                    "DreamOSError"
                ]
            },
            "AgentError": {
                "methods": [],
                "docstring": "Base class for errors originating from agents.",
                "base_classes": [
                    "DreamOSError"
                ]
            },
            "TaskError": {
                "methods": [],
                "docstring": "Base class for errors related to task processing.",
                "base_classes": [
                    "DreamOSError"
                ]
            },
            "ToolError": {
                "methods": [],
                "docstring": "Base class for errors related to tool execution.",
                "base_classes": [
                    "DreamOSError"
                ]
            },
            "ProjectBoardError": {
                "methods": [],
                "docstring": "Base class for errors related to Project Board Manager operations.",
                "base_classes": [
                    "DreamOSError"
                ]
            },
            "CoordinateError": {
                "methods": [],
                "docstring": "Raised for errors related to coordinate handling or lookup.",
                "base_classes": [
                    "DreamOSError"
                ]
            },
            "TaskNotFoundError": {
                "methods": [],
                "docstring": "Raised when a task ID is not found on the expected board.",
                "base_classes": [
                    "ProjectBoardError"
                ]
            },
            "TaskValidationError": {
                "methods": [],
                "docstring": "Raised when task data fails validation.",
                "base_classes": [
                    "ProjectBoardError"
                ]
            },
            "BoardLockError": {
                "methods": [],
                "docstring": "Raised when a file lock cannot be acquired.",
                "base_classes": [
                    "ProjectBoardError"
                ]
            },
            "CommunicationError": {
                "methods": [],
                "docstring": "Indicates an error in inter-agent or system communication mechanisms.",
                "base_classes": [
                    "DreamOSError"
                ]
            },
            "MemoryError": {
                "methods": [],
                "docstring": "Indicates an error related to an agent's memory component operations.",
                "base_classes": [
                    "DreamOSError"
                ]
            },
            "ValidationError": {
                "methods": [],
                "docstring": "Indicates that data failed a validation check (general purpose).",
                "base_classes": [
                    "DreamOSError"
                ]
            },
            "CursorOrchestratorError": {
                "methods": [],
                "docstring": "Represents an error reported by the Cursor Orchestrator component.",
                "base_classes": [
                    "DreamOSError"
                ]
            },
            "ArchivingError": {
                "methods": [],
                "docstring": "Indicates an error during archiving or unarchiving operations.",
                "base_classes": [
                    "DreamOSError"
                ]
            }
        },
        "routes": [],
        "complexity": 4
    },
    "src\\dreamos\\core\\errors\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\dreamos\\core\\events\\base_event.py": {
        "language": ".py",
        "functions": [
            "get_utc_iso_timestamp"
        ],
        "classes": {
            "BaseDreamEvent": {
                "methods": [],
                "docstring": "Base Pydantic model for all events dispatched via the AgentBus.",
                "base_classes": [
                    "BaseModel"
                ]
            },
            "Config": {
                "methods": [],
                "docstring": "Pydantic config settings.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 1
    },
    "src\\dreamos\\core\\events\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\dreamos\\core\\utils\\autonomy_governor.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "check_operational_status",
            "get_next_action_suggestion",
            "validate_task_completion_checklist"
        ],
        "classes": {
            "AgentAutonomyGovernor": {
                "methods": [
                    "__init__",
                    "check_operational_status",
                    "get_next_action_suggestion",
                    "validate_task_completion_checklist"
                ],
                "docstring": "Provides checks and guidance based on AUTONOMOUS_LOOP principles (v2.1 Inbox-Centric).",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 8
    },
    "src\\dreamos\\services\\memory_maintenance_service.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_get_policy_for_file"
        ],
        "classes": {
            "MemoryMaintenanceService": {
                "methods": [
                    "__init__",
                    "_get_policy_for_file"
                ],
                "docstring": "Manages background memory maintenance tasks like compaction and summarization.\nUses APScheduler for scheduling.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 4
    },
    "src\\dreamos\\services\\utils\\retry_utils.py": {
        "language": ".py",
        "functions": [
            "retry_selenium_action",
            "decorator",
            "wrapper"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "src\\dreamos\\utils\\gui_utils.py": {
        "language": ".py",
        "functions": [
            "get_specific_coordinate",
            "copy_text_from_cursor",
            "close_browser",
            "launch_browser",
            "inject_text_via_mouse",
            "perform_mouse_action",
            "navigate_to_page",
            "wait_for_login",
            "load_coordinates",
            "is_window_focused",
            "trigger_recalibration",
            "wait_for_element",
            "copy_thea_reply",
            "get_clipboard_content_safe",
            "copy_text_from_agent"
        ],
        "classes": {},
        "routes": [],
        "complexity": 15
    },
    "src\\tools\\calibration\\calibrate_agent_gui.py": {
        "language": ".py",
        "functions": [
            "load_existing_coords",
            "save_coords",
            "calibrate_element",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 4,
        "agent_role": "potential_agent"
    },
    "src\\tools\\validation\\validate_gui_coords.py": {
        "language": ".py",
        "functions": [
            "load_coords",
            "find_and_activate_window",
            "inject_test_prompt",
            "retrieve_response",
            "save_results",
            "_validate_coordinates",
            "_check_coordinate_overlap",
            "_check_accessibility",
            "_check_for_duplicates",
            "validate_gui_coordinates",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 11
    },
    "tests\\cli\\test_safe_edit_json_list.py": {
        "language": ".py",
        "functions": [
            "runner",
            "mock_filelock",
            "temp_json_file",
            "test_add_item_success",
            "test_add_item_to_empty_file",
            "test_remove_item_success",
            "test_remove_item_not_found",
            "test_update_item_success",
            "test_update_item_not_found",
            "test_invalid_json_item_data",
            "test_item_data_not_dict",
            "test_missing_item_id_for_remove",
            "test_missing_item_data_for_add",
            "test_target_file_not_list",
            "test_target_file_invalid_json",
            "acquire_side_effect",
            "release_side_effect",
            "_create_file"
        ],
        "classes": {},
        "routes": [],
        "complexity": 18
    },
    "_archive\\scripts\\auditing\\classify_domains.py": {
        "language": ".py",
        "functions": [
            "classify_path",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "_archive\\scripts\\auditing\\analyze_asset_usage.py": {
        "language": ".py",
        "functions": [
            "find_code_files",
            "get_asset_files",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "_archive\\scripts\\auditing\\find_unused_assets.py": {
        "language": ".py",
        "functions": [
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "_archive\\scripts\\auditing\\find_orphaned_files.py": {
        "language": ".py",
        "functions": [
            "find_orphaned_modules",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "_archive\\scripts\\auditing\\generate_summary.py": {
        "language": ".py",
        "functions": [
            "read_json_file",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "_archive\\scripts\\auditing\\generate_import_graph.py": {
        "language": ".py",
        "functions": [
            "find_python_files",
            "get_imports_from_file",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "_archive\\scripts\\dev\\test_scraper_live_chat.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "_archive\\scripts\\dreamscape_conversation_sync.py": {
        "language": ".py",
        "functions": [
            "safe_name"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "_archive\\scripts\\testing\\auto_claim_tasks_agent_002.py": {
        "language": ".py",
        "functions": [
            "auto_claim_tasks"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1,
        "agent_role": "potential_agent"
    },
    "_archive\\scripts\\testing\\claim_one_task_agent_002.py": {
        "language": ".py",
        "functions": [
            "claim_one_task"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1,
        "agent_role": "potential_agent"
    },
    "_archive\\scripts\\utility\\hello_world_script.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "_archive\\scripts\\testing\\load_generator_recovery_test.py": {
        "language": ".py",
        "functions": [
            "create_fail_test_task"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "_archive\\scripts\\testing\\_internal_test_loop.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "_archive\\scripts\\testing\\test_task_timeout.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "_archive\\scripts\\utils\\claim_task.py": {
        "language": ".py",
        "functions": [
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "_archive\\scripts\\testing\\test_cursor_orchestrator.py": {
        "language": ".py",
        "functions": [],
        "classes": {
            "CursorOrchestrator": {
                "methods": [],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 0
    },
    "_archive\\scripts\\utils\\affirm_onboarding_contract.py": {
        "language": ".py",
        "functions": [
            "calculate_sha256",
            "get_current_utc_iso",
            "update_contract_yaml",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 4
    },
    "_archive\\scripts\\utils\\simple_task_updater.py": {
        "language": ".py",
        "functions": [
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "runtime\\temp\\agent7_validation_test.py": {
        "language": ".py",
        "functions": [
            "test_validation"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "runtime\\agent_prototypes\\Agent-1\\visual_wait_prototype.py": {
        "language": ".py",
        "functions": [
            "wait_for_visual_cue"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "src\\dreamos\\agents\\autonomy_recovery_patch.py": {
        "language": ".py",
        "functions": [
            "sync_read",
            "sync_write"
        ],
        "classes": {
            "AgentStateError": {
                "methods": [],
                "docstring": "Custom exception for agent state issues.",
                "base_classes": [
                    "Exception"
                ]
            }
        },
        "routes": [],
        "complexity": 2
    },
    "src\\dreamos\\automation\\extract_cursor_response.py": {
        "language": ".py",
        "functions": [
            "_rand_pause",
            "_save_response",
            "_clipboard_changed",
            "extract_response",
            "cli"
        ],
        "classes": {},
        "routes": [],
        "complexity": 5
    },
    "src\\dreamos\\automation\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\dreamos\\core\\tasks\\nexus\\task_operations.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "get_priority"
        ],
        "classes": {
            "TaskOperationsHandler": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Handles core task operations like getting, adding, updating, and checking dependencies.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 3
    },
    "src\\dreamos\\core\\tasks\\nexus\\agent_registry_handler.py": {
        "language": ".py",
        "functions": [
            "__init__"
        ],
        "classes": {
            "AgentRegistryHandler": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Handles agent heartbeat recording and stale task reclamation using SQLiteAdapter.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 2
    },
    "src\\dreamos\\core\\tasks\\nexus\\capability_handler.py": {
        "language": ".py",
        "functions": [
            "__init__"
        ],
        "classes": {
            "CapabilityHandler": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Handles interactions with the CapabilityRegistry.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 2
    },
    "src\\dreamos\\tools\\maintenance\\archive_agent_comms.py": {
        "language": ".py",
        "functions": [
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "src\\dreamos\\tools\\maintenance\\validate_onboarding_prompts.py": {
        "language": ".py",
        "functions": [
            "find_project_root",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "src\\dreamos\\tools\\maintenance\\validate_logs.py": {
        "language": ".py",
        "functions": [
            "load_schema_map",
            "find_jsonl_files"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "src\\dreamos\\tools\\maintenance\\archive_agent_mailboxes.py": {
        "language": ".py",
        "functions": [
            "archive_mailbox",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "src\\dreamos\\utils\\safe_json_editor_template.py": {
        "language": ".py",
        "functions": [
            "load_json_list",
            "atomic_write_json",
            "add_item_to_list",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 4
    },
    "tests\\core\\coordination\\tasks\\test_project_board_manager.py": {
        "language": ".py",
        "functions": [
            "mock_pbm",
            "mock_multi_board_pbm",
            "mock_load_board_func",
            "mock_atomic_write_func",
            "test_initialization",
            "test_add_task_success",
            "test_add_task_duplicate_id_should_fail",
            "test_get_task_success",
            "test_get_task_not_found",
            "test_update_task_status_success",
            "test_update_task_status_not_found",
            "test_claim_future_task_success",
            "test_claim_future_task_not_found",
            "test_complete_task_success",
            "test_complete_task_not_found",
            "test_list_tasks_empty",
            "test_list_tasks_with_data",
            "test_claim_future_task_success_multi",
            "test_claim_future_task_not_found_multi"
        ],
        "classes": {
            "TestProjectBoardManager": {
                "methods": [
                    "test_initialization",
                    "test_add_task_success",
                    "test_add_task_duplicate_id_should_fail",
                    "test_get_task_success",
                    "test_get_task_not_found",
                    "test_update_task_status_success",
                    "test_update_task_status_not_found",
                    "test_claim_future_task_success",
                    "test_claim_future_task_not_found",
                    "test_complete_task_success",
                    "test_complete_task_not_found",
                    "test_list_tasks_empty",
                    "test_list_tasks_with_data",
                    "test_claim_future_task_success_multi",
                    "test_claim_future_task_not_found_multi"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 34
    },
    "_archive\\scripts\\generate_dreamscape_from_session.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "_archive\\scripts\\maintenance\\chunk_tasks.py": {
        "language": ".py",
        "functions": [
            "dedupe_and_chunk"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "_archive\\scripts\\maintenance\\find_duplicate_tasks.py": {
        "language": ".py",
        "functions": [
            "is_excluded",
            "parse_json_file",
            "parse_md_file",
            "find_task_files",
            "normalize",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 6
    },
    "_archive\\scripts\\maintenance\\migrate_future_tasks_to_split.py": {
        "language": ".py",
        "functions": [
            "ensure_file"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "_archive\\scripts\\maintenance\\deduplicate_tasks.py": {
        "language": ".py",
        "functions": [
            "load_tasks",
            "deduplicate_tasks",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "_archive\\scripts\\maintenance\\move_uncomplete_tasks.py": {
        "language": ".py",
        "functions": [
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "_archive\\scripts\\maintenance\\run_memory_summarizer.py": {
        "language": ".py",
        "functions": [
            "summarize_memory_file"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "dreamscape_controller.py": {
        "language": ".py",
        "functions": [
            "setup_logging",
            "load_deployment_config",
            "load_agent_prompt",
            "initialize_agents",
            "run_controller",
            "__init__",
            "__str__",
            "launch",
            "monitor",
            "stop"
        ],
        "classes": {
            "AgentInstance": {
                "methods": [
                    "__init__",
                    "__str__",
                    "launch",
                    "monitor",
                    "stop"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 15
    },
    "run_e2e_bridge_test.py": {
        "language": ".py",
        "functions": [
            "step",
            "assert_file",
            "create_prompt_file",
            "run_bridge_loop",
            "validate_latest_output",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 6
    },
    "analytics\\chrono_sentinel.py": {
        "language": ".py",
        "functions": [
            "log_to_ledger",
            "get_local_tz_cached",
            "parse_integrity_log_entry",
            "parse_stress_log_entry",
            "check_log_file",
            "run_sentinel"
        ],
        "classes": {},
        "routes": [],
        "complexity": 6
    },
    "analytics\\temporal_ledger_auditor.py": {
        "language": ".py",
        "functions": [
            "parse_iso_utc",
            "audit_ledger"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "devtools\\dependency_extractor.py": {
        "language": ".py",
        "functions": [
            "extract_imports_from_file"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "devtools\\module_mapper.py": {
        "language": ".py",
        "functions": [
            "_classify_service_type_and_pattern",
            "_classify_tool_util_functionality",
            "_get_primary_class_docstring",
            "load_analysis",
            "normalise",
            "categorize",
            "fmt_row",
            "build_tables",
            "inject_tables",
            "main"
        ],
        "classes": {
            "Cfg": {
                "methods": [],
                "docstring": null,
                "base_classes": []
            },
            "Category": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "Enum"
                ]
            }
        },
        "routes": [],
        "complexity": 10
    },
    "dev_sandbox\\agent_file_manager_stub.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_resolve_path",
            "read_file",
            "write_file",
            "read_json",
            "write_json",
            "list_dir",
            "file_exists",
            "delete_file"
        ],
        "classes": {
            "AgentFileManager": {
                "methods": [
                    "__init__",
                    "_resolve_path",
                    "read_file",
                    "write_file",
                    "read_json",
                    "write_json",
                    "list_dir",
                    "file_exists",
                    "delete_file"
                ],
                "docstring": "Provides a standardized interface for file system interactions across agents.\nManages concurrency and abstracts low-level file operations.\nSee proposal: runtime/agent_comms/proposals/file_manager_blueprint.md",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 18
    },
    "scripts\\analyze_latency_trends.py": {
        "language": ".py",
        "functions": [
            "parse_stress_logs",
            "analyze_latency_trends",
            "__init__",
            "calculate_stats"
        ],
        "classes": {
            "StressRunStats": {
                "methods": [
                    "__init__",
                    "calculate_stats"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 6
    },
    "scripts\\bridge_health_report.py": {
        "language": ".py",
        "functions": [
            "check_tool_stability",
            "check_bridge_logs",
            "check_component_availability",
            "generate_report",
            "parse_extraction_log",
            "parse_stress_test_data",
            "parse_agent_errors",
            "calculate_uptime",
            "generate_report"
        ],
        "classes": {},
        "routes": [],
        "complexity": 9
    },
    "scripts\\bridge_integrity_monitor.py": {
        "language": ".py",
        "functions": [
            "log_anomaly",
            "check_bridge_mode_config",
            "check_chatgpt_cookies",
            "check_config_yaml_paths",
            "watchdog_loop",
            "load_config"
        ],
        "classes": {
            "AppConfig": {
                "methods": [],
                "docstring": null,
                "base_classes": []
            },
            "ConfigurationError": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "Exception"
                ]
            }
        },
        "routes": [],
        "complexity": 6
    },
    "scripts\\bridge_mutation_impact_report.py": {
        "language": ".py",
        "functions": [
            "load_baseline_metrics",
            "load_mutation_results",
            "generate_impact_report"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "scripts\\captain_ai_self_prompter.py": {
        "language": ".py",
        "functions": [
            "get_latest_response_file",
            "run_self_prompt"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "scripts\\capture_gui_snippet.py": {
        "language": ".py",
        "functions": [
            "get_coordinates",
            "sanitize",
            "confirm",
            "choose_preset",
            "capture_snippet",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 6
    },
    "scripts\\dreamscape_controller.py": {
        "language": ".py",
        "functions": [
            "log_message",
            "ensure_dir_exists",
            "load_deployment_config",
            "initialize_agents",
            "update_agent_points_file",
            "log_deployment_status",
            "map_saga_output_to_task",
            "dreamscape_controller_main",
            "__init__",
            "get_prompt_content",
            "perform_task",
            "write_to_devlog",
            "award_points"
        ],
        "classes": {
            "Agent": {
                "methods": [
                    "__init__",
                    "get_prompt_content",
                    "perform_task",
                    "write_to_devlog",
                    "award_points"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 18
    },
    "scripts\\gpt_cursor_relay.py": {
        "language": ".py",
        "functions": [
            "load_relay_state",
            "save_relay_state",
            "process_command",
            "run_relay",
            "simulate_inject_prompt_into_cursor"
        ],
        "classes": {},
        "routes": [],
        "complexity": 5
    },
    "scripts\\monitor_bridge.py": {
        "language": ".py",
        "functions": [
            "setup_logging",
            "run_bridge_check"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "scripts\\mock_bridge_loop.py": {
        "language": ".py",
        "functions": [
            "generate_mock_response",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "scripts\\mutation_test_bridge.py": {
        "language": ".py",
        "functions": [
            "register_fault",
            "fault_none",
            "fault_empty_string",
            "fault_raise_exception",
            "fault_delay",
            "fault_return_corrupted_data",
            "fault_return_false",
            "load_mutation_scenarios",
            "create_mutator",
            "run_mutation_test",
            "mutated_func",
            "mutated_func",
            "mutated_func",
            "mutated_func",
            "mutated_func",
            "mutated_func"
        ],
        "classes": {},
        "routes": [],
        "complexity": 16
    },
    "scripts\\run_bridge_service.py": {
        "language": ".py",
        "functions": [
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "scripts\\simulate_tool_timeout.py": {
        "language": ".py",
        "functions": [
            "simulate_potential_timeout",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "scripts\\stress_test_bridge.py": {
        "language": ".py",
        "functions": [
            "rotate_log_if_needed",
            "write_results_log",
            "run_stress_test",
            "audit_results",
            "cleanup_stress_test",
            "noisy_scraper_extract",
            "noisy_gui_extract"
        ],
        "classes": {},
        "routes": [],
        "complexity": 7
    },
    "scripts\\swarm_monitor.py": {
        "language": ".py",
        "functions": [
            "log_integrity_issue",
            "trigger_alert",
            "manage_stall_flag",
            "trigger_escalation_flag",
            "parse_iso_utc",
            "run_monitor"
        ],
        "classes": {},
        "routes": [],
        "complexity": 6
    },
    "scripts\\task_flow_migration.py": {
        "language": ".py",
        "functions": [
            "setup_logging",
            "create_backup",
            "read_jsonl_file",
            "transform_task",
            "merge_into_task_board",
            "deprecate_old_files",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 7
    },
    "scripts\\test_edit_file_failures.py": {
        "language": ".py",
        "functions": [
            "setup_test_files",
            "attempt_edit_overwrite",
            "verify_file_content"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "scripts\\test_file_integrity_recovery.py": {
        "language": ".py",
        "functions": [
            "calculate_sha256",
            "setup_test_environment",
            "simulate_corruption",
            "attempt_recovery",
            "verify_integrity"
        ],
        "classes": {},
        "routes": [],
        "complexity": 5
    },
    "scripts\\test_thea_bridge_pipeline.py": {
        "language": ".py",
        "functions": [
            "create_dummy_config",
            "setUp",
            "run_agent_cycle",
            "test_gui_mode_cycle",
            "test_gui_mode_no_new_reply",
            "test_scraper_mode_cycle",
            "test_scraper_mode_no_new_reply",
            "test_hybrid_mode_scraper_first",
            "test_hybrid_mode_gui_fallback",
            "test_hybrid_mode_both_fail",
            "test_duplicate_suppression"
        ],
        "classes": {
            "TestTheaBridgePipeline": {
                "methods": [
                    "setUp",
                    "run_agent_cycle",
                    "test_gui_mode_cycle",
                    "test_gui_mode_no_new_reply",
                    "test_scraper_mode_cycle",
                    "test_scraper_mode_no_new_reply",
                    "test_hybrid_mode_scraper_first",
                    "test_hybrid_mode_gui_fallback",
                    "test_hybrid_mode_both_fail",
                    "test_duplicate_suppression"
                ],
                "docstring": null,
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 21
    },
    "scripts\\test_points_config.py": {
        "language": ".py",
        "functions": [
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "scripts\\thea_to_cursor_agent.py": {
        "language": ".py",
        "functions": [
            "check_dependencies",
            "load_bridge_mode",
            "log_extraction",
            "extract_via_gui",
            "extract_via_scraper",
            "main_loop"
        ],
        "classes": {},
        "routes": [],
        "complexity": 6
    },
    "tests\\run_e2e_bridge_test.py": {
        "language": ".py",
        "functions": [
            "validate_prompt_file",
            "validate_coords",
            "run_bridge_loop",
            "validate_output"
        ],
        "classes": {},
        "routes": [],
        "complexity": 4
    },
    "tools\\generate_chatgpt_cookies.py": {
        "language": ".py",
        "functions": [
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "tools\\test_read_file_diagnostics.py": {
        "language": ".py",
        "functions": [
            "test_read_file",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "tools\\test_scraper_interactively.py": {
        "language": ".py",
        "functions": [
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "analytics\\scripts\\process_logs.py": {
        "language": ".py",
        "functions": [
            "normalize_timestamp_utc",
            "process_log_data"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "app\\automation\\automation_interface.py": {
        "language": ".py",
        "functions": [
            "trigger_action",
            "__init__",
            "__repr__",
            "__init__",
            "execute_task",
            "run_sequence",
            "register_automation_trigger"
        ],
        "classes": {
            "AutomationResult": {
                "methods": [
                    "__init__",
                    "__repr__"
                ],
                "docstring": "Represents the result of an automation action.",
                "base_classes": []
            },
            "AutomationInterface": {
                "methods": [
                    "__init__",
                    "execute_task",
                    "run_sequence",
                    "register_automation_trigger"
                ],
                "docstring": "Provides a high-level API for defining and executing automation sequences.\nIt orchestrates calls to GUIController, TaskTrigger, and potentially other\nautomation-related modules.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 13
    },
    "app\\automation\\gui_automation.py": {
        "language": "python",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0,
        "parser_used": "ast_failed",
        "error": "unterminated string literal (detected at line 73) (<unknown>, line 73)"
    },
    "app\\automation\\gui_controller.py": {
        "language": ".py",
        "functions": [
            "click",
            "move_to",
            "drag_to",
            "type_text",
            "press_key",
            "hotkey",
            "locate_on_screen",
            "wait_for_element",
            "get_screenshot",
            "__init__",
            "click_element",
            "type_text",
            "get_element_text"
        ],
        "classes": {
            "GUIController": {
                "methods": [
                    "__init__",
                    "click_element",
                    "type_text",
                    "get_element_text"
                ],
                "docstring": "Manages and interacts with GUI elements for automation tasks.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 17
    },
    "app\\automation\\task_trigger.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "register_trigger",
            "unregister_trigger",
            "_start_monitoring",
            "_stop_monitoring"
        ],
        "classes": {
            "TaskTrigger": {
                "methods": [
                    "__init__",
                    "register_trigger",
                    "unregister_trigger",
                    "_start_monitoring",
                    "_stop_monitoring"
                ],
                "docstring": "Listens for events or conditions to trigger automation tasks.\nThis could involve monitoring file changes, time schedules, API callbacks, message queues, etc.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 10
    },
    "app\\automation\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "archive\\archived_scripts\\dreamscape_conversation_sync.py": {
        "language": ".py",
        "functions": [
            "safe_name"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "archive\\archived_scripts\\generate_dreamscape_from_session.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "archive\\legacy_automation\\extract_cursor_response.py": {
        "language": ".py",
        "functions": [
            "_rand_pause",
            "_save_response",
            "_clipboard_changed",
            "extract_response",
            "cli"
        ],
        "classes": {},
        "routes": [],
        "complexity": 5
    },
    "archive\\legacy_automation\\prompt_dispatcher.py": {
        "language": ".py",
        "functions": [
            "scrape_new_prompts",
            "determine_prompt_priority",
            "route_prompt_to_agent"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "archive\\legacy_automation\\response_retriever.py": {
        "language": ".py",
        "functions": [
            "get_response",
            "__init__",
            "retrieve_agent_response"
        ],
        "classes": {
            "ResponseRetriever": {
                "methods": [
                    "__init__",
                    "retrieve_agent_response"
                ],
                "docstring": "Handles retrieving agent responses by clicking 'Copy' and reading the clipboard.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 5
    },
    "archive\\legacy_automation\\run_loop.py": {
        "language": ".py",
        "functions": [
            "main",
            "chatgpt_loop"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "archive\\legacy_automation\\run_orchestrator.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "bridge\\feedback\\status_pusher.py": {
        "language": ".py",
        "functions": [
            "format_feedback",
            "push_feedback"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "bridge\\relay\\command_listener.py": {
        "language": ".py",
        "functions": [
            "start_listener",
            "on_created",
            "process_file"
        ],
        "classes": {
            "CommandFileHandler": {
                "methods": [
                    "on_created",
                    "process_file"
                ],
                "docstring": null,
                "base_classes": [
                    "FileSystemEventHandler"
                ]
            }
        },
        "routes": [],
        "complexity": 5
    },
    "bridge\\relay\\payload_handler.py": {
        "language": ".py",
        "functions": [
            "call_cursor_api",
            "validate_parameters",
            "process_gpt_command"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "bridge\\tests\\test_payload_handler.py": {
        "language": ".py",
        "functions": [
            "setUp",
            "tearDown",
            "find_feedback_file",
            "read_feedback_file",
            "test_validate_parameters_valid",
            "test_validate_parameters_missing",
            "test_validate_parameters_unknown_command",
            "test_process_valid_command_generates_feedback",
            "test_process_missing_params_generates_error_feedback",
            "test_process_invalid_structure_generates_error_feedback",
            "test_process_harmful_command_generates_error_feedback"
        ],
        "classes": {
            "TestPayloadHandlerFeedbackIntegration": {
                "methods": [
                    "setUp",
                    "tearDown",
                    "find_feedback_file",
                    "read_feedback_file",
                    "test_validate_parameters_valid",
                    "test_validate_parameters_missing",
                    "test_validate_parameters_unknown_command",
                    "test_process_valid_command_generates_feedback",
                    "test_process_missing_params_generates_error_feedback",
                    "test_process_invalid_structure_generates_error_feedback",
                    "test_process_harmful_command_generates_error_feedback"
                ],
                "docstring": null,
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 22
    },
    "bridge\\tests\\test_status_pusher.py": {
        "language": ".py",
        "functions": [
            "setUp",
            "test_format_feedback_structure",
            "test_push_feedback_creates_file",
            "test_push_feedback_handles_complex_result"
        ],
        "classes": {
            "TestStatusPusher": {
                "methods": [
                    "setUp",
                    "test_format_feedback_structure",
                    "test_push_feedback_creates_file",
                    "test_push_feedback_handles_complex_result"
                ],
                "docstring": null,
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 8
    },
    "dreamos_ai_organizer\\core\\state.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_init_schema",
            "fetch_agents",
            "update_agent_queue_status",
            "fetch_tasks",
            "update_task_lane",
            "add_devlog_entry",
            "fetch_devlog_entries"
        ],
        "classes": {
            "StateDB": {
                "methods": [
                    "__init__",
                    "_init_schema",
                    "fetch_agents",
                    "update_agent_queue_status",
                    "fetch_tasks",
                    "update_task_lane",
                    "add_devlog_entry",
                    "fetch_devlog_entries"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 16
    },
    "runtime\\analytics\\bridge_fault_inspector.py": {
        "language": ".py",
        "functions": [
            "get_local_tz",
            "parse_stress_results",
            "parse_integrity_logs",
            "parse_agent_logs",
            "find_latency_spikes_near_duplicates",
            "find_failure_patterns"
        ],
        "classes": {},
        "routes": [],
        "complexity": 6
    },
    "sandbox\\analysis\\fault_inspector.py": {
        "language": ".py",
        "functions": [
            "parse_timestamp",
            "analyze_log_file",
            "check_reverse_chronology",
            "generate_report"
        ],
        "classes": {},
        "routes": [],
        "complexity": 4
    },
    "runtime\\validation\\anomaly_predictor.py": {
        "language": "python",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0,
        "parser_used": "ast_failed",
        "error": "unexpected character after line continuation character (<unknown>, line 1)"
    },
    "sandbox\\bridge\\cursor_gpt_feedback.py": {
        "language": ".py",
        "functions": [
            "determine_result_type",
            "format_feedback"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "sandbox\\bridge\\feedback_patch.py": {
        "language": ".py",
        "functions": [
            "read_jsonl_data",
            "write_jsonl_data",
            "append_jsonl",
            "apply_schema_defaults_and_cleanup",
            "patch_feedback_anomalies"
        ],
        "classes": {},
        "routes": [],
        "complexity": 5
    },
    "sandbox\\bridge\\feedback_sentinel.py": {
        "language": ".py",
        "functions": [
            "ensure_dir_exists",
            "load_log",
            "save_log",
            "log_anomaly",
            "check_alert_condition",
            "process_file",
            "quarantine_file",
            "purge_old_logs",
            "sentinel_loop",
            "log_state_update",
            "update_swarm_state"
        ],
        "classes": {},
        "routes": [],
        "complexity": 11
    },
    "sandbox\\bridge\\feedback_trace_verifier.py": {
        "language": ".py",
        "functions": [
            "parse_timestamp",
            "read_jsonl",
            "write_jsonl",
            "create_flag_file",
            "verify_traces"
        ],
        "classes": {},
        "routes": [],
        "complexity": 5
    },
    "sandbox\\bridge\\gpt_cursor_relay.py": {
        "language": ".py",
        "functions": [
            "process_gpt_command",
            "edit_file",
            "run_terminal_cmd",
            "codebase_search",
            "read_file",
            "grep_search"
        ],
        "classes": {
            "SimulatedCursorTools": {
                "methods": [
                    "edit_file",
                    "run_terminal_cmd",
                    "codebase_search",
                    "read_file",
                    "grep_search"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 11
    },
    "sandbox\\bridge_validator\\validator.py": {
        "language": ".py",
        "functions": [
            "check_api_endpoint",
            "check_file_path",
            "trigger_bridge_task",
            "check_bridge_status",
            "get_bridge_result",
            "check_output_file",
            "check_logs",
            "call_summarizer",
            "run_preflight_checks_only",
            "run_validation"
        ],
        "classes": {},
        "routes": [],
        "complexity": 10
    },
    "sandbox\\ironvale_injector\\injector.py": {
        "language": ".py",
        "functions": [
            "simulate_cursor_injection",
            "generate_report"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "sandbox\\ironvale_feedback\\parser.py": {
        "language": ".py",
        "functions": [
            "parse_cursor_log"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "sandbox\\ironvale_stream_watcher\\summary_stream_watch.py": {
        "language": ".py",
        "functions": [
            "get_current_timestamp",
            "log_status",
            "log_integrity_event",
            "read_new_jsonl_lines",
            "find_correlation"
        ],
        "classes": {},
        "routes": [],
        "complexity": 5
    },
    "sandbox\\ironvale_summarizer\\summarizer.py": {
        "language": ".py",
        "functions": [
            "read_json_artifact",
            "generate_summary_report"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "sandbox\\ironvale_stream_watcher\\summary_validator.py": {
        "language": "python",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0,
        "parser_used": "ast_failed",
        "error": "unexpected character after line continuation character (<unknown>, line 1)"
    },
    "sandbox\\parser\\utc_normalizer.py": {
        "language": "python",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0,
        "parser_used": "ast_failed",
        "error": "unterminated string literal (detected at line 46) (<unknown>, line 46)"
    },
    "sandbox\\scripts\\drift_generator.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "sandbox\\scripts\\drift_injector.py": {
        "language": ".py",
        "functions": [
            "normalize_timestamp_utc",
            "process_log_data"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "sandbox\\tests\\test_drift_detection.py": {
        "language": ".py",
        "functions": [
            "parse_expected_utc",
            "calculate_drift",
            "run_test"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "sandbox\\veindrill_envtelemetry\\anomaly_detector.py": {
        "language": ".py",
        "functions": [
            "normalize",
            "_try_unix",
            "_try_iso_format",
            "_try_log_format",
            "parse_line",
            "__init__",
            "check_record",
            "get_results",
            "__init__",
            "run_analysis",
            "_generate_report",
            "_generate_summary_report"
        ],
        "classes": {
            "TimestampNormalizer": {
                "methods": [
                    "normalize",
                    "_try_unix",
                    "_try_iso_format",
                    "_try_log_format"
                ],
                "docstring": "Handles parsing and normalization of various timestamp formats to UTC datetime objects.",
                "base_classes": []
            },
            "TelemetryParser": {
                "methods": [
                    "parse_line"
                ],
                "docstring": "Parses raw log lines into structured telemetry records.",
                "base_classes": []
            },
            "AnomalyDetector": {
                "methods": [
                    "__init__",
                    "check_record",
                    "get_results"
                ],
                "docstring": "Identifies environmental shifts and timestamp inconsistencies.",
                "base_classes": []
            },
            "TelemetryAnalyzer": {
                "methods": [
                    "__init__",
                    "run_analysis",
                    "_generate_report",
                    "_generate_summary_report"
                ],
                "docstring": "Orchestrates parsing, analysis, and reporting.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 24
    },
    "sandbox\\utils\\normalize_time.py": {
        "language": ".py",
        "functions": [
            "normalize_utc_iso_line",
            "process_file"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "scripts\\agents\\new_agent.py": {
        "language": ".py",
        "functions": [
            "read_mailbox",
            "write_mailbox",
            "process_inbox",
            "update_loop_state",
            "check_idle_state",
            "new_agent_loop"
        ],
        "classes": {},
        "routes": [],
        "complexity": 6
    },
    "sandbox\\utils\\loop_guard.py": {
        "language": "python",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0,
        "parser_used": "ast_failed",
        "error": "unexpected character after line continuation character (<unknown>, line 39)"
    },
    "scripts\\analysis\\run_vulture.py": {
        "language": ".py",
        "functions": [
            "run_vulture",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "scripts\\migration_helpers\\move_application_content.py": {
        "language": ".py",
        "functions": [
            "ensure_target_app_dir_exists",
            "move_application_code"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "scripts\\migration_helpers\\move_archived_content.py": {
        "language": ".py",
        "functions": [
            "move_content_for_mapping"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "scripts\\migration_helpers\\robust_move_and_git_track.py": {
        "language": ".py",
        "functions": [
            "run_git_command",
            "robust_move_item"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "scripts\\migration_helpers\\update_markdown_links.py": {
        "language": ".py",
        "functions": [
            "update_links_in_md_file",
            "find_and_update_md_files"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "scripts\\migration_helpers\\move_sandbox_content.py": {
        "language": ".py",
        "functions": [
            "ensure_target_dir_exists",
            "move_sandbox_item"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "src\\dreamscape\\chronicle_conversations.py": {
        "language": ".py",
        "functions": [
            "initialize_database",
            "load_latest_state",
            "save_cumulative_state",
            "parse_response",
            "update_cumulative_state",
            "run_chronicle"
        ],
        "classes": {},
        "routes": [],
        "complexity": 6
    },
    "src\\dreamscape\\config.py": {
        "language": ".py",
        "functions": [],
        "classes": {
            "DreamscapePlannerAgentConfig": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "BaseModel"
                ]
            },
            "DreamscapeWriterAgentConfig": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "BaseModel"
                ]
            },
            "DreamscapeConfig": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "BaseModel"
                ]
            }
        },
        "routes": [],
        "complexity": 0
    },
    "src\\dreamscape\\compile_devlog.py": {
        "language": ".py",
        "functions": [
            "compile_devlog"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "tests\\bridge\\test_http_bridge_service.py": {
        "language": ".py",
        "functions": [
            "test_client",
            "test_health_check_success",
            "test_interact_success",
            "test_interact_bridge_error",
            "test_interact_value_error",
            "test_interact_unexpected_error",
            "test_interact_bridge_unavailable",
            "test_interact_config_unavailable",
            "test_health_check_bridge_unavailable",
            "test_health_check_config_unavailable",
            "test_health_check_both_unavailable"
        ],
        "classes": {},
        "routes": [],
        "complexity": 11
    },
    "scripts\\migration_helpers\\update_python_imports.py": {
        "language": ".py",
        "functions": [
            "update_imports_in_file",
            "find_and_update_python_files"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "tests\\core\\test_config.py": {
        "language": ".py",
        "functions": [
            "clear_global_config_singleton",
            "sample_config_data",
            "create_test_yaml_file",
            "test_get_config_loads_default_if_available",
            "test_load_config_specific_path",
            "test_load_config_path_not_exists",
            "test_load_config_empty_yaml",
            "test_load_config_invalid_yaml",
            "test_get_config_returns_same_instance",
            "test_load_config_no_file_loads_defaults",
            "_create"
        ],
        "classes": {},
        "routes": [],
        "complexity": 11
    },
    "tests\\monitoring\\test_correlation_validator.py": {
        "language": ".py",
        "functions": [
            "create_mock_event",
            "validator_instance",
            "configured_validator",
            "test_singleton_get_instance_unconfigured_raises_error",
            "test_singleton_configure_and_get_instance",
            "test_singleton_configure_called_multiple_times_logs_warning",
            "test_singleton_parallel_configuration",
            "test_validate_event_id_present_no_regex",
            "test_validate_event_id_missing",
            "test_validate_event_id_present_valid_format",
            "test_validate_event_id_present_invalid_format",
            "test_validate_event_context_id_match",
            "test_validate_event_context_id_mismatch",
            "test_validate_event_context_id_not_provided",
            "test_validate_event_all_issues_logged",
            "test_log_issue_adds_to_internal_log",
            "test_reset_issues_clears_log",
            "test_get_issues_returns_copy",
            "test_validate_sequence_empty_list",
            "test_validate_sequence_single_valid_event",
            "test_validate_sequence_single_invalid_event_missing_id",
            "test_validate_sequence_multiple_events_same_valid_id",
            "test_validate_sequence_multiple_events_one_missing_id",
            "test_validate_sequence_multiple_events_different_ids",
            "test_validate_sequence_multiple_events_invalid_format",
            "test_validate_sequence_with_explicit_matching_sequence_id",
            "test_validate_sequence_with_explicit_mismatching_sequence_id",
            "test_validate_sequence_first_event_no_id_no_explicit_sequence_id",
            "test_validate_sequence_missing_origin_event",
            "test_validate_sequence_present_origin_event",
            "test_validate_sequence_missing_terminal_event",
            "test_validate_sequence_present_terminal_event",
            "test_validate_sequence_correct_origin_and_terminal",
            "test_validate_sequence_multiple_possible_origin_types_found",
            "test_validate_sequence_multiple_possible_origin_types_missing",
            "test_validate_sequence_require_all_origin_types_met",
            "test_validate_sequence_require_all_origin_types_not_met",
            "test_validate_sequence_require_all_terminal_types_met",
            "test_validate_sequence_require_all_terminal_types_not_met",
            "test_validate_sequence_origin_type_check_with_id_failure",
            "test_validate_sequence_correct_order",
            "test_validate_sequence_incorrect_order",
            "test_validate_sequence_incomplete_order_too_short",
            "test_validate_sequence_order_correct_prefix_events_longer",
            "test_validate_sequence_order_empty_expected_order",
            "test_validate_sequence_order_empty_events_with_expected_order",
            "test_validate_sequence_order_with_other_failures",
            "configure_validator"
        ],
        "classes": {
            "MockEventType": {
                "methods": [],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 48
    },
    "tests\\skills\\test_pyautogui_control_module.py": {
        "language": ".py",
        "functions": [
            "setUp",
            "tearDown",
            "test_init_successful_with_valid_config",
            "test_init_with_missing_pyautogui_bridge_config_uses_defaults",
            "test_init_with_missing_project_root_uses_relative_asset_path",
            "def_activate_side_effect"
        ],
        "classes": {
            "TestPyAutoGUIControlModule": {
                "methods": [
                    "setUp",
                    "tearDown",
                    "test_init_successful_with_valid_config",
                    "test_init_with_missing_pyautogui_bridge_config_uses_defaults",
                    "test_init_with_missing_project_root_uses_relative_asset_path"
                ],
                "docstring": null,
                "base_classes": [
                    "unittest.IsolatedAsyncioTestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 11
    },
    "tests\\skills\\test_pyautogui_control_module_part2.py": {
        "language": ".py",
        "functions": [
            "setUp",
            "tearDown"
        ],
        "classes": {
            "TestPyAutoGUIControlModulePart2": {
                "methods": [
                    "setUp",
                    "tearDown"
                ],
                "docstring": null,
                "base_classes": [
                    "unittest.IsolatedAsyncioTestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 4
    },
    "tests\\unit\\test_bridge_fault_inspector.py": {
        "language": ".py",
        "functions": [
            "setUp",
            "test_parse_integrity_logs_normalization",
            "test_parse_stress_results_normalization"
        ],
        "classes": {
            "TestTimestampNormalization": {
                "methods": [
                    "setUp",
                    "test_parse_integrity_logs_normalization",
                    "test_parse_stress_results_normalization"
                ],
                "docstring": null,
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 6
    },
    "tests\\unit\\test_task_flow_migration.py": {
        "language": ".py",
        "functions": [
            "test_basic_future_task_transform",
            "test_basic_working_task_transform",
            "test_completed_task_transform",
            "test_missing_task_id",
            "test_missing_required_fields_defaulting",
            "transform_task"
        ],
        "classes": {
            "TestTaskTransformation": {
                "methods": [
                    "test_basic_future_task_transform",
                    "test_basic_working_task_transform",
                    "test_completed_task_transform",
                    "test_missing_task_id",
                    "test_missing_required_fields_defaulting"
                ],
                "docstring": null,
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 11
    },
    "tests\\utils\\test_logging_utils.py": {
        "language": ".py",
        "functions": [
            "test_log_handler_exception_basic",
            "test_log_handler_exception_no_handler_name",
            "sample_handler"
        ],
        "classes": {
            "TestLogHandlerException": {
                "methods": [
                    "test_log_handler_exception_basic",
                    "test_log_handler_exception_no_handler_name"
                ],
                "docstring": null,
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 5
    },
    "tests\\utils\\test_spec_parser.py": {
        "language": ".py",
        "functions": [
            "test_parse_project_plan_valid_main_tasks_table",
            "test_parse_project_plan_valid_legacy_md_tasks_table",
            "test_parse_project_plan_multiline_cell_content",
            "test_parse_project_plan_mixed_tables",
            "test_parse_project_plan_no_recognized_tables",
            "test_parse_project_plan_malformed_row_table",
            "test_parse_project_plan_file_not_found",
            "test_parse_project_plan_commonmark_not_installed",
            "test_cell_content_extraction_various_inline_markdown"
        ],
        "classes": {
            "TestSpecParser": {
                "methods": [
                    "test_parse_project_plan_valid_main_tasks_table",
                    "test_parse_project_plan_valid_legacy_md_tasks_table",
                    "test_parse_project_plan_multiline_cell_content",
                    "test_parse_project_plan_mixed_tables",
                    "test_parse_project_plan_no_recognized_tables",
                    "test_parse_project_plan_malformed_row_table",
                    "test_parse_project_plan_file_not_found",
                    "test_parse_project_plan_commonmark_not_installed",
                    "test_cell_content_extraction_various_inline_markdown"
                ],
                "docstring": null,
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 18
    },
    "archive\\archived_scripts\\auditing\\analyze_asset_usage.py": {
        "language": ".py",
        "functions": [
            "find_code_files",
            "get_asset_files",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "archive\\archived_scripts\\auditing\\classify_domains.py": {
        "language": ".py",
        "functions": [
            "classify_path",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "archive\\archived_scripts\\auditing\\find_orphaned_files.py": {
        "language": ".py",
        "functions": [
            "find_orphaned_modules",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "archive\\archived_scripts\\auditing\\find_unused_assets.py": {
        "language": ".py",
        "functions": [
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "archive\\archived_scripts\\dev\\test_scraper_live_chat.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "archive\\archived_scripts\\auditing\\generate_summary.py": {
        "language": ".py",
        "functions": [
            "read_json_file",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "archive\\archived_scripts\\auditing\\generate_import_graph.py": {
        "language": ".py",
        "functions": [
            "find_python_files",
            "get_imports_from_file",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "archive\\archived_scripts\\maintenance\\chunk_tasks.py": {
        "language": ".py",
        "functions": [
            "dedupe_and_chunk"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "archive\\archived_scripts\\maintenance\\deduplicate_tasks.py": {
        "language": ".py",
        "functions": [
            "load_tasks",
            "deduplicate_tasks",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "archive\\archived_scripts\\maintenance\\find_duplicate_tasks.py": {
        "language": ".py",
        "functions": [
            "is_excluded",
            "parse_json_file",
            "parse_md_file",
            "find_task_files",
            "normalize",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 6
    },
    "archive\\archived_scripts\\maintenance\\migrate_future_tasks_to_split.py": {
        "language": ".py",
        "functions": [
            "ensure_file"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "archive\\archived_scripts\\maintenance\\move_uncomplete_tasks.py": {
        "language": ".py",
        "functions": [
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "archive\\archived_scripts\\maintenance\\run_memory_summarizer.py": {
        "language": ".py",
        "functions": [
            "summarize_memory_file"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "archive\\archived_scripts\\testing\\claim_one_task_agent_002.py": {
        "language": ".py",
        "functions": [
            "claim_one_task"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "archive\\archived_scripts\\testing\\auto_claim_tasks_agent_002.py": {
        "language": ".py",
        "functions": [
            "auto_claim_tasks"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "archive\\archived_scripts\\testing\\load_generator_recovery_test.py": {
        "language": ".py",
        "functions": [
            "create_fail_test_task"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "archive\\archived_scripts\\testing\\test_task_timeout.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "archive\\archived_scripts\\testing\\test_cursor_orchestrator.py": {
        "language": ".py",
        "functions": [],
        "classes": {
            "CursorOrchestrator": {
                "methods": [],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 0
    },
    "archive\\archived_scripts\\testing\\_internal_test_loop.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "archive\\archived_scripts\\utility\\hello_world_script.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "archive\\archived_scripts\\utils\\affirm_onboarding_contract.py": {
        "language": ".py",
        "functions": [
            "calculate_sha256",
            "get_current_utc_iso",
            "update_contract_yaml",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 4
    },
    "archive\\archived_scripts\\utils\\claim_task.py": {
        "language": ".py",
        "functions": [
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "archive\\archived_scripts\\utils\\simple_task_updater.py": {
        "language": ".py",
        "functions": [
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "runtime\\modules\\chatgpt_scraper\\scraper.py": {
        "language": ".py",
        "functions": [
            "log_interaction"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "runtime\\temp\\edit_test_files\\test.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\tree-sitter-grammars\\tree-sitter-javascript\\grammar.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\tree-sitter-grammars\\tree-sitter-javascript\\setup.py": {
        "language": ".py",
        "functions": [
            "run",
            "get_tag"
        ],
        "classes": {
            "Build": {
                "methods": [
                    "run"
                ],
                "docstring": null,
                "base_classes": [
                    "build"
                ]
            },
            "BdistWheel": {
                "methods": [
                    "get_tag"
                ],
                "docstring": null,
                "base_classes": [
                    "bdist_wheel"
                ]
            }
        },
        "routes": [],
        "complexity": 4
    },
    "runtime\\tree-sitter-grammars\\tree-sitter-python\\grammar.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\tree-sitter-grammars\\tree-sitter-python\\setup.py": {
        "language": ".py",
        "functions": [
            "run",
            "get_tag"
        ],
        "classes": {
            "Build": {
                "methods": [
                    "run"
                ],
                "docstring": null,
                "base_classes": [
                    "build"
                ]
            },
            "BdistWheel": {
                "methods": [
                    "get_tag"
                ],
                "docstring": null,
                "base_classes": [
                    "bdist_wheel"
                ]
            }
        },
        "routes": [],
        "complexity": 4
    },
    "runtime\\tree-sitter-grammars\\tree-sitter-rust\\grammar.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\tree-sitter-grammars\\tree-sitter-rust\\setup.py": {
        "language": ".py",
        "functions": [
            "run",
            "get_tag"
        ],
        "classes": {
            "Build": {
                "methods": [
                    "run"
                ],
                "docstring": null,
                "base_classes": [
                    "build"
                ]
            },
            "BdistWheel": {
                "methods": [
                    "get_tag"
                ],
                "docstring": null,
                "base_classes": [
                    "bdist_wheel"
                ]
            }
        },
        "routes": [],
        "complexity": 4
    },
    "src\\dreamos\\agents\\base_agent.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "status"
        ],
        "classes": {
            "BaseAgent": {
                "methods": [
                    "__init__",
                    "status"
                ],
                "docstring": "Abstract base class for all DreamOS agents.",
                "base_classes": [
                    "ABC"
                ]
            }
        },
        "routes": [],
        "complexity": 4
    },
    "src\\dreamos\\automation\\bridge_loop.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\dreamos\\automation\\config.py": {
        "language": ".py",
        "functions": [
            "_find_project_root_marker_for_automation"
        ],
        "classes": {
            "GuiAutomationConfig": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "BaseModel"
                ]
            },
            "TheaCopyConfig": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "BaseModel"
                ]
            }
        },
        "routes": [],
        "complexity": 1
    },
    "src\\dreamos\\bridge\\bridge_loop.py": {
        "language": ".py",
        "functions": [
            "call_gpt_api",
            "write_bridge_output",
            "log_failure_trace",
            "relay_prompt_to_gpt",
            "get_file_mtime",
            "main_loop",
            "log_interaction"
        ],
        "classes": {},
        "routes": [],
        "complexity": 7
    },
    "src\\dreamos\\bridge\\http_bridge_service.py": {
        "language": ".py",
        "functions": [],
        "classes": {
            "InteractRequest": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "BaseModel"
                ]
            },
            "InteractResponse": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "BaseModel"
                ]
            },
            "ErrorResponse": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "BaseModel"
                ]
            }
        },
        "routes": [],
        "complexity": 0
    },
    "src\\dreamos\\bridge\\run_bridge_loop.py": {
        "language": ".py",
        "functions": [
            "cli",
            "__init__",
            "_default_queue_fn",
            "run",
            "_load_prompts",
            "_persist_response",
            "_sigint_handler"
        ],
        "classes": {
            "BridgeLoop": {
                "methods": [
                    "__init__",
                    "_default_queue_fn",
                    "run",
                    "_load_prompts",
                    "_persist_response",
                    "_sigint_handler"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 13
    },
    "src\\dreamos\\cli\\bridge_diagnostic.py": {
        "language": ".py",
        "functions": [
            "run_diagnostic"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "src\\dreamos\\cli\\cursor_injector.py": {
        "language": ".py",
        "functions": [
            "get_cli_settings",
            "_cli_next_prompt_file",
            "_cli_mark_processed",
            "_cli_ensure_focus",
            "_cli_type_or_paste",
            "_cli_inject_single",
            "_cli_loop",
            "_build_cli_parser",
            "cli_main",
            "__init__",
            "_pause",
            "focus_window",
            "_type_or_paste",
            "type_text"
        ],
        "classes": {
            "CLISettings": {
                "methods": [],
                "docstring": "Runtime configuration container for CLI script operations.",
                "base_classes": []
            },
            "CursorInjector": {
                "methods": [
                    "__init__",
                    "_pause",
                    "focus_window",
                    "_type_or_paste",
                    "type_text"
                ],
                "docstring": "Handles direct GUI interactions with the Cursor application window.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 19
    },
    "src\\dreamos\\cli\\state_cmds.py": {
        "language": ".py",
        "functions": [
            "create_snapshot_cmd",
            "list_snapshots_cmd"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "src\\dreamos\\cli\\__main__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\dreamos\\coordination\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\dreamos\\core\\swarm_sync.py": {
        "language": ".py",
        "functions": [
            "_get_sync_config",
            "_get_state_file_path",
            "read_swarm_state",
            "update_agent_state"
        ],
        "classes": {},
        "routes": [],
        "complexity": 4
    },
    "src\\dreamos\\feedback\\feedback_engine_v2.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "process_feedback",
            "get_agent_adjustment"
        ],
        "classes": {
            "FeedbackEngineV2": {
                "methods": [
                    "__init__",
                    "process_feedback",
                    "get_agent_adjustment"
                ],
                "docstring": "Placeholder implementation for FeedbackEngineV2.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 6
    },
    "src\\dreamos\\feedback\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\dreamos\\governance\\agent_points_manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_get_lock",
            "_read_ledger_file",
            "_load_ledger",
            "_atomic_write_ledger",
            "_save_ledger",
            "_log_audit_event",
            "get_points_for_reason",
            "adjust_points",
            "get_agent_score",
            "get_all_scores",
            "determine_captain"
        ],
        "classes": {
            "AgentPointsManager": {
                "methods": [
                    "__init__",
                    "_get_lock",
                    "_read_ledger_file",
                    "_load_ledger",
                    "_atomic_write_ledger",
                    "_save_ledger",
                    "_log_audit_event",
                    "get_points_for_reason",
                    "adjust_points",
                    "get_agent_score",
                    "get_all_scores",
                    "determine_captain"
                ],
                "docstring": "Handles reading, writing, and updating agent points in the ledger file.\nUses file locking for safe concurrent access.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 24
    },
    "src\\dreamos\\hooks\\devlog_hook.py": {
        "language": ".py",
        "functions": [
            "__init__"
        ],
        "classes": {
            "DevlogHook": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Listens for significant system events on the AgentBus and logs them.\n\nThis hook subscribes to various event types (task completion/failure,\nagent errors, protocol violations) and appends formatted summaries to the\ncentral devlog file (`runtime/devlog/devlog.md`). It uses file locking\nto prevent concurrent write issues.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 2
    },
    "src\\dreamos\\integrations\\discord_bot.py": {
        "language": ".py",
        "functions": [
            "write_text_to_file",
            "ensure_directory_exists",
            "__init__",
            "_register_events",
            "_register_commands",
            "__init__",
            "is_closed",
            "event",
            "command",
            "default",
            "command",
            "decorator",
            "decorator"
        ],
        "classes": {
            "DiscordBot": {
                "methods": [
                    "__init__",
                    "_register_events",
                    "_register_commands"
                ],
                "docstring": "Handles Discord bot connection and command interaction with DreamOS.",
                "base_classes": []
            },
            "commands": {
                "methods": [],
                "docstring": null,
                "base_classes": []
            },
            "discord": {
                "methods": [],
                "docstring": null,
                "base_classes": []
            },
            "Bot": {
                "methods": [
                    "__init__",
                    "is_closed",
                    "event",
                    "command"
                ],
                "docstring": null,
                "base_classes": []
            },
            "Intents": {
                "methods": [
                    "default"
                ],
                "docstring": null,
                "base_classes": []
            },
            "Interaction": {
                "methods": [],
                "docstring": null,
                "base_classes": []
            },
            "LoginFailure": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "Exception"
                ]
            },
            "tree": {
                "methods": [
                    "command"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 22
    },
    "src\\dreamos\\monitoring\\correlation_validator.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "configure",
            "get_instance",
            "validate_event",
            "validate_event_sequence",
            "log_issue",
            "get_issues",
            "reset_issues"
        ],
        "classes": {
            "BaseEvent": {
                "methods": [],
                "docstring": "Represents a basic event structure expected by BusCorrelationValidator.\n\nThis is a placeholder. The actual BaseEvent should provide these attributes.\nThe validator uses getattr, so it relies on duck-typing.\n\nAttributes:\n    event_id (str): A unique identifier for the event.\n    event_type (Any): The type of the event (e.g., an enum member, a string).\n                      The validator expects `event_type.name` if it's an enum-like object\n                      for logging, but primarily uses the `event_type` value itself for comparisons.\n    source_id (str): Identifier of the agent or component that emitted the event.\n    correlation_id (Optional[str]): The correlation ID for tracking related events.",
                "base_classes": []
            },
            "BusCorrelationValidator": {
                "methods": [
                    "__init__",
                    "configure",
                    "get_instance",
                    "validate_event",
                    "validate_event_sequence",
                    "log_issue",
                    "get_issues",
                    "reset_issues"
                ],
                "docstring": "Validates correlation ID usage in AgentBus events (Singleton).",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 16
    },
    "src\\dreamos\\monitoring\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\dreamos\\reporting\\devlog_utils.py": {
        "language": ".py",
        "functions": [
            "_generate_index_markdown",
            "_parse_devlog_for_index",
            "update_devlog_index"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "src\\dreamos\\skills\\pyautogui_control_module.py": {
        "language": "python",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0,
        "parser_used": "ast_failed",
        "error": "invalid syntax (<unknown>, line 958)"
    },
    "src\\dreamos\\tools\\edit_file.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\dreamos\\tools\\command_supervisor.py": {
        "language": ".py",
        "functions": [
            "__init__"
        ],
        "classes": {
            "SupervisorEvent": {
                "methods": [],
                "docstring": "Represents an event structure specifically for the CommandSupervisor context.",
                "base_classes": []
            },
            "ApprovalStatus": {
                "methods": [],
                "docstring": "Represents the possible states of a command approval request.",
                "base_classes": [
                    "Enum"
                ]
            },
            "CommandSupervisor": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Singleton class to manage potentially risky command execution requests.\n\nThis supervisor acts as a central gatekeeper for shell commands requested by\nvarious agents. It enforces a human-in-the-loop approval process before\nallowing any command execution, enhancing system safety.\n\nWorkflow:\n1. An agent publishes a `COMMAND_EXECUTION_REQUEST` event via AgentBus.\n2. `CommandSupervisor` receives the request (`handle_command_request`).\n3. It assigns a unique ID and publishes a `COMMAND_APPROVAL_REQUEST` event.\n4. A separate component (e.g., a UI Agent, a manual reviewer) observes the\n   approval request and publishes a `COMMAND_APPROVAL_RESPONSE` event.\n5. `CommandSupervisor` receives the response (`handle_approval_response`).\n6. If approved, it executes the command (`execute_command`) using asyncio\n   subprocesses.\n7. If rejected or upon completion/error, it publishes a\n   `COMMAND_EXECUTION_RESULT` event back to the original requesting agent.\n\nAttributes:\n    agent_bus (AgentBus): The shared AgentBus instance for communication.\n    pending_approvals (Dict[str, SupervisorEvent]): Stores requests awaiting approval.\n    approval_status (Dict[str, ApprovalStatus]): Tracks the status of each request.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 2
    },
    "src\\dreamos\\tools\\read_file.py": {
        "language": ".py",
        "functions": [
            "_detect_encoding",
            "_open_locked",
            "_read_once",
            "read_file",
            "read_json",
            "read_yaml"
        ],
        "classes": {
            "ReadFileError": {
                "methods": [],
                "docstring": "Raised when all read attempts fail.",
                "base_classes": [
                    "RuntimeError"
                ]
            },
            "ReadMetrics": {
                "methods": [],
                "docstring": "Lightweight container to expose metrics to a callback.",
                "base_classes": [
                    "dict"
                ]
            }
        },
        "routes": [],
        "complexity": 6
    },
    "src\\dreamos\\tools\\task_editor.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "add_modification",
            "add_new_task",
            "to_dict",
            "from_dict",
            "__init__",
            "_load_task_schema",
            "analyze_and_propose_rewrite",
            "apply_task_edit"
        ],
        "classes": {
            "TaskAutoRewriterError": {
                "methods": [],
                "docstring": "Custom exception for TaskAutoRewriter errors.",
                "base_classes": [
                    "Exception"
                ]
            },
            "ProposedTaskEdit": {
                "methods": [
                    "__init__",
                    "add_modification",
                    "add_new_task",
                    "to_dict",
                    "from_dict"
                ],
                "docstring": "Represents a proposed set of changes to a task or new tasks.",
                "base_classes": []
            },
            "TaskAutoRewriter": {
                "methods": [
                    "__init__",
                    "_load_task_schema",
                    "analyze_and_propose_rewrite",
                    "apply_task_edit"
                ],
                "docstring": "Analyzes task definitions and proposes rewrites to improve clarity,\nactionability, or to break down complex tasks.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 18
    },
    "src\\dreamos\\utils\\ai_output_logger.py": {
        "language": ".py",
        "functions": [
            "log_ai_output"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "src\\dreamos\\utils\\decorators.py": {
        "language": ".py",
        "functions": [
            "retry_on_exception",
            "async_retry_on_exception",
            "decorator",
            "decorator",
            "wrapper"
        ],
        "classes": {},
        "routes": [],
        "complexity": 5
    },
    "src\\dreamos\\utils\\logging_utils.py": {
        "language": ".py",
        "functions": [
            "log_handler_exception"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "src\\dreamos\\utils\\spec_parser.py": {
        "language": ".py",
        "functions": [
            "parse_project_plan_tasks",
            "__init__",
            "visit_Table",
            "visit_TableRow",
            "_extract_headers",
            "_extract_row_cells",
            "_extract_cell_content",
            "_normalize_headers",
            "_map_row_to_headers",
            "parse"
        ],
        "classes": {
            "ProjectPlanTableVisitor": {
                "methods": [
                    "__init__",
                    "visit_Table",
                    "visit_TableRow",
                    "_extract_headers",
                    "_extract_row_cells",
                    "_extract_cell_content",
                    "_normalize_headers",
                    "_map_row_to_headers"
                ],
                "docstring": "AST Visitor to find and process specific task tables within PROJECT_PLAN.md.",
                "base_classes": [
                    null
                ]
            },
            "NodeVisitor": {
                "methods": [],
                "docstring": null,
                "base_classes": []
            },
            "ParserWithTables": {
                "methods": [
                    "parse"
                ],
                "docstring": null,
                "base_classes": []
            },
            "RendererWithTables": {
                "methods": [],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 19
    },
    "tests\\core\\coordination\\conftest.py": {
        "language": ".py",
        "functions": [
            "mock_agent_bus",
            "test_agent",
            "create_sample_task",
            "mock_agent"
        ],
        "classes": {
            "ConcreteAgent": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "BaseAgent"
                ]
            },
            "MockConcreteAgent": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "BaseAgent"
                ]
            }
        },
        "routes": [],
        "complexity": 4
    },
    "tests\\core\\coordination\\test_base_agent_event_helpers.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "tests\\core\\coordination\\test_base_agent_lifecycle.py": {
        "language": ".py",
        "functions": [
            "test_base_agent_init",
            "capture_task"
        ],
        "classes": {
            "MinimalAgent": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "BaseAgent"
                ]
            }
        },
        "routes": [],
        "complexity": 2
    },
    "tests\\core\\coordination\\test_base_agent_task_handling.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "tests\\tools\\cursor_bridge\\bridge_bootstrap_test.py": {
        "language": ".py",
        "functions": [
            "test_full_loop_success",
            "test_injection_failure",
            "test_extraction_failure_ocr"
        ],
        "classes": {
            "TestCursorBridgeBootstrap": {
                "methods": [
                    "test_full_loop_success",
                    "test_injection_failure",
                    "test_extraction_failure_ocr"
                ],
                "docstring": null,
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 6
    },
    "ai_docs\\examples_and_tutorials\\from_old_docs\\examples\\fix_tenacity_example.py": {
        "language": ".py",
        "functions": [
            "might_fail"
        ],
        "classes": {
            "TransientError": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "Exception"
                ]
            }
        },
        "routes": [],
        "complexity": 1
    },
    "runtime\\tree-sitter-grammars\\tree-sitter-javascript\\examples\\text-editor-component.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\tree-sitter-grammars\\tree-sitter-javascript\\examples\\jquery.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\tree-sitter-grammars\\tree-sitter-python\\examples\\crlf-line-endings.py": {
        "language": "python",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0,
        "parser_used": "ast_failed",
        "error": "Missing parentheses in call to 'print'. Did you mean print(...)? (<unknown>, line 1)"
    },
    "runtime\\tree-sitter-grammars\\tree-sitter-python\\examples\\compound-statement-without-trailing-newline.py": {
        "language": "python",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0,
        "parser_used": "ast_failed",
        "error": "Missing parentheses in call to 'print'. Did you mean print(...)? (<unknown>, line 3)"
    },
    "runtime\\tree-sitter-grammars\\tree-sitter-python\\examples\\mixed-spaces-tabs.py": {
        "language": "python",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0,
        "parser_used": "ast_failed",
        "error": "Missing parentheses in call to 'print'. Did you mean print(...)? (<unknown>, line 2)"
    },
    "runtime\\tree-sitter-grammars\\tree-sitter-python\\examples\\multiple-newlines.py": {
        "language": "python",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0,
        "parser_used": "ast_failed",
        "error": "Missing parentheses in call to 'print'. Did you mean print(...)? (<unknown>, line 5)"
    },
    "runtime\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar.py": {
        "language": "python",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0,
        "parser_used": "ast_failed",
        "error": "leading zeros in decimal integer literals are not permitted; use an 0o prefix for octal integers (<unknown>, line 31)"
    },
    "runtime\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar-crlf.py": {
        "language": "python",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0,
        "parser_used": "ast_failed",
        "error": "leading zeros in decimal integer literals are not permitted; use an 0o prefix for octal integers (<unknown>, line 31)"
    },
    "runtime\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar-crlf.py": {
        "language": ".py",
        "functions": [
            "test_main",
            "testBackslash",
            "testPlainIntegers",
            "testLongIntegers",
            "testUnderscoresInNumbers",
            "testFloats",
            "testEllipsis",
            "testEvalInput",
            "testFuncdef",
            "testLambdef",
            "testSimpleStmt",
            "testExprStmt",
            "testDelStmt",
            "testPassStmt",
            "testBreakStmt",
            "testContinueStmt",
            "test_break_continue_loop",
            "testReturn",
            "testYield",
            "testRaise",
            "testImport",
            "testGlobal",
            "testNonlocal",
            "testAssert",
            "testIf",
            "testWhile",
            "testFor",
            "testTry",
            "testSuite",
            "testTest",
            "testComparison",
            "testBinaryMaskOps",
            "testShiftOps",
            "testAdditiveOps",
            "testMultiplicativeOps",
            "testUnaryOps",
            "testSelectors",
            "testAtoms",
            "testClassdef",
            "testDictcomps",
            "testListcomps",
            "testGenexps",
            "testComprehensionSpecials",
            "test_with_statement",
            "testIfElseExpr",
            "testStringLiterals",
            "f1",
            "f2",
            "f3",
            "a1",
            "a2",
            "v0",
            "v1",
            "v2",
            "d01",
            "d11",
            "d21",
            "d02",
            "d12",
            "d22",
            "d01v",
            "d11v",
            "d21v",
            "d02v",
            "d12v",
            "d22v",
            "pos0key1",
            "pos2key2",
            "pos2key2dict",
            "f",
            "f",
            "f",
            "f",
            "f",
            "f",
            "f",
            "f",
            "f",
            "null",
            "f",
            "f",
            "f",
            "f",
            "f",
            "foo",
            "test_inner",
            "g1",
            "g2",
            "f",
            "class_decorator",
            "test_in_func",
            "test_nested_front",
            "_checkeval",
            "__init__",
            "__len__",
            "__getitem__",
            "meth1",
            "meth2",
            "meth3",
            "__enter__",
            "__exit__"
        ],
        "classes": {
            "TokenTests": {
                "methods": [
                    "testBackslash",
                    "testPlainIntegers",
                    "testLongIntegers",
                    "testUnderscoresInNumbers",
                    "testFloats",
                    "testEllipsis"
                ],
                "docstring": null,
                "base_classes": [
                    "unittest.TestCase"
                ]
            },
            "GrammarTests": {
                "methods": [
                    "testEvalInput",
                    "testFuncdef",
                    "testLambdef",
                    "testSimpleStmt",
                    "testExprStmt",
                    "testDelStmt",
                    "testPassStmt",
                    "testBreakStmt",
                    "testContinueStmt",
                    "test_break_continue_loop",
                    "testReturn",
                    "testYield",
                    "testRaise",
                    "testImport",
                    "testGlobal",
                    "testNonlocal",
                    "testAssert",
                    "testIf",
                    "testWhile",
                    "testFor",
                    "testTry",
                    "testSuite",
                    "testTest",
                    "testComparison",
                    "testBinaryMaskOps",
                    "testShiftOps",
                    "testAdditiveOps",
                    "testMultiplicativeOps",
                    "testUnaryOps",
                    "testSelectors",
                    "testAtoms",
                    "testClassdef",
                    "testDictcomps",
                    "testListcomps",
                    "testGenexps",
                    "testComprehensionSpecials",
                    "test_with_statement",
                    "testIfElseExpr",
                    "testStringLiterals"
                ],
                "docstring": null,
                "base_classes": [
                    "unittest.TestCase"
                ]
            },
            "Squares": {
                "methods": [
                    "__init__",
                    "__len__",
                    "__getitem__"
                ],
                "docstring": null,
                "base_classes": []
            },
            "B": {
                "methods": [],
                "docstring": null,
                "base_classes": []
            },
            "B2": {
                "methods": [],
                "docstring": null,
                "base_classes": []
            },
            "C1": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "B"
                ]
            },
            "C2": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "B"
                ]
            },
            "D": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "C1",
                    "C2",
                    "B"
                ]
            },
            "C": {
                "methods": [
                    "meth1",
                    "meth2",
                    "meth3"
                ],
                "docstring": null,
                "base_classes": []
            },
            "G": {
                "methods": [],
                "docstring": null,
                "base_classes": []
            },
            "manager": {
                "methods": [
                    "__enter__",
                    "__exit__"
                ],
                "docstring": null,
                "base_classes": [
                    "object"
                ]
            }
        },
        "routes": [],
        "complexity": 154
    },
    "runtime\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar.py": {
        "language": ".py",
        "functions": [
            "test_main",
            "testBackslash",
            "testPlainIntegers",
            "testLongIntegers",
            "testUnderscoresInNumbers",
            "testFloats",
            "testEllipsis",
            "testEvalInput",
            "testFuncdef",
            "testLambdef",
            "testSimpleStmt",
            "testExprStmt",
            "testDelStmt",
            "testPassStmt",
            "testBreakStmt",
            "testContinueStmt",
            "test_break_continue_loop",
            "testReturn",
            "testYield",
            "testRaise",
            "testImport",
            "testGlobal",
            "testNonlocal",
            "testAssert",
            "testIf",
            "testWhile",
            "testFor",
            "testTry",
            "testSuite",
            "testTest",
            "testComparison",
            "testBinaryMaskOps",
            "testShiftOps",
            "testAdditiveOps",
            "testMultiplicativeOps",
            "testUnaryOps",
            "testSelectors",
            "testAtoms",
            "testClassdef",
            "testDictcomps",
            "testListcomps",
            "testGenexps",
            "testComprehensionSpecials",
            "test_with_statement",
            "testIfElseExpr",
            "testStringLiterals",
            "f1",
            "f2",
            "f3",
            "a1",
            "a2",
            "v0",
            "v1",
            "v2",
            "d01",
            "d11",
            "d21",
            "d02",
            "d12",
            "d22",
            "d01v",
            "d11v",
            "d21v",
            "d02v",
            "d12v",
            "d22v",
            "pos0key1",
            "pos2key2",
            "pos2key2dict",
            "f",
            "f",
            "f",
            "f",
            "f",
            "f",
            "f",
            "f",
            "f",
            "null",
            "f",
            "f",
            "f",
            "f",
            "f",
            "foo",
            "test_inner",
            "g1",
            "g2",
            "f",
            "class_decorator",
            "test_in_func",
            "test_nested_front",
            "_checkeval",
            "__init__",
            "__len__",
            "__getitem__",
            "meth1",
            "meth2",
            "meth3",
            "__enter__",
            "__exit__"
        ],
        "classes": {
            "TokenTests": {
                "methods": [
                    "testBackslash",
                    "testPlainIntegers",
                    "testLongIntegers",
                    "testUnderscoresInNumbers",
                    "testFloats",
                    "testEllipsis"
                ],
                "docstring": null,
                "base_classes": [
                    "unittest.TestCase"
                ]
            },
            "GrammarTests": {
                "methods": [
                    "testEvalInput",
                    "testFuncdef",
                    "testLambdef",
                    "testSimpleStmt",
                    "testExprStmt",
                    "testDelStmt",
                    "testPassStmt",
                    "testBreakStmt",
                    "testContinueStmt",
                    "test_break_continue_loop",
                    "testReturn",
                    "testYield",
                    "testRaise",
                    "testImport",
                    "testGlobal",
                    "testNonlocal",
                    "testAssert",
                    "testIf",
                    "testWhile",
                    "testFor",
                    "testTry",
                    "testSuite",
                    "testTest",
                    "testComparison",
                    "testBinaryMaskOps",
                    "testShiftOps",
                    "testAdditiveOps",
                    "testMultiplicativeOps",
                    "testUnaryOps",
                    "testSelectors",
                    "testAtoms",
                    "testClassdef",
                    "testDictcomps",
                    "testListcomps",
                    "testGenexps",
                    "testComprehensionSpecials",
                    "test_with_statement",
                    "testIfElseExpr",
                    "testStringLiterals"
                ],
                "docstring": null,
                "base_classes": [
                    "unittest.TestCase"
                ]
            },
            "Squares": {
                "methods": [
                    "__init__",
                    "__len__",
                    "__getitem__"
                ],
                "docstring": null,
                "base_classes": []
            },
            "B": {
                "methods": [],
                "docstring": null,
                "base_classes": []
            },
            "B2": {
                "methods": [],
                "docstring": null,
                "base_classes": []
            },
            "C1": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "B"
                ]
            },
            "C2": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "B"
                ]
            },
            "D": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "C1",
                    "C2",
                    "B"
                ]
            },
            "C": {
                "methods": [
                    "meth1",
                    "meth2",
                    "meth3"
                ],
                "docstring": null,
                "base_classes": []
            },
            "G": {
                "methods": [],
                "docstring": null,
                "base_classes": []
            },
            "manager": {
                "methods": [
                    "__enter__",
                    "__exit__"
                ],
                "docstring": null,
                "base_classes": [
                    "object"
                ]
            }
        },
        "routes": [],
        "complexity": 154
    },
    "runtime\\tree-sitter-grammars\\tree-sitter-python\\examples\\simple-statements-without-trailing-newline.py": {
        "language": "python",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0,
        "parser_used": "ast_failed",
        "error": "Missing parentheses in call to 'print'. Did you mean print(...)? (<unknown>, line 1)"
    },
    "runtime\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3.8_grammar.py": {
        "language": "python",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0,
        "parser_used": "ast_failed",
        "error": "expected an indented block after function definition on line 315 (<unknown>, line 317)"
    },
    "runtime\\tree-sitter-grammars\\tree-sitter-python\\examples\\tabs.py": {
        "language": ".py",
        "functions": [
            "set_password",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "runtime\\tree-sitter-grammars\\tree-sitter-rust\\examples\\ast.rs": {
        "language": ".rs",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\tree-sitter-grammars\\tree-sitter-python\\examples\\trailing-whitespace.py": {
        "language": "python",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0,
        "parser_used": "ast_failed",
        "error": "Missing parentheses in call to 'print'. Did you mean print(...)? (<unknown>, line 1)"
    },
    "runtime\\tree-sitter-grammars\\tree-sitter-rust\\examples\\weird-exprs.rs": {
        "language": ".rs",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\dreamos\\agents\\agent_1\\shadow_task_nexus.py": {
        "language": "python",
        "functions": [
            "__init__",
            "_load",
            "_save",
            "get_next_task",
            "add_task",
            "update_task_status",
            "get_all_tasks",
            "stats",
            "get_task_by_id",
            "remove_task"
        ],
        "classes": {
            "ShadowTaskNexus": {
                "methods": [
                    "__init__",
                    "_load",
                    "_save",
                    "get_next_task",
                    "add_task",
                    "update_task_status",
                    "get_all_tasks",
                    "stats",
                    "get_task_by_id",
                    "remove_task"
                ],
                "docstring": "Fallback task queue for Agent-1, mirroring TaskNexus but using shadow_backlog.json.",
                "base_classes": []
            },
            "Task": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "BaseModel"
                ]
            }
        },
        "routes": [],
        "complexity": 1745,
        "parser_used": "ast",
        "agent_role": "potential_agent_script"
    },
    "src\\dreamos\\agents\\library\\agent_devlog.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_get_default_template",
            "_format_log_entry",
            "_append_entry"
        ],
        "classes": {
            "AgentDevlog": {
                "methods": [
                    "__init__",
                    "_get_default_template",
                    "_format_log_entry",
                    "_append_entry"
                ],
                "docstring": "An agent that listens to the AgentBus and automatically logs significant events to a daily devlog file.",
                "base_classes": [
                    "BaseAgent"
                ]
            }
        },
        "routes": [],
        "complexity": 8
    },
    "src\\dreamos\\agents\\library\\task_promoter_agent.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_get_completed_task_ids",
            "_get_pending_backlog_tasks",
            "promote_eligible_tasks",
            "run_standalone"
        ],
        "classes": {
            "TaskPromoterAgent": {
                "methods": [
                    "__init__",
                    "_get_completed_task_ids",
                    "_get_pending_backlog_tasks",
                    "promote_eligible_tasks",
                    "run_standalone"
                ],
                "docstring": "An agent that periodically scans the task backlog and promotes tasks\nto the ready queue if their dependencies are met.",
                "base_classes": [
                    "BaseAgent"
                ]
            }
        },
        "routes": [],
        "complexity": 10
    },
    "src\\dreamos\\agents\\library\\agent_lore_writer.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "check_mailbox",
            "generate_lore",
            "write_lore",
            "run_cycle"
        ],
        "classes": {
            "AgentLoreWriter": {
                "methods": [
                    "__init__",
                    "check_mailbox",
                    "generate_lore",
                    "write_lore",
                    "run_cycle"
                ],
                "docstring": "Minimal Lore Writer Agent Scaffold.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 10
    },
    "src\\dreamos\\agents\\utils\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\dreamos\\agents\\validation\\offline_validation_agent.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_calculate_sha256",
            "load_validation_matrix",
            "_check_file_age",
            "_check_file_size",
            "_check_json_validity",
            "_check_python_compilation",
            "_attempt_repair",
            "run_validation_check",
            "run_scan_cycle",
            "log_specific_failure",
            "log_validation_failure",
            "log_scan_summary"
        ],
        "classes": {
            "OfflineValidationAgent": {
                "methods": [
                    "__init__",
                    "_calculate_sha256",
                    "load_validation_matrix",
                    "_check_file_age",
                    "_check_file_size",
                    "_check_json_validity",
                    "_check_python_compilation",
                    "_attempt_repair",
                    "run_validation_check",
                    "run_scan_cycle",
                    "log_specific_failure",
                    "log_validation_failure",
                    "log_scan_summary"
                ],
                "docstring": "Scans for tool output vs. file state consistency. Includes auto-repair.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 26
    },
    "src\\dreamos\\coordination\\dispatchers\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\dreamos\\core\\agents\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\dreamos\\core\\comms\\debate_schemas.py": {
        "language": ".py",
        "functions": [
            "generate_uuid",
            "current_utc_iso"
        ],
        "classes": {
            "DebateInfo": {
                "methods": [],
                "docstring": "Basic info about a debate.",
                "base_classes": [
                    "BaseModel"
                ]
            },
            "Persona": {
                "methods": [],
                "docstring": "Defines the role, stance, and instructions for an agent in a specific debate.",
                "base_classes": [
                    "BaseModel"
                ]
            },
            "ArgumentReference": {
                "methods": [],
                "docstring": "Reference cited in an argument.",
                "base_classes": [
                    "BaseModel"
                ]
            },
            "Argument": {
                "methods": [],
                "docstring": "Represents a single contribution (argument) by an agent during a debate turn.",
                "base_classes": [
                    "BaseModel"
                ]
            },
            "DebateParticipantInfo": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "BaseModel"
                ]
            },
            "DebateManifest": {
                "methods": [],
                "docstring": "Metadata stored in manifest.json for a debate arena.",
                "base_classes": [
                    "BaseModel"
                ]
            }
        },
        "routes": [],
        "complexity": 2
    },
    "src\\dreamos\\core\\coordination\\base_agent_lifecycle.py": {
        "language": ".py",
        "functions": [],
        "classes": {
            "BaseAgentLifecycleMixin": {
                "methods": [],
                "docstring": "Mixin containing start and stop logic for BaseAgent.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 0
    },
    "src\\dreamos\\core\\comms\\meeting_schemas.py": {
        "language": ".py",
        "functions": [
            "generate_uuid",
            "current_utc_iso"
        ],
        "classes": {
            "BaseMeetingMessage": {
                "methods": [],
                "docstring": "Base model for all messages within a meeting mailbox.",
                "base_classes": [
                    "BaseModel"
                ]
            },
            "MeetingComment": {
                "methods": [],
                "docstring": "A general comment or discussion point.",
                "base_classes": [
                    "BaseMeetingMessage"
                ]
            },
            "MeetingProposal": {
                "methods": [],
                "docstring": "A formal proposal for discussion or voting.",
                "base_classes": [
                    "BaseMeetingMessage"
                ]
            },
            "MeetingVote": {
                "methods": [],
                "docstring": "A vote cast on a specific proposal.",
                "base_classes": [
                    "BaseMeetingMessage"
                ]
            },
            "MeetingSummary": {
                "methods": [],
                "docstring": "A summary of discussion points or meeting outcomes.",
                "base_classes": [
                    "BaseMeetingMessage"
                ]
            },
            "MeetingStateChange": {
                "methods": [],
                "docstring": "Indicates a change in the overall meeting state.",
                "base_classes": [
                    "BaseMeetingMessage"
                ]
            },
            "MeetingAgendaItem": {
                "methods": [],
                "docstring": "An item added to the meeting agenda.",
                "base_classes": [
                    "BaseMeetingMessage"
                ]
            },
            "ParticipantInfo": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "BaseModel"
                ]
            },
            "MeetingManifest": {
                "methods": [],
                "docstring": "Metadata stored in manifest.json for a meeting.",
                "base_classes": [
                    "BaseModel"
                ]
            }
        },
        "routes": [],
        "complexity": 2
    },
    "src\\dreamos\\core\\coordination\\project_board_manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_resolve_path",
            "_get_lock",
            "_load_file",
            "_read_board_file",
            "_load_backlog",
            "_load_ready_queue",
            "_load_working_tasks",
            "_load_completed_tasks",
            "_save_backlog",
            "_save_ready_queue",
            "_save_working_tasks",
            "_save_completed_tasks",
            "_load_schema",
            "_validate_task",
            "_find_task_index",
            "_atomic_write",
            "_save_file",
            "get_task",
            "list_backlog_tasks",
            "list_ready_queue_tasks",
            "list_working_tasks",
            "add_task",
            "add_task_to_backlog",
            "_get_utc_timestamp",
            "_generate_task_id",
            "update_working_task",
            "delete_task",
            "move_task_to_completed",
            "claim_ready_task",
            "promote_task_to_ready",
            "_create_from_cli_args"
        ],
        "classes": {
            "ProjectBoardManager": {
                "methods": [
                    "__init__",
                    "_resolve_path",
                    "_get_lock",
                    "_load_file",
                    "_read_board_file",
                    "_load_backlog",
                    "_load_ready_queue",
                    "_load_working_tasks",
                    "_load_completed_tasks",
                    "_save_backlog",
                    "_save_ready_queue",
                    "_save_working_tasks",
                    "_save_completed_tasks",
                    "_load_schema",
                    "_validate_task",
                    "_find_task_index",
                    "_atomic_write",
                    "_save_file",
                    "get_task",
                    "list_backlog_tasks",
                    "list_ready_queue_tasks",
                    "list_working_tasks",
                    "add_task",
                    "add_task_to_backlog",
                    "_get_utc_timestamp",
                    "_generate_task_id",
                    "update_working_task",
                    "delete_task",
                    "move_task_to_completed",
                    "claim_ready_task",
                    "promote_task_to_ready",
                    "_create_from_cli_args"
                ],
                "docstring": "Manages loading, saving, and modifying tasks on JSON-based project boards.\nEnsures safe concurrent access via file locking.\n\nSupports Backlog, Ready Queue, Working, and Completed boards.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 64
    },
    "src\\dreamos\\core\\db\\sqlite_adapter.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_connect",
            "_create_schema",
            "close",
            "get_all_agents",
            "update_agent_heartbeat",
            "get_stale_agents",
            "register_capability",
            "unregister_capability",
            "get_capabilities_for_agent",
            "get_all_capabilities",
            "find_agents_with_capability",
            "add_task",
            "update_task",
            "get_task",
            "_row_to_task",
            "get_tasks_by_status",
            "get_pending_tasks",
            "claim_next_pending_task",
            "get_all_tasks",
            "_log_status_change",
            "_update_task_tags",
            "get_tasks_by_tag",
            "get_tasks_by_agents_and_status"
        ],
        "classes": {
            "SQLiteAdapter": {
                "methods": [
                    "__init__",
                    "_connect",
                    "_create_schema",
                    "close",
                    "get_all_agents",
                    "update_agent_heartbeat",
                    "get_stale_agents",
                    "register_capability",
                    "unregister_capability",
                    "get_capabilities_for_agent",
                    "get_all_capabilities",
                    "find_agents_with_capability",
                    "add_task",
                    "update_task",
                    "get_task",
                    "_row_to_task",
                    "get_tasks_by_status",
                    "get_pending_tasks",
                    "claim_next_pending_task",
                    "get_all_tasks",
                    "_log_status_change",
                    "_update_task_tags",
                    "get_tasks_by_tag",
                    "get_tasks_by_agents_and_status"
                ],
                "docstring": "Provides an interface to interact with the SQLite database for Dream.OS data.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 48
    },
    "src\\dreamos\\core\\identity\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\dreamos\\core\\narrative\\lore_parser.py": {
        "language": ".py",
        "functions": [
            "fetch_task_data",
            "fetch_git_log",
            "fetch_agent_logs",
            "fetch_captain_logs",
            "fetch_lore_context",
            "gather_narrative_context"
        ],
        "classes": {
            "ContextWindow": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "TypedDict"
                ]
            },
            "NarrativeContextData": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "TypedDict"
                ]
            }
        },
        "routes": [],
        "complexity": 6
    },
    "src\\dreamos\\core\\state\\snapshot_manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "create_snapshot",
            "list_snapshots"
        ],
        "classes": {
            "SnapshotError": {
                "methods": [],
                "docstring": "Custom exception for snapshot errors.",
                "base_classes": [
                    "Exception"
                ]
            },
            "SnapshotManager": {
                "methods": [
                    "__init__",
                    "create_snapshot",
                    "list_snapshots"
                ],
                "docstring": "Handles creation of system state snapshots (DB file copy).",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 6
    },
    "src\\dreamos\\core\\tasks\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\dreamos\\core\\logging\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\dreamos\\core\\tts\\tts_interface.py": {
        "language": ".py",
        "functions": [
            "synthesize",
            "is_available"
        ],
        "classes": {
            "TTSInterface": {
                "methods": [
                    "synthesize",
                    "is_available"
                ],
                "docstring": "Abstract base class for Text-to-Speech engines.",
                "base_classes": [
                    "ABC"
                ]
            }
        },
        "routes": [],
        "complexity": 4
    },
    "src\\dreamos\\core\\tts\\elevenlabs_tts.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "synthesize",
            "is_available",
            "__init__",
            "is_available",
            "synthesize",
            "save"
        ],
        "classes": {
            "AppConfig": {
                "methods": [
                    "__init__"
                ],
                "docstring": null,
                "base_classes": []
            },
            "TTSInterface": {
                "methods": [
                    "synthesize",
                    "is_available"
                ],
                "docstring": null,
                "base_classes": []
            },
            "ElevenLabsTTS": {
                "methods": [
                    "__init__",
                    "is_available",
                    "synthesize"
                ],
                "docstring": "TTS implementation using the ElevenLabs API.",
                "base_classes": [
                    "TTSInterface"
                ]
            },
            "ElevenLabs": {
                "methods": [],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 13
    },
    "src\\dreamos\\core\\tts\\tts_factory.py": {
        "language": ".py",
        "functions": [
            "get_tts_engine",
            "is_available",
            "synthesize",
            "__init__",
            "__init__",
            "is_available",
            "synthesize",
            "__init__",
            "is_available",
            "synthesize"
        ],
        "classes": {
            "TTSInterface": {
                "methods": [
                    "is_available",
                    "synthesize"
                ],
                "docstring": null,
                "base_classes": []
            },
            "AppConfig": {
                "methods": [
                    "__init__"
                ],
                "docstring": null,
                "base_classes": []
            },
            "ElevenLabsTTS": {
                "methods": [
                    "__init__",
                    "is_available",
                    "synthesize"
                ],
                "docstring": null,
                "base_classes": [
                    "TTSInterface"
                ]
            },
            "LocalTTS": {
                "methods": [
                    "__init__",
                    "is_available",
                    "synthesize"
                ],
                "docstring": null,
                "base_classes": [
                    "TTSInterface"
                ]
            }
        },
        "routes": [],
        "complexity": 19
    },
    "src\\dreamos\\core\\tts\\local_tts.py": {
        "language": ".py",
        "functions": [
            "synthesize",
            "is_available",
            "__init__",
            "is_available",
            "synthesize"
        ],
        "classes": {
            "TTSInterface": {
                "methods": [
                    "synthesize",
                    "is_available"
                ],
                "docstring": null,
                "base_classes": []
            },
            "LocalTTS": {
                "methods": [
                    "__init__",
                    "is_available",
                    "synthesize"
                ],
                "docstring": "TTS implementation using the pyttsx3 library for local synthesis.",
                "base_classes": [
                    "TTSInterface"
                ]
            }
        },
        "routes": [],
        "complexity": 10
    },
    "src\\dreamos\\core\\utils\\summarizer.py": {
        "language": ".py",
        "functions": [],
        "classes": {
            "BaseSummarizer": {
                "methods": [],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 0
    },
    "src\\dreamos\\core\\utils\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\dreamos\\tools\\cursor_bridge\\mock_cursor_bridge.py": {
        "language": ".py",
        "functions": [
            "create_mock_bridge",
            "get",
            "__init__",
            "inject_prompt",
            "__init__",
            "read_response",
            "__init__",
            "run_cycle"
        ],
        "classes": {
            "MockConfigInterface": {
                "methods": [
                    "get"
                ],
                "docstring": "Mocks configuration retrieval.",
                "base_classes": []
            },
            "MockPromptInjector": {
                "methods": [
                    "__init__",
                    "inject_prompt"
                ],
                "docstring": "Mocks injecting prompts into Cursor UI.",
                "base_classes": []
            },
            "MockResponseReader": {
                "methods": [
                    "__init__",
                    "read_response"
                ],
                "docstring": "Mocks reading responses from Cursor UI (OCR/Clipboard).",
                "base_classes": []
            },
            "MockLoopController": {
                "methods": [
                    "__init__",
                    "run_cycle"
                ],
                "docstring": "Mocks the main bridge control loop.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 15
    },
    "src\\dreamos\\tools\\cursor_bridge\\cursor_bridge.py": {
        "language": ".py",
        "functions": [
            "publish_bridge_status",
            "_get_bridge_config",
            "_ensure_config",
            "handle_gpt_payload",
            "find_and_focus_cursor_window",
            "inject_prompt_into_cursor",
            "configure_response_area",
            "capture_response_area",
            "extract_text_from_image",
            "monitor_and_extract_response",
            "summarize_cursor_output",
            "interact_with_cursor",
            "parse_bridge_log",
            "push_telemetry",
            "simulate_gpt_call",
            "run_demo_scenario",
            "validate_full_cycle",
            "relay_prompt_via_web_and_gui",
            "log_telemetry",
            "__init__",
            "resolve"
        ],
        "classes": {
            "BusMessage": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "BaseModel"
                ]
            },
            "CursorBridgeError": {
                "methods": [],
                "docstring": "Custom exception for Cursor Bridge specific errors.",
                "base_classes": [
                    "Exception"
                ]
            },
            "CursorInjectError": {
                "methods": [],
                "docstring": "Indicates an error during the injection phase (focusing, pasting, etc.).",
                "base_classes": [
                    "CursorBridgeError"
                ]
            },
            "CursorExtractError": {
                "methods": [],
                "docstring": "Indicates an error during the extraction phase (capture, OCR, stabilization).",
                "base_classes": [
                    "CursorBridgeError"
                ]
            },
            "ConfigWrapper": {
                "methods": [
                    "__init__",
                    "resolve"
                ],
                "docstring": null,
                "base_classes": []
            },
            "MessageTypePlaceholder": {
                "methods": [],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 23
    },
    "src\\dreamos\\tools\\maintenance\\augment_task_tags.py": {
        "language": ".py",
        "functions": [
            "augment_tasks_with_tags",
            "parse_args",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "src\\dreamos\\tools\\maintenance\\find_duplicate_tasks.py": {
        "language": ".py",
        "functions": [
            "is_excluded",
            "parse_json_file",
            "parse_md_file",
            "find_task_files",
            "normalize",
            "find_duplicate_tasks"
        ],
        "classes": {},
        "routes": [],
        "complexity": 6
    },
    "runtime\\tree-sitter-grammars\\tree-sitter-javascript\\bindings\\node\\binding_test.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\tree-sitter-grammars\\tree-sitter-javascript\\bindings\\node\\index.d.ts": {
        "language": ".ts",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\tree-sitter-grammars\\tree-sitter-javascript\\bindings\\node\\index.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\tree-sitter-grammars\\tree-sitter-javascript\\bindings\\rust\\build.rs": {
        "language": ".rs",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\tree-sitter-grammars\\tree-sitter-javascript\\bindings\\rust\\lib.rs": {
        "language": ".rs",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\tree-sitter-grammars\\tree-sitter-javascript\\test\\highlight\\functions.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\tree-sitter-grammars\\tree-sitter-javascript\\test\\highlight\\imports.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\tree-sitter-grammars\\tree-sitter-javascript\\test\\highlight\\injection.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\tree-sitter-grammars\\tree-sitter-javascript\\test\\highlight\\keywords.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\tree-sitter-grammars\\tree-sitter-javascript\\test\\highlight\\variables.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\tree-sitter-grammars\\tree-sitter-javascript\\test\\tags\\classes.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\tree-sitter-grammars\\tree-sitter-javascript\\test\\tags\\functions.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\tree-sitter-grammars\\tree-sitter-python\\bindings\\node\\binding_test.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\tree-sitter-grammars\\tree-sitter-python\\bindings\\node\\index.d.ts": {
        "language": ".ts",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\tree-sitter-grammars\\tree-sitter-python\\bindings\\node\\index.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\tree-sitter-grammars\\tree-sitter-python\\bindings\\rust\\build.rs": {
        "language": ".rs",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\tree-sitter-grammars\\tree-sitter-python\\bindings\\rust\\lib.rs": {
        "language": ".rs",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\tree-sitter-grammars\\tree-sitter-python\\test\\highlight\\keywords.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\tree-sitter-grammars\\tree-sitter-python\\test\\highlight\\parameters.py": {
        "language": ".py",
        "functions": [
            "g"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "runtime\\tree-sitter-grammars\\tree-sitter-python\\test\\highlight\\pattern_matching.py": {
        "language": "python",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0,
        "parser_used": "ast_failed",
        "error": "only single target (not tuple) can be annotated (<unknown>, line 48)"
    },
    "runtime\\tree-sitter-grammars\\tree-sitter-python\\test\\tags\\main.py": {
        "language": "python",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0,
        "parser_used": "ast_failed",
        "error": "Missing parentheses in call to 'print'. Did you mean print(...)? (<unknown>, line 5)"
    },
    "runtime\\tree-sitter-grammars\\tree-sitter-rust\\bindings\\node\\binding_test.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\tree-sitter-grammars\\tree-sitter-rust\\bindings\\node\\index.d.ts": {
        "language": ".ts",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\tree-sitter-grammars\\tree-sitter-rust\\bindings\\node\\index.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\tree-sitter-grammars\\tree-sitter-rust\\bindings\\rust\\build.rs": {
        "language": ".rs",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\tree-sitter-grammars\\tree-sitter-rust\\bindings\\rust\\lib.rs": {
        "language": ".rs",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\dreamos\\core\\agents\\capabilities\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\dreamos\\core\\tasks\\nexus\\db_task_nexus.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "get_next_task",
            "add_task",
            "update_task",
            "get_all_tasks",
            "get_task_by_id",
            "get_pending_tasks",
            "get_tasks_by_tag",
            "stats"
        ],
        "classes": {
            "TaskDict": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "TypedDict"
                ]
            },
            "DbTaskNexus": {
                "methods": [
                    "__init__",
                    "get_next_task",
                    "add_task",
                    "update_task",
                    "get_all_tasks",
                    "get_task_by_id",
                    "get_pending_tasks",
                    "get_tasks_by_tag",
                    "stats"
                ],
                "docstring": "Task management interface backed by SQLiteAdapter.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 18
    },
    "src\\dreamos\\core\\tasks\\nexus\\shadow_task_nexus.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_ensure_backlog_exists",
            "load_tasks",
            "list_tasks",
            "add_task",
            "validate_shadow_backlog"
        ],
        "classes": {
            "TaskDict": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "TypedDict"
                ]
            },
            "ShadowTaskNexus": {
                "methods": [
                    "__init__",
                    "_ensure_backlog_exists",
                    "load_tasks",
                    "list_tasks",
                    "add_task",
                    "validate_shadow_backlog"
                ],
                "docstring": "A fallback task nexus operating on a local JSON file for redundancy.\nHandles basic task loading, validation, and manipulation if primary systems fail.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 12
    },
    "src\\dreamos\\core\\tasks\\nexus\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\dreamos\\tools\\calibration\\calibration\\calibrate_agent_gui.py": {
        "language": ".py",
        "functions": [
            "load_existing_coords",
            "save_coords",
            "calibrate_element",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 4
    },
    "src\\dreamos\\tools\\validation\\validation\\validate_gui_coords.py": {
        "language": ".py",
        "functions": [
            "load_coords",
            "find_and_activate_window",
            "inject_test_prompt",
            "retrieve_response",
            "save_results",
            "_validate_coord_structure",
            "_check_coord_proximity",
            "_check_accessibility",
            "_check_for_duplicates",
            "validate_gui_coordinates",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 11
    },
    "archive\\archived_tests\\tests\\social\\tests\\utils\\test_browser_utils.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\tree-sitter-grammars\\tree-sitter-javascript\\bindings\\python\\tests\\test_binding.py": {
        "language": ".py",
        "functions": [
            "test_can_load_grammar"
        ],
        "classes": {
            "TestLanguage": {
                "methods": [
                    "test_can_load_grammar"
                ],
                "docstring": null,
                "base_classes": [
                    "TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 2
    },
    "runtime\\tree-sitter-grammars\\tree-sitter-javascript\\bindings\\python\\tree_sitter_javascript\\__init__.py": {
        "language": ".py",
        "functions": [
            "_get_query",
            "__getattr__",
            "__dir__"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "runtime\\tree-sitter-grammars\\tree-sitter-python\\bindings\\python\\tests\\test_binding.py": {
        "language": ".py",
        "functions": [
            "test_can_load_grammar"
        ],
        "classes": {
            "TestLanguage": {
                "methods": [
                    "test_can_load_grammar"
                ],
                "docstring": null,
                "base_classes": [
                    "TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 2
    },
    "runtime\\tree-sitter-grammars\\tree-sitter-python\\bindings\\python\\tree_sitter_python\\__init__.py": {
        "language": ".py",
        "functions": [
            "_get_query",
            "__getattr__",
            "__dir__"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "runtime\\tree-sitter-grammars\\tree-sitter-rust\\bindings\\python\\tests\\test_binding.py": {
        "language": ".py",
        "functions": [
            "test_can_load_grammar"
        ],
        "classes": {
            "TestLanguage": {
                "methods": [
                    "test_can_load_grammar"
                ],
                "docstring": null,
                "base_classes": [
                    "TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 2
    },
    "runtime\\tree-sitter-grammars\\tree-sitter-rust\\bindings\\python\\tree_sitter_rust\\__init__.py": {
        "language": ".py",
        "functions": [
            "_get_query",
            "__getattr__",
            "__dir__"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "src\\dreamos\\core\\agents\\capabilities\\library\\debate_management.py": {
        "language": ".py",
        "functions": [
            "debate_initiate_capability"
        ],
        "classes": {
            "PersonaInput": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "TypedDict"
                ]
            },
            "DebateInitiateInput": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "TypedDict"
                ]
            },
            "DebateInitiateOutput": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "TypedDict"
                ]
            }
        },
        "routes": [],
        "complexity": 1
    },
    "src\\dreamos\\core\\agents\\capabilities\\library\\meeting_management.py": {
        "language": ".py",
        "functions": [
            "meeting_create_capability",
            "meeting_post_message_capability",
            "meeting_read_messages_capability",
            "meeting_get_info_capability",
            "meeting_join_capability",
            "meeting_vote_capability",
            "meeting_update_state_capability",
            "meeting_discover_capability"
        ],
        "classes": {
            "MeetingCreateInput": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "TypedDict"
                ]
            },
            "MeetingCreateOutput": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "TypedDict"
                ]
            },
            "MeetingPostMessageInput": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "TypedDict"
                ]
            },
            "MeetingPostMessageOutput": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "TypedDict"
                ]
            },
            "MeetingReadMessagesInput": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "TypedDict"
                ]
            },
            "MeetingReadMessagesOutput": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "TypedDict"
                ]
            },
            "MeetingGetInfoInput": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "TypedDict"
                ]
            },
            "MeetingGetInfoOutput": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "TypedDict"
                ]
            },
            "MeetingJoinInput": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "TypedDict"
                ]
            },
            "MeetingJoinOutput": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "TypedDict"
                ]
            },
            "MeetingVoteInput": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "TypedDict"
                ]
            },
            "MeetingVoteOutput": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "TypedDict"
                ]
            },
            "MeetingUpdateStateInput": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "TypedDict"
                ]
            },
            "MeetingUpdateStateOutput": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "TypedDict"
                ]
            },
            "MeetingDiscoverInput": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "TypedDict"
                ]
            },
            "MeetingDiscoverOutput": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "TypedDict"
                ]
            },
            "MeetingParticipant": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "BaseModel"
                ]
            },
            "MeetingAgendaItem": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "BaseModel"
                ]
            },
            "MeetingLogEntry": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "BaseModel"
                ]
            },
            "MeetingSchema": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "BaseModel"
                ]
            }
        },
        "routes": [],
        "complexity": 8
    },
    "src\\dreamos\\core\\agents\\capabilities\\library\\narrative_generate.py": {
        "language": ".py",
        "functions": [
            "narrative_generate_episode_capability"
        ],
        "classes": {
            "NarrativeGenerateInput": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "TypedDict"
                ]
            },
            "NarrativeGenerateOutput": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "TypedDict"
                ]
            }
        },
        "routes": [],
        "complexity": 1
    },
    "src\\dreamos\\core\\agents\\capabilities\\library\\task_rewrite.py": {
        "language": ".py",
        "functions": [
            "get_llm_client",
            "task_rewrite_capability",
            "generate"
        ],
        "classes": {
            "MockLlmClient": {
                "methods": [
                    "generate"
                ],
                "docstring": null,
                "base_classes": []
            },
            "LlmApiError": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "Exception"
                ]
            },
            "TaskRewriteInput": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "TypedDict"
                ]
            },
            "TaskRewriteOutput": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "TypedDict"
                ]
            }
        },
        "routes": [],
        "complexity": 4
    },
    "src\\dreamos\\core\\agents\\capabilities\\library\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "ai_docs\\examples_and_tutorials\\from_old_docs\\examples\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "analytics\\scripts\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "analytics\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "apps\\examples\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "apps\\examples\\stubs\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "archive\\archived_scripts\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "archive\\archived_scripts\\auditing\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "archive\\archived_scripts\\dev\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "archive\\archived_scripts\\maintenance\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "archive\\archived_scripts\\testing\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "archive\\archived_scripts\\utility\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "archive\\archived_scripts\\utils\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "archive\\archived_tests\\tests\\social\\tests\\utils\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "archive\\legacy_automation\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "bridge\\feedback\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "bridge\\relay\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "bridge\\tests\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "devtools\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dev_sandbox\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamos_ai_organizer\\core\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\agent_prototypes\\Agent-1\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\analytics\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\modules\\chatgpt_scraper\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\temp\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\temp\\edit_test_files\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\tree-sitter-grammars\\tree-sitter-javascript\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\tree-sitter-grammars\\tree-sitter-javascript\\bindings\\python\\tests\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\tree-sitter-grammars\\tree-sitter-python\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\tree-sitter-grammars\\tree-sitter-python\\bindings\\python\\tests\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\tree-sitter-grammars\\tree-sitter-python\\test\\highlight\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\tree-sitter-grammars\\tree-sitter-python\\test\\tags\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\tree-sitter-grammars\\tree-sitter-rust\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\tree-sitter-grammars\\tree-sitter-rust\\bindings\\python\\tests\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "runtime\\validation\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "sandbox\\analysis\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "sandbox\\bridge\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "sandbox\\bridge_validator\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "sandbox\\ironvale_feedback\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "sandbox\\ironvale_injector\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "sandbox\\ironvale_stream_watcher\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "sandbox\\ironvale_summarizer\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "sandbox\\parser\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "sandbox\\scripts\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "sandbox\\tests\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "sandbox\\utils\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "sandbox\\veindrill_envtelemetry\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "scripts\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "scripts\\agents\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "scripts\\analysis\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "scripts\\migration_helpers\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\dreamos.core.config.py": {
        "language": ".py",
        "functions": [
            "find_project_root_marker",
            "__init__",
            "_load_config",
            "get_field_value",
            "prepare_field_value",
            "__call__",
            "settings_customise_sources",
            "setup_logging",
            "_ensure_dirs_exist",
            "load"
        ],
        "classes": {
            "LoggingConfig": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "BaseModel"
                ]
            },
            "PathsConfig": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "BaseModel"
                ]
            },
            "OpenAIConfig": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "BaseModel"
                ]
            },
            "ChatGPTScraperConfig": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "BaseModel"
                ]
            },
            "YamlConfigSettingsSource": {
                "methods": [
                    "__init__",
                    "_load_config",
                    "get_field_value",
                    "prepare_field_value",
                    "__call__"
                ],
                "docstring": null,
                "base_classes": [
                    "PydanticBaseSettingsSource"
                ]
            },
            "AppConfig": {
                "methods": [
                    "settings_customise_sources",
                    "setup_logging",
                    "_ensure_dirs_exist",
                    "load"
                ],
                "docstring": "Main application configuration loaded from environment variables and/or config file.",
                "base_classes": [
                    "BaseSettings"
                ]
            }
        },
        "routes": [],
        "complexity": 19
    },
    "src\\dreamos\\agents\\shadow_task_nexus.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_load",
            "_save",
            "get_next_task",
            "add_task",
            "update_task_status",
            "get_all_tasks",
            "stats",
            "get_task_by_id",
            "remove_task"
        ],
        "classes": {
            "ShadowTaskNexus": {
                "methods": [
                    "__init__",
                    "_load",
                    "_save",
                    "get_next_task",
                    "add_task",
                    "update_task_status",
                    "get_all_tasks",
                    "stats",
                    "get_task_by_id",
                    "remove_task"
                ],
                "docstring": "Fallback task queue for Agent-1, mirroring TaskNexus but using shadow_backlog.json.",
                "base_classes": []
            },
            "Task": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "BaseModel"
                ]
            }
        },
        "routes": [],
        "complexity": 20
    },
    "src\\dreamos\\agents\\library\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\dreamos\\agents\\mixins\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\dreamos\\agents\\validation\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\dreamos\\automation\\execution\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\dreamos\\bridge\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\dreamos\\core\\awareness\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\dreamos\\core\\comms\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\dreamos\\core\\coordination\\schemas\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\dreamos\\core\\db\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\dreamos\\core\\feedback\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\dreamos\\core\\health_checks\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\dreamos\\core\\narrative\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\dreamos\\core\\state\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\dreamos\\core\\tools\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\dreamos\\core\\tts\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\dreamos\\dashboard\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\dreamos\\governance\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\dreamos\\gui\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\dreamos\\identity\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\dreamos\\integrations\\agent_services\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\dreamos\\integrations\\cursor\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\dreamos\\llm_bridge\\bridge_adapters\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\dreamos\\memory\\layers\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\dreamos\\reporting\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\dreamos\\services\\utils\\content\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\dreamos\\skills\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\dreamos\\tools\\analysis\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\dreamos\\tools\\analysis\\project_scanner\\project_scanner.py": {
        "language": ".py",
        "functions": [
            "main",
            "__init__",
            "_load",
            "_save",
            "get",
            "set",
            "remove",
            "clear",
            "analyze_scan_results",
            "__init__",
            "analyze_file",
            "_analyze_python_ast",
            "_analyze_with_tree_sitter",
            "__init__",
            "hash_file",
            "should_exclude",
            "process_file",
            "__init__",
            "load_existing_report",
            "save_report",
            "generate_init_files",
            "load_existing_chatgpt_context",
            "export_chatgpt_context",
            "categorize_agents",
            "__init__",
            "_load_cache_sync",
            "_save_cache_sync",
            "_load_config",
            "_status_update",
            "_determine_files_to_process_sync",
            "_sync_populate_analysis_from_cache",
            "progress_update",
            "_sync_scandir"
        ],
        "classes": {
            "ProjectCache": {
                "methods": [
                    "__init__",
                    "_load",
                    "_save",
                    "get",
                    "set",
                    "remove",
                    "clear",
                    "analyze_scan_results"
                ],
                "docstring": null,
                "base_classes": []
            },
            "LanguageAnalyzer": {
                "methods": [
                    "__init__",
                    "analyze_file",
                    "_analyze_python_ast",
                    "_analyze_with_tree_sitter"
                ],
                "docstring": "Handles language-specific code analysis for different programming languages.",
                "base_classes": []
            },
            "FileProcessor": {
                "methods": [
                    "__init__",
                    "hash_file",
                    "should_exclude",
                    "process_file"
                ],
                "docstring": "Handles file hashing, ignoring, caching checks, etc.",
                "base_classes": []
            },
            "ReportGenerator": {
                "methods": [
                    "__init__",
                    "load_existing_report",
                    "save_report",
                    "generate_init_files",
                    "load_existing_chatgpt_context",
                    "export_chatgpt_context",
                    "categorize_agents"
                ],
                "docstring": "Handles merging new analysis into existing project_analysis.json and chatgpt context.",
                "base_classes": []
            },
            "ProjectScanner": {
                "methods": [
                    "__init__",
                    "_load_cache_sync",
                    "_save_cache_sync",
                    "_load_config"
                ],
                "docstring": "Orchestrates the project scanning process using modular components.\nResponsibilities:\n  - Initializes all components (analyzer, processor, reporter, concurrency manager).\n  - Loads and saves the file hash cache (if enabled).\n  - Discovers files to be scanned.\n  - Detects moved files based on hash (if cache enabled).\n  - Manages asynchronous file processing via MultibotManager.\n  - Gathers results and passes them to the ReportGenerator.\n  - Provides methods to trigger optional steps like __init__ generation or context export.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 60
    },
    "src\\dreamos\\tools\\calibration\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\dreamos\\tools\\calibration\\calibration\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\dreamos\\tools\\coordination\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\dreamos\\tools\\cursor_bridge\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\dreamos\\tools\\maintenance\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\dreamos\\tools\\validation\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "src\\dreamos\\tools\\validation\\validation\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "tests\\bridge\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "tests\\cli\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "tests\\coordination\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "tests\\coordination\\dispatchers\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "tests\\core\\comms\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "tests\\core\\coordination\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "tests\\core\\coordination\\tasks\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "tests\\core\\utils\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "tests\\dashboard\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "tests\\dreamscape\\agents\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "tests\\hooks\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "tests\\integrations\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "tests\\integrations\\azure\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "tests\\memory\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "tests\\monitoring\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "tests\\rendering\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "tests\\scripts\\utils\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "tests\\services\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "tests\\skills\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "tests\\social\\tests\\social\\strategies\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "tests\\supervisor_tools\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "tests\\tools\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "tests\\tools\\cursor_bridge\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "tests\\tools\\discovery\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "tests\\unit\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "tests\\utils\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "tools\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    }
}