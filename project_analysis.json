{
    "project_root": "D:\\Dream.os",
    "num_files_analyzed": 522,
    "analysis_details": {
        "apps\\dashboard\\agent_dashboard.py": {
            "language": ".py",
            "functions": [
                "load_inbox",
                "load_status",
                "last_devlog_ts",
                "enqueue",
                "__init__",
                "refresh",
                "display_agent_details",
                "__init__",
                "_load_json",
                "_populate_summary",
                "__init__"
            ],
            "classes": {
                "AgentTab": {
                    "methods": [
                        "__init__",
                        "refresh",
                        "display_agent_details"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "QWidget"
                    ]
                },
                "ProjectTab": {
                    "methods": [
                        "__init__",
                        "_load_json",
                        "_populate_summary"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "QWidget"
                    ]
                },
                "Dashboard": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "QMainWindow"
                    ]
                }
            },
            "imports": [
                "json",
                "sys",
                "time",
                "pathlib",
                "PyQt5.QtCore",
                "PyQt5.QtWidgets"
            ],
            "complexity": 14
        },
        "archive\\orphans\\agents\\agent9_response_injector.py": {
            "language": ".py",
            "functions": [
                "__init__"
            ],
            "classes": {
                "Agent9ResponseInjector": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Listens for CHATGPT_RESPONSE_SCRAPED events and triggers Cursor injection tasks.",
                    "base_classes": [
                        "BaseAgent"
                    ]
                }
            },
            "imports": [
                "asyncio",
                "logging",
                "uuid",
                "datetime",
                "dreamos.core.config",
                "dreamos.core.coordination.agent_bus",
                "dreamos.core.coordination.base_agent",
                "dreamos.core.tasks.models",
                "dreamos.coordination.agent_bus",
                "dreamos.coordination.agent_bus"
            ],
            "complexity": 2
        },
        "archive\\orphans\\agents\\autonomy_recovery_patch.py": {
            "language": ".py",
            "functions": [
                "sync_read",
                "sync_write"
            ],
            "classes": {
                "AgentStateError": {
                    "methods": [],
                    "docstring": "Custom exception for agent state issues.",
                    "base_classes": [
                        "Exception"
                    ]
                }
            },
            "imports": [
                "asyncio",
                "json",
                "logging",
                "os",
                "datetime"
            ],
            "complexity": 3
        },
        "archive\\orphans\\agents\\base_agent.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "status"
            ],
            "classes": {
                "BaseAgent": {
                    "methods": [
                        "__init__",
                        "status"
                    ],
                    "docstring": "Abstract base class for all DreamOS agents.",
                    "base_classes": [
                        "ABC"
                    ]
                }
            },
            "imports": [
                "asyncio",
                "logging",
                "abc",
                "pathlib",
                "typing",
                "dreamos.core.comms.mailbox_utils",
                "dreamos.core.config",
                "dreamos.core.coordination.agent_bus",
                "utils.agent_utils"
            ],
            "complexity": 3
        },
        "archive\\orphans\\agents\\chatgpt_web_agent.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_initialize_browser",
                "_is_result_injected",
                "_mark_result_injected",
                "_get_and_cache_results",
                "sync_inject_and_selenium_send",
                "sync_scrape",
                "sync_close",
                "sync_read",
                "sync_write",
                "sync_read_prompt",
                "sync_scrape"
            ],
            "classes": {
                "ChatGPTWebAgent": {
                    "methods": [
                        "__init__",
                        "_initialize_browser",
                        "_is_result_injected",
                        "_mark_result_injected",
                        "_get_and_cache_results"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "imports": [
                "asyncio",
                "json",
                "logging",
                "time",
                "pathlib",
                "typing",
                "dreamos.core.config",
                "dreamos.core.tasks.nexus.task_nexus",
                "dreamos.utils.dream_mode_utils.browser",
                "dreamos.utils.dream_mode_utils.html_parser",
                "dreamos.utils.dream_mode_utils.task_parser",
                "dreamos.utils.gui_utils",
                "pyautogui",
                "pygetwindow",
                "selenium.common.exceptions",
                "selenium.webdriver.common.by",
                "dreamos.core.c2.local_blob_channel"
            ],
            "complexity": 13
        },
        "archive\\orphans\\agents\\context_router_agent.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load_routing_rules",
                "_determine_target_agent"
            ],
            "classes": {
                "ContextRouterAgent": {
                    "methods": [
                        "__init__",
                        "_load_routing_rules",
                        "_determine_target_agent"
                    ],
                    "docstring": "Dynamically routes incoming requests (e.g., scraped prompts)\nto specific target agents based on context metadata.",
                    "base_classes": [
                        "BaseAgent"
                    ]
                }
            },
            "imports": [
                "logging",
                "typing",
                "coordination.event_payloads",
                "core.config",
                "core.coordination.agent_bus",
                "base_agent"
            ],
            "complexity": 4
        },
        "archive\\orphans\\agents\\cursor_worker.py": {
            "language": ".py",
            "functions": [
                "run",
                "pull_tasks",
                "push_result",
                "click_button",
                "wait_for_idle",
                "process_task_ui"
            ],
            "classes": {
                "TaskChannel": {
                    "methods": [
                        "pull_tasks",
                        "push_result"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "imports": [
                "logging",
                "os",
                "time",
                "core.bots.orchestrator_bot",
                "core.config",
                "sys",
                "core.config"
            ],
            "complexity": 7
        },
        "archive\\orphans\\agents\\recovery_coordinator.py": {
            "language": ".py",
            "functions": [
                "__init__"
            ],
            "classes": {
                "RecoveryCoordinatorAgent": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Monitors for failed and timed-out tasks.\nAttempts retries for failed tasks based on a configured strategy.\nMarks tasks as permanently failed if retries are exhausted or critical errors occur.\nMarks tasks as failed if they run longer than the configured timeout.",
                    "base_classes": [
                        "BaseAgent"
                    ]
                }
            },
            "imports": [
                "__future__",
                "asyncio",
                "logging",
                "datetime",
                "typing",
                "dreamos.core.coordination.agent_bus",
                "dreamos.core.coordination.base_agent",
                "dreamos.core.coordination.enums",
                "dreamos.core.logging.swarm_logger",
                "dreamos.core.memory.task_memory_api"
            ],
            "complexity": 2
        },
        "archive\\orphans\\agents\\shadow_task_nexus.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load",
                "_save",
                "get_next_task",
                "add_task",
                "update_task_status",
                "get_all_tasks",
                "stats",
                "get_task_by_id",
                "remove_task"
            ],
            "classes": {
                "ShadowTaskNexus": {
                    "methods": [
                        "__init__",
                        "_load",
                        "_save",
                        "get_next_task",
                        "add_task",
                        "update_task_status",
                        "get_all_tasks",
                        "stats",
                        "get_task_by_id",
                        "remove_task"
                    ],
                    "docstring": "Fallback task queue for Agent-1, mirroring TaskNexus but using shadow_backlog.json.",
                    "base_classes": []
                },
                "Task": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "BaseModel"
                    ]
                }
            },
            "imports": [
                "json",
                "logging",
                "threading",
                "collections",
                "datetime",
                "pathlib",
                "typing",
                "pydantic",
                "dreamos.core.config",
                "dreamos.core.tasks.nexus.task_nexus",
                "core.config"
            ],
            "complexity": 12
        },
        "archive\\orphans\\agents\\supervisor_agent.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "load_directives",
                "dispatch_tasks",
                "gather_results",
                "save_results",
                "run_loop"
            ],
            "classes": {
                "SupervisorAgent": {
                    "methods": [
                        "__init__",
                        "load_directives",
                        "dispatch_tasks",
                        "gather_results",
                        "save_results",
                        "run_loop"
                    ],
                    "docstring": "Orchestrates tasks between ChatGPT WebAgents and Cursor workers.",
                    "base_classes": []
                }
            },
            "imports": [
                "json",
                "logging",
                "os",
                "tempfile",
                "time",
                "pathlib",
                "typing",
                "dreamos.channels.local_blob_channel",
                "dreamos.core.config",
                "dreamos.core.errors"
            ],
            "complexity": 7
        },
        "archive\\orphans\\agents\\task_feedback_router.py": {
            "language": ".py",
            "functions": [
                "find_task_file",
                "route_feedback",
                "run_loop"
            ],
            "classes": {},
            "imports": [
                "json",
                "logging",
                "shutil",
                "pathlib"
            ],
            "complexity": 3
        },
        "archive\\orphans\\agents\\utils.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "imports": [],
            "complexity": 0
        },
        "archive\\orphans\\agents\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "imports": [],
            "complexity": 0
        },
        "archive\\orphans\\agents\\agents\\task_executor_agent.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load_tasks",
                "_check_dependencies",
                "handle_response",
                "run_cycle"
            ],
            "classes": {
                "TaskStatus": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": []
                },
                "TaskExecutorAgent": {
                    "methods": [
                        "__init__",
                        "_load_tasks",
                        "_check_dependencies",
                        "handle_response",
                        "run_cycle"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "imports": [
                "json",
                "logging",
                "os"
            ],
            "complexity": 7
        },
        "archive\\orphans\\agents\\agents\\tool_executor_agent.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "execute_plan"
            ],
            "classes": {
                "ToolExecutionAgent": {
                    "methods": [
                        "__init__",
                        "execute_plan"
                    ],
                    "docstring": "Executes a plan (list of tool call steps) sequentially.",
                    "base_classes": []
                }
            },
            "imports": [
                "json",
                "logging",
                "os",
                "typing",
                "dreamos.core.events.base_event",
                "dreamos.tools._core.base",
                "dreamos.tools.registry"
            ],
            "complexity": 3
        },
        "archive\\orphans\\agents\\agents\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "imports": [],
            "complexity": 0,
            "error": "invalid syntax (<unknown>, line 3)"
        },
        "archive\\orphans\\agents\\library\\agent_devlog.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_get_default_template",
                "_format_log_entry",
                "_append_entry"
            ],
            "classes": {
                "AgentDevlog": {
                    "methods": [
                        "__init__",
                        "_get_default_template",
                        "_format_log_entry",
                        "_append_entry"
                    ],
                    "docstring": "An agent that listens to the AgentBus and automatically logs significant events to a daily devlog file.",
                    "base_classes": [
                        "BaseAgent"
                    ]
                }
            },
            "imports": [
                "asyncio",
                "json",
                "logging",
                "datetime",
                "pathlib",
                "typing",
                "dreamos.core.agents.base_agent",
                "dreamos.core.config",
                "dreamos.core.coordination.agent_bus",
                "dreamos.core.coordination.event_types",
                "filelock"
            ],
            "complexity": 5
        },
        "archive\\orphans\\agents\\library\\agent_lore_writer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "check_mailbox",
                "generate_lore",
                "write_lore",
                "run_cycle"
            ],
            "classes": {
                "AgentLoreWriter": {
                    "methods": [
                        "__init__",
                        "check_mailbox",
                        "generate_lore",
                        "write_lore",
                        "run_cycle"
                    ],
                    "docstring": "Minimal Lore Writer Agent Scaffold.",
                    "base_classes": []
                }
            },
            "imports": [
                "json",
                "logging",
                "time",
                "pathlib",
                "random"
            ],
            "complexity": 6
        },
        "archive\\orphans\\agents\\library\\task_promoter_agent.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_get_completed_task_ids",
                "_get_pending_backlog_tasks",
                "promote_eligible_tasks",
                "run_standalone"
            ],
            "classes": {
                "TaskPromoterAgent": {
                    "methods": [
                        "__init__",
                        "_get_completed_task_ids",
                        "_get_pending_backlog_tasks",
                        "promote_eligible_tasks",
                        "run_standalone"
                    ],
                    "docstring": "An agent that periodically scans the task backlog and promotes tasks\nto the ready queue if their dependencies are met.",
                    "base_classes": [
                        "BaseAgent"
                    ]
                }
            },
            "imports": [
                "asyncio",
                "logging",
                "time",
                "typing",
                "dreamos.core.config",
                "dreamos.core.coordination.base_agent",
                "dreamos.core.coordination.project_board_manager"
            ],
            "complexity": 6
        },
        "archive\\orphans\\agents\\library\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "imports": [],
            "complexity": 0,
            "error": "invalid syntax (<unknown>, line 8)"
        },
        "archive\\orphans\\agents\\mixins\\voting.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "decide_vote"
            ],
            "classes": {
                "AgentVoterMixin": {
                    "methods": [
                        "__init__",
                        "decide_vote"
                    ],
                    "docstring": "A mixin for Agents to automatically participate in voting sessions using standard pub/sub.\n\nAgents using this mixin should have `agent_id`, `agent_bus` attributes.\nSubscribes to VOTE_INITIATED_TOPIC and publishes votes to VOTE_CAST_TOPIC.\nProvides a default handler to cast a simple vote.",
                    "base_classes": []
                }
            },
            "imports": [
                "logging",
                "datetime",
                "typing",
                "dreamos.core.coordination.event_types",
                "dreamos.core.coordination.schemas.voting_patterns"
            ],
            "complexity": 3
        },
        "archive\\orphans\\agents\\mixins\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "imports": [],
            "complexity": 0,
            "error": "invalid syntax (<unknown>, line 4)"
        },
        "archive\\orphans\\agents\\utils\\agent_utils.py": {
            "language": ".py",
            "functions": [
                "log_task_performance",
                "format_agent_report",
                "example_agent_util_function",
                "_task_done_callback"
            ],
            "classes": {},
            "imports": [
                "asyncio",
                "logging",
                "traceback",
                "typing",
                "dreamos.core.coordination.agent_bus",
                "dreamos.core.coordination.event_payloads",
                "dreamos.core.coordination.event_types",
                "dreamos.core.coordination.message_patterns",
                "monitoring.performance_logger",
                "utils.common_utils"
            ],
            "complexity": 4
        },
        "archive\\orphans\\agents\\utils\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "imports": [],
            "complexity": 0
        },
        "archive\\orphans\\agents\\validation\\offline_validation_agent.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_calculate_sha256",
                "load_validation_matrix",
                "_check_file_age",
                "_check_file_size",
                "_check_json_validity",
                "_check_python_compilation",
                "_attempt_repair",
                "run_validation_check",
                "run_scan_cycle",
                "log_specific_failure",
                "log_validation_failure",
                "log_scan_summary"
            ],
            "classes": {
                "OfflineValidationAgent": {
                    "methods": [
                        "__init__",
                        "_calculate_sha256",
                        "load_validation_matrix",
                        "_check_file_age",
                        "_check_file_size",
                        "_check_json_validity",
                        "_check_python_compilation",
                        "_attempt_repair",
                        "run_validation_check",
                        "run_scan_cycle",
                        "log_specific_failure",
                        "log_validation_failure",
                        "log_scan_summary"
                    ],
                    "docstring": "Scans for tool output vs. file state consistency. Includes auto-repair.",
                    "base_classes": []
                }
            },
            "imports": [
                "argparse",
                "hashlib",
                "json",
                "logging",
                "shutil",
                "datetime",
                "pathlib",
                "jsonschema",
                "py_compile"
            ],
            "complexity": 14
        },
        "archive\\orphans\\apps\\dreamscape\\dreamscape_generator\\main.py": {
            "language": ".py",
            "functions": [
                "run_generation"
            ],
            "classes": {},
            "imports": [
                "logging",
                "os",
                "sys",
                "dreamos.core.config",
                "src.core.MemoryManager",
                "src.story_generator"
            ],
            "complexity": 1
        },
        "archive\\orphans\\apps\\dreamscape\\dreamscape_generator\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "imports": [],
            "complexity": 0,
            "error": "invalid syntax (<unknown>, line 3)"
        },
        "archive\\orphans\\automation\\bridge_loop.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "imports": [
                "asyncio",
                "logging",
                "time",
                "typing",
                "tenacity",
                "dreamos.automation.cursor_orchestrator",
                "dreamos.core.config",
                "dreamos.core.errors"
            ],
            "complexity": 0
        },
        "archive\\orphans\\automation\\config.py": {
            "language": ".py",
            "functions": [
                "_find_project_root_marker_for_automation"
            ],
            "classes": {
                "GuiAutomationConfig": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "BaseModel"
                    ]
                },
                "TheaCopyConfig": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "BaseModel"
                    ]
                }
            },
            "imports": [
                "pathlib",
                "pydantic"
            ],
            "complexity": 3
        },
        "archive\\orphans\\automation\\cursor_orchestrator.py": {
            "language": ".py",
            "functions": [
                "__new__",
                "__init__",
                "_load_all_coordinates",
                "_initialize_agent_status",
                "_check_and_recover_focus",
                "_perform_injection_sequence",
                "_perform_copy_sequence",
                "_perform_health_check_click",
                "_log_retry_attempt",
                "injection_task"
            ],
            "classes": {
                "CursorOrchestratorError": {
                    "methods": [],
                    "docstring": "Custom exception for Cursor Orchestrator errors.",
                    "base_classes": [
                        "CoreToolError"
                    ]
                },
                "CursorOrchestrator": {
                    "methods": [
                        "__new__",
                        "__init__",
                        "_load_all_coordinates",
                        "_initialize_agent_status",
                        "_check_and_recover_focus",
                        "_perform_injection_sequence",
                        "_perform_copy_sequence",
                        "_perform_health_check_click",
                        "_log_retry_attempt"
                    ],
                    "docstring": "Manages interaction with multiple Cursor UI instances.\n\nProvides methods to inject prompts, retrieve responses, and manage the state\nof Cursor windows associated with specific agent IDs. Operates as a singleton.\nHandles coordinate loading and orchestrates UI automation via pyautogui/pyperclip.",
                    "base_classes": []
                }
            },
            "imports": [
                "asyncio",
                "json",
                "logging",
                "time",
                "pathlib",
                "typing",
                "tenacity",
                "dreamos.core.config",
                "dreamos.core.coordination.agent_bus",
                "dreamos.core.coordination.event_payloads",
                "dreamos.core.coordination.event_types",
                "dreamos.core.errors",
                "dreamos.utils.decorators",
                "dreamos.utils.gui_utils",
                "pyautogui",
                "pyperclip",
                "pyautogui",
                "pyperclip",
                "pygetwindow"
            ],
            "complexity": 12
        },
        "archive\\orphans\\automation\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "imports": [],
            "complexity": 0,
            "error": "invalid syntax (<unknown>, line 4)"
        },
        "archive\\orphans\\automation\\execution\\agent_factory.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "create_active_agents"
            ],
            "classes": {
                "AgentFactoryError": {
                    "methods": [],
                    "docstring": "Custom exception for agent factory errors.",
                    "base_classes": [
                        "Exception"
                    ]
                },
                "AgentFactory": {
                    "methods": [
                        "__init__",
                        "create_active_agents"
                    ],
                    "docstring": "Handles the dynamic loading and instantiation of agents.",
                    "base_classes": []
                }
            },
            "imports": [
                "importlib",
                "logging",
                "typing",
                "dreamos.core.agents.base_agent",
                "dreamos.core.config",
                "dreamos.core.coordination.agent_bus",
                "dreamos.core.coordination.project_board_manager",
                "dreamos.core.db.sqlite_adapter"
            ],
            "complexity": 4
        },
        "archive\\orphans\\automation\\execution\\dream_mode_sleep.py": {
            "language": ".py",
            "functions": [
                "run_chatgpt_web_agent",
                "run_cursor_dispatcher",
                "run_task_feedback_router"
            ],
            "classes": {},
            "imports": [
                "sys",
                "pathlib",
                "logging",
                "threading",
                "time",
                "agents"
            ],
            "complexity": 3
        },
        "archive\\orphans\\automation\\execution\\swarm_controller.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "start",
                "shutdown",
                "_spawn_thread",
                "_run_cursor_orchestrator_listener_async",
                "_worker_loop",
                "_maybe_launch_headless_cursor",
                "_route_loop",
                "_run_feedback_engine",
                "_persist_lore_metadata",
                "_compile_lore",
                "_start_stats_autologger",
                "_stats_loop",
                "_process_agent_output",
                "_handle_agent_error",
                "_load_initial_captain_id"
            ],
            "classes": {
                "SwarmController": {
                    "methods": [
                        "__init__",
                        "start",
                        "shutdown",
                        "_spawn_thread",
                        "_run_cursor_orchestrator_listener_async",
                        "_worker_loop",
                        "_maybe_launch_headless_cursor",
                        "_route_loop",
                        "_run_feedback_engine",
                        "_persist_lore_metadata",
                        "_compile_lore",
                        "_start_stats_autologger",
                        "_stats_loop",
                        "_process_agent_output",
                        "_handle_agent_error",
                        "_load_initial_captain_id"
                    ],
                    "docstring": "Top-level coordinator for Cursor agents (GUI & headless).",
                    "base_classes": []
                }
            },
            "imports": [
                "__future__",
                "asyncio",
                "datetime",
                "json",
                "logging",
                "subprocess",
                "sys",
                "threading",
                "time",
                "pathlib",
                "typing",
                "dreamos.agents.chatgpt_web_agent",
                "dreamos.core.config",
                "dreamos.core.tasks.nexus.db_task_nexus",
                "dreamos.core.db.sqlite_adapter",
                "dreamos.core.coordination.agent_bus",
                "dreamos.core.coordination.event_types",
                "dreamos.core.agents.base_agent",
                "dreamos.feedback.feedback_engine_v2",
                "dreamos.hooks.stats_logger",
                "dreamos.hooks.devlog_hook",
                "dreamos.automation.cursor_orchestrator",
                "dreamos.channels.local_blob_channel",
                "cursor_fleet_launcher",
                "virtual_desktop_runner",
                "dreamos.coordination.project_board_manager",
                "dreamos.tools.task_editor",
                "dreamos.reporting.devlog_utils",
                "agent_factory"
            ],
            "complexity": 17
        },
        "archive\\orphans\\automation\\execution\\virtual_desktop_runner.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "launch_cursor_headless",
                "inject_keystrokes",
                "teardown"
            ],
            "classes": {
                "VirtualDesktopController": {
                    "methods": [
                        "__init__",
                        "launch_cursor_headless",
                        "inject_keystrokes",
                        "teardown"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "imports": [
                "os",
                "platform",
                "subprocess",
                "sys",
                "time",
                "pyautogui",
                "pyvirtualdisplay",
                "pyautogui",
                "pyvda",
                "pyvirtualdisplay",
                "pyvda"
            ],
            "complexity": 5
        },
        "archive\\orphans\\automation\\execution\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "imports": [],
            "complexity": 0
        },
        "archive\\orphans\\bridge\\bridge_loop.py": {
            "language": ".py",
            "functions": [
                "call_gpt_api",
                "write_bridge_output",
                "log_failure_trace",
                "relay_prompt_to_gpt",
                "get_file_mtime",
                "main_loop",
                "log_interaction"
            ],
            "classes": {},
            "imports": [
                "asyncio",
                "datetime",
                "json",
                "logging",
                "os",
                "sys",
                "time",
                "uuid",
                "pathlib",
                "yaml",
                "dreamos.agents.chatgpt_web_agent",
                "dreamos.core.config",
                "dreamos.core.tasks.nexus.task_nexus",
                "scraper"
            ],
            "complexity": 7
        },
        "archive\\orphans\\bridge\\http_bridge_service.py": {
            "language": ".py",
            "functions": [],
            "classes": {
                "InteractRequest": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "BaseModel"
                    ]
                },
                "InteractResponse": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "BaseModel"
                    ]
                },
                "ErrorResponse": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "BaseModel"
                    ]
                }
            },
            "imports": [
                "logging",
                "typing",
                "fastapi",
                "pydantic",
                "dreamos.core.config",
                "dreamos.tools.cursor_bridge.cursor_bridge",
                "uvicorn"
            ],
            "complexity": 3
        },
        "archive\\orphans\\bridge\\run_bridge_loop.py": {
            "language": ".py",
            "functions": [
                "cli",
                "__init__",
                "_default_queue_fn",
                "run",
                "_load_prompts",
                "_persist_response",
                "_sigint_handler"
            ],
            "classes": {
                "BridgeLoop": {
                    "methods": [
                        "__init__",
                        "_default_queue_fn",
                        "run",
                        "_load_prompts",
                        "_persist_response",
                        "_sigint_handler"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "imports": [
                "argparse",
                "json",
                "logging",
                "os",
                "signal",
                "sys",
                "datetime",
                "pathlib",
                "typing",
                "dreamos.core.config",
                "dreamos.services.utils.chatgpt_scraper",
                "dreamos.cli.cursor_injector"
            ],
            "complexity": 8
        },
        "archive\\orphans\\bridge\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "imports": [],
            "complexity": 0,
            "error": "invalid syntax (<unknown>, line 17)"
        },
        "archive\\orphans\\channels\\azure_blob_channel.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "push",
                "pull"
            ],
            "classes": {
                "AzureBlobChannel": {
                    "methods": [
                        "__init__",
                        "push",
                        "pull"
                    ],
                    "docstring": "Placeholder for Azure Blob Channel.",
                    "base_classes": []
                }
            },
            "imports": [
                "logging",
                "typing"
            ],
            "complexity": 4
        },
        "archive\\orphans\\channels\\local_blob_channel.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_get_full_path",
                "push",
                "pull",
                "healthcheck"
            ],
            "classes": {
                "LocalBlobChannel": {
                    "methods": [
                        "__init__",
                        "_get_full_path",
                        "push",
                        "pull",
                        "healthcheck"
                    ],
                    "docstring": "Placeholder for Local Blob Channel (File System based).",
                    "base_classes": []
                }
            },
            "imports": [
                "json",
                "logging",
                "os",
                "pathlib",
                "typing"
            ],
            "complexity": 6
        },
        "archive\\orphans\\chat_engine\\base_chat_adapter.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "imports": [],
            "complexity": 0
        },
        "archive\\orphans\\chat_engine\\chat_cycle_controller.py": {
            "language": ".py",
            "functions": [
                "sanitize_filename",
                "__init__",
                "_default_output_callback",
                "append_output",
                "start",
                "process_chat",
                "run_single_chat",
                "_save_prompt_response",
                "_save_run_summary",
                "shutdown",
                "__init__",
                "get"
            ],
            "classes": {
                "ChatCycleController": {
                    "methods": [
                        "__init__",
                        "_default_output_callback",
                        "append_output",
                        "start",
                        "process_chat",
                        "run_single_chat",
                        "_save_prompt_response",
                        "_save_run_summary",
                        "shutdown"
                    ],
                    "docstring": "Master orchestrator for chat scraping, prompt cycles,\nmemory updates, and Discord dispatching.",
                    "base_classes": []
                },
                "Config": {
                    "methods": [
                        "__init__",
                        "get"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "imports": [
                "json",
                "logging",
                "os",
                "threading",
                "time",
                "datetime",
                "dreamos.chat_engine.chat_scraper_service",
                "dreamos.chat_engine.discord_dispatcher",
                "dreamos.chat_engine.prompt_execution_service",
                "dreamos.feedback.feedback_engine",
                "chat_mate_config"
            ],
            "complexity": 14
        },
        "archive\\orphans\\chat_engine\\chat_scraper_service.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "get_all_chats",
                "get_filtered_chats",
                "validate_login",
                "manual_login_flow"
            ],
            "classes": {
                "ChatScraperService": {
                    "methods": [
                        "__init__",
                        "get_all_chats",
                        "get_filtered_chats",
                        "validate_login",
                        "manual_login_flow"
                    ],
                    "docstring": "ChatScraperService retrieves available chat titles and links from the chat UI.\nIt handles exclusions and filtering for downstream execution cycles.",
                    "base_classes": []
                }
            },
            "imports": [
                "logging",
                "time"
            ],
            "complexity": 6
        },
        "archive\\orphans\\chat_engine\\discord_dispatcher.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_setup_events",
                "send_message",
                "dispatch_memory_update",
                "dispatch_dreamscape_episode",
                "dispatch_feedback_loop",
                "run_bot",
                "shutdown"
            ],
            "classes": {
                "DiscordDispatcher": {
                    "methods": [
                        "__init__",
                        "_setup_events",
                        "send_message",
                        "dispatch_memory_update",
                        "dispatch_dreamscape_episode",
                        "dispatch_feedback_loop",
                        "run_bot",
                        "shutdown"
                    ],
                    "docstring": "DiscordDispatcher - Manages communication to a Discord server.\nSends updates on system events, memory updates, and AI output.",
                    "base_classes": []
                }
            },
            "imports": [
                "asyncio",
                "logging",
                "discord",
                "discord.ext"
            ],
            "complexity": 9
        },
        "archive\\orphans\\chat_engine\\driver_manager.py": {
            "language": ".py",
            "functions": [
                "setup_logger",
                "example_main",
                "get_instance",
                "__init__",
                "__enter__",
                "__exit__",
                "_get_cached_driver_path",
                "_download_driver_if_needed",
                "_is_session_expired",
                "_renew_driver_session",
                "get_session_info",
                "set_session_timeout",
                "_create_chrome_options",
                "get_driver",
                "_quit_driver_instance",
                "release_driver",
                "save_cookies",
                "load_cookies",
                "clear_cookies",
                "is_logged_in",
                "execute_with_retry",
                "scroll_into_view",
                "scroll_page",
                "scroll_to_bottom_smoothly",
                "update_options",
                "shutdown",
                "_force_kill_browsers",
                "__del__"
            ],
            "classes": {
                "DriverManager": {
                    "methods": [
                        "get_instance",
                        "__init__",
                        "__enter__",
                        "__exit__",
                        "_get_cached_driver_path",
                        "_download_driver_if_needed",
                        "_is_session_expired",
                        "_renew_driver_session",
                        "get_session_info",
                        "set_session_timeout",
                        "_create_chrome_options",
                        "get_driver",
                        "_quit_driver_instance",
                        "release_driver",
                        "save_cookies",
                        "load_cookies",
                        "clear_cookies",
                        "is_logged_in",
                        "execute_with_retry",
                        "scroll_into_view",
                        "scroll_page",
                        "scroll_to_bottom_smoothly",
                        "update_options",
                        "shutdown",
                        "_force_kill_browsers",
                        "__del__"
                    ],
                    "docstring": "Unified DriverManager for Selenium-based browser automation.\n\nFeatures:\n  - Singleton pattern to ensure a single active driver instance per configuration hash\n  - Session management with automatic expiration (default 1 hour) and renewal\n  - Persistent profile support (or temporary profiles in headless mode)\n  - Cookie saving/loading for session persistence\n  - Support for headless mode, mobile emulation, and optional undetected mode\n  - Auto-downloading and caching of the ChromeDriver executable\n  - Robust retry mechanisms for resilient browser operations\n  - Utilities for waiting, scrolling, and option updates",
                    "base_classes": []
                }
            },
            "imports": [
                "logging",
                "os",
                "pickle",
                "shutil",
                "sys",
                "tempfile",
                "threading",
                "time",
                "datetime",
                "typing",
                "selenium",
                "selenium.webdriver.chrome.options",
                "selenium.webdriver.chrome.service",
                "selenium.webdriver.common.by",
                "selenium.webdriver.support",
                "selenium.webdriver.support.ui",
                "webdriver_manager.chrome",
                "undetected_chromedriver",
                "platform",
                "subprocess"
            ],
            "complexity": 29
        },
        "archive\\orphans\\chat_engine\\feedback_engine.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load_memory",
                "_save_memory",
                "save_memory_async",
                "parse_and_update_memory",
                "apply_memory_updates",
                "log_feedback",
                "export_feedback_log",
                "analyze_feedback",
                "review_memory",
                "feedback_loop",
                "save_context_memory_async",
                "save_context_db",
                "review_context_memory"
            ],
            "classes": {
                "FeedbackEngine": {
                    "methods": [
                        "__init__",
                        "_load_memory",
                        "_save_memory",
                        "save_memory_async",
                        "parse_and_update_memory",
                        "apply_memory_updates",
                        "log_feedback",
                        "export_feedback_log",
                        "analyze_feedback",
                        "review_memory",
                        "feedback_loop",
                        "save_context_memory_async",
                        "save_context_db",
                        "review_context_memory"
                    ],
                    "docstring": "FeedbackEngine - Parses AI responses, updates persistent memory,\ntracks reinforcement loops, and evolves Victor.OS intelligence.",
                    "base_classes": []
                }
            },
            "imports": [
                "logging",
                "os",
                "threading",
                "concurrent.futures",
                "datetime",
                "typing"
            ],
            "complexity": 15
        },
        "archive\\orphans\\chat_engine\\feedback_engine_v2.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "save_analysis"
            ],
            "classes": {
                "FeedbackEngineV2": {
                    "methods": [
                        "__init__",
                        "save_analysis"
                    ],
                    "docstring": "FeedbackEngineV2 analyzes failed prompts using an LLM and provides root cause analysis\nand recommended fixes based on archived failure data.",
                    "base_classes": []
                }
            },
            "imports": [
                "asyncio",
                "json",
                "logging",
                "pathlib",
                "typing",
                "dreamos.core.config",
                "dreamos.integrations.openai_client",
                "dreamos.services.prompt_archive"
            ],
            "complexity": 3
        },
        "archive\\orphans\\chat_engine\\gui_event_handler.py": {
            "language": ".py",
            "functions": [
                "run_gui",
                "__init__",
                "init_ui",
                "toggle_headless",
                "toggle_reverse",
                "toggle_archive",
                "start_dispatcher",
                "stop_dispatcher",
                "log",
                "__init__",
                "exec_",
                "__init__",
                "__init__",
                "__init__",
                "__init__",
                "__init__"
            ],
            "classes": {
                "GUIEventHandler": {
                    "methods": [
                        "__init__",
                        "init_ui",
                        "toggle_headless",
                        "toggle_reverse",
                        "toggle_archive",
                        "start_dispatcher",
                        "stop_dispatcher",
                        "log"
                    ],
                    "docstring": "GUI Event Handler for ChatMate Agent Control Panel\n- Control Config Flags (Headless, Reverse Order, Archive)\n- Start/Stop the Agent Dispatcher\n- Display logs or status updates",
                    "base_classes": [
                        "QMainWindow"
                    ]
                },
                "QtWidgets": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": []
                },
                "QtCore": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": []
                },
                "QApplication": {
                    "methods": [
                        "__init__",
                        "exec_"
                    ],
                    "docstring": null,
                    "base_classes": []
                },
                "QMainWindow": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": null,
                    "base_classes": []
                },
                "QPushButton": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": null,
                    "base_classes": []
                },
                "QLabel": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": null,
                    "base_classes": []
                },
                "QCheckBox": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": null,
                    "base_classes": []
                },
                "QTextEdit": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "imports": [
                "sys",
                "PyQt5",
                "PyQt5.QtWidgets"
            ],
            "complexity": 25
        },
        "archive\\orphans\\chat_engine\\prompt_execution_service.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "get_prompt",
                "execute_prompt_cycle",
                "execute_prompts_single_chat",
                "execute_prompts_concurrently",
                "_execute_single_prompt_thread",
                "_determine_wait_time",
                "_post_process_jawbone_response",
                "_send_prompt",
                "_fetch_response",
                "send_prompt_and_wait"
            ],
            "classes": {
                "PromptExecutionService": {
                    "methods": [
                        "__init__",
                        "get_prompt",
                        "execute_prompt_cycle",
                        "execute_prompts_single_chat",
                        "execute_prompts_concurrently",
                        "_execute_single_prompt_thread",
                        "_determine_wait_time",
                        "_post_process_jawbone_response",
                        "_send_prompt",
                        "_fetch_response",
                        "send_prompt_and_wait"
                    ],
                    "docstring": "PromptExecutionService handles sending prompts and retrieving responses.\nIt manages execution cycles for single chats or cycles across multiple prompts.\nNow supports model switching, feedback integration, and parallel execution.",
                    "base_classes": []
                }
            },
            "imports": [
                "logging",
                "threading",
                "time"
            ],
            "complexity": 12
        },
        "archive\\orphans\\chat_engine\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "imports": [],
            "complexity": 0,
            "error": "invalid syntax (<unknown>, line 4)"
        },
        "archive\\orphans\\cli\\bridge_diagnostic.py": {
            "language": ".py",
            "functions": [
                "run_diagnostic"
            ],
            "classes": {},
            "imports": [
                "asyncio",
                "logging",
                "unittest.mock",
                "click",
                "dreamos.automation.cursor_orchestrator",
                "dreamos.core.config",
                "dreamos.core.errors",
                "dreamos.utils.project_root"
            ],
            "complexity": 1
        },
        "archive\\orphans\\cli\\calibrate_gui_coords.py": {
            "language": ".py",
            "functions": [
                "load_coords",
                "save_coords",
                "calibrate_coordinates",
                "main"
            ],
            "classes": {},
            "imports": [
                "argparse",
                "json",
                "os",
                "time",
                "pathlib",
                "pyautogui"
            ],
            "complexity": 4
        },
        "archive\\orphans\\cli\\cursor_injector.py": {
            "language": ".py",
            "functions": [
                "get_cli_settings",
                "_cli_next_prompt_file",
                "_cli_mark_processed",
                "_cli_ensure_focus",
                "_cli_type_or_paste",
                "_cli_inject_single",
                "_cli_loop",
                "_build_cli_parser",
                "cli_main",
                "__init__",
                "_pause",
                "focus_window",
                "_type_or_paste",
                "type_text"
            ],
            "classes": {
                "CLISettings": {
                    "methods": [],
                    "docstring": "Runtime configuration container for CLI script operations.",
                    "base_classes": []
                },
                "CursorInjector": {
                    "methods": [
                        "__init__",
                        "_pause",
                        "focus_window",
                        "_type_or_paste",
                        "type_text"
                    ],
                    "docstring": "Handles direct GUI interactions with the Cursor application window.",
                    "base_classes": []
                }
            },
            "imports": [
                "__future__",
                "argparse",
                "logging",
                "os",
                "random",
                "sys",
                "time",
                "dataclasses",
                "pathlib",
                "typing",
                "pyautogui",
                "dreamos.utils.gui_utils",
                "dreamos.utils.project_root",
                "pyperclip",
                "pygetwindow",
                "pyperclip"
            ],
            "complexity": 16
        },
        "archive\\orphans\\cli\\dreamscape_controller.py": {
            "language": ".py",
            "functions": [
                "setup_logging",
                "load_deployment_config",
                "load_agent_prompt",
                "initialize_agents",
                "run_controller",
                "__init__",
                "__str__",
                "launch",
                "monitor",
                "stop"
            ],
            "classes": {
                "AgentInstance": {
                    "methods": [
                        "__init__",
                        "__str__",
                        "launch",
                        "monitor",
                        "stop"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "imports": [
                "datetime",
                "logging",
                "subprocess",
                "sys",
                "time",
                "pathlib",
                "yaml"
            ],
            "complexity": 11
        },
        "archive\\orphans\\cli\\main.py": {
            "language": ".py",
            "functions": [
                "cli",
                "run"
            ],
            "classes": {},
            "imports": [
                "asyncio",
                "logging",
                "sys",
                "pathlib",
                "click",
                "yaml",
                "dreamos.automation.execution.swarm_controller",
                "dreamos.core.config",
                "dreamos.core.coordination.agent_bus",
                "dreamos.core.db.sqlite_adapter"
            ],
            "complexity": 2
        },
        "archive\\orphans\\cli\\manage_tasks.py": {
            "language": ".py",
            "functions": [
                "cli",
                "claim",
                "update",
                "complete",
                "list_backlog",
                "list_ready",
                "list_working",
                "list_completed",
                "get",
                "add",
                "promote"
            ],
            "classes": {},
            "imports": [
                "json",
                "sys",
                "pathlib",
                "types",
                "click",
                "dreamos.coordination.project_board_manager",
                "dreamos.core.config",
                "dreamos.core.coordination.message_patterns",
                "dreamos.core.errors",
                "dreamos.utils.common_utils"
            ],
            "complexity": 11
        },
        "archive\\orphans\\cli\\run_e2e_bridge_test.py": {
            "language": ".py",
            "functions": [
                "step",
                "assert_file",
                "create_prompt_file",
                "run_bridge_loop",
                "validate_latest_output",
                "main"
            ],
            "classes": {},
            "imports": [
                "json",
                "os",
                "subprocess",
                "sys",
                "datetime",
                "pathlib",
                "dotenv",
                "dreamos.services.utils.chatgpt_scraper"
            ],
            "complexity": 6
        },
        "archive\\orphans\\cli\\safe_edit_json_list.py": {
            "language": ".py",
            "functions": [
                "_atomic_write_json",
                "safe_edit_json_list"
            ],
            "classes": {
                "SafeEditError": {
                    "methods": [],
                    "docstring": "Custom exception for errors during safe JSON list editing.",
                    "base_classes": [
                        "Exception"
                    ]
                }
            },
            "imports": [
                "json",
                "logging",
                "os",
                "sys",
                "uuid",
                "pathlib",
                "typing",
                "click",
                "filelock",
                "jsonschema"
            ],
            "complexity": 3
        },
        "archive\\orphans\\cli\\safe_writer_cli.py": {
            "language": ".py",
            "functions": [
                "safe_write_cli"
            ],
            "classes": {},
            "imports": [
                "logging",
                "os",
                "sys",
                "pathlib",
                "click",
                "dreamos.utils.safe_file_writer",
                "dreamos.core.utils.safe_file_writer"
            ],
            "complexity": 1
        },
        "archive\\orphans\\cli\\state_cmds.py": {
            "language": ".py",
            "functions": [
                "create_snapshot_cmd",
                "list_snapshots_cmd"
            ],
            "classes": {},
            "imports": [
                "logging",
                "pathlib",
                "typing",
                "typer",
                "dreamos.core.config",
                "dreamos.core.state.snapshot_manager",
                "core.config"
            ],
            "complexity": 2
        },
        "archive\\orphans\\cli\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "imports": [],
            "complexity": 0
        },
        "archive\\orphans\\coordination\\dispatcher.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "__init__",
                "register_handler"
            ],
            "classes": {
                "Event": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Minimal Event class stub, likely for import compatibility.",
                    "base_classes": []
                },
                "EventDispatcher": {
                    "methods": [
                        "__init__",
                        "register_handler"
                    ],
                    "docstring": "Minimal EventDispatcher stub, likely for import compatibility.",
                    "base_classes": []
                }
            },
            "imports": [],
            "complexity": 5
        },
        "archive\\orphans\\coordination\\governance_utils.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "imports": [],
            "complexity": 0
        },
        "archive\\orphans\\coordination\\project_board_manager.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_resolve_path",
                "_get_lock",
                "_load_file",
                "_read_board_file",
                "_load_backlog",
                "_load_ready_queue",
                "_load_working_tasks",
                "_load_completed_tasks",
                "_save_backlog",
                "_save_ready_queue",
                "_save_working_tasks",
                "_save_completed_tasks",
                "_load_schema",
                "_validate_task",
                "_find_task_index",
                "_atomic_write",
                "_save_file",
                "get_task",
                "list_backlog_tasks",
                "list_ready_queue_tasks",
                "list_working_tasks",
                "add_task",
                "add_task_to_backlog",
                "_generate_task_id",
                "update_working_task",
                "delete_task",
                "move_task_to_completed",
                "claim_ready_task",
                "promote_task_to_ready",
                "_create_from_cli_args"
            ],
            "classes": {
                "ProjectBoardManager": {
                    "methods": [
                        "__init__",
                        "_resolve_path",
                        "_get_lock",
                        "_load_file",
                        "_read_board_file",
                        "_load_backlog",
                        "_load_ready_queue",
                        "_load_working_tasks",
                        "_load_completed_tasks",
                        "_save_backlog",
                        "_save_ready_queue",
                        "_save_working_tasks",
                        "_save_completed_tasks",
                        "_load_schema",
                        "_validate_task",
                        "_find_task_index",
                        "_atomic_write",
                        "_save_file",
                        "get_task",
                        "list_backlog_tasks",
                        "list_ready_queue_tasks",
                        "list_working_tasks",
                        "add_task",
                        "add_task_to_backlog",
                        "_generate_task_id",
                        "update_working_task",
                        "delete_task",
                        "move_task_to_completed",
                        "claim_ready_task",
                        "promote_task_to_ready",
                        "_create_from_cli_args"
                    ],
                    "docstring": "Manages loading, saving, and modifying tasks on JSON-based project boards.\nEnsures safe concurrent access via file locking.\n\nSupports Backlog, Ready Queue, Working, and Completed boards.",
                    "base_classes": []
                }
            },
            "imports": [
                "argparse",
                "json",
                "logging",
                "os",
                "sys",
                "uuid",
                "pathlib",
                "typing",
                "core.config",
                "core.errors",
                "governance.agent_points_manager",
                "utils.common_utils",
                "filelock",
                "jsonschema"
            ],
            "complexity": 32
        },
        "archive\\orphans\\coordination\\voting_coordinator.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "reset_session"
            ],
            "classes": {
                "VotingCoordinator": {
                    "methods": [
                        "__init__",
                        "reset_session"
                    ],
                    "docstring": "Manages voting sessions initiated within the Dream.OS swarm using standard pub/sub.\n\nListens for events on VOTE_INITIATED_TOPIC, collects votes from VOTE_CAST_TOPIC,\ntallies results based on timeout or quorum, and publishes results to VOTE_RESULTS_TOPIC.",
                    "base_classes": []
                }
            },
            "imports": [
                "asyncio",
                "logging",
                "collections",
                "datetime",
                "typing",
                "dreamos.core.coordination.schemas.voting_patterns",
                "dreamos.utils.common_utils",
                "pydantic",
                "dreamos.core.coordination.agent_bus"
            ],
            "complexity": 3
        },
        "archive\\orphans\\coordination\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "imports": [],
            "complexity": 0,
            "error": "invalid syntax (<unknown>, line 10)"
        },
        "archive\\orphans\\coordination\\dispatchers\\base_dispatcher.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "add_task",
                "execute_task",
                "run_dispatcher_loop",
                "stop",
                "get_status"
            ],
            "classes": {
                "BaseDispatcher": {
                    "methods": [
                        "__init__",
                        "add_task",
                        "execute_task",
                        "run_dispatcher_loop",
                        "stop",
                        "get_status"
                    ],
                    "docstring": "Base dispatcher that manages a task queue and processes tasks.",
                    "base_classes": [
                        "ABC"
                    ]
                }
            },
            "imports": [
                "logging",
                "queue",
                "abc"
            ],
            "complexity": 7
        },
        "archive\\orphans\\coordination\\tasks\\task_utils.py": {
            "language": ".py",
            "functions": [
                "read_tasks",
                "write_tasks",
                "_calculate_task_score",
                "update_task_status"
            ],
            "classes": {},
            "imports": [
                "logging",
                "math",
                "datetime",
                "pathlib",
                "typing",
                "dreamos.utils.common_utils"
            ],
            "complexity": 4
        },
        "archive\\orphans\\coordination\\tasks\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "imports": [],
            "complexity": 0,
            "error": "invalid syntax (<unknown>, line 10)"
        },
        "archive\\orphans\\core\\swarm_sync.py": {
            "language": ".py",
            "functions": [
                "_get_sync_config",
                "_get_state_file_path",
                "read_swarm_state",
                "update_agent_state"
            ],
            "classes": {},
            "imports": [
                "json",
                "logging",
                "os",
                "random",
                "sys",
                "time",
                "uuid",
                "datetime",
                "pathlib",
                "typing",
                "dreamos.identity.store",
                "dreamos.core.config",
                "dreamos.core.config"
            ],
            "complexity": 4
        },
        "archive\\orphans\\core\\agents\\capabilities\\schema.py": {
            "language": ".py",
            "functions": [
                "ensure_datetime_utc"
            ],
            "classes": {
                "CapabilitySchema": {
                    "methods": [],
                    "docstring": "Defines the expected input, output, and error data structures for a capability.",
                    "base_classes": [
                        "BaseModel"
                    ]
                },
                "CapabilityMetadata": {
                    "methods": [],
                    "docstring": "Metadata associated with a capability.",
                    "base_classes": [
                        "BaseModel"
                    ]
                },
                "CapabilityPerformance": {
                    "methods": [],
                    "docstring": "Estimated or measured performance characteristics.",
                    "base_classes": [
                        "BaseModel"
                    ]
                },
                "CapabilityResourceRequirements": {
                    "methods": [],
                    "docstring": "Estimated resource needs for executing the capability.",
                    "base_classes": [
                        "BaseModel"
                    ]
                },
                "AgentCapability": {
                    "methods": [
                        "ensure_datetime_utc"
                    ],
                    "docstring": "Represents a single capability offered by an agent, registered in the central registry.",
                    "base_classes": [
                        "BaseModel"
                    ]
                }
            },
            "imports": [
                "datetime",
                "typing",
                "pydantic"
            ],
            "complexity": 6
        },
        "archive\\orphans\\core\\agents\\capabilities\\library\\debate_management.py": {
            "language": ".py",
            "functions": [
                "debate_initiate_capability"
            ],
            "classes": {
                "PersonaInput": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "TypedDict"
                    ]
                },
                "DebateInitiateInput": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "TypedDict"
                    ]
                },
                "DebateInitiateOutput": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "TypedDict"
                    ]
                }
            },
            "imports": [
                "json",
                "logging",
                "pathlib",
                "typing",
                "uuid",
                "dreamos.core.comms.debate_schemas",
                "dreamos.core.config",
                "filelock"
            ],
            "complexity": 4
        },
        "archive\\orphans\\core\\agents\\capabilities\\library\\meeting_management.py": {
            "language": ".py",
            "functions": [
                "meeting_create_capability",
                "meeting_post_message_capability",
                "meeting_read_messages_capability",
                "meeting_get_info_capability",
                "meeting_join_capability",
                "meeting_vote_capability",
                "meeting_update_state_capability",
                "meeting_discover_capability"
            ],
            "classes": {
                "MeetingCreateInput": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "TypedDict"
                    ]
                },
                "MeetingCreateOutput": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "TypedDict"
                    ]
                },
                "MeetingPostMessageInput": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "TypedDict"
                    ]
                },
                "MeetingPostMessageOutput": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "TypedDict"
                    ]
                },
                "MeetingReadMessagesInput": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "TypedDict"
                    ]
                },
                "MeetingReadMessagesOutput": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "TypedDict"
                    ]
                },
                "MeetingGetInfoInput": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "TypedDict"
                    ]
                },
                "MeetingGetInfoOutput": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "TypedDict"
                    ]
                },
                "MeetingJoinInput": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "TypedDict"
                    ]
                },
                "MeetingJoinOutput": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "TypedDict"
                    ]
                },
                "MeetingVoteInput": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "TypedDict"
                    ]
                },
                "MeetingVoteOutput": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "TypedDict"
                    ]
                },
                "MeetingUpdateStateInput": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "TypedDict"
                    ]
                },
                "MeetingUpdateStateOutput": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "TypedDict"
                    ]
                },
                "MeetingDiscoverInput": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "TypedDict"
                    ]
                },
                "MeetingDiscoverOutput": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "TypedDict"
                    ]
                },
                "MeetingParticipant": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "BaseModel"
                    ]
                },
                "MeetingAgendaItem": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "BaseModel"
                    ]
                },
                "MeetingLogEntry": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "BaseModel"
                    ]
                },
                "MeetingSchema": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "BaseModel"
                    ]
                }
            },
            "imports": [
                "asyncio",
                "json",
                "logging",
                "datetime",
                "pathlib",
                "typing",
                "uuid",
                "dreamos.core.comms.mailbox_utils",
                "dreamos.core.comms.meeting_schemas",
                "dreamos.core.config",
                "dreamos.core.coordination.agent_bus",
                "dreamos.core.coordination.event_payloads",
                "dreamos.core.coordination.event_types",
                "filelock",
                "pydantic"
            ],
            "complexity": 28
        },
        "archive\\orphans\\core\\agents\\capabilities\\library\\narrative_generate.py": {
            "language": ".py",
            "functions": [
                "narrative_generate_episode_capability"
            ],
            "classes": {
                "NarrativeGenerateInput": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "TypedDict"
                    ]
                },
                "NarrativeGenerateOutput": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "TypedDict"
                    ]
                }
            },
            "imports": [
                "logging",
                "datetime",
                "pathlib",
                "typing",
                "dreamos.core.llm.client",
                "dreamos.core.narrative.lore_parser"
            ],
            "complexity": 3
        },
        "archive\\orphans\\core\\agents\\capabilities\\library\\task_rewrite.py": {
            "language": ".py",
            "functions": [
                "get_llm_client",
                "task_rewrite_capability",
                "generate"
            ],
            "classes": {
                "MockLlmClient": {
                    "methods": [
                        "generate"
                    ],
                    "docstring": null,
                    "base_classes": []
                },
                "LlmApiError": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "Exception"
                    ]
                },
                "TaskRewriteInput": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "TypedDict"
                    ]
                },
                "TaskRewriteOutput": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "TypedDict"
                    ]
                }
            },
            "imports": [
                "logging",
                "typing"
            ],
            "complexity": 7
        },
        "archive\\orphans\\core\\agents\\capabilities\\library\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "imports": [],
            "complexity": 0,
            "error": "invalid syntax (<unknown>, line 5)"
        },
        "archive\\orphans\\core\\awareness\\context_manager.py": {
            "language": ".py",
            "functions": [],
            "classes": {
                "ContextManager": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "imports": [],
            "complexity": 1
        },
        "archive\\orphans\\core\\comms\\debate_schemas.py": {
            "language": ".py",
            "functions": [
                "generate_uuid",
                "current_utc_iso"
            ],
            "classes": {
                "DebateInfo": {
                    "methods": [],
                    "docstring": "Basic info about a debate.",
                    "base_classes": [
                        "BaseModel"
                    ]
                },
                "Persona": {
                    "methods": [],
                    "docstring": "Defines the role, stance, and instructions for an agent in a specific debate.",
                    "base_classes": [
                        "BaseModel"
                    ]
                },
                "ArgumentReference": {
                    "methods": [],
                    "docstring": "Reference cited in an argument.",
                    "base_classes": [
                        "BaseModel"
                    ]
                },
                "Argument": {
                    "methods": [],
                    "docstring": "Represents a single contribution (argument) by an agent during a debate turn.",
                    "base_classes": [
                        "BaseModel"
                    ]
                },
                "DebateParticipantInfo": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "BaseModel"
                    ]
                },
                "DebateManifest": {
                    "methods": [],
                    "docstring": "Metadata stored in manifest.json for a debate arena.",
                    "base_classes": [
                        "BaseModel"
                    ]
                }
            },
            "imports": [
                "logging",
                "datetime",
                "typing",
                "uuid",
                "pydantic"
            ],
            "complexity": 8
        },
        "archive\\orphans\\core\\comms\\mailbox.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_get_target_inbox",
                "archive_message"
            ],
            "classes": {
                "MailboxError": {
                    "methods": [],
                    "docstring": "Custom exception for mailbox operations.",
                    "base_classes": [
                        "Exception"
                    ]
                },
                "MailboxHandler": {
                    "methods": [
                        "__init__",
                        "_get_target_inbox",
                        "archive_message"
                    ],
                    "docstring": "Handles file-based mailbox operations for an agent using standardized JSON format.\nProvides methods to send messages/tasks to other agents' inboxes\nand potentially manage the agent's own inbox/archive.",
                    "base_classes": []
                }
            },
            "imports": [
                "logging",
                "os",
                "shutil",
                "pathlib",
                "dreamos.core.comms.mailbox_utils"
            ],
            "complexity": 5
        },
        "archive\\orphans\\core\\comms\\mailbox_utils.py": {
            "language": ".py",
            "functions": [
                "validate_mailbox_message_schema",
                "create_mailbox_message",
                "get_agent_mailbox_path",
                "validate_agent_mailbox_path",
                "glob_sync",
                "write_sync",
                "read_sync"
            ],
            "classes": {},
            "imports": [
                "asyncio",
                "json",
                "logging",
                "os",
                "sys",
                "uuid",
                "datetime",
                "pathlib",
                "typing",
                "filelock",
                "utils.common_utils",
                "config",
                "errors",
                "events.base_event"
            ],
            "complexity": 7
        },
        "archive\\orphans\\core\\comms\\meeting_schemas.py": {
            "language": ".py",
            "functions": [
                "generate_uuid",
                "current_utc_iso"
            ],
            "classes": {
                "BaseMeetingMessage": {
                    "methods": [],
                    "docstring": "Base model for all messages within a meeting mailbox.",
                    "base_classes": [
                        "BaseModel"
                    ]
                },
                "MeetingComment": {
                    "methods": [],
                    "docstring": "A general comment or discussion point.",
                    "base_classes": [
                        "BaseMeetingMessage"
                    ]
                },
                "MeetingProposal": {
                    "methods": [],
                    "docstring": "A formal proposal for discussion or voting.",
                    "base_classes": [
                        "BaseMeetingMessage"
                    ]
                },
                "MeetingVote": {
                    "methods": [],
                    "docstring": "A vote cast on a specific proposal.",
                    "base_classes": [
                        "BaseMeetingMessage"
                    ]
                },
                "MeetingSummary": {
                    "methods": [],
                    "docstring": "A summary of discussion points or meeting outcomes.",
                    "base_classes": [
                        "BaseMeetingMessage"
                    ]
                },
                "MeetingStateChange": {
                    "methods": [],
                    "docstring": "Indicates a change in the overall meeting state.",
                    "base_classes": [
                        "BaseMeetingMessage"
                    ]
                },
                "MeetingAgendaItem": {
                    "methods": [],
                    "docstring": "An item added to the meeting agenda.",
                    "base_classes": [
                        "BaseMeetingMessage"
                    ]
                },
                "ParticipantInfo": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "BaseModel"
                    ]
                },
                "MeetingManifest": {
                    "methods": [],
                    "docstring": "Metadata stored in manifest.json for a meeting.",
                    "base_classes": [
                        "BaseModel"
                    ]
                }
            },
            "imports": [
                "logging",
                "datetime",
                "typing",
                "uuid",
                "pydantic"
            ],
            "complexity": 11
        },
        "archive\\orphans\\core\\comms\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "imports": [],
            "complexity": 0,
            "error": "invalid syntax (<unknown>, line 6)"
        },
        "archive\\orphans\\core\\coordination\\agent_bus.py": {
            "language": ".py",
            "functions": [
                "get_agent_bus",
                "__init__",
                "subscribe",
                "unsubscribe",
                "dispatch_event",
                "__new__",
                "__init__",
                "subscribe",
                "unsubscribe",
                "dispatch_event",
                "register_agent",
                "unregister_agent",
                "get_agent_info",
                "update_agent_status"
            ],
            "classes": {
                "BusError": {
                    "methods": [],
                    "docstring": "Base exception for AgentBus errors.",
                    "base_classes": [
                        "Exception"
                    ]
                },
                "TopicNotFoundError": {
                    "methods": [],
                    "docstring": "Raised when a topic is not found.",
                    "base_classes": [
                        "BusError"
                    ]
                },
                "SubscriberCallbackError": {
                    "methods": [],
                    "docstring": "Raised when a subscriber callback fails.",
                    "base_classes": [
                        "BusError"
                    ]
                },
                "MessageValidationError": {
                    "methods": [],
                    "docstring": "Raised when message validation fails.",
                    "base_classes": [
                        "BusError"
                    ]
                },
                "BaseEvent": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "BaseModel"
                    ]
                },
                "SimpleEventBus": {
                    "methods": [
                        "__init__",
                        "subscribe",
                        "unsubscribe",
                        "dispatch_event"
                    ],
                    "docstring": "A simple, thread-safe event bus implementation.",
                    "base_classes": []
                },
                "AgentBus": {
                    "methods": [
                        "__new__",
                        "__init__",
                        "subscribe",
                        "unsubscribe",
                        "dispatch_event",
                        "register_agent",
                        "unregister_agent",
                        "get_agent_info",
                        "update_agent_status"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "imports": [
                "logging",
                "threading",
                "time",
                "typing",
                "dreamos.core.coordination.enums",
                "dreamos.core.coordination.event_payloads",
                "dreamos.core.coordination.event_types",
                "pydantic"
            ],
            "complexity": 21
        },
        "archive\\orphans\\core\\coordination\\base_agent.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "register_command_handler",
                "_get_priority_value",
                "_setup_logger",
                "get_status",
                "get_capabilities",
                "_get_default_agent_bus"
            ],
            "classes": {
                "BaseAgent": {
                    "methods": [
                        "__init__",
                        "register_command_handler",
                        "_get_priority_value",
                        "_setup_logger",
                        "get_status",
                        "get_capabilities",
                        "_get_default_agent_bus"
                    ],
                    "docstring": "Base class for all Dream.OS agents providing common functionality.",
                    "base_classes": [
                        "ABC",
                        "BaseAgentLifecycleMixin"
                    ]
                }
            },
            "imports": [
                "asyncio",
                "logging",
                "shlex",
                "subprocess",
                "sys",
                "traceback",
                "abc",
                "datetime",
                "typing",
                "dreamos.coordination.project_board_manager",
                "dreamos.core.config",
                "dreamos.core.coordination.agent_bus",
                "dreamos.core.coordination.message_patterns",
                "monitoring.performance_logger",
                "errors",
                "base_agent_lifecycle",
                "event_payloads",
                "event_types",
                "utils",
                "core.errors"
            ],
            "complexity": 8
        },
        "archive\\orphans\\core\\coordination\\base_agent_lifecycle.py": {
            "language": ".py",
            "functions": [],
            "classes": {
                "BaseAgentLifecycleMixin": {
                    "methods": [],
                    "docstring": "Mixin containing start and stop logic for BaseAgent.",
                    "base_classes": []
                }
            },
            "imports": [
                "asyncio",
                "typing",
                "event_types",
                "utils",
                "base_agent"
            ],
            "complexity": 1
        },
        "archive\\orphans\\core\\coordination\\enums.py": {
            "language": ".py",
            "functions": [],
            "classes": {
                "AgentStatus": {
                    "methods": [],
                    "docstring": "Represents the possible operational statuses of an Agent.",
                    "base_classes": [
                        "Enum"
                    ]
                }
            },
            "imports": [
                "enum"
            ],
            "complexity": 1
        },
        "archive\\orphans\\core\\coordination\\event_payloads.py": {
            "language": ".py",
            "functions": [
                "to_dict"
            ],
            "classes": {
                "ErrorEventPayload": {
                    "methods": [],
                    "docstring": "Unified payload for system or agent-specific error events. Replaces SystemAgentErrorPayload and AgentErrorPayload.",
                    "base_classes": [
                        "BaseModel"
                    ]
                },
                "AgentStatusEventPayload": {
                    "methods": [],
                    "docstring": "Unified payload for various agent status update events. Replaces AgentStatusChangePayload and AgentStatusPayload.",
                    "base_classes": [
                        "BaseModel"
                    ]
                },
                "AgentRegistrationPayload": {
                    "methods": [],
                    "docstring": "Payload for SYSTEM_AGENT_REGISTERED / UNREGISTERED events.",
                    "base_classes": [
                        "BaseModel"
                    ]
                },
                "TaskEventPayload": {
                    "methods": [],
                    "docstring": "Base payload for Task Lifecycle events. Contains only common fields.",
                    "base_classes": [
                        "BaseModel"
                    ]
                },
                "TaskProgressPayload": {
                    "methods": [],
                    "docstring": "Payload for TASK_PROGRESS events.",
                    "base_classes": [
                        "TaskEventPayload"
                    ]
                },
                "TaskCompletionPayload": {
                    "methods": [],
                    "docstring": "Payload for TASK_COMPLETED events.",
                    "base_classes": [
                        "TaskEventPayload"
                    ]
                },
                "TaskFailurePayload": {
                    "methods": [],
                    "docstring": "Payload for TASK_FAILED events.",
                    "base_classes": [
                        "TaskEventPayload"
                    ]
                },
                "ToolCallPayload": {
                    "methods": [],
                    "docstring": "Payload for TOOL_CALL events.",
                    "base_classes": [
                        "BaseModel"
                    ]
                },
                "ToolResultPayload": {
                    "methods": [],
                    "docstring": "Payload for TOOL_RESULT events.",
                    "base_classes": [
                        "BaseModel"
                    ]
                },
                "MemoryEventData": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "BaseModel"
                    ]
                },
                "CursorInjectRequestPayload": {
                    "methods": [
                        "to_dict"
                    ],
                    "docstring": "Payload for when a prompt injection is requested for a specific agent.",
                    "base_classes": [
                        "BaseModel"
                    ]
                },
                "CursorRetrieveRequestPayload": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "BaseModel"
                    ]
                },
                "CursorResultPayload": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "BaseModel"
                    ]
                },
                "AgentContractStatusPayload": {
                    "methods": [],
                    "docstring": "Payload for AGENT_CONTRACT_STATUS event (response to query).",
                    "base_classes": [
                        "BaseModel"
                    ]
                },
                "RouteInjectPayload": {
                    "methods": [],
                    "docstring": "Payload for ROUTE_INJECTION_REQUEST event.",
                    "base_classes": [
                        "BaseModel"
                    ]
                },
                "CursorEventPayload": {
                    "methods": [],
                    "docstring": "Standard payload for Cursor Interaction events (CURSOR_*).",
                    "base_classes": [
                        "BaseModel"
                    ]
                },
                "ScrapedDataPayload": {
                    "methods": [],
                    "docstring": "Payload for CHATGPT_RESPONSE_SCRAPED event.",
                    "base_classes": [
                        "BaseModel"
                    ]
                },
                "ApprovalRequestPayload": {
                    "methods": [],
                    "docstring": "Payload for SUPERVISOR_APPROVAL_REQUESTED event.",
                    "base_classes": [
                        "BaseModel"
                    ]
                },
                "ApprovalResponsePayload": {
                    "methods": [],
                    "docstring": "Payload for SUPERVISOR_APPROVAL_RESPONSE event.",
                    "base_classes": [
                        "BaseModel"
                    ]
                },
                "SupervisorAlertPayload": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "BaseModel"
                    ]
                },
                "TaskValidationFailedPayload": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "TaskEventPayload"
                    ]
                },
                "CapabilityRegisteredPayload": {
                    "methods": [],
                    "docstring": "Payload for SYSTEM_CAPABILITY_REGISTERED event.",
                    "base_classes": [
                        "BaseModel"
                    ]
                },
                "CapabilityUnregisteredPayload": {
                    "methods": [],
                    "docstring": "Payload for SYSTEM_CAPABILITY_UNREGISTERED event.",
                    "base_classes": [
                        "BaseModel"
                    ]
                },
                "Config": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "imports": [
                "uuid",
                "typing",
                "pydantic",
                "enums",
                "message_patterns"
            ],
            "complexity": 25
        },
        "archive\\orphans\\core\\coordination\\event_types.py": {
            "language": ".py",
            "functions": [
                "__str__"
            ],
            "classes": {
                "EventType": {
                    "methods": [
                        "__str__"
                    ],
                    "docstring": "Enumeration of standardized event types for AgentBus communication.\n\nUses hierarchical dot notation for topic structure:\ne.g., scope.domain.resource.action[.status]",
                    "base_classes": [
                        "Enum"
                    ]
                }
            },
            "imports": [
                "enum"
            ],
            "complexity": 2
        },
        "archive\\orphans\\core\\coordination\\message_patterns.py": {
            "language": ".py",
            "functions": [
                "create_task_message",
                "update_task_status"
            ],
            "classes": {
                "TaskStatus": {
                    "methods": [],
                    "docstring": "Task execution status.",
                    "base_classes": [
                        "Enum"
                    ]
                },
                "TaskPriority": {
                    "methods": [],
                    "docstring": "Task priority levels.",
                    "base_classes": [
                        "Enum"
                    ]
                },
                "TaskMessage": {
                    "methods": [],
                    "docstring": "Standard task message format, used as the 'data' field in AgentBus messages.",
                    "base_classes": [
                        "BaseModel"
                    ]
                },
                "Config": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "imports": [
                "datetime",
                "enum",
                "typing",
                "pydantic",
                "uuid"
            ],
            "complexity": 6
        },
        "archive\\orphans\\core\\coordination\\project_board_manager.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_resolve_path",
                "_get_lock",
                "_load_file",
                "_read_board_file",
                "_load_backlog",
                "_load_ready_queue",
                "_load_working_tasks",
                "_load_completed_tasks",
                "_save_backlog",
                "_save_ready_queue",
                "_save_working_tasks",
                "_save_completed_tasks",
                "_load_schema",
                "_validate_task",
                "_find_task_index",
                "_atomic_write",
                "_save_file",
                "get_task",
                "list_backlog_tasks",
                "list_ready_queue_tasks",
                "list_working_tasks",
                "add_task",
                "add_task_to_backlog",
                "_get_utc_timestamp",
                "_generate_task_id",
                "update_working_task",
                "delete_task",
                "move_task_to_completed",
                "claim_ready_task",
                "promote_task_to_ready",
                "_create_from_cli_args"
            ],
            "classes": {
                "ProjectBoardManager": {
                    "methods": [
                        "__init__",
                        "_resolve_path",
                        "_get_lock",
                        "_load_file",
                        "_read_board_file",
                        "_load_backlog",
                        "_load_ready_queue",
                        "_load_working_tasks",
                        "_load_completed_tasks",
                        "_save_backlog",
                        "_save_ready_queue",
                        "_save_working_tasks",
                        "_save_completed_tasks",
                        "_load_schema",
                        "_validate_task",
                        "_find_task_index",
                        "_atomic_write",
                        "_save_file",
                        "get_task",
                        "list_backlog_tasks",
                        "list_ready_queue_tasks",
                        "list_working_tasks",
                        "add_task",
                        "add_task_to_backlog",
                        "_get_utc_timestamp",
                        "_generate_task_id",
                        "update_working_task",
                        "delete_task",
                        "move_task_to_completed",
                        "claim_ready_task",
                        "promote_task_to_ready",
                        "_create_from_cli_args"
                    ],
                    "docstring": "Manages loading, saving, and modifying tasks on JSON-based project boards.\nEnsures safe concurrent access via file locking.\n\nSupports Backlog, Ready Queue, Working, and Completed boards.",
                    "base_classes": []
                }
            },
            "imports": [
                "argparse",
                "datetime",
                "json",
                "logging",
                "os",
                "sys",
                "uuid",
                "pathlib",
                "typing",
                "config",
                "errors",
                "filelock",
                "jsonschema"
            ],
            "complexity": 33
        },
        "archive\\orphans\\core\\coordination\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "imports": [],
            "complexity": 0
        },
        "archive\\orphans\\core\\coordination\\schemas\\voting_patterns.py": {
            "language": ".py",
            "functions": [],
            "classes": {
                "VoteQuestion": {
                    "methods": [],
                    "docstring": "Structure for a single question within a vote.",
                    "base_classes": [
                        "BaseModel"
                    ]
                },
                "VoteInitiated": {
                    "methods": [],
                    "docstring": "Message schema published to initiate an agent vote.",
                    "base_classes": [
                        "BaseModel"
                    ]
                },
                "AgentVote": {
                    "methods": [],
                    "docstring": "Message schema published by an agent casting its vote.",
                    "base_classes": [
                        "BaseModel"
                    ]
                },
                "VoteResults": {
                    "methods": [],
                    "docstring": "Message schema published by the coordinator with the outcome of a vote.",
                    "base_classes": [
                        "BaseModel"
                    ]
                }
            },
            "imports": [
                "typing",
                "pydantic"
            ],
            "complexity": 4
        },
        "archive\\orphans\\core\\db\\sqlite_adapter.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_connect",
                "_create_schema",
                "close",
                "get_all_agents",
                "update_agent_heartbeat",
                "get_stale_agents",
                "register_capability",
                "unregister_capability",
                "get_capabilities_for_agent",
                "get_all_capabilities",
                "find_agents_with_capability",
                "add_task",
                "update_task",
                "get_task",
                "_row_to_task",
                "get_tasks_by_status",
                "get_pending_tasks",
                "claim_next_pending_task",
                "get_all_tasks",
                "_log_status_change",
                "_update_task_tags",
                "get_tasks_by_tag",
                "get_tasks_by_agents_and_status"
            ],
            "classes": {
                "SQLiteAdapter": {
                    "methods": [
                        "__init__",
                        "_connect",
                        "_create_schema",
                        "close",
                        "get_all_agents",
                        "update_agent_heartbeat",
                        "get_stale_agents",
                        "register_capability",
                        "unregister_capability",
                        "get_capabilities_for_agent",
                        "get_all_capabilities",
                        "find_agents_with_capability",
                        "add_task",
                        "update_task",
                        "get_task",
                        "_row_to_task",
                        "get_tasks_by_status",
                        "get_pending_tasks",
                        "claim_next_pending_task",
                        "get_all_tasks",
                        "_log_status_change",
                        "_update_task_tags",
                        "get_tasks_by_tag",
                        "get_tasks_by_agents_and_status"
                    ],
                    "docstring": "Provides an interface to interact with the SQLite database for Dream.OS data.",
                    "base_classes": []
                }
            },
            "imports": [
                "json",
                "logging",
                "sqlite3",
                "threading",
                "time",
                "datetime",
                "pathlib",
                "typing"
            ],
            "complexity": 25
        },
        "archive\\orphans\\core\\errors\\exceptions.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "__str__"
            ],
            "classes": {
                "DreamOSError": {
                    "methods": [
                        "__init__",
                        "__str__"
                    ],
                    "docstring": "Base class for all custom exceptions in Dream.OS.",
                    "base_classes": [
                        "Exception"
                    ]
                },
                "ConfigurationError": {
                    "methods": [],
                    "docstring": "Raised when there is an error related to configuration loading or validation.",
                    "base_classes": [
                        "DreamOSError"
                    ]
                },
                "AgentError": {
                    "methods": [],
                    "docstring": "Base class for errors originating from agents.",
                    "base_classes": [
                        "DreamOSError"
                    ]
                },
                "TaskError": {
                    "methods": [],
                    "docstring": "Base class for errors related to task processing.",
                    "base_classes": [
                        "DreamOSError"
                    ]
                },
                "ToolError": {
                    "methods": [],
                    "docstring": "Base class for errors related to tool execution.",
                    "base_classes": [
                        "DreamOSError"
                    ]
                },
                "ProjectBoardError": {
                    "methods": [],
                    "docstring": "Base class for errors related to Project Board Manager operations.",
                    "base_classes": [
                        "DreamOSError"
                    ]
                },
                "CoordinateError": {
                    "methods": [],
                    "docstring": "Raised for errors related to coordinate handling or lookup.",
                    "base_classes": [
                        "DreamOSError"
                    ]
                },
                "TaskNotFoundError": {
                    "methods": [],
                    "docstring": "Raised when a task ID is not found on the expected board.",
                    "base_classes": [
                        "ProjectBoardError"
                    ]
                },
                "TaskValidationError": {
                    "methods": [],
                    "docstring": "Raised when task data fails validation.",
                    "base_classes": [
                        "ProjectBoardError"
                    ]
                },
                "BoardLockError": {
                    "methods": [],
                    "docstring": "Raised when a file lock cannot be acquired.",
                    "base_classes": [
                        "ProjectBoardError"
                    ]
                },
                "CommunicationError": {
                    "methods": [],
                    "docstring": "Indicates an error in inter-agent or system communication mechanisms.",
                    "base_classes": [
                        "DreamOSError"
                    ]
                },
                "MemoryError": {
                    "methods": [],
                    "docstring": "Indicates an error related to an agent's memory component operations.",
                    "base_classes": [
                        "DreamOSError"
                    ]
                },
                "ValidationError": {
                    "methods": [],
                    "docstring": "Indicates that data failed a validation check (general purpose).",
                    "base_classes": [
                        "DreamOSError"
                    ]
                },
                "CursorOrchestratorError": {
                    "methods": [],
                    "docstring": "Represents an error reported by the Cursor Orchestrator component.",
                    "base_classes": [
                        "DreamOSError"
                    ]
                },
                "ArchivingError": {
                    "methods": [],
                    "docstring": "Indicates an error during archiving or unarchiving operations.",
                    "base_classes": [
                        "DreamOSError"
                    ]
                },
                "TaskProcessingError": {
                    "methods": [],
                    "docstring": "Error during task processing.",
                    "base_classes": [
                        "TaskError"
                    ]
                },
                "MessageHandlingError": {
                    "methods": [],
                    "docstring": "Error during message handling.",
                    "base_classes": [
                        "AgentError"
                    ]
                }
            },
            "imports": [],
            "complexity": 19
        },
        "archive\\orphans\\core\\events\\base_event.py": {
            "language": ".py",
            "functions": [
                "get_utc_iso_timestamp"
            ],
            "classes": {
                "BaseDreamEvent": {
                    "methods": [],
                    "docstring": "Base Pydantic model for all events dispatched via the AgentBus.",
                    "base_classes": [
                        "BaseModel"
                    ]
                },
                "Config": {
                    "methods": [],
                    "docstring": "Pydantic config settings.",
                    "base_classes": []
                }
            },
            "imports": [
                "uuid",
                "datetime",
                "typing",
                "pydantic",
                "coordination.event_types"
            ],
            "complexity": 3
        },
        "archive\\orphans\\core\\events\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "imports": [],
            "complexity": 0,
            "error": "invalid syntax (<unknown>, line 3)"
        },
        "archive\\orphans\\core\\feedback\\thea_feedback_ingestor.py": {
            "language": ".py",
            "functions": [
                "load_recent_feedback",
                "inject_feedback_to_thea"
            ],
            "classes": {},
            "imports": [
                "glob",
                "json",
                "logging",
                "os",
                "agents.core.thea_auto_planner",
                "argparse"
            ],
            "complexity": 2
        },
        "archive\\orphans\\core\\feedback\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "imports": [],
            "complexity": 0,
            "error": "invalid syntax (<unknown>, line 3)"
        },
        "archive\\orphans\\core\\health_checks\\cursor_status_check.py": {
            "language": ".py",
            "functions": [
                "__init__"
            ],
            "classes": {
                "CursorStatusCheck": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Encapsulates the logic for the cursor agent status check.",
                    "base_classes": []
                }
            },
            "imports": [
                "asyncio",
                "logging",
                "typing",
                "dreamos.automation.cursor_orchestrator",
                "pprint",
                "config"
            ],
            "complexity": 2
        },
        "archive\\orphans\\core\\health_checks\\cursor_window_check.py": {
            "language": ".py",
            "functions": [
                "_load_coordinates",
                "check_cursor_window_reachability",
                "__init__",
                "run_check"
            ],
            "classes": {
                "CursorWindowCheck": {
                    "methods": [
                        "__init__",
                        "run_check"
                    ],
                    "docstring": "Encapsulates the logic for the cursor window reachability check.",
                    "base_classes": []
                }
            },
            "imports": [
                "json",
                "logging",
                "pathlib",
                "typing",
                "config",
                "pyautogui",
                "pprint"
            ],
            "complexity": 5
        },
        "archive\\orphans\\core\\health_checks\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "imports": [],
            "complexity": 0,
            "error": "invalid syntax (<unknown>, line 5)"
        },
        "archive\\orphans\\core\\identity\\agent_identity.py": {
            "language": ".py",
            "functions": [
                "validate_agent_id_format",
                "ensure_datetime_obj",
                "update"
            ],
            "classes": {
                "AgentIdentity": {
                    "methods": [
                        "validate_agent_id_format",
                        "ensure_datetime_obj",
                        "update"
                    ],
                    "docstring": "Represents the persistent identity and metadata of an agent.",
                    "base_classes": [
                        "BaseModel"
                    ]
                },
                "Config": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "imports": [
                "logging",
                "re",
                "datetime",
                "typing",
                "pydantic"
            ],
            "complexity": 5
        },
        "archive\\orphans\\core\\identity\\agent_identity_manager.py": {
            "language": ".py",
            "functions": [
                "__new__",
                "__init__"
            ],
            "classes": {
                "AgentIdentityError": {
                    "methods": [],
                    "docstring": "Custom exception for Agent Identity Manager errors.",
                    "base_classes": [
                        "Exception"
                    ]
                },
                "AgentIdentityManager": {
                    "methods": [
                        "__new__",
                        "__init__"
                    ],
                    "docstring": "Manages agent identities, including registration and updates.\n\nNOTE: This class uses an async initialization pattern.\nObtain the singleton instance using AgentIdentityManager()\nand then call `await instance.initialize()` before using other methods.",
                    "base_classes": []
                }
            },
            "imports": [
                "asyncio",
                "logging",
                "threading",
                "typing",
                "agent_identity",
                "agent_identity_store"
            ],
            "complexity": 4
        },
        "archive\\orphans\\core\\identity\\agent_identity_store.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "write_sync",
                "read_sync",
                "write_empty_json"
            ],
            "classes": {
                "AgentIdentityStore": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Handles persistence of AgentIdentity objects to a JSON file.",
                    "base_classes": []
                }
            },
            "imports": [
                "asyncio",
                "json",
                "logging",
                "os",
                "pathlib",
                "typing",
                "utils.file_locking",
                "utils.project_root",
                "agent_identity"
            ],
            "complexity": 5
        },
        "archive\\orphans\\core\\identity\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "imports": [],
            "complexity": 0,
            "error": "invalid syntax (<unknown>, line 15)"
        },
        "archive\\orphans\\core\\logging\\swarm_logger.py": {
            "language": ".py",
            "functions": [
                "_get_log_path",
                "log_agent_event"
            ],
            "classes": {},
            "imports": [
                "json",
                "logging",
                "pathlib",
                "typing",
                "dreamos.core.config",
                "dreamos.utils.common_utils",
                "dreamos.utils.file_locking"
            ],
            "complexity": 2
        },
        "archive\\orphans\\core\\logging\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "imports": [],
            "complexity": 0,
            "error": "invalid syntax (<unknown>, line 8)"
        },
        "archive\\orphans\\core\\narrative\\lore_parser.py": {
            "language": ".py",
            "functions": [
                "fetch_task_data",
                "fetch_git_log",
                "fetch_agent_logs",
                "fetch_captain_logs",
                "fetch_lore_context",
                "gather_narrative_context"
            ],
            "classes": {
                "ContextWindow": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "TypedDict"
                    ]
                },
                "NarrativeContextData": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "TypedDict"
                    ]
                }
            },
            "imports": [
                "logging",
                "re",
                "subprocess",
                "datetime",
                "pathlib",
                "typing"
            ],
            "complexity": 8
        },
        "archive\\orphans\\core\\state\\snapshot_manager.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "create_snapshot",
                "list_snapshots"
            ],
            "classes": {
                "SnapshotError": {
                    "methods": [],
                    "docstring": "Custom exception for snapshot errors.",
                    "base_classes": [
                        "Exception"
                    ]
                },
                "SnapshotManager": {
                    "methods": [
                        "__init__",
                        "create_snapshot",
                        "list_snapshots"
                    ],
                    "docstring": "Handles creation of system state snapshots (DB file copy).",
                    "base_classes": []
                }
            },
            "imports": [
                "json",
                "logging",
                "shutil",
                "datetime",
                "pathlib",
                "typing",
                "filelock",
                "dreamos.utils"
            ],
            "complexity": 5
        },
        "archive\\orphans\\core\\state\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "imports": [],
            "complexity": 0,
            "error": "invalid syntax (<unknown>, line 4)"
        },
        "archive\\orphans\\core\\tasks\\nexus\\agent_registry_handler.py": {
            "language": ".py",
            "functions": [
                "__init__"
            ],
            "classes": {
                "AgentRegistryHandler": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Handles agent heartbeat recording and stale task reclamation using SQLiteAdapter.",
                    "base_classes": []
                }
            },
            "imports": [
                "asyncio",
                "logging",
                "time",
                "datetime",
                "typing",
                "dreamos.core.db.sqlite_adapter"
            ],
            "complexity": 2
        },
        "archive\\orphans\\core\\tasks\\nexus\\capability_handler.py": {
            "language": ".py",
            "functions": [
                "__init__"
            ],
            "classes": {
                "CapabilityHandler": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Handles interactions with the CapabilityRegistry.",
                    "base_classes": []
                }
            },
            "imports": [
                "asyncio",
                "logging",
                "typing",
                "dreamos.core.agents.capabilities.schema",
                "dreamos.core.db.sqlite_adapter",
                "capability_registry"
            ],
            "complexity": 2
        },
        "archive\\orphans\\core\\tasks\\nexus\\capability_registry.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load_capabilities_from_db",
                "register_capability",
                "unregister_capability",
                "get_capability",
                "get_agent_capabilities",
                "find_capabilities",
                "find_agents_for_capability",
                "_dispatch_registry_event",
                "update_capability_status"
            ],
            "classes": {
                "CapabilityRegistry": {
                    "methods": [
                        "__init__",
                        "_load_capabilities_from_db",
                        "register_capability",
                        "unregister_capability",
                        "get_capability",
                        "get_agent_capabilities",
                        "find_capabilities",
                        "find_agents_for_capability",
                        "_dispatch_registry_event",
                        "update_capability_status"
                    ],
                    "docstring": "Manages the registration and querying of agent capabilities via SQLiteAdapter.",
                    "base_classes": []
                }
            },
            "imports": [
                "logging",
                "datetime",
                "threading",
                "typing",
                "dreamos.core.agents.capabilities.schema",
                "dreamos.core.coordination.agent_bus",
                "dreamos.core.coordination.event_payloads",
                "dreamos.core.coordination.event_types",
                "dreamos.core.db.sqlite_adapter",
                "pydantic"
            ],
            "complexity": 11
        },
        "archive\\orphans\\core\\tasks\\nexus\\db_task_nexus.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "get_next_task",
                "add_task",
                "update_task",
                "get_all_tasks",
                "get_task_by_id",
                "get_pending_tasks",
                "get_tasks_by_tag",
                "stats"
            ],
            "classes": {
                "TaskDict": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "TypedDict"
                    ]
                },
                "DbTaskNexus": {
                    "methods": [
                        "__init__",
                        "get_next_task",
                        "add_task",
                        "update_task",
                        "get_all_tasks",
                        "get_task_by_id",
                        "get_pending_tasks",
                        "get_tasks_by_tag",
                        "stats"
                    ],
                    "docstring": "Task management interface backed by SQLiteAdapter.",
                    "base_classes": []
                }
            },
            "imports": [
                "logging",
                "collections",
                "datetime",
                "typing",
                "dreamos.core.db.sqlite_adapter"
            ],
            "complexity": 11
        },
        "archive\\orphans\\core\\tasks\\nexus\\shadow_task_nexus.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_ensure_backlog_exists",
                "load_tasks",
                "list_tasks",
                "add_task",
                "validate_shadow_backlog"
            ],
            "classes": {
                "TaskDict": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "TypedDict"
                    ]
                },
                "ShadowTaskNexus": {
                    "methods": [
                        "__init__",
                        "_ensure_backlog_exists",
                        "load_tasks",
                        "list_tasks",
                        "add_task",
                        "validate_shadow_backlog"
                    ],
                    "docstring": "A fallback task nexus operating on a local JSON file for redundancy.\nHandles basic task loading, validation, and manipulation if primary systems fail.",
                    "base_classes": []
                }
            },
            "imports": [
                "json",
                "logging",
                "pathlib",
                "typing",
                "dreamos.utils.project_root"
            ],
            "complexity": 8
        },
        "archive\\orphans\\core\\tasks\\nexus\\task_nexus.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load",
                "_save",
                "get_next_task",
                "add_task",
                "update_task_status",
                "get_all_tasks",
                "stats",
                "get_task_by_id"
            ],
            "classes": {
                "Task": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "BaseModel"
                    ]
                },
                "TaskNexus": {
                    "methods": [
                        "__init__",
                        "_load",
                        "_save",
                        "get_next_task",
                        "add_task",
                        "update_task_status",
                        "get_all_tasks",
                        "stats",
                        "get_task_by_id"
                    ],
                    "docstring": "Local task queue and state tracker reading/writing from JSON.",
                    "base_classes": []
                }
            },
            "imports": [
                "json",
                "logging",
                "threading",
                "collections",
                "datetime",
                "pathlib",
                "typing",
                "pydantic",
                "dreamos.utils.project_root"
            ],
            "complexity": 11
        },
        "archive\\orphans\\core\\tasks\\nexus\\task_operations.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "get_priority"
            ],
            "classes": {
                "TaskOperationsHandler": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Handles core task operations like getting, adding, updating, and checking dependencies.",
                    "base_classes": []
                }
            },
            "imports": [
                "asyncio",
                "collections",
                "logging",
                "uuid",
                "typing",
                "dreamos.core.db.sqlite_adapter",
                "comms.project_board",
                "errors",
                "capability_handler",
                "db_task_nexus"
            ],
            "complexity": 3
        },
        "archive\\orphans\\core\\tasks\\nexus\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "imports": [],
            "complexity": 0,
            "error": "invalid syntax (<unknown>, line 8)"
        },
        "archive\\orphans\\core\\tools\\script_runner.py": {
            "language": ".py",
            "functions": [
                "run_script",
                "__init__",
                "_resolve_script_path",
                "_run_script"
            ],
            "classes": {
                "ScriptExecutionError": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Custom exception for script execution failures.",
                    "base_classes": [
                        "Exception"
                    ]
                },
                "ScriptRunner": {
                    "methods": [
                        "_resolve_script_path",
                        "_run_script"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "imports": [
                "logging",
                "os",
                "shutil",
                "subprocess",
                "sys",
                "pathlib",
                "typing",
                "config",
                "errors"
            ],
            "complexity": 6
        },
        "archive\\orphans\\core\\tts\\elevenlabs_tts.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "synthesize",
                "is_available",
                "__init__",
                "is_available",
                "synthesize",
                "save"
            ],
            "classes": {
                "AppConfig": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": null,
                    "base_classes": []
                },
                "TTSInterface": {
                    "methods": [
                        "synthesize",
                        "is_available"
                    ],
                    "docstring": null,
                    "base_classes": []
                },
                "ElevenLabsTTS": {
                    "methods": [
                        "__init__",
                        "is_available",
                        "synthesize"
                    ],
                    "docstring": "TTS implementation using the ElevenLabs API.",
                    "base_classes": [
                        "TTSInterface"
                    ]
                },
                "ElevenLabs": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "imports": [
                "logging",
                "os",
                "typing",
                "elevenlabs",
                "elevenlabs.client"
            ],
            "complexity": 11
        },
        "archive\\orphans\\core\\tts\\local_tts.py": {
            "language": ".py",
            "functions": [
                "synthesize",
                "is_available",
                "__init__",
                "is_available",
                "synthesize"
            ],
            "classes": {
                "TTSInterface": {
                    "methods": [
                        "synthesize",
                        "is_available"
                    ],
                    "docstring": null,
                    "base_classes": []
                },
                "LocalTTS": {
                    "methods": [
                        "__init__",
                        "is_available",
                        "synthesize"
                    ],
                    "docstring": "TTS implementation using the pyttsx3 library for local synthesis.",
                    "base_classes": [
                        "TTSInterface"
                    ]
                }
            },
            "imports": [
                "logging",
                "os",
                "pyttsx3"
            ],
            "complexity": 7
        },
        "archive\\orphans\\core\\tts\\tts_factory.py": {
            "language": ".py",
            "functions": [
                "get_tts_engine",
                "is_available",
                "synthesize",
                "__init__",
                "__init__",
                "is_available",
                "synthesize",
                "__init__",
                "is_available",
                "synthesize"
            ],
            "classes": {
                "TTSInterface": {
                    "methods": [
                        "is_available",
                        "synthesize"
                    ],
                    "docstring": null,
                    "base_classes": []
                },
                "AppConfig": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": null,
                    "base_classes": []
                },
                "ElevenLabsTTS": {
                    "methods": [
                        "__init__",
                        "is_available",
                        "synthesize"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "TTSInterface"
                    ]
                },
                "LocalTTS": {
                    "methods": [
                        "__init__",
                        "is_available",
                        "synthesize"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "TTSInterface"
                    ]
                }
            },
            "imports": [
                "logging",
                "os",
                "typing"
            ],
            "complexity": 14
        },
        "archive\\orphans\\core\\tts\\tts_interface.py": {
            "language": ".py",
            "functions": [
                "synthesize",
                "is_available"
            ],
            "classes": {
                "TTSInterface": {
                    "methods": [
                        "synthesize",
                        "is_available"
                    ],
                    "docstring": "Abstract base class for Text-to-Speech engines.",
                    "base_classes": [
                        "ABC"
                    ]
                }
            },
            "imports": [
                "abc"
            ],
            "complexity": 3
        },
        "archive\\orphans\\core\\tts\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "imports": [],
            "complexity": 0,
            "error": "invalid syntax (<unknown>, line 5)"
        },
        "archive\\orphans\\core\\utils\\file_utils.py": {
            "language": ".py",
            "functions": [
                "_sync_rewrite",
                "dt_serializer"
            ],
            "classes": {},
            "imports": [
                "asyncio",
                "json",
                "logging",
                "os",
                "zlib",
                "datetime",
                "pathlib",
                "typing"
            ],
            "complexity": 2
        },
        "archive\\orphans\\dashboard\\dashboard_app.py": {
            "language": ".py",
            "functions": [
                "read_task_board",
                "index"
            ],
            "classes": {},
            "imports": [
                "json",
                "logging",
                "datetime",
                "pathlib",
                "flask"
            ],
            "complexity": 2
        },
        "archive\\orphans\\dashboard\\dashboard_ui.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "refresh",
                "_inject_task",
                "_refresh_health_summary",
                "_update_chronicle_viewer"
            ],
            "classes": {
                "Dashboard": {
                    "methods": [
                        "__init__",
                        "refresh",
                        "_inject_task",
                        "_refresh_health_summary",
                        "_update_chronicle_viewer"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "QMainWindow"
                    ]
                }
            },
            "imports": [
                "logging",
                "os",
                "sys",
                "pathlib",
                "dreamos.core.coordination.agent_bus",
                "dreamos.dashboard.models",
                "PyQt5.QtCore",
                "PyQt5.QtWidgets"
            ],
            "complexity": 6
        },
        "archive\\orphans\\dashboard\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "imports": [],
            "complexity": 0,
            "error": "invalid syntax (<unknown>, line 3)"
        },
        "archive\\orphans\\feedback\\feedback_engine_v2.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "process_feedback",
                "get_agent_adjustment"
            ],
            "classes": {
                "FeedbackEngineV2": {
                    "methods": [
                        "__init__",
                        "process_feedback",
                        "get_agent_adjustment"
                    ],
                    "docstring": "Placeholder implementation for FeedbackEngineV2.",
                    "base_classes": []
                }
            },
            "imports": [
                "logging"
            ],
            "complexity": 4
        },
        "archive\\orphans\\governance\\agent_points_manager.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_get_lock",
                "_read_ledger_file",
                "_load_ledger",
                "_atomic_write_ledger",
                "_save_ledger",
                "_log_audit_event",
                "get_points_for_reason",
                "adjust_points",
                "get_agent_score",
                "get_all_scores",
                "determine_captain"
            ],
            "classes": {
                "AgentPointsManager": {
                    "methods": [
                        "__init__",
                        "_get_lock",
                        "_read_ledger_file",
                        "_load_ledger",
                        "_atomic_write_ledger",
                        "_save_ledger",
                        "_log_audit_event",
                        "get_points_for_reason",
                        "adjust_points",
                        "get_agent_score",
                        "get_all_scores",
                        "determine_captain"
                    ],
                    "docstring": "Handles reading, writing, and updating agent points in the ledger file.\nUses file locking for safe concurrent access.",
                    "base_classes": []
                }
            },
            "imports": [
                "json",
                "logging",
                "sys",
                "pathlib",
                "typing",
                "core.config",
                "core.errors",
                "utils.common_utils",
                "filelock"
            ],
            "complexity": 13
        },
        "archive\\orphans\\governance\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "imports": [],
            "complexity": 0,
            "error": "invalid syntax (<unknown>, line 3)"
        },
        "archive\\orphans\\gui\\main_window.py": {
            "language": ".py",
            "functions": [
                "add_task",
                "__init__",
                "_run_async_bootstrap",
                "_create_navigation",
                "add_navigation_item",
                "get_sidebar_items",
                "log_event",
                "notify_mailbox",
                "sync_event_with_board",
                "save_state",
                "_append_task_to_list",
                "load_state_fallback",
                "closeEvent",
                "cleanup_resources",
                "_save_state",
                "_load_state",
                "_update_agents_list",
                "_update_escalated_agents_list",
                "_subscribe_prompt_event"
            ],
            "classes": {
                "DummyTaskManager": {
                    "methods": [
                        "add_task"
                    ],
                    "docstring": null,
                    "base_classes": []
                },
                "TaskManager": {
                    "methods": [],
                    "docstring": "Alias for DummyTaskManager for testing compatibility.",
                    "base_classes": [
                        "DummyTaskManager"
                    ]
                },
                "FeedbackEngine": {
                    "methods": [],
                    "docstring": "Placeholder for feedback engine in tests.",
                    "base_classes": []
                },
                "DreamOSTabManager": {
                    "methods": [],
                    "docstring": "Placeholder for tab manager in tests.",
                    "base_classes": [
                        "QTabWidget"
                    ]
                },
                "TabSystemShutdownManager": {
                    "methods": [],
                    "docstring": "Placeholder for tab system shutdown in tests.",
                    "base_classes": []
                },
                "DreamOSMainWindow": {
                    "methods": [
                        "__init__",
                        "_run_async_bootstrap",
                        "_create_navigation",
                        "add_navigation_item",
                        "get_sidebar_items",
                        "log_event",
                        "notify_mailbox",
                        "sync_event_with_board",
                        "save_state",
                        "_append_task_to_list",
                        "load_state_fallback",
                        "closeEvent",
                        "cleanup_resources",
                        "_save_state",
                        "_load_state",
                        "_update_agents_list",
                        "_update_escalated_agents_list"
                    ],
                    "docstring": "Main application window for Dream.OS using Sidebar Navigation.",
                    "base_classes": [
                        "QMainWindow"
                    ]
                }
            },
            "imports": [
                "asyncio",
                "json",
                "logging",
                "os",
                "sys",
                "uuid",
                "datetime",
                "pathlib",
                "dreamos.core.coordination.agent_bus",
                "dreamos.core.health_monitor",
                "dreamos.hooks.chronicle_logger",
                "dreamos.memory.memory_manager",
                "dreamos.rendering.template_engine",
                "PyQt5.QtCore",
                "PyQt5.QtGui",
                "PyQt5.QtWidgets",
                "fragment_forge_tab",
                "asyncio",
                "json",
                "json",
                "pathlib"
            ],
            "complexity": 25
        },
        "archive\\orphans\\gui\\supervisor_alert_viewer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "load_alerts"
            ],
            "classes": {
                "AlertViewerWindow": {
                    "methods": [
                        "__init__",
                        "load_alerts"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "QMainWindow"
                    ]
                }
            },
            "imports": [
                "json",
                "sys",
                "datetime",
                "pathlib",
                "PyQt5.QtCore",
                "PyQt5.QtGui",
                "PyQt5.QtWidgets"
            ],
            "complexity": 3
        },
        "archive\\orphans\\gui\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "imports": [],
            "complexity": 0,
            "error": "invalid syntax (<unknown>, line 3)"
        },
        "archive\\orphans\\hooks\\chatgpt_responder.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "get_response",
                "respond_to_mailbox"
            ],
            "classes": {
                "ChatGPTResponder": {
                    "methods": [
                        "__init__",
                        "get_response",
                        "respond_to_mailbox"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "imports": [
                "sys",
                "uuid",
                "datetime",
                "social.utils.chatgpt_scraper",
                "dream_os.adapters.openai_adapter"
            ],
            "complexity": 4
        },
        "archive\\orphans\\hooks\\chronicle_logger.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_format_entry",
                "_handle_event",
                "stop",
                "start"
            ],
            "classes": {
                "ChronicleLoggerHook": {
                    "methods": [
                        "__init__",
                        "_format_entry",
                        "_handle_event",
                        "stop",
                        "start"
                    ],
                    "docstring": "Listens to AgentBus events and logs them to the Dreamscape Chronicle.",
                    "base_classes": []
                }
            },
            "imports": [
                "logging",
                "threading",
                "datetime",
                "pathlib",
                "dreamos.core.coordination.agent_bus",
                "dreamos.core.coordination.events"
            ],
            "complexity": 6
        },
        "archive\\orphans\\hooks\\conversation_logger.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_get_db_connection",
                "_setup_database",
                "register_event_handlers",
                "_log_turn",
                "_handle_agent_prompt_request",
                "_handle_agent_prompt_response",
                "close"
            ],
            "classes": {
                "ConversationLogger": {
                    "methods": [
                        "__init__",
                        "_get_db_connection",
                        "_setup_database",
                        "register_event_handlers",
                        "_log_turn",
                        "_handle_agent_prompt_request",
                        "_handle_agent_prompt_response",
                        "close"
                    ],
                    "docstring": "Logs conversation turns (prompts/replies) to an SQLite database via AgentBus events.",
                    "base_classes": []
                }
            },
            "imports": [
                "json",
                "logging",
                "sqlite3",
                "datetime",
                "pathlib",
                "typing",
                "coordination.agent_bus",
                "coordination.event_types",
                "events.base_event"
            ],
            "complexity": 9
        },
        "archive\\orphans\\hooks\\devlog_hook.py": {
            "language": ".py",
            "functions": [
                "__init__"
            ],
            "classes": {
                "DevlogHook": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Listens for significant system events on the AgentBus and logs them.\n\nThis hook subscribes to various event types (task completion/failure,\nagent errors, protocol violations) and appends formatted summaries to the\ncentral devlog file (`runtime/devlog/devlog.md`). It uses file locking\nto prevent concurrent write issues.",
                    "base_classes": []
                }
            },
            "imports": [
                "asyncio",
                "logging",
                "pathlib",
                "typing",
                "dreamos.core.config",
                "dreamos.core.coordination.agent_bus",
                "dreamos.core.coordination.event_types",
                "dreamos.utils.common_utils",
                "filelock"
            ],
            "complexity": 2
        },
        "archive\\orphans\\hooks\\stats_logger.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "log_snapshot"
            ],
            "classes": {
                "StatsLoggingHook": {
                    "methods": [
                        "__init__",
                        "log_snapshot"
                    ],
                    "docstring": "Logs periodic snapshots of TaskNexus stats to a JSON file.",
                    "base_classes": []
                }
            },
            "imports": [
                "datetime",
                "pathlib",
                "dreamos.core.tasks.nexus.task_nexus",
                "utils.file_io"
            ],
            "complexity": 3
        },
        "archive\\orphans\\hooks\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "imports": [],
            "complexity": 0,
            "error": "invalid syntax (<unknown>, line 4)"
        },
        "archive\\orphans\\identity\\models.py": {
            "language": ".py",
            "functions": [
                "default_timestamp",
                "update_last_seen",
                "to_dict",
                "from_dict"
            ],
            "classes": {
                "AgentIdentity": {
                    "methods": [
                        "update_last_seen",
                        "to_dict",
                        "from_dict"
                    ],
                    "docstring": "Represents the static and dynamic identity attributes of an agent.",
                    "base_classes": []
                }
            },
            "imports": [
                "time",
                "dataclasses",
                "typing"
            ],
            "complexity": 5
        },
        "archive\\orphans\\identity\\store.py": {
            "language": ".py",
            "functions": [
                "get_identity_store",
                "__new__",
                "__init__",
                "_ensure_store_exists",
                "load_identities",
                "save_identities",
                "register_agent",
                "get_identity",
                "list_agents",
                "get_agent_ids"
            ],
            "classes": {
                "AgentIdentityStore": {
                    "methods": [
                        "__new__",
                        "__init__",
                        "_ensure_store_exists",
                        "load_identities",
                        "save_identities",
                        "register_agent",
                        "get_identity",
                        "list_agents",
                        "get_agent_ids"
                    ],
                    "docstring": "Manages the persistence and retrieval of AgentIdentity objects.",
                    "base_classes": []
                }
            },
            "imports": [
                "json",
                "logging",
                "threading",
                "pathlib",
                "typing",
                "models"
            ],
            "complexity": 11
        },
        "archive\\orphans\\integrations\\azure_blob_client.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "is_functional"
            ],
            "classes": {
                "IntegrationError": {
                    "methods": [],
                    "docstring": "Base error for integration issues.",
                    "base_classes": [
                        "DreamOSError"
                    ]
                },
                "APIError": {
                    "methods": [],
                    "docstring": "Error related to external API interaction.",
                    "base_classes": [
                        "IntegrationError"
                    ]
                },
                "AzureBlobError": {
                    "methods": [],
                    "docstring": "Specific error for Azure Blob Storage operations.",
                    "base_classes": [
                        "IntegrationError"
                    ]
                },
                "AzureBlobClient": {
                    "methods": [
                        "__init__",
                        "is_functional"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "imports": [
                "logging",
                "tenacity",
                "azure.core.exceptions",
                "azure.storage.blob",
                "dreamos.core.config",
                "core.errors"
            ],
            "complexity": 6
        },
        "archive\\orphans\\integrations\\browser_client.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "is_functional"
            ],
            "classes": {
                "IntegrationError": {
                    "methods": [],
                    "docstring": "Base error for integration issues.",
                    "base_classes": [
                        "DreamOSError"
                    ]
                },
                "APIError": {
                    "methods": [],
                    "docstring": "Error related to external API interaction.",
                    "base_classes": [
                        "IntegrationError"
                    ]
                },
                "BrowserClientError": {
                    "methods": [],
                    "docstring": "Specific error for Browser Client operations.",
                    "base_classes": [
                        "IntegrationError"
                    ]
                },
                "BrowserClient": {
                    "methods": [
                        "__init__",
                        "is_functional"
                    ],
                    "docstring": "Asynchronous client for browser automation using Playwright.",
                    "base_classes": []
                }
            },
            "imports": [
                "asyncio",
                "logging",
                "playwright.async_api",
                "dreamos.core.config",
                "core.errors"
            ],
            "complexity": 6
        },
        "archive\\orphans\\integrations\\discord_bot.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_register_events",
                "_register_commands",
                "__init__",
                "is_closed",
                "event",
                "command",
                "default",
                "command",
                "decorator",
                "decorator"
            ],
            "classes": {
                "DiscordBot": {
                    "methods": [
                        "__init__",
                        "_register_events",
                        "_register_commands"
                    ],
                    "docstring": "Handles Discord bot connection and command interaction with DreamOS.",
                    "base_classes": []
                },
                "commands": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": []
                },
                "discord": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": []
                },
                "Bot": {
                    "methods": [
                        "__init__",
                        "is_closed",
                        "event",
                        "command"
                    ],
                    "docstring": null,
                    "base_classes": []
                },
                "Intents": {
                    "methods": [
                        "default"
                    ],
                    "docstring": null,
                    "base_classes": []
                },
                "Interaction": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": []
                },
                "LoginFailure": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "Exception"
                    ]
                },
                "tree": {
                    "methods": [
                        "command"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "imports": [
                "asyncio",
                "datetime",
                "json",
                "logging",
                "time",
                "pathlib",
                "dreamos.automation.cursor_orchestrator",
                "dreamos.core.config",
                "dreamos.core.errors.exceptions",
                "dreamos.utils",
                "dreamos_ai_organizer.core.state",
                "dreamos.automation.cursor_orchestrator",
                "discord",
                "discord.ext",
                "json",
                "pathlib"
            ],
            "complexity": 19
        },
        "archive\\orphans\\integrations\\discord_client.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "is_webhook_functional",
                "is_bot_functional"
            ],
            "classes": {
                "IntegrationError": {
                    "methods": [],
                    "docstring": "Base error for integration issues.",
                    "base_classes": [
                        "DreamOSError"
                    ]
                },
                "APIError": {
                    "methods": [],
                    "docstring": "Error related to external API interaction.",
                    "base_classes": [
                        "IntegrationError"
                    ]
                },
                "DiscordClient": {
                    "methods": [
                        "__init__",
                        "is_webhook_functional",
                        "is_bot_functional"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "imports": [
                "asyncio",
                "logging",
                "aiohttp",
                "tenacity",
                "dreamos.core.config",
                "core.errors"
            ],
            "complexity": 6
        },
        "archive\\orphans\\integrations\\openai_client.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "is_functional"
            ],
            "classes": {
                "IntegrationError": {
                    "methods": [],
                    "docstring": "Base error for integration issues.",
                    "base_classes": [
                        "DreamOSError"
                    ]
                },
                "APIError": {
                    "methods": [],
                    "docstring": "Error related to external API interaction.",
                    "base_classes": [
                        "IntegrationError"
                    ]
                },
                "OpenAIClient": {
                    "methods": [
                        "__init__",
                        "is_functional"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "imports": [
                "asyncio",
                "logging",
                "openai",
                "tenacity",
                "dreamos.core.config",
                "core.errors"
            ],
            "complexity": 5
        },
        "archive\\orphans\\integrations\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "imports": [],
            "complexity": 0,
            "error": "invalid syntax (<unknown>, line 5)"
        },
        "archive\\orphans\\integrations\\agent_services\\cursor_shadow_controller.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "send_prompt_to_cursor",
                "monitor_output",
                "run_prompt_cycle"
            ],
            "classes": {
                "CursorShadowController": {
                    "methods": [
                        "__init__",
                        "send_prompt_to_cursor",
                        "monitor_output",
                        "run_prompt_cycle"
                    ],
                    "docstring": "Shadow controller that allows background execution of prompts in Cursor\nwithout requiring visible GUI interaction, using a file-based inbox/outbox.",
                    "base_classes": []
                }
            },
            "imports": [
                "json",
                "logging",
                "time",
                "uuid",
                "pathlib",
                "typing",
                "shutil",
                "sys"
            ],
            "complexity": 5
        },
        "archive\\orphans\\integrations\\cursor\\cursor_prompt_controller.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_activate_cursor_window",
                "_focus_chat_input",
                "send_prompt_to_chat"
            ],
            "classes": {
                "CursorPromptController": {
                    "methods": [
                        "__init__",
                        "_activate_cursor_window",
                        "_focus_chat_input",
                        "send_prompt_to_chat"
                    ],
                    "docstring": "DEPRECATED: Uses fragile pyautogui to send prompts. Use AgentBus events instead.\n\nUses pyautogui to send prompts to the Cursor chat interface.\nWARNING: This approach is highly unreliable and prone to breaking with UI changes,\n         timing issues, or focus stealing. It should only be used as a last resort\n         if the AgentBus event mechanism is unavailable.",
                    "base_classes": []
                }
            },
            "imports": [
                "logging",
                "time",
                "warnings",
                "dreamos.core.bots.orchestrator_bot"
            ],
            "complexity": 5
        },
        "archive\\orphans\\integrations\\cursor\\swarm_bootloader.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_resolve_cursor_path",
                "launch_instances",
                "wait_for_detection",
                "move_windows_to_desktop",
                "setup_swarm",
                "detect_all_instances"
            ],
            "classes": {
                "TheaSwarmBootloader": {
                    "methods": [
                        "__init__",
                        "_resolve_cursor_path",
                        "launch_instances",
                        "wait_for_detection",
                        "move_windows_to_desktop",
                        "setup_swarm"
                    ],
                    "docstring": "Handles launching and preparing a swarm of Cursor instances.",
                    "base_classes": []
                },
                "WindowWrapper": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": []
                },
                "CursorWindowController": {
                    "methods": [
                        "detect_all_instances"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "imports": [
                "logging",
                "platform",
                "shutil",
                "subprocess",
                "time",
                "pathlib",
                "typing",
                "pyvda",
                "integrations.cursor.window_controller"
            ],
            "complexity": 10
        },
        "archive\\orphans\\integrations\\cursor\\utils.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "imports": [
                "logging",
                "uuid",
                "typing",
                "core.coordination.agent_bus",
                "core.coordination.event_payloads"
            ],
            "complexity": 0
        },
        "archive\\orphans\\integrations\\cursor\\window_controller.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_setup_os_specific_handlers",
                "detect_all_instances",
                "activate_window",
                "get_window_by_id",
                "print_window_map",
                "close",
                "enum_callback",
                "get_window_info"
            ],
            "classes": {
                "WindowWrapper": {
                    "methods": [],
                    "docstring": "Cross-platform window handle wrapper.",
                    "base_classes": []
                },
                "CursorWindowController": {
                    "methods": [
                        "__init__",
                        "_setup_os_specific_handlers",
                        "detect_all_instances",
                        "activate_window",
                        "get_window_by_id",
                        "print_window_map",
                        "close"
                    ],
                    "docstring": "Controls multiple Cursor window instances.",
                    "base_classes": []
                }
            },
            "imports": [
                "logging",
                "platform",
                "dataclasses",
                "typing",
                "win32con",
                "win32gui",
                "win32process",
                "AppKit",
                "Xlib.display",
                "Xlib.X",
                "Xlib.Xatom",
                "Xlib.error"
            ],
            "complexity": 11
        },
        "archive\\orphans\\integrations\\cursor\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "imports": [],
            "complexity": 0,
            "error": "invalid syntax (<unknown>, line 4)"
        },
        "archive\\orphans\\llm_bridge\\bridge_adapters\\base_adapter.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "name",
                "_validate_config",
                "get_config_value",
                "__init__",
                "__str__"
            ],
            "classes": {
                "BaseAdapter": {
                    "methods": [
                        "__init__",
                        "name",
                        "_validate_config",
                        "get_config_value"
                    ],
                    "docstring": "Abstract Base Class for LLM Bridge Adapters.\n\nDefines the common interface required for interacting with different\nLLM services or models through a unified bridge.",
                    "base_classes": [
                        "ABC"
                    ]
                },
                "AdapterError": {
                    "methods": [
                        "__init__",
                        "__str__"
                    ],
                    "docstring": "Custom exception for errors originating from an adapter.",
                    "base_classes": [
                        "ToolError"
                    ]
                }
            },
            "imports": [
                "logging",
                "abc",
                "typing",
                "dreamos.core.errors"
            ],
            "complexity": 8
        },
        "archive\\orphans\\llm_bridge\\bridge_adapters\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "imports": [],
            "complexity": 0,
            "error": "invalid syntax (<unknown>, line 4)"
        },
        "archive\\orphans\\memory\\compaction_utils.py": {
            "language": ".py",
            "functions": [
                "compact_segment_data",
                "_sync_read_and_parse"
            ],
            "classes": {
                "CompactionError": {
                    "methods": [],
                    "docstring": "Exception raised for errors during memory compaction.",
                    "base_classes": [
                        "CoreMemoryError"
                    ]
                }
            },
            "imports": [
                "asyncio",
                "json",
                "logging",
                "zlib",
                "datetime",
                "pathlib",
                "typing",
                "dreamos.core.errors",
                "dreamos.core.utils.file_utils"
            ],
            "complexity": 3
        },
        "archive\\orphans\\memory\\memory_manager.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "__init__",
                "_init_schema",
                "__init__",
                "_segment_file",
                "render_narrative",
                "_rewrite_memory_safely",
                "_compact_segment",
                "_check_and_compact",
                "_sync_record",
                "_sync_init",
                "_sync_fetch",
                "_sync_export",
                "_sync_write",
                "_sync_read"
            ],
            "classes": {
                "MemoryManager": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Lightweight dict-of-dicts persisted to a single JSON file.\nGood for small, human-inspectable fragments. Now async-friendly.",
                    "base_classes": []
                },
                "DatabaseManager": {
                    "methods": [
                        "__init__",
                        "_init_schema"
                    ],
                    "docstring": "Async wrapper around SQLite for long-term interaction storage.\nUses asyncio.Lock for safe concurrent access from async contexts.",
                    "base_classes": []
                },
                "UnifiedMemoryManager": {
                    "methods": [
                        "__init__",
                        "_segment_file",
                        "render_narrative",
                        "_rewrite_memory_safely",
                        "_compact_segment",
                        "_check_and_compact"
                    ],
                    "docstring": "\u2022 LRU + compressed JSON per segment (system / prompts / feedback / context / interactions)\n\u2022 SQLite long-term store\n\u2022 Jinja2 narrative helpers",
                    "base_classes": []
                }
            },
            "imports": [
                "__future__",
                "asyncio",
                "json",
                "logging",
                "os",
                "sqlite3",
                "tempfile",
                "zlib",
                "datetime",
                "pathlib",
                "typing",
                "cachetools",
                "jinja2",
                "core.config"
            ],
            "complexity": 18
        },
        "archive\\orphans\\memory\\summarization_utils.py": {
            "language": ".py",
            "functions": [
                "_build_llm_summary_prompt",
                "_sync_read_and_parse"
            ],
            "classes": {
                "SummarizationError": {
                    "methods": [],
                    "docstring": "Exception raised for errors during memory summarization.",
                    "base_classes": [
                        "CoreMemoryError"
                    ]
                }
            },
            "imports": [
                "asyncio",
                "json",
                "logging",
                "zlib",
                "datetime",
                "pathlib",
                "typing",
                "dreamos.core.errors",
                "dreamos.core.utils.file_utils",
                "dreamos.integrations.openai_client",
                "utils.summarizer"
            ],
            "complexity": 3
        },
        "archive\\orphans\\memory\\summarizer.py": {
            "language": ".py",
            "functions": [
                "_generate_placeholder_summary",
                "summarize_memory_file",
                "__init__",
                "summarize"
            ],
            "classes": {
                "SummarizationStrategy": {
                    "methods": [],
                    "docstring": "Base class for summarization strategies.",
                    "base_classes": []
                },
                "SlidingWindowSummarization": {
                    "methods": [],
                    "docstring": "Placeholder for sliding window summarization.",
                    "base_classes": [
                        "SummarizationStrategy"
                    ]
                },
                "Summarizer": {
                    "methods": [
                        "__init__",
                        "summarize"
                    ],
                    "docstring": "Placeholder for the main summarizer class.",
                    "base_classes": []
                }
            },
            "imports": [
                "logging",
                "typing"
            ],
            "complexity": 7
        },
        "archive\\orphans\\memory\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "imports": [],
            "complexity": 0,
            "error": "invalid syntax (<unknown>, line 14)"
        },
        "archive\\orphans\\memory\\layers\\task_memory_layer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_sync_save",
                "_sync_load"
            ],
            "classes": {
                "TaskMemoryLayer": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Manages persistent storage and recall of task outcomes using a JSON file.\nEnsures basic safety for concurrent async updates and auto-saves on modification.",
                    "base_classes": []
                }
            },
            "imports": [
                "asyncio",
                "json",
                "logging",
                "time",
                "pathlib",
                "typing"
            ],
            "complexity": 4
        },
        "archive\\orphans\\modules\\scraper\\chatgpt_scraper\\scraper.py": {
            "language": ".py",
            "functions": [
                "log_interaction"
            ],
            "classes": {},
            "imports": [
                "datetime",
                "json",
                "os",
                "uuid"
            ],
            "complexity": 1
        },
        "archive\\orphans\\modules\\scraper\\chatgpt_scraper\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "imports": [],
            "complexity": 0
        },
        "archive\\orphans\\monitoring\\correlation_validator.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "configure",
                "get_instance",
                "validate_event",
                "validate_event_sequence",
                "log_issue",
                "get_issues",
                "reset_issues"
            ],
            "classes": {
                "BaseEvent": {
                    "methods": [],
                    "docstring": "Represents a basic event structure expected by BusCorrelationValidator.\n\nThis is a placeholder. The actual BaseEvent should provide these attributes.\nThe validator uses getattr, so it relies on duck-typing.\n\nAttributes:\n    event_id (str): A unique identifier for the event.\n    event_type (Any): The type of the event (e.g., an enum member, a string).\n                      The validator expects `event_type.name` if it's an enum-like object\n                      for logging, but primarily uses the `event_type` value itself for comparisons.\n    source_id (str): Identifier of the agent or component that emitted the event.\n    correlation_id (Optional[str]): The correlation ID for tracking related events.",
                    "base_classes": []
                },
                "BusCorrelationValidator": {
                    "methods": [
                        "__init__",
                        "configure",
                        "get_instance",
                        "validate_event",
                        "validate_event_sequence",
                        "log_issue",
                        "get_issues",
                        "reset_issues"
                    ],
                    "docstring": "Validates correlation ID usage in AgentBus events (Singleton).",
                    "base_classes": []
                }
            },
            "imports": [
                "logging",
                "re",
                "threading",
                "datetime",
                "typing"
            ],
            "complexity": 10
        },
        "archive\\orphans\\monitoring\\performance_logger.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "track_operation",
                "log_outcome",
                "_log_entry"
            ],
            "classes": {
                "PerformanceLogger": {
                    "methods": [
                        "__init__",
                        "track_operation",
                        "log_outcome",
                        "_log_entry"
                    ],
                    "docstring": "Logs performance metrics for agent operations and tasks.",
                    "base_classes": []
                }
            },
            "imports": [
                "json",
                "logging",
                "contextlib",
                "datetime",
                "pathlib",
                "typing",
                "core.config",
                "core.errors"
            ],
            "complexity": 5
        },
        "archive\\orphans\\monitoring\\prompt_execution_monitor.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "start_monitoring",
                "report_success",
                "report_failure",
                "_monitor_loop",
                "recover_and_requeue"
            ],
            "classes": {
                "PromptExecutionMonitor": {
                    "methods": [
                        "__init__",
                        "start_monitoring",
                        "report_success",
                        "report_failure",
                        "_monitor_loop",
                        "recover_and_requeue"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "imports": [
                "asyncio",
                "json",
                "logging",
                "time",
                "datetime",
                "pathlib",
                "typing",
                "dreamos.core.coordination.agent_bus",
                "dreamos.core.coordination.event_payloads",
                "dreamos.services.failed_prompt_archive",
                "core.coordination.message_patterns"
            ],
            "complexity": 7
        },
        "archive\\orphans\\monitoring\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "imports": [],
            "complexity": 0,
            "error": "invalid syntax (<unknown>, line 5)"
        },
        "archive\\orphans\\py\\agent1_taskboard_workaround.py": {
            "language": ".py",
            "functions": [
                "_acquire_lock_local",
                "_read_board_local",
                "_rewrite_memory_safely_local",
                "update_global_task_local",
                "__init__",
                "__enter__",
                "__exit__",
                "acquire",
                "release",
                "is_locked"
            ],
            "classes": {
                "_DummyLock": {
                    "methods": [
                        "__init__",
                        "__enter__",
                        "__exit__",
                        "acquire",
                        "release",
                        "is_locked"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "imports": [
                "datetime",
                "json",
                "logging",
                "os",
                "tempfile",
                "pathlib",
                "typing",
                "filelock"
            ],
            "complexity": 11
        },
        "archive\\orphans\\py\\agent2_infra_surgeon.py": {
            "language": ".py",
            "functions": [
                "__init__"
            ],
            "classes": {
                "Agent2InfraSurgeon": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Agent responsible for executing infrastructure-related tasks via GUI automation (Cursor).\nInteracts primarily by publishing CURSOR_INJECT_REQUEST events and listening for\nCURSOR_RETRIEVE_SUCCESS/FAILURE responses.",
                    "base_classes": [
                        "BaseAgent"
                    ]
                }
            },
            "imports": [
                "asyncio",
                "logging",
                "traceback",
                "uuid",
                "typing",
                "dreamos.core.comms.mailbox_utils",
                "dreamos.core.config",
                "dreamos.core.coordination.agent_bus",
                "dreamos.core.coordination.event_payloads",
                "dreamos.core.coordination.message_patterns",
                "coordination.project_board_manager",
                "core.coordination.base_agent",
                "dreamos.core.coordination.utils",
                "dreamos.core.errors"
            ],
            "complexity": 2
        },
        "archive\\orphans\\py\\agent7_validation_test.py": {
            "language": ".py",
            "functions": [
                "test_validation"
            ],
            "classes": {},
            "imports": [],
            "complexity": 1
        },
        "archive\\orphans\\py\\agent_1_stub.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_handle_plan"
            ],
            "classes": {
                "Agent1Stub": {
                    "methods": [
                        "__init__",
                        "_handle_plan"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "imports": [
                "logging",
                "datetime",
                "dreamos.coordination.agent_bus",
                "dreamos.coordination.dispatcher"
            ],
            "complexity": 3
        },
        "archive\\orphans\\py\\agent_file_manager_stub.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_resolve_path",
                "read_file",
                "write_file",
                "read_json",
                "write_json",
                "list_dir",
                "file_exists",
                "delete_file"
            ],
            "classes": {
                "AgentFileManager": {
                    "methods": [
                        "__init__",
                        "_resolve_path",
                        "read_file",
                        "write_file",
                        "read_json",
                        "write_json",
                        "list_dir",
                        "file_exists",
                        "delete_file"
                    ],
                    "docstring": "Provides a standardized interface for file system interactions across agents.\nManages concurrency and abstracts low-level file operations.\nSee proposal: runtime/agent_comms/proposals/file_manager_blueprint.md",
                    "base_classes": []
                }
            },
            "imports": [
                "json",
                "pathlib",
                "typing"
            ],
            "complexity": 10
        },
        "archive\\orphans\\py\\analyze_latency_trends.py": {
            "language": ".py",
            "functions": [
                "parse_stress_logs",
                "analyze_latency_trends",
                "__init__",
                "calculate_stats"
            ],
            "classes": {
                "StressRunStats": {
                    "methods": [
                        "__init__",
                        "calculate_stats"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "imports": [
                "logging",
                "re",
                "statistics",
                "sys",
                "datetime",
                "pathlib",
                "typing"
            ],
            "complexity": 5
        },
        "archive\\orphans\\py\\anomaly_detector.py": {
            "language": ".py",
            "functions": [
                "normalize",
                "_try_unix",
                "_try_iso_format",
                "_try_log_format",
                "parse_line",
                "__init__",
                "check_record",
                "get_results",
                "__init__",
                "run_analysis",
                "_generate_report",
                "_generate_summary_report"
            ],
            "classes": {
                "TimestampNormalizer": {
                    "methods": [
                        "normalize",
                        "_try_unix",
                        "_try_iso_format",
                        "_try_log_format"
                    ],
                    "docstring": "Handles parsing and normalization of various timestamp formats to UTC datetime objects.",
                    "base_classes": []
                },
                "TelemetryParser": {
                    "methods": [
                        "parse_line"
                    ],
                    "docstring": "Parses raw log lines into structured telemetry records.",
                    "base_classes": []
                },
                "AnomalyDetector": {
                    "methods": [
                        "__init__",
                        "check_record",
                        "get_results"
                    ],
                    "docstring": "Identifies environmental shifts and timestamp inconsistencies.",
                    "base_classes": []
                },
                "TelemetryAnalyzer": {
                    "methods": [
                        "__init__",
                        "run_analysis",
                        "_generate_report",
                        "_generate_summary_report"
                    ],
                    "docstring": "Orchestrates parsing, analysis, and reporting.",
                    "base_classes": []
                }
            },
            "imports": [
                "json",
                "os",
                "datetime",
                "typing"
            ],
            "complexity": 16
        },
        "archive\\orphans\\py\\anomaly_predictor.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "imports": [],
            "complexity": 0,
            "error": "unexpected character after line continuation character (<unknown>, line 1)"
        },
        "archive\\orphans\\py\\automation_interface.py": {
            "language": ".py",
            "functions": [
                "trigger_action",
                "__init__",
                "__repr__",
                "__init__",
                "execute_task",
                "run_sequence",
                "register_automation_trigger"
            ],
            "classes": {
                "AutomationResult": {
                    "methods": [
                        "__init__",
                        "__repr__"
                    ],
                    "docstring": "Represents the result of an automation action.",
                    "base_classes": []
                },
                "AutomationInterface": {
                    "methods": [
                        "__init__",
                        "execute_task",
                        "run_sequence",
                        "register_automation_trigger"
                    ],
                    "docstring": "Provides a high-level API for defining and executing automation sequences.\nIt orchestrates calls to GUIController, TaskTrigger, and potentially other\nautomation-related modules.",
                    "base_classes": []
                }
            },
            "imports": [
                "typing",
                "pyautogui",
                "gui_controller",
                "gui_controller",
                "gui_controller",
                "gui_controller",
                "gui_controller",
                "gui_controller",
                "gui_controller",
                "gui_controller",
                "gui_controller"
            ],
            "complexity": 9
        },
        "archive\\orphans\\py\\azure_eventhub_channel.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "imports": [],
            "complexity": 0
        },
        "archive\\orphans\\py\\bloat_watcher.py": {
            "language": ".py",
            "functions": [
                "get_size",
                "format_size",
                "should_exclude",
                "scan_directory",
                "generate_report",
                "main"
            ],
            "classes": {},
            "imports": [
                "sys",
                "datetime",
                "pathlib",
                "typing"
            ],
            "complexity": 6
        },
        "archive\\orphans\\py\\bridge_expansion.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load_state",
                "_save_state",
                "subscribe",
                "unsubscribe",
                "publish",
                "sync_state",
                "get_message_history",
                "monitor_health",
                "process_events",
                "_handle_event",
                "_handle_message_event",
                "_handle_state_sync_event",
                "_handle_error_event",
                "start",
                "_handle_shutdown"
            ],
            "classes": {
                "BridgeExpansion": {
                    "methods": [
                        "__init__",
                        "_load_state",
                        "_save_state",
                        "subscribe",
                        "unsubscribe",
                        "publish",
                        "sync_state",
                        "get_message_history",
                        "monitor_health",
                        "process_events",
                        "_handle_event",
                        "_handle_message_event",
                        "_handle_state_sync_event",
                        "_handle_error_event",
                        "start",
                        "_handle_shutdown"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "imports": [
                "json",
                "logging",
                "queue",
                "signal",
                "sys",
                "time",
                "collections",
                "datetime",
                "pathlib",
                "typing"
            ],
            "complexity": 17
        },
        "archive\\orphans\\py\\bridge_fault_inspector.py": {
            "language": ".py",
            "functions": [
                "get_local_tz",
                "parse_stress_results",
                "parse_integrity_logs",
                "parse_agent_logs",
                "find_latency_spikes_near_duplicates",
                "find_failure_patterns"
            ],
            "classes": {},
            "imports": [
                "logging",
                "re",
                "sys",
                "datetime",
                "pathlib",
                "typing"
            ],
            "complexity": 6
        },
        "archive\\orphans\\py\\bridge_health_report.py": {
            "language": ".py",
            "functions": [
                "check_tool_stability",
                "check_bridge_logs",
                "check_component_availability",
                "generate_report",
                "parse_extraction_log",
                "parse_stress_test_data",
                "parse_agent_errors",
                "calculate_uptime",
                "generate_report"
            ],
            "classes": {},
            "imports": [
                "datetime",
                "logging",
                "re",
                "statistics",
                "sys",
                "collections",
                "datetime",
                "pathlib",
                "typing"
            ],
            "complexity": 9
        },
        "archive\\orphans\\py\\bridge_integrity_monitor.py": {
            "language": ".py",
            "functions": [
                "log_anomaly",
                "check_bridge_mode_config",
                "check_chatgpt_cookies",
                "check_config_yaml_paths",
                "watchdog_loop",
                "load_config"
            ],
            "classes": {
                "AppConfig": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": []
                },
                "ConfigurationError": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "Exception"
                    ]
                }
            },
            "imports": [
                "json",
                "logging",
                "sys",
                "time",
                "pathlib",
                "typing",
                "src.dreamos.core.config"
            ],
            "complexity": 8
        },
        "archive\\orphans\\py\\bridge_mutation_impact_report.py": {
            "language": ".py",
            "functions": [
                "load_baseline_metrics",
                "load_mutation_results",
                "generate_impact_report"
            ],
            "classes": {},
            "imports": [
                "logging",
                "sys",
                "pathlib",
                "typing"
            ],
            "complexity": 3
        },
        "archive\\orphans\\py\\calibrate_agent_gui.py": {
            "language": ".py",
            "functions": [
                "load_existing_coords",
                "save_coords",
                "calibrate_element",
                "main"
            ],
            "classes": {},
            "imports": [
                "argparse",
                "json",
                "logging",
                "time",
                "pathlib",
                "typing",
                "pyautogui"
            ],
            "complexity": 4
        },
        "archive\\orphans\\py\\captain_ai_self_prompter.py": {
            "language": ".py",
            "functions": [
                "get_latest_response_file",
                "run_self_prompt"
            ],
            "classes": {},
            "imports": [
                "json",
                "os",
                "re",
                "subprocess",
                "sys",
                "time",
                "datetime",
                "pathlib",
                "typing"
            ],
            "complexity": 2
        },
        "archive\\orphans\\py\\capture_gui_snippet.py": {
            "language": ".py",
            "functions": [
                "get_coordinates",
                "sanitize",
                "confirm",
                "choose_preset",
                "capture_snippet",
                "main"
            ],
            "classes": {},
            "imports": [
                "re",
                "time",
                "datetime",
                "pathlib",
                "pyautogui"
            ],
            "complexity": 6
        },
        "archive\\orphans\\py\\channel_loader.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "imports": [],
            "complexity": 0
        },
        "archive\\orphans\\py\\check_imports.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "_parse_file",
                "_check_import_resolution",
                "_detect_circular_imports",
                "validate",
                "dfs"
            ],
            "classes": {
                "ImportValidator": {
                    "methods": [
                        "__init__",
                        "_parse_file",
                        "_check_import_resolution",
                        "_detect_circular_imports",
                        "validate"
                    ],
                    "docstring": "Validates Python imports in the codebase.",
                    "base_classes": []
                }
            },
            "imports": [
                "ast",
                "logging",
                "sys",
                "pathlib",
                "typing"
            ],
            "complexity": 8
        },
        "archive\\orphans\\py\\chronicle_conversations.py": {
            "language": ".py",
            "functions": [
                "initialize_database",
                "load_latest_state",
                "save_cumulative_state",
                "parse_response",
                "update_cumulative_state",
                "run_chronicle"
            ],
            "classes": {},
            "imports": [
                "sys",
                "json",
                "logging",
                "time",
                "re",
                "sqlite3",
                "datetime",
                "pathlib",
                "dreamos.services.utils.chatgpt_scraper"
            ],
            "complexity": 6
        },
        "archive\\orphans\\py\\chrono_sentinel.py": {
            "language": ".py",
            "functions": [
                "log_to_ledger",
                "get_local_tz_cached",
                "parse_integrity_log_entry",
                "parse_stress_log_entry",
                "check_log_file",
                "run_sentinel"
            ],
            "classes": {},
            "imports": [
                "json",
                "logging",
                "re",
                "sys",
                "time",
                "datetime",
                "pathlib",
                "typing"
            ],
            "complexity": 6
        },
        "archive\\orphans\\py\\command_listener.py": {
            "language": ".py",
            "functions": [
                "start_listener",
                "on_created",
                "process_file"
            ],
            "classes": {
                "CommandFileHandler": {
                    "methods": [
                        "on_created",
                        "process_file"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "FileSystemEventHandler"
                    ]
                }
            },
            "imports": [
                "json",
                "logging",
                "time",
                "pathlib",
                "jsonschema",
                "dreamos.utils",
                "payload_handler",
                "watchdog.events",
                "watchdog.observers"
            ],
            "complexity": 4
        },
        "archive\\orphans\\py\\command_supervisor.py": {
            "language": ".py",
            "functions": [
                "main"
            ],
            "classes": {},
            "imports": [
                "argparse"
            ],
            "complexity": 1
        },
        "archive\\orphans\\py\\compile_devlog.py": {
            "language": ".py",
            "functions": [
                "compile_devlog"
            ],
            "classes": {},
            "imports": [
                "json",
                "logging",
                "sys",
                "pathlib"
            ],
            "complexity": 1
        },
        "archive\\orphans\\py\\config.py": {
            "language": ".py",
            "functions": [
                "find_project_root_marker",
                "setup_logging",
                "load_config",
                "get_config",
                "resolve_log_dir",
                "__init__",
                "_load_config",
                "get_field_value",
                "prepare_field_value",
                "__call__",
                "settings_customise_sources",
                "load"
            ],
            "classes": {
                "LoggingConfig": {
                    "methods": [
                        "resolve_log_dir"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "BaseModel"
                    ]
                },
                "PathsConfig": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "BaseModel"
                    ]
                },
                "OpenAIConfig": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "BaseModel"
                    ]
                },
                "ChatGPTScraperConfig": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "BaseModel"
                    ]
                },
                "GuiAutomationConfig": {
                    "methods": [],
                    "docstring": "Configuration for GUI automation features.",
                    "base_classes": [
                        "BaseModel"
                    ]
                },
                "AgentActivationConfig": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "BaseModel"
                    ]
                },
                "SwarmConfig": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "BaseModel"
                    ]
                },
                "AzureBlobConfig": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "BaseModel"
                    ]
                },
                "IntegrationsConfig": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "BaseModel"
                    ]
                },
                "MonitoringConfig": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "BaseModel"
                    ]
                },
                "HealthCheckConfig": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "BaseModel"
                    ]
                },
                "OrchestratorConfig": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "BaseModel"
                    ]
                },
                "PyAutoGUIBridgeConfig": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "BaseModel"
                    ]
                },
                "YamlConfigSettingsSource": {
                    "methods": [
                        "__init__",
                        "_load_config",
                        "get_field_value",
                        "prepare_field_value",
                        "__call__"
                    ],
                    "docstring": "A Pydantic settings source that loads configuration from a YAML file.\n\nThis class is used in conjunction with `AppConfig.settings_customise_sources`\nto enable loading application settings from a specified YAML configuration file.\nIt handles finding the YAML file (with priority to environment variables)\nand parsing its content.",
                    "base_classes": [
                        "PydanticBaseSettingsSource"
                    ]
                },
                "BasePolicyConfig": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "BaseModel"
                    ]
                },
                "CompactionPolicyConfig": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "BasePolicyConfig"
                    ]
                },
                "SummarizationConfig": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "BasePolicyConfig"
                    ]
                },
                "AgentMemoryPolicyOverride": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "BaseModel"
                    ]
                },
                "MemoryMaintenanceConfig": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "BaseModel"
                    ]
                },
                "AgentPointsSystemConfig": {
                    "methods": [],
                    "docstring": "Configuration for the agent points system.",
                    "base_classes": [
                        "BaseModel"
                    ]
                },
                "LogLevel": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "str",
                        "Enum"
                    ]
                },
                "OperatingMode": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "str",
                        "Enum"
                    ]
                },
                "AppConfig": {
                    "methods": [
                        "settings_customise_sources",
                        "load"
                    ],
                    "docstring": "Main application configuration loaded from environment variables and/or config file.",
                    "base_classes": [
                        "BaseSettings"
                    ]
                },
                "Config": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "imports": [
                "logging",
                "os",
                "threading",
                "enum",
                "pathlib",
                "typing",
                "yaml",
                "pydantic",
                "pydantic_settings",
                "dreamos.automation.config"
            ],
            "complexity": 36
        },
        "archive\\orphans\\py\\content_models.py": {
            "language": ".py",
            "functions": [],
            "classes": {
                "ContentPlan": {
                    "methods": [],
                    "docstring": "Represents a plan for generating a piece of content.",
                    "base_classes": [
                        "BaseModel"
                    ]
                },
                "ContentDraft": {
                    "methods": [],
                    "docstring": "Represents a generated draft of content based on a plan.",
                    "base_classes": [
                        "BaseModel"
                    ]
                }
            },
            "imports": [
                "typing",
                "pydantic"
            ],
            "complexity": 2
        },
        "archive\\orphans\\py\\context_injector.py": {
            "language": ".py",
            "functions": [
                "inject_context"
            ],
            "classes": {},
            "imports": [
                "json",
                "logging",
                "os"
            ],
            "complexity": 1
        },
        "archive\\orphans\\py\\cursor_bridge.py": {
            "language": ".py",
            "functions": [
                "publish_bridge_status",
                "_get_bridge_config",
                "_ensure_config",
                "handle_gpt_payload",
                "find_and_focus_cursor_window",
                "inject_prompt_into_cursor",
                "configure_response_area",
                "capture_response_area",
                "extract_text_from_image",
                "monitor_and_extract_response",
                "summarize_cursor_output",
                "interact_with_cursor",
                "parse_bridge_log",
                "push_telemetry",
                "simulate_gpt_call",
                "run_demo_scenario",
                "validate_full_cycle",
                "relay_prompt_via_web_and_gui",
                "log_telemetry",
                "__init__",
                "resolve"
            ],
            "classes": {
                "BusMessage": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "BaseModel"
                    ]
                },
                "CursorBridgeError": {
                    "methods": [],
                    "docstring": "Custom exception for Cursor Bridge specific errors.",
                    "base_classes": [
                        "Exception"
                    ]
                },
                "CursorInjectError": {
                    "methods": [],
                    "docstring": "Indicates an error during the injection phase (focusing, pasting, etc.).",
                    "base_classes": [
                        "CursorBridgeError"
                    ]
                },
                "CursorExtractError": {
                    "methods": [],
                    "docstring": "Indicates an error during the extraction phase (capture, OCR, stabilization).",
                    "base_classes": [
                        "CursorBridgeError"
                    ]
                },
                "ConfigWrapper": {
                    "methods": [
                        "__init__",
                        "resolve"
                    ],
                    "docstring": null,
                    "base_classes": []
                },
                "MessageTypePlaceholder": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "imports": [
                "hashlib",
                "json",
                "logging",
                "os",
                "platform",
                "re",
                "sys",
                "time",
                "uuid",
                "datetime",
                "pathlib",
                "typing",
                "pyautogui",
                "pyperclip",
                "dreamos.core.config",
                "dreamos.core.coordination.agent_bus",
                "PIL",
                "pydantic",
                "dreamos.core.coordination.enums",
                "pytesseract",
                "pydantic",
                "types",
                "dreamos.services.utils.chatgpt_scraper",
                "sys",
                "sys",
                "traceback",
                "traceback"
            ],
            "complexity": 27
        },
        "archive\\orphans\\py\\cursor_dispatcher.py": {
            "language": ".py",
            "functions": [
                "render_task_prompt",
                "load_queue",
                "save_queue",
                "dispatch_tasks",
                "run_loop"
            ],
            "classes": {},
            "imports": [
                "json",
                "logging",
                "os",
                "time",
                "pathlib",
                "dreamos.core.config",
                "utils.prompt_renderer",
                "virtual_desktop_runner",
                "threading"
            ],
            "complexity": 5
        },
        "archive\\orphans\\py\\cursor_fleet_launcher.py": {
            "language": ".py",
            "functions": [
                "launch_cursor_instance",
                "move_window",
                "get_cursor_windows",
                "assign_windows_to_monitors",
                "main"
            ],
            "classes": {},
            "imports": [
                "os",
                "subprocess",
                "time",
                "pygetwindow",
                "win32con",
                "win32gui",
                "dreamos.core.config",
                "screeninfo",
                "pygetwindow",
                "screeninfo",
                "win32con",
                "win32gui"
            ],
            "complexity": 5
        },
        "archive\\orphans\\py\\cursor_gpt_feedback.py": {
            "language": ".py",
            "functions": [
                "determine_result_type",
                "format_feedback"
            ],
            "classes": {},
            "imports": [
                "json",
                "sys"
            ],
            "complexity": 2
        },
        "archive\\orphans\\py\\dependency_extractor.py": {
            "language": ".py",
            "functions": [
                "extract_imports_from_file"
            ],
            "classes": {},
            "imports": [
                "ast",
                "pathlib",
                "typing"
            ],
            "complexity": 1
        },
        "archive\\orphans\\py\\disperse_tasks.py": {
            "language": ".py",
            "functions": [
                "verify_task_dispersal",
                "generate_completion_receipt",
                "disperse_tasks_to_inboxes"
            ],
            "classes": {},
            "imports": [
                "argparse",
                "json",
                "logging",
                "datetime",
                "pathlib",
                "typing"
            ],
            "complexity": 3
        },
        "archive\\orphans\\py\\dreamscape_controller.py": {
            "language": ".py",
            "functions": [
                "log_message",
                "load_deployment_config",
                "initialize_agents",
                "update_agent_points_file",
                "log_deployment_status",
                "map_saga_output_to_task",
                "dreamscape_controller_main",
                "__init__",
                "get_prompt_content",
                "perform_task",
                "write_to_devlog",
                "award_points"
            ],
            "classes": {
                "Agent": {
                    "methods": [
                        "__init__",
                        "get_prompt_content",
                        "perform_task",
                        "write_to_devlog",
                        "award_points"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "imports": [
                "datetime",
                "json",
                "os",
                "subprocess",
                "time",
                "pathlib",
                "yaml",
                "dreamos.utils"
            ],
            "complexity": 13
        },
        "archive\\orphans\\py\\drift_generator.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "imports": [
                "datetime",
                "random",
                "pytz"
            ],
            "complexity": 0
        },
        "archive\\orphans\\py\\drift_injector.py": {
            "language": ".py",
            "functions": [
                "normalize_timestamp_utc",
                "process_log_data"
            ],
            "classes": {},
            "imports": [
                "datetime",
                "pandas"
            ],
            "complexity": 2
        },
        "archive\\orphans\\py\\edit_file.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "imports": [],
            "complexity": 0
        },
        "archive\\orphans\\py\\episode_index_builder.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "_extract_artifacts",
                "_determine_status",
                "_parse_episode_file",
                "build_index"
            ],
            "classes": {
                "EpisodeIndexEntry": {
                    "methods": [],
                    "docstring": "Represents a single episode entry in the index.",
                    "base_classes": []
                },
                "EpisodeIndexBuilder": {
                    "methods": [
                        "__init__",
                        "_extract_artifacts",
                        "_determine_status",
                        "_parse_episode_file",
                        "build_index"
                    ],
                    "docstring": "Builds and maintains the global episode index.",
                    "base_classes": []
                }
            },
            "imports": [
                "logging",
                "dataclasses",
                "datetime",
                "pathlib",
                "typing",
                "yaml"
            ],
            "complexity": 8
        },
        "archive\\orphans\\py\\episode_parser.py": {
            "language": ".py",
            "functions": [
                "parse_episode_yaml",
                "validate_episode_structure"
            ],
            "classes": {
                "Task": {
                    "methods": [],
                    "docstring": "Represents a single task in the episode.",
                    "base_classes": []
                },
                "Milestone": {
                    "methods": [],
                    "docstring": "Represents a milestone in the episode.",
                    "base_classes": []
                },
                "EpisodeMetadata": {
                    "methods": [],
                    "docstring": "Represents the metadata of an episode.",
                    "base_classes": []
                }
            },
            "imports": [
                "argparse",
                "json",
                "logging",
                "dataclasses",
                "datetime",
                "pathlib",
                "typing",
                "yaml"
            ],
            "complexity": 5
        },
        "archive\\orphans\\py\\episode_status_sync.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_get_episode_flag_files",
                "_check_runtime_logs",
                "_get_task_board_status",
                "_determine_episode_status",
                "sync_episode_status",
                "sync_all_episodes"
            ],
            "classes": {
                "EpisodeStatus": {
                    "methods": [],
                    "docstring": "Episode completion status indicators.",
                    "base_classes": [
                        "Enum"
                    ]
                },
                "EpisodeStatusSync": {
                    "methods": [
                        "__init__",
                        "_get_episode_flag_files",
                        "_check_runtime_logs",
                        "_get_task_board_status",
                        "_determine_episode_status",
                        "sync_episode_status",
                        "sync_all_episodes"
                    ],
                    "docstring": "Synchronizes episode statuses by analyzing multiple sources.",
                    "base_classes": []
                }
            },
            "imports": [
                "logging",
                "enum",
                "pathlib",
                "typing",
                "file_io"
            ],
            "complexity": 9
        },
        "archive\\orphans\\py\\event_schemas.py": {
            "language": ".py",
            "functions": [],
            "classes": {
                "BaseEventPayload": {
                    "methods": [],
                    "docstring": "Base model containing fields common to most Dreamscape events.",
                    "base_classes": [
                        "BaseModel"
                    ]
                },
                "PlanRequestedPayload": {
                    "methods": [],
                    "docstring": "Payload for requesting a new content plan.",
                    "base_classes": [
                        "BaseEventPayload"
                    ]
                },
                "PlanGeneratedPayload": {
                    "methods": [],
                    "docstring": "Payload for publishing a newly generated content plan.",
                    "base_classes": [
                        "BaseEventPayload"
                    ]
                },
                "WritingRequestedPayload": {
                    "methods": [],
                    "docstring": "Payload for requesting content generation based on a plan.",
                    "base_classes": [
                        "BaseEventPayload"
                    ]
                },
                "DraftGeneratedPayload": {
                    "methods": [],
                    "docstring": "Payload for publishing a newly generated content draft.",
                    "base_classes": [
                        "BaseEventPayload"
                    ]
                },
                "PublishRequestedPayload": {
                    "methods": [],
                    "docstring": "Payload for requesting the publication of a content draft.",
                    "base_classes": [
                        "BaseEventPayload"
                    ]
                },
                "PlanFailedPayload": {
                    "methods": [],
                    "docstring": "Payload indicating a failure during content plan generation.",
                    "base_classes": [
                        "BaseEventPayload"
                    ]
                },
                "DraftFailedPayload": {
                    "methods": [],
                    "docstring": "Payload indicating a failure during content draft generation.",
                    "base_classes": [
                        "BaseEventPayload"
                    ]
                }
            },
            "imports": [
                "typing",
                "pydantic",
                "core.content_models"
            ],
            "complexity": 8
        },
        "archive\\orphans\\py\\event_types.py": {
            "language": ".py",
            "functions": [],
            "classes": {
                "DreamscapeEventType": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "Enum"
                    ]
                }
            },
            "imports": [
                "enum"
            ],
            "complexity": 1
        },
        "archive\\orphans\\py\\extract_cursor_response.py": {
            "language": ".py",
            "functions": [
                "_rand_pause",
                "_save_response",
                "_clipboard_changed",
                "extract_response",
                "cli"
            ],
            "classes": {},
            "imports": [
                "__future__",
                "argparse",
                "json",
                "logging",
                "random",
                "sys",
                "time",
                "datetime",
                "pathlib",
                "typing",
                "pyautogui",
                "pygetwindow",
                "pyperclip",
                "dreamos.utils.gui_utils",
                "dreamos.utils.path_utils",
                "dreamos.utils.gui_utils",
                "dreamos.utils.path_utils"
            ],
            "complexity": 5
        },
        "archive\\orphans\\py\\fault_inspector.py": {
            "language": ".py",
            "functions": [
                "parse_timestamp",
                "analyze_log_file",
                "check_reverse_chronology",
                "generate_report"
            ],
            "classes": {},
            "imports": [
                "json",
                "os",
                "re",
                "datetime"
            ],
            "complexity": 4
        },
        "archive\\orphans\\py\\feedback_patch.py": {
            "language": ".py",
            "functions": [
                "read_jsonl_data",
                "write_jsonl_data",
                "append_jsonl",
                "apply_schema_defaults_and_cleanup",
                "patch_feedback_anomalies"
            ],
            "classes": {},
            "imports": [
                "json",
                "logging",
                "os",
                "datetime",
                "jsonschema"
            ],
            "complexity": 5
        },
        "archive\\orphans\\py\\feedback_sentinel.py": {
            "language": ".py",
            "functions": [
                "ensure_dir_exists",
                "load_log",
                "save_log",
                "log_anomaly",
                "check_alert_condition",
                "process_file",
                "quarantine_file",
                "purge_old_logs",
                "sentinel_loop",
                "log_state_update",
                "update_swarm_state"
            ],
            "classes": {},
            "imports": [
                "glob",
                "hashlib",
                "json",
                "os",
                "sys",
                "time",
                "datetime"
            ],
            "complexity": 11
        },
        "archive\\orphans\\py\\feedback_trace_verifier.py": {
            "language": ".py",
            "functions": [
                "parse_timestamp",
                "read_jsonl",
                "write_jsonl",
                "create_flag_file",
                "verify_traces"
            ],
            "classes": {},
            "imports": [
                "json",
                "logging",
                "os",
                "datetime"
            ],
            "complexity": 5
        },
        "archive\\orphans\\py\\file_locking.py": {
            "language": ".py",
            "functions": [],
            "classes": {
                "LockAcquisitionError": {
                    "methods": [],
                    "docstring": "Raised when a file lock cannot be acquired within the specified timeout.\n\nThis typically occurs if another process or thread holds the lock for too\nlong. The original `filelock.Timeout` exception is chained for context.",
                    "base_classes": [
                        "DreamOSError"
                    ]
                },
                "LockDirectoryError": {
                    "methods": [],
                    "docstring": "Raised when the directory for the lock file cannot be created or accessed.\n\nThis usually indicates a filesystem permission issue or an invalid base\npath. The original `OSError` is chained for context.",
                    "base_classes": [
                        "DreamOSError"
                    ]
                }
            },
            "imports": [
                "asyncio",
                "logging",
                "os",
                "contextlib",
                "pathlib",
                "typing",
                "dreamos.core.errors",
                "filelock",
                "filelock"
            ],
            "complexity": 2
        },
        "archive\\orphans\\py\\find_duplicate_tasks.py": {
            "language": ".py",
            "functions": [
                "is_excluded",
                "parse_json_file",
                "parse_md_file",
                "find_task_files",
                "normalize",
                "find_duplicate_tasks",
                "backup_file",
                "get_task_metadata",
                "determine_canonical_task",
                "generate_markdown_report",
                "auto_fix_duplicates",
                "fix_json_duplicate",
                "fix_md_duplicate",
                "repair_json_content",
                "main"
            ],
            "classes": {},
            "imports": [
                "json",
                "logging",
                "re",
                "shutil",
                "collections",
                "datetime",
                "pathlib",
                "typing",
                "yaml",
                "sys"
            ],
            "complexity": 15
        },
        "archive\\orphans\\py\\fix_tenacity_example.py": {
            "language": ".py",
            "functions": [
                "might_fail"
            ],
            "classes": {
                "TransientError": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "Exception"
                    ]
                }
            },
            "imports": [
                "logging",
                "tenacity"
            ],
            "complexity": 2
        },
        "archive\\orphans\\py\\generate_chatgpt_cookies.py": {
            "language": ".py",
            "functions": [
                "main"
            ],
            "classes": {},
            "imports": [
                "dreamos.core.config",
                "dreamos.services.utils.chatgpt_scraper"
            ],
            "complexity": 1
        },
        "archive\\orphans\\py\\gpt_cursor_relay.py": {
            "language": ".py",
            "functions": [
                "process_gpt_command",
                "edit_file",
                "run_terminal_cmd",
                "codebase_search",
                "read_file",
                "grep_search"
            ],
            "classes": {
                "SimulatedCursorTools": {
                    "methods": [
                        "edit_file",
                        "run_terminal_cmd",
                        "codebase_search",
                        "read_file",
                        "grep_search"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "imports": [
                "json",
                "sys"
            ],
            "complexity": 7
        },
        "archive\\orphans\\py\\gui_automation.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "imports": [],
            "complexity": 0,
            "error": "unterminated string literal (detected at line 73) (<unknown>, line 73)"
        },
        "archive\\orphans\\py\\gui_controller.py": {
            "language": ".py",
            "functions": [
                "click",
                "move_to",
                "drag_to",
                "type_text",
                "press_key",
                "hotkey",
                "locate_on_screen",
                "wait_for_element",
                "get_screenshot",
                "__init__",
                "click_element",
                "type_text",
                "get_element_text"
            ],
            "classes": {
                "GUIController": {
                    "methods": [
                        "__init__",
                        "click_element",
                        "type_text",
                        "get_element_text"
                    ],
                    "docstring": "Manages and interacts with GUI elements for automation tasks.",
                    "base_classes": []
                }
            },
            "imports": [
                "time"
            ],
            "complexity": 14
        },
        "archive\\orphans\\py\\injector.py": {
            "language": ".py",
            "functions": [
                "simulate_cursor_injection",
                "generate_report"
            ],
            "classes": {},
            "imports": [
                "datetime",
                "json",
                "os",
                "random",
                "time"
            ],
            "complexity": 2
        },
        "archive\\orphans\\py\\loop_guard.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "imports": [],
            "complexity": 0,
            "error": "unexpected character after line continuation character (<unknown>, line 39)"
        },
        "archive\\orphans\\py\\main.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_init_tree_sitter_language",
                "analyze_file",
                "_analyze_python",
                "_analyze_rust",
                "_analyze_javascript",
                "__init__",
                "run",
                "__init__",
                "add_task",
                "wait_for_completion",
                "stop_workers",
                "__init__",
                "hash_file",
                "should_exclude",
                "process_file",
                "__init__",
                "load_existing_report",
                "save_report",
                "generate_init_files",
                "load_existing_chatgpt_context",
                "export_chatgpt_context",
                "__init__",
                "load_cache",
                "save_cache",
                "scan_project",
                "_process_file",
                "generate_init_files",
                "export_chatgpt_context",
                "categorize_agents",
                "_maturity_level",
                "_agent_type",
                "_traverse",
                "get_node_text",
                "_traverse"
            ],
            "classes": {
                "LanguageAnalyzer": {
                    "methods": [
                        "__init__",
                        "_init_tree_sitter_language",
                        "analyze_file",
                        "_analyze_python",
                        "_analyze_rust",
                        "_analyze_javascript"
                    ],
                    "docstring": "Handles language-specific code analysis for different programming languages.",
                    "base_classes": []
                },
                "BotWorker": {
                    "methods": [
                        "__init__",
                        "run"
                    ],
                    "docstring": "A background worker that pulls file tasks from a queue,\nprocesses them, and appends results to results_list.",
                    "base_classes": []
                },
                "MultibotManager": {
                    "methods": [
                        "__init__",
                        "add_task",
                        "wait_for_completion",
                        "stop_workers"
                    ],
                    "docstring": "Manages a pool of BotWorker threads.",
                    "base_classes": []
                },
                "FileProcessor": {
                    "methods": [
                        "__init__",
                        "hash_file",
                        "should_exclude",
                        "process_file"
                    ],
                    "docstring": "Handles file hashing, ignoring, caching checks, etc.",
                    "base_classes": []
                },
                "ReportGenerator": {
                    "methods": [
                        "__init__",
                        "load_existing_report",
                        "save_report",
                        "generate_init_files",
                        "load_existing_chatgpt_context",
                        "export_chatgpt_context"
                    ],
                    "docstring": "Handles merging new analysis into existing project_analysis.json and chatgpt context.",
                    "base_classes": []
                },
                "ProjectScanner": {
                    "methods": [
                        "__init__",
                        "load_cache",
                        "save_cache",
                        "scan_project",
                        "_process_file",
                        "generate_init_files",
                        "export_chatgpt_context",
                        "categorize_agents",
                        "_maturity_level",
                        "_agent_type"
                    ],
                    "docstring": "A universal project scanner that:\n  - Identifies Python, Rust, JS, TS files.\n  - Extracts functions, classes, routes, complexity.\n  - Caches file hashes to skip unchanged files.\n  - Detects moved files by matching file hashes.\n  - Merges new analysis into existing project_analysis.json (preserving old entries).\n  - Exports a merged ChatGPT context if requested (preserving old context data).\n  - Processes files asynchronously with BotWorker threads.\n  - Auto-generates __init__.py files for Python packages.",
                    "base_classes": []
                }
            },
            "imports": [
                "argparse",
                "asyncio",
                "logging",
                "os",
                "pathlib",
                "project_scanner",
                "tree_sitter",
                "collections",
                "jinja2"
            ],
            "complexity": 41
        },
        "archive\\orphans\\py\\midnight_runner.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load_state",
                "_save_state",
                "is_night_cycle",
                "adjust_resources",
                "monitor_health",
                "_get_memory_usage",
                "_get_cpu_usage",
                "handle_recovery",
                "_execute_recovery_protocol",
                "_reset_components",
                "_verify_system_state",
                "emergency_shutdown",
                "run_cycle",
                "_process_events",
                "_handle_event",
                "_handle_task_completion",
                "_handle_error_event",
                "_handle_state_change",
                "start",
                "_handle_shutdown"
            ],
            "classes": {
                "MidnightRunner": {
                    "methods": [
                        "__init__",
                        "_load_state",
                        "_save_state",
                        "is_night_cycle",
                        "adjust_resources",
                        "monitor_health",
                        "_get_memory_usage",
                        "_get_cpu_usage",
                        "handle_recovery",
                        "_execute_recovery_protocol",
                        "_reset_components",
                        "_verify_system_state",
                        "emergency_shutdown",
                        "run_cycle",
                        "_process_events",
                        "_handle_event",
                        "_handle_task_completion",
                        "_handle_error_event",
                        "_handle_state_change",
                        "start",
                        "_handle_shutdown"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "imports": [
                "json",
                "logging",
                "queue",
                "signal",
                "sys",
                "time",
                "datetime",
                "datetime",
                "pathlib",
                "typing",
                "psutil",
                "psutil"
            ],
            "complexity": 22
        },
        "archive\\orphans\\py\\mock_bridge_loop.py": {
            "language": ".py",
            "functions": [
                "generate_mock_response",
                "main"
            ],
            "classes": {},
            "imports": [
                "argparse",
                "json",
                "sys",
                "time",
                "datetime",
                "pathlib"
            ],
            "complexity": 2
        },
        "archive\\orphans\\py\\module_mapper.py": {
            "language": ".py",
            "functions": [
                "_classify_service_type_and_pattern",
                "_classify_tool_util_functionality",
                "_get_primary_class_docstring",
                "load_analysis",
                "normalise",
                "categorize",
                "fmt_row",
                "build_tables",
                "inject_tables",
                "main"
            ],
            "classes": {
                "Cfg": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": []
                },
                "Category": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "Enum"
                    ]
                }
            },
            "imports": [
                "__future__",
                "json",
                "logging",
                "re",
                "sys",
                "dataclasses",
                "enum",
                "pathlib",
                "typing",
                "devtools.dependency_extractor"
            ],
            "complexity": 12
        },
        "archive\\orphans\\py\\monitor_bridge.py": {
            "language": ".py",
            "functions": [
                "setup_logging",
                "run_bridge_check"
            ],
            "classes": {},
            "imports": [
                "logging",
                "sys",
                "pathlib",
                "dreamos.core.config",
                "dreamos.tools.cursor_bridge"
            ],
            "complexity": 2
        },
        "archive\\orphans\\py\\move_application_content.py": {
            "language": ".py",
            "functions": [
                "ensure_target_app_dir_exists",
                "move_application_code"
            ],
            "classes": {},
            "imports": [
                "argparse",
                "os",
                "subprocess"
            ],
            "complexity": 2
        },
        "archive\\orphans\\py\\move_archived_content.py": {
            "language": ".py",
            "functions": [
                "move_content_for_mapping"
            ],
            "classes": {},
            "imports": [
                "argparse",
                "os",
                "subprocess"
            ],
            "complexity": 1
        },
        "archive\\orphans\\py\\move_bloat.py": {
            "language": ".py",
            "functions": [
                "get_dir_size",
                "find_top_bloat_dir",
                "move_bloat_dir"
            ],
            "classes": {},
            "imports": [
                "os",
                "shutil",
                "pathlib"
            ],
            "complexity": 3
        },
        "archive\\orphans\\py\\move_orphans.py": {
            "language": ".py",
            "functions": [
                "move_orphans"
            ],
            "classes": {},
            "imports": [
                "shutil",
                "pathlib",
                "scan_for_orphans"
            ],
            "complexity": 1
        },
        "archive\\orphans\\py\\move_sandbox_content.py": {
            "language": ".py",
            "functions": [
                "ensure_target_dir_exists",
                "move_sandbox_item"
            ],
            "classes": {},
            "imports": [
                "argparse",
                "os",
                "subprocess"
            ],
            "complexity": 2
        },
        "archive\\orphans\\py\\mutation_test_bridge.py": {
            "language": ".py",
            "functions": [
                "register_fault",
                "fault_none",
                "fault_empty_string",
                "fault_raise_exception",
                "fault_delay",
                "fault_return_corrupted_data",
                "fault_return_false",
                "load_mutation_scenarios",
                "create_mutator",
                "run_mutation_test",
                "mutated_func",
                "mutated_func",
                "mutated_func",
                "mutated_func",
                "mutated_func",
                "mutated_func"
            ],
            "classes": {},
            "imports": [
                "json",
                "logging",
                "sys",
                "time",
                "pathlib",
                "typing",
                "unittest.mock",
                "concurrent.futures",
                "socket",
                "scripts.thea_to_cursor_agent",
                "src.dreamos.core.config"
            ],
            "complexity": 16
        },
        "archive\\orphans\\py\\new_agent.py": {
            "language": ".py",
            "functions": [
                "read_mailbox",
                "write_mailbox",
                "process_inbox",
                "update_loop_state",
                "check_idle_state",
                "new_agent_loop"
            ],
            "classes": {},
            "imports": [
                "json",
                "os",
                "time"
            ],
            "complexity": 6
        },
        "archive\\orphans\\py\\normalize_time.py": {
            "language": ".py",
            "functions": [
                "normalize_utc_iso_line",
                "process_file"
            ],
            "classes": {},
            "imports": [
                "datetime",
                "json",
                "logging",
                "sys",
                "datetime",
                "pathlib"
            ],
            "complexity": 2
        },
        "archive\\orphans\\py\\onboarding_message_injector.py": {
            "language": ".py",
            "functions": [
                "inject_initial_onboarding_message"
            ],
            "classes": {},
            "imports": [
                "datetime",
                "json",
                "logging",
                "os"
            ],
            "complexity": 1
        },
        "archive\\orphans\\py\\onboarding_utils.py": {
            "language": ".py",
            "functions": [
                "write_yaml_sync",
                "read_yaml_sync"
            ],
            "classes": {},
            "imports": [
                "asyncio",
                "logging",
                "datetime",
                "typing",
                "yaml",
                "dreamos.utils",
                "dreamos.utils.file_locking",
                "dreamos.core.config"
            ],
            "complexity": 2
        },
        "archive\\orphans\\py\\parser.py": {
            "language": ".py",
            "functions": [
                "parse_cursor_log"
            ],
            "classes": {},
            "imports": [
                "datetime",
                "json",
                "os"
            ],
            "complexity": 1
        },
        "archive\\orphans\\py\\payload_handler.py": {
            "language": ".py",
            "functions": [
                "call_cursor_api",
                "validate_parameters",
                "process_gpt_command"
            ],
            "classes": {},
            "imports": [
                "logging",
                "os",
                "sys",
                "status_pusher"
            ],
            "complexity": 3
        },
        "archive\\orphans\\py\\planner_agent.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_build_planning_prompt",
                "_parse_llm_outline"
            ],
            "classes": {
                "PlannerAgent": {
                    "methods": [
                        "__init__",
                        "_build_planning_prompt",
                        "_parse_llm_outline"
                    ],
                    "docstring": "Agent responsible for decomposing high-level goals into actionable tasks.",
                    "base_classes": [
                        "BaseAgent"
                    ]
                }
            },
            "imports": [
                "asyncio",
                "logging",
                "traceback",
                "typing",
                "dreamos.core.config",
                "dreamos.core.coordination.base_agent",
                "dreamos.integrations.openai_client",
                "core.content_models"
            ],
            "complexity": 4
        },
        "archive\\orphans\\py\\process_logs.py": {
            "language": ".py",
            "functions": [
                "normalize_timestamp_utc",
                "process_log_data"
            ],
            "classes": {},
            "imports": [
                "datetime",
                "pandas"
            ],
            "complexity": 2
        },
        "archive\\orphans\\py\\prompt_dispatcher.py": {
            "language": ".py",
            "functions": [
                "scrape_new_prompts",
                "determine_prompt_priority",
                "route_prompt_to_agent"
            ],
            "classes": {},
            "imports": [
                "asyncio",
                "logging",
                "random",
                "uuid",
                "typing",
                "dreamos.coordination.agent_bus",
                "dreamos.core.coordination.message_patterns",
                "dreamos.services.utils.chatgpt_scraper"
            ],
            "complexity": 3
        },
        "archive\\orphans\\py\\pyqt_dashboard.py": {
            "language": ".py",
            "functions": [
                "get_agent_inbox_data",
                "__init__",
                "load_agent_inboxes",
                "display_agent_inbox"
            ],
            "classes": {
                "AgentInboxDashboard": {
                    "methods": [
                        "__init__",
                        "load_agent_inboxes",
                        "display_agent_inbox"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "QMainWindow"
                    ]
                }
            },
            "imports": [
                "sys",
                "json",
                "pathlib",
                "PyQt5.QtCore",
                "PyQt5.QtWidgets"
            ],
            "complexity": 5
        },
        "archive\\orphans\\py\\refactor_task_ids.py": {
            "language": ".py",
            "functions": [
                "find_files_to_scan",
                "update_task_references",
                "main"
            ],
            "classes": {},
            "imports": [
                "json",
                "logging",
                "re",
                "sys",
                "pathlib",
                "typing"
            ],
            "complexity": 3
        },
        "archive\\orphans\\py\\reflection_agent.py": {
            "language": ".py",
            "functions": [
                "load_rules_from_rulebook",
                "generate_reflection",
                "save_reflection",
                "submit_proposal",
                "start_monitoring",
                "__init__",
                "on_created"
            ],
            "classes": {
                "AlertHandler": {
                    "methods": [
                        "__init__",
                        "on_created"
                    ],
                    "docstring": "Handles new alert files in the inbox directory.",
                    "base_classes": [
                        "FileSystemEventHandler"
                    ]
                }
            },
            "imports": [
                "json",
                "pathlib",
                "typing",
                "yaml",
                "dreamos.core.config",
                "watchdog.events",
                "watchdog.observers",
                "time",
                "traceback"
            ],
            "complexity": 8
        },
        "archive\\orphans\\py\\regenerate_init_files.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "analyze_module",
                "__init__",
                "generate_init_file",
                "regenerate_all"
            ],
            "classes": {
                "ModuleAnalyzer": {
                    "methods": [
                        "__init__",
                        "analyze_module"
                    ],
                    "docstring": "Analyzes Python modules to determine their exports and dependencies.",
                    "base_classes": []
                },
                "InitFileGenerator": {
                    "methods": [
                        "__init__",
                        "generate_init_file",
                        "regenerate_all"
                    ],
                    "docstring": "Generates __init__.py files with proper exports and documentation.",
                    "base_classes": []
                }
            },
            "imports": [
                "ast",
                "os",
                "pathlib",
                "typing"
            ],
            "complexity": 8
        },
        "archive\\orphans\\py\\response_retriever.py": {
            "language": ".py",
            "functions": [
                "get_response",
                "__init__",
                "retrieve_agent_response"
            ],
            "classes": {
                "ResponseRetriever": {
                    "methods": [
                        "__init__",
                        "retrieve_agent_response"
                    ],
                    "docstring": "Handles retrieving agent responses by clicking 'Copy' and reading the clipboard.",
                    "base_classes": []
                }
            },
            "imports": [
                "logging",
                "time",
                "pathlib",
                "typing",
                "utils.gui_utils",
                "utils.path_utils",
                "pyautogui",
                "pyperclip"
            ],
            "complexity": 4
        },
        "archive\\orphans\\py\\robust_move_and_git_track.py": {
            "language": ".py",
            "functions": [
                "run_git_command",
                "robust_move_item"
            ],
            "classes": {},
            "imports": [
                "argparse",
                "json",
                "os",
                "shutil",
                "subprocess",
                "pathlib",
                "dreamos.utils"
            ],
            "complexity": 2
        },
        "archive\\orphans\\py\\run_bridge_service.py": {
            "language": ".py",
            "functions": [
                "main"
            ],
            "classes": {},
            "imports": [
                "argparse",
                "logging",
                "os",
                "src.dreamos.bridge.http_bridge_service",
                "uvicorn"
            ],
            "complexity": 1
        },
        "archive\\orphans\\py\\run_loop.py": {
            "language": ".py",
            "functions": [
                "main",
                "chatgpt_loop"
            ],
            "classes": {},
            "imports": [
                "argparse",
                "asyncio",
                "logging",
                "threading",
                "time",
                "dreamos.agents.chatgpt_web_agent",
                "dreamos.agents.cursor_worker",
                "dreamos.agents.supervisor_agent",
                "dreamos.core.config"
            ],
            "complexity": 2
        },
        "archive\\orphans\\py\\run_orchestrator.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "imports": [
                "asyncio",
                "logging",
                "signal",
                "sys",
                "pathlib",
                "dreamos.automation.cursor_orchestrator",
                "dreamos.core.agent_bus",
                "dreamos.core.config"
            ],
            "complexity": 0
        },
        "archive\\orphans\\py\\run_vulture.py": {
            "language": ".py",
            "functions": [
                "run_vulture",
                "main"
            ],
            "classes": {},
            "imports": [
                "argparse",
                "json",
                "logging",
                "subprocess",
                "sys",
                "pathlib"
            ],
            "complexity": 2
        },
        "archive\\orphans\\py\\safe_file_writer.py": {
            "language": ".py",
            "functions": [
                "safe_write_file"
            ],
            "classes": {
                "SafeWriteError": {
                    "methods": [],
                    "docstring": "Custom exception raised for errors during the safe file writing process.\n\nThis includes errors related to:\n- Invalid input parameters (path, content type).\n- Failure to acquire the file lock within the timeout period.\n- IOErrors during temporary file writing or final file replacement.\n- Unexpected exceptions during the write/rename process.",
                    "base_classes": [
                        "IOError"
                    ]
                }
            },
            "imports": [
                "logging",
                "os",
                "uuid",
                "pathlib",
                "filelock"
            ],
            "complexity": 2
        },
        "archive\\orphans\\py\\scan_for_orphans.py": {
            "language": ".py",
            "functions": [
                "find_orphans"
            ],
            "classes": {},
            "imports": [
                "ast",
                "sys",
                "time",
                "pathlib"
            ],
            "complexity": 1
        },
        "archive\\orphans\\py\\scan_for_rogue_files.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "imports": [
                "os"
            ],
            "complexity": 0
        },
        "archive\\orphans\\py\\setup.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "imports": [
                "setuptools"
            ],
            "complexity": 0
        },
        "archive\\orphans\\py\\simulate_tool_timeout.py": {
            "language": ".py",
            "functions": [
                "simulate_potential_timeout",
                "main"
            ],
            "classes": {},
            "imports": [
                "argparse",
                "logging",
                "random",
                "sys",
                "time",
                "pathlib"
            ],
            "complexity": 2
        },
        "archive\\orphans\\py\\sky_viewer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "send_fullscreen_toggle",
                "toggle_fullscreen",
                "open_splash"
            ],
            "classes": {
                "SkyViewer": {
                    "methods": [
                        "__init__",
                        "send_fullscreen_toggle",
                        "toggle_fullscreen",
                        "open_splash"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "QMainWindow"
                    ]
                }
            },
            "imports": [
                "os",
                "sys",
                "PyQt5.QtCore",
                "PyQt5.QtWebEngineWidgets",
                "PyQt5.QtWidgets"
            ],
            "complexity": 5
        },
        "archive\\orphans\\py\\state.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_init_schema",
                "fetch_agents",
                "update_agent_queue_status",
                "fetch_tasks",
                "update_task_lane",
                "add_devlog_entry",
                "fetch_devlog_entries"
            ],
            "classes": {
                "StateDB": {
                    "methods": [
                        "__init__",
                        "_init_schema",
                        "fetch_agents",
                        "update_agent_queue_status",
                        "fetch_tasks",
                        "update_task_lane",
                        "add_devlog_entry",
                        "fetch_devlog_entries"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "imports": [
                "json",
                "pathlib",
                "sqlite3",
                "time"
            ],
            "complexity": 9
        },
        "archive\\orphans\\py\\status_pusher.py": {
            "language": ".py",
            "functions": [
                "format_feedback",
                "push_feedback"
            ],
            "classes": {},
            "imports": [
                "json",
                "logging",
                "os",
                "datetime"
            ],
            "complexity": 2
        },
        "archive\\orphans\\py\\stress_test_bridge.py": {
            "language": ".py",
            "functions": [
                "rotate_log_if_needed",
                "write_results_log",
                "run_stress_test",
                "audit_results",
                "cleanup_stress_test",
                "noisy_scraper_extract",
                "noisy_gui_extract"
            ],
            "classes": {},
            "imports": [
                "logging",
                "random",
                "shutil",
                "sys",
                "time",
                "uuid",
                "datetime",
                "pathlib",
                "typing",
                "unittest.mock",
                "scripts.bridge_integrity_monitor",
                "scripts.thea_to_cursor_agent",
                "src.dreamos.core.config",
                "src.dreamos.services.utils.chatgpt_scraper",
                "src.dreamos.tools.cursor_bridge.cursor_bridge"
            ],
            "complexity": 7
        },
        "archive\\orphans\\py\\summarizer.py": {
            "language": ".py",
            "functions": [
                "load_episode_yaml",
                "generate_markdown_briefing",
                "generate_lore_json",
                "generate_devlog",
                "write_episode_briefing",
                "write_lore_json",
                "main"
            ],
            "classes": {},
            "imports": [
                "argparse",
                "json",
                "logging",
                "pathlib",
                "typing",
                "yaml"
            ],
            "complexity": 7
        },
        "archive\\orphans\\py\\summary_stream_watch.py": {
            "language": ".py",
            "functions": [
                "get_current_timestamp",
                "log_status",
                "log_integrity_event",
                "read_new_jsonl_lines",
                "find_correlation"
            ],
            "classes": {},
            "imports": [
                "datetime",
                "hashlib",
                "json",
                "os",
                "time"
            ],
            "complexity": 5
        },
        "archive\\orphans\\py\\summary_validator.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "imports": [],
            "complexity": 0,
            "error": "unexpected character after line continuation character (<unknown>, line 1)"
        },
        "archive\\orphans\\py\\swarm_monitor.py": {
            "language": ".py",
            "functions": [
                "log_integrity_issue",
                "trigger_alert",
                "manage_stall_flag",
                "trigger_escalation_flag",
                "parse_iso_utc",
                "run_monitor"
            ],
            "classes": {},
            "imports": [
                "json",
                "logging",
                "sys",
                "time",
                "datetime",
                "pathlib",
                "typing",
                "dreamos.core.swarm_sync"
            ],
            "complexity": 6
        },
        "archive\\orphans\\py\\sync_episode_status.py": {
            "language": ".py",
            "functions": [
                "setup_logging",
                "main"
            ],
            "classes": {},
            "imports": [
                "argparse",
                "logging",
                "pathlib",
                "utils.episode_status_sync"
            ],
            "complexity": 2
        },
        "archive\\orphans\\py\\task_editor.py": {
            "language": ".py",
            "functions": [
                "main"
            ],
            "classes": {},
            "imports": [
                "argparse"
            ],
            "complexity": 1
        },
        "archive\\orphans\\py\\task_flow_migration.py": {
            "language": ".py",
            "functions": [
                "setup_logging",
                "create_backup",
                "read_jsonl_file",
                "transform_task",
                "merge_into_task_board",
                "deprecate_old_files",
                "main"
            ],
            "classes": {},
            "imports": [
                "argparse",
                "datetime",
                "json",
                "logging",
                "shutil",
                "sys",
                "pathlib"
            ],
            "complexity": 7
        },
        "archive\\orphans\\py\\task_trigger.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "register_trigger",
                "unregister_trigger",
                "_start_monitoring",
                "_stop_monitoring"
            ],
            "classes": {
                "TaskTrigger": {
                    "methods": [
                        "__init__",
                        "register_trigger",
                        "unregister_trigger",
                        "_start_monitoring",
                        "_stop_monitoring"
                    ],
                    "docstring": "Listens for events or conditions to trigger automation tasks.\nThis could involve monitoring file changes, time schedules, API callbacks, message queues, etc.",
                    "base_classes": []
                }
            },
            "imports": [],
            "complexity": 6
        },
        "archive\\orphans\\py\\temporal_ledger_auditor.py": {
            "language": ".py",
            "functions": [
                "parse_iso_utc",
                "audit_ledger"
            ],
            "classes": {},
            "imports": [
                "json",
                "logging",
                "sys",
                "collections",
                "datetime",
                "pathlib",
                "typing"
            ],
            "complexity": 2
        },
        "archive\\orphans\\py\\test.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "imports": [],
            "complexity": 0
        },
        "archive\\orphans\\py\\test_browser_utils.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "imports": [],
            "complexity": 0
        },
        "archive\\orphans\\py\\test_cli.py": {
            "language": ".py",
            "functions": [
                "test_cli_help",
                "test_task_editor_command",
                "test_command_supervisor_command",
                "test_task_editor_args",
                "test_command_supervisor_args"
            ],
            "classes": {},
            "imports": [
                "unittest.mock",
                "pytest",
                "dreamos.cli"
            ],
            "complexity": 5
        },
        "archive\\orphans\\py\\test_drift_detection.py": {
            "language": ".py",
            "functions": [
                "parse_expected_utc",
                "calculate_drift",
                "run_test"
            ],
            "classes": {},
            "imports": [
                "os",
                "re",
                "sys",
                "datetime",
                "drift_injector"
            ],
            "complexity": 3
        },
        "archive\\orphans\\py\\test_edit_file_failures.py": {
            "language": ".py",
            "functions": [
                "setup_test_files",
                "attempt_edit_overwrite",
                "verify_file_content"
            ],
            "classes": {},
            "imports": [
                "json",
                "logging",
                "os",
                "time",
                "pathlib"
            ],
            "complexity": 3
        },
        "archive\\orphans\\py\\test_file_integrity_recovery.py": {
            "language": ".py",
            "functions": [
                "calculate_sha256",
                "setup_test_environment",
                "simulate_corruption",
                "attempt_recovery",
                "verify_integrity"
            ],
            "classes": {},
            "imports": [
                "hashlib",
                "json",
                "logging",
                "shutil",
                "time",
                "pathlib"
            ],
            "complexity": 5
        },
        "archive\\orphans\\py\\test_night_cycle.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_simulate_time_progression",
                "_simulate_night_cycle_start",
                "_simulate_midnight_events",
                "_simulate_early_morning_events",
                "_simulate_day_cycle_start",
                "_simulate_random_event",
                "_monitor_systems",
                "start_simulation",
                "_handle_shutdown",
                "stop_simulation"
            ],
            "classes": {
                "NightCycleSimulator": {
                    "methods": [
                        "__init__",
                        "_simulate_time_progression",
                        "_simulate_night_cycle_start",
                        "_simulate_midnight_events",
                        "_simulate_early_morning_events",
                        "_simulate_day_cycle_start",
                        "_simulate_random_event",
                        "_monitor_systems",
                        "start_simulation",
                        "_handle_shutdown",
                        "stop_simulation"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "imports": [
                "logging",
                "random",
                "signal",
                "sys",
                "threading",
                "time",
                "datetime",
                "bridge_expansion",
                "midnight_runner"
            ],
            "complexity": 12
        },
        "archive\\orphans\\py\\test_payload_handler.py": {
            "language": ".py",
            "functions": [
                "setUp",
                "tearDown",
                "find_feedback_file",
                "read_feedback_file",
                "test_validate_parameters_valid",
                "test_validate_parameters_missing",
                "test_validate_parameters_unknown_command",
                "test_process_valid_command_generates_feedback",
                "test_process_missing_params_generates_error_feedback",
                "test_process_invalid_structure_generates_error_feedback",
                "test_process_harmful_command_generates_error_feedback"
            ],
            "classes": {
                "TestPayloadHandlerFeedbackIntegration": {
                    "methods": [
                        "setUp",
                        "tearDown",
                        "find_feedback_file",
                        "read_feedback_file",
                        "test_validate_parameters_valid",
                        "test_validate_parameters_missing",
                        "test_validate_parameters_unknown_command",
                        "test_process_valid_command_generates_feedback",
                        "test_process_missing_params_generates_error_feedback",
                        "test_process_invalid_structure_generates_error_feedback",
                        "test_process_harmful_command_generates_error_feedback"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "imports": [
                "glob",
                "json",
                "os",
                "sys",
                "time",
                "unittest",
                "payload_handler",
                "status_pusher"
            ],
            "complexity": 12
        },
        "archive\\orphans\\py\\test_points_config.py": {
            "language": ".py",
            "functions": [
                "main"
            ],
            "classes": {},
            "imports": [
                "logging",
                "sys",
                "pathlib",
                "dreamos.core.config",
                "dreamos.governance.agent_points_manager"
            ],
            "complexity": 1
        },
        "archive\\orphans\\py\\test_read_file_diagnostics.py": {
            "language": ".py",
            "functions": [
                "test_read_file",
                "main"
            ],
            "classes": {},
            "imports": [
                "time",
                "traceback",
                "pathlib",
                "dreamos.tools.read_file"
            ],
            "complexity": 2
        },
        "archive\\orphans\\py\\test_runner.py": {
            "language": ".py",
            "functions": [
                "run_cli_tool",
                "test_all_tools"
            ],
            "classes": {},
            "imports": [
                "subprocess",
                "sys",
                "typing"
            ],
            "complexity": 2
        },
        "archive\\orphans\\py\\test_scraper_interactively.py": {
            "language": ".py",
            "functions": [
                "main"
            ],
            "classes": {},
            "imports": [
                "dreamos.core.config",
                "dreamos.services.utils.chatgpt_scraper"
            ],
            "complexity": 1
        },
        "archive\\orphans\\py\\test_status_pusher.py": {
            "language": ".py",
            "functions": [
                "setUp",
                "test_format_feedback_structure",
                "test_push_feedback_creates_file",
                "test_push_feedback_handles_complex_result"
            ],
            "classes": {
                "TestStatusPusher": {
                    "methods": [
                        "setUp",
                        "test_format_feedback_structure",
                        "test_push_feedback_creates_file",
                        "test_push_feedback_handles_complex_result"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "imports": [
                "json",
                "os",
                "sys",
                "unittest",
                "datetime",
                "status_pusher"
            ],
            "complexity": 5
        },
        "archive\\orphans\\py\\test_thea_bridge_pipeline.py": {
            "language": ".py",
            "functions": [
                "create_dummy_config",
                "setUp",
                "run_agent_cycle",
                "test_gui_mode_cycle",
                "test_gui_mode_no_new_reply",
                "test_scraper_mode_cycle",
                "test_scraper_mode_no_new_reply",
                "test_hybrid_mode_scraper_first",
                "test_hybrid_mode_gui_fallback",
                "test_hybrid_mode_both_fail",
                "test_duplicate_suppression"
            ],
            "classes": {
                "TestTheaBridgePipeline": {
                    "methods": [
                        "setUp",
                        "run_agent_cycle",
                        "test_gui_mode_cycle",
                        "test_gui_mode_no_new_reply",
                        "test_scraper_mode_cycle",
                        "test_scraper_mode_no_new_reply",
                        "test_hybrid_mode_scraper_first",
                        "test_hybrid_mode_gui_fallback",
                        "test_hybrid_mode_both_fail",
                        "test_duplicate_suppression"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "imports": [
                "sys",
                "unittest",
                "uuid",
                "pathlib",
                "unittest.mock",
                "thea_to_cursor_agent",
                "src.dreamos.core.config"
            ],
            "complexity": 12
        },
        "archive\\orphans\\py\\thea_to_cursor_agent.py": {
            "language": ".py",
            "functions": [
                "check_dependencies",
                "load_bridge_mode",
                "log_extraction",
                "extract_via_gui",
                "extract_via_scraper",
                "main_loop"
            ],
            "classes": {},
            "imports": [
                "json",
                "logging",
                "sys",
                "time",
                "uuid",
                "pathlib",
                "typing",
                "src.dreamos.core.config",
                "src.dreamos.services.utils.chatgpt_scraper",
                "src.dreamos.tools.cursor_bridge.cursor_bridge",
                "src.dreamos.utils.gui_utils",
                "selenium",
                "undetected_chromedriver"
            ],
            "complexity": 6
        },
        "archive\\orphans\\py\\update_markdown_links.py": {
            "language": ".py",
            "functions": [
                "update_links_in_md_file",
                "find_and_update_md_files"
            ],
            "classes": {},
            "imports": [
                "argparse",
                "json",
                "os",
                "re"
            ],
            "complexity": 2
        },
        "archive\\orphans\\py\\update_python_imports.py": {
            "language": ".py",
            "functions": [
                "update_imports_in_file",
                "find_and_update_python_files"
            ],
            "classes": {},
            "imports": [
                "argparse",
                "os",
                "re"
            ],
            "complexity": 2
        },
        "archive\\orphans\\py\\utc_normalizer.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "imports": [],
            "complexity": 0,
            "error": "unterminated string literal (detected at line 46) (<unknown>, line 46)"
        },
        "archive\\orphans\\py\\utils.py": {
            "language": ".py",
            "functions": [
                "with_error_handling",
                "with_performance_tracking",
                "decorator",
                "decorator"
            ],
            "classes": {},
            "imports": [
                "logging",
                "functools",
                "typing",
                "monitoring.performance_logger",
                "errors"
            ],
            "complexity": 4
        },
        "archive\\orphans\\py\\validate_gui_coords.py": {
            "language": ".py",
            "functions": [
                "load_coords",
                "find_and_activate_window",
                "inject_test_prompt",
                "retrieve_response",
                "save_results",
                "_validate_coord_structure",
                "_check_coord_proximity",
                "_check_accessibility",
                "_check_for_duplicates",
                "validate_gui_coordinates",
                "main"
            ],
            "classes": {},
            "imports": [
                "argparse",
                "json",
                "logging",
                "math",
                "time",
                "pathlib",
                "typing",
                "pyautogui",
                "pygetwindow",
                "pyperclip",
                "dreamos.core.bots.orchestrator_bot"
            ],
            "complexity": 11
        },
        "archive\\orphans\\py\\validate_imports.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "find_python_files",
                "get_module_name",
                "analyze_imports",
                "validate_imports",
                "report_results"
            ],
            "classes": {
                "ImportValidator": {
                    "methods": [
                        "__init__",
                        "find_python_files",
                        "get_module_name",
                        "analyze_imports",
                        "validate_imports",
                        "report_results"
                    ],
                    "docstring": "Validates imports across Python modules.",
                    "base_classes": []
                }
            },
            "imports": [
                "ast",
                "importlib",
                "logging",
                "sys",
                "pathlib",
                "typing"
            ],
            "complexity": 8
        },
        "archive\\orphans\\py\\validator.py": {
            "language": ".py",
            "functions": [
                "check_api_endpoint",
                "check_file_path",
                "trigger_bridge_task",
                "check_bridge_status",
                "get_bridge_result",
                "check_output_file",
                "check_logs",
                "call_summarizer",
                "run_preflight_checks_only",
                "run_validation"
            ],
            "classes": {},
            "imports": [
                "argparse",
                "json",
                "os",
                "subprocess",
                "time",
                "requests"
            ],
            "complexity": 10
        },
        "archive\\orphans\\py\\visual_wait_prototype.py": {
            "language": ".py",
            "functions": [
                "wait_for_visual_cue"
            ],
            "classes": {},
            "imports": [
                "logging",
                "time",
                "pyautogui"
            ],
            "complexity": 1
        },
        "archive\\orphans\\py\\writer_agent.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_build_writing_prompt",
                "_parse_llm_draft"
            ],
            "classes": {
                "ContentWriterAgent": {
                    "methods": [
                        "__init__",
                        "_build_writing_prompt",
                        "_parse_llm_draft"
                    ],
                    "docstring": "Generates content drafts based on provided ContentPlans, handling tasks of type 'WRITE_CONTENT_DRAFT'.",
                    "base_classes": [
                        "BaseAgent"
                    ]
                }
            },
            "imports": [
                "asyncio",
                "logging",
                "traceback",
                "typing",
                "dreamos.core.config",
                "dreamos.core.coordination.base_agent",
                "dreamos.integrations.openai_client",
                "core.content_models"
            ],
            "complexity": 4
        },
        "archive\\orphans\\py\\zero_value_sweep.py": {
            "language": ".py",
            "functions": [
                "should_delete",
                "sweep"
            ],
            "classes": {},
            "imports": [
                "os",
                "pathlib"
            ],
            "complexity": 2
        },
        "archive\\orphans\\py\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "imports": [],
            "complexity": 0
        },
        "archive\\orphans\\py\\__main__.py": {
            "language": ".py",
            "functions": [
                "discover_cli_tools",
                "main"
            ],
            "classes": {},
            "imports": [
                "argparse",
                "importlib",
                "inspect",
                "sys",
                "pathlib",
                "typing"
            ],
            "complexity": 2
        },
        "archive\\orphans\\rendering\\template_engine.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "render"
            ],
            "classes": {
                "TemplateEngine": {
                    "methods": [
                        "__init__",
                        "render"
                    ],
                    "docstring": "Wraps Jinja2 for rendering template strings.",
                    "base_classes": []
                }
            },
            "imports": [
                "logging",
                "typing",
                "jinja2"
            ],
            "complexity": 3
        },
        "archive\\orphans\\reporting\\devlog_utils.py": {
            "language": ".py",
            "functions": [
                "_generate_index_markdown",
                "_parse_devlog_for_index",
                "update_devlog_index"
            ],
            "classes": {},
            "imports": [
                "logging",
                "re",
                "pathlib",
                "typing",
                "dreamos.utils.file_io"
            ],
            "complexity": 3
        },
        "archive\\orphans\\reporting\\scoring_analyzer.py": {
            "language": ".py",
            "functions": [
                "load_task_data",
                "calculate_metrics",
                "generate_console_report",
                "main"
            ],
            "classes": {},
            "imports": [
                "json",
                "logging",
                "statistics",
                "collections",
                "datetime",
                "pathlib",
                "typing"
            ],
            "complexity": 4
        },
        "archive\\orphans\\reporting\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "imports": [],
            "complexity": 0,
            "error": "invalid syntax (<unknown>, line 5)"
        },
        "archive\\orphans\\services\\event_logger.py": {
            "language": ".py",
            "functions": [
                "log_structured_event"
            ],
            "classes": {},
            "imports": [
                "json",
                "uuid",
                "datetime",
                "pathlib"
            ],
            "complexity": 1
        },
        "archive\\orphans\\services\\failed_prompt_archive.py": {
            "language": ".py",
            "functions": [
                "load_json_safe",
                "write_json_safe",
                "__init__",
                "log_failure",
                "get_failures",
                "get_by_prompt_id"
            ],
            "classes": {
                "FailedPromptArchiveService": {
                    "methods": [
                        "__init__",
                        "log_failure",
                        "get_failures",
                        "get_by_prompt_id"
                    ],
                    "docstring": "Service to archive failed prompts with full metadata.",
                    "base_classes": []
                }
            },
            "imports": [
                "json",
                "logging",
                "os",
                "datetime",
                "pathlib",
                "typing",
                "dreamos.core.config"
            ],
            "complexity": 7
        },
        "archive\\orphans\\services\\memory_maintenance_service.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_get_policy_for_file"
            ],
            "classes": {
                "MemoryMaintenanceService": {
                    "methods": [
                        "__init__",
                        "_get_policy_for_file"
                    ],
                    "docstring": "Manages background memory maintenance tasks like compaction and summarization.\nUses APScheduler for scheduling.",
                    "base_classes": []
                }
            },
            "imports": [
                "asyncio",
                "fnmatch",
                "logging",
                "os",
                "shutil",
                "pathlib",
                "typing",
                "apscheduler.schedulers.asyncio",
                "dreamos.memory.compaction_utils",
                "dreamos.memory.summarization_utils",
                "utils.file_locking",
                "utils.summarizer",
                "dreamos.core.config",
                "dreamos.core.config"
            ],
            "complexity": 3
        },
        "archive\\orphans\\services\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "imports": [],
            "complexity": 0,
            "error": "invalid syntax (<unknown>, line 5)"
        },
        "archive\\orphans\\services\\utils\\chatgpt_scraper.py": {
            "language": ".py",
            "functions": [
                "parse_hybrid_response",
                "__init__",
                "_init_driver",
                "save_cookies",
                "load_cookies",
                "is_logged_in",
                "_chat_box_present",
                "ensure_chat_page",
                "ensure_login_session",
                "send_prompt",
                "fetch_response",
                "wait_for_stable_response",
                "clean_response",
                "handle_hybrid_response",
                "execute_prompt_cycle",
                "execute_prompts_on_all_chats",
                "shutdown",
                "_get_message_elements",
                "get_conversation_content",
                "get_conversation_links",
                "get_available_models",
                "select_model",
                "is_rate_limited",
                "prompt_with_fallback",
                "scroll_to_bottom",
                "default_queue_fn"
            ],
            "classes": {
                "HybridResponseHandler": {
                    "methods": [
                        "parse_hybrid_response"
                    ],
                    "docstring": "Parses a hybrid response that includes both narrative text and a MEMORY_UPDATE JSON block.\nReturns a tuple of (text_part, memory_update_json).",
                    "base_classes": []
                },
                "ResponseHandler": {
                    "methods": [
                        "__init__",
                        "_init_driver",
                        "save_cookies",
                        "load_cookies",
                        "is_logged_in",
                        "_chat_box_present",
                        "ensure_chat_page",
                        "ensure_login_session",
                        "send_prompt",
                        "fetch_response",
                        "wait_for_stable_response",
                        "clean_response",
                        "handle_hybrid_response",
                        "execute_prompt_cycle",
                        "execute_prompts_on_all_chats",
                        "shutdown",
                        "_get_message_elements",
                        "get_conversation_content",
                        "get_conversation_links",
                        "get_available_models",
                        "select_model",
                        "is_rate_limited",
                        "prompt_with_fallback",
                        "scroll_to_bottom"
                    ],
                    "docstring": "Handles sending prompts, fetching, and stabilizing ChatGPT responses.\nNow includes hybrid response processing: it will extract narrative text and MEMORY_UPDATE JSON.\nAlso hooks into the AI output logger for reinforcement training.",
                    "base_classes": []
                }
            },
            "imports": [
                "json",
                "logging",
                "os",
                "pickle",
                "re",
                "shutil",
                "sys",
                "time",
                "datetime",
                "typing",
                "undetected_chromedriver",
                "dreamos.utils.ai_output_logger",
                "jinja2",
                "selenium.common.exceptions",
                "selenium.webdriver.common.by",
                "selenium.webdriver.common.keys",
                "selenium.webdriver.support",
                "selenium.webdriver.support.ui",
                "webdriver_manager.chrome"
            ],
            "complexity": 28
        },
        "archive\\orphans\\services\\utils\\cursor.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "update_context",
                "add_to_history",
                "set_current_file",
                "record_command",
                "get_file_context",
                "clear_history",
                "_save_state",
                "_load_state",
                "__init__",
                "add_message",
                "get_context",
                "clear"
            ],
            "classes": {
                "CursorState": {
                    "methods": [
                        "__init__",
                        "update_context",
                        "add_to_history",
                        "set_current_file",
                        "record_command",
                        "get_file_context",
                        "clear_history",
                        "_save_state",
                        "_load_state"
                    ],
                    "docstring": "Manages cursor state and context for chat interactions.",
                    "base_classes": []
                },
                "ChatContext": {
                    "methods": [
                        "__init__",
                        "add_message",
                        "get_context",
                        "clear"
                    ],
                    "docstring": "Manages chat context and history for conversations.",
                    "base_classes": []
                }
            },
            "imports": [
                "json",
                "logging",
                "datetime",
                "pathlib",
                "typing",
                "dreamos.services.utils.logging_utils",
                "dreamos.utils.common_utils"
            ],
            "complexity": 15
        },
        "archive\\orphans\\services\\utils\\devlog_analyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_get_connection",
                "_init_db",
                "track_post",
                "update_metrics",
                "get_best_posting_times",
                "get_top_performing_tags",
                "get_content_insights"
            ],
            "classes": {
                "DevLogAnalyzer": {
                    "methods": [
                        "__init__",
                        "_get_connection",
                        "_init_db",
                        "track_post",
                        "update_metrics",
                        "get_best_posting_times",
                        "get_top_performing_tags",
                        "get_content_insights"
                    ],
                    "docstring": "Analyzes post performance and provides optimization insights.",
                    "base_classes": []
                }
            },
            "imports": [
                "json",
                "logging",
                "sqlite3",
                "datetime",
                "typing",
                "pandas",
                "dreamos.core.config"
            ],
            "complexity": 9
        },
        "archive\\orphans\\services\\utils\\devlog_dispatcher.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "on_created",
                "__init__",
                "_initialize_strategies",
                "start",
                "stop",
                "_process_content_queue",
                "handle_new_blog_post",
                "handle_new_social_content",
                "schedule_post",
                "_generate_post_id",
                "_extract_tags",
                "_get_next_optimal_time",
                "publish_job"
            ],
            "classes": {
                "ContentHandler": {
                    "methods": [
                        "__init__",
                        "on_created"
                    ],
                    "docstring": "Handles file system events for new content.",
                    "base_classes": [
                        "FileSystemEventHandler"
                    ]
                },
                "DevLogDispatcher": {
                    "methods": [
                        "__init__",
                        "_initialize_strategies",
                        "start",
                        "stop",
                        "_process_content_queue",
                        "handle_new_blog_post",
                        "handle_new_social_content",
                        "schedule_post",
                        "_generate_post_id",
                        "_extract_tags",
                        "_get_next_optimal_time"
                    ],
                    "docstring": "Autonomous agent that watches for new content and publishes it\nto appropriate platforms using configured strategies.",
                    "base_classes": []
                }
            },
            "imports": [
                "hashlib",
                "json",
                "logging",
                "pathlib",
                "queue",
                "threading",
                "typing",
                "datetime",
                "dreamos.core.config",
                "watchdog.events",
                "watchdog.observers",
                "apscheduler.schedulers.background",
                "apscheduler.triggers.date",
                "dreamos.core.strategies.twitter_strategy",
                "dreamos.core.strategies.linkedin_strategy",
                "dreamos.services.utils.devlog_analyzer",
                "dreamos.core.config"
            ],
            "complexity": 17
        },
        "archive\\orphans\\services\\utils\\devlog_generator.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load_strategies_from_config",
                "process_conversation",
                "_process_message",
                "generate_blog_post",
                "generate_social_content",
                "_generate_title",
                "_generate_description",
                "_extract_tags",
                "_detect_language",
                "_extract_metadata",
                "auto_publish"
            ],
            "classes": {
                "ContentBlock": {
                    "methods": [],
                    "docstring": "Represents a block of content from the conversation.",
                    "base_classes": []
                },
                "DevLogPost": {
                    "methods": [],
                    "docstring": "Represents a structured blog post from a conversation.",
                    "base_classes": []
                },
                "DevLogGenerator": {
                    "methods": [
                        "__init__",
                        "_load_strategies_from_config",
                        "process_conversation",
                        "_process_message",
                        "generate_blog_post",
                        "generate_social_content",
                        "_generate_title",
                        "_generate_description",
                        "_extract_tags",
                        "_detect_language",
                        "_extract_metadata",
                        "auto_publish"
                    ],
                    "docstring": "Transforms ChatGPT conversations into various content formats.",
                    "base_classes": []
                }
            },
            "imports": [
                "json",
                "dataclasses",
                "datetime",
                "pathlib",
                "typing",
                "dreamos.core.config",
                "dreamos.services.utils.logging_utils",
                "dreamos.utils.common_utils",
                "jinja2",
                "core.strategies.linkedin_strategy",
                "core.strategies.twitter_strategy",
                "frontmatter"
            ],
            "complexity": 15
        },
        "archive\\orphans\\services\\utils\\feedback_processor.py": {
            "language": ".py",
            "functions": [
                "_extract_potential_suggestions",
                "_create_task_message",
                "process_feedback",
                "__init__"
            ],
            "classes": {
                "FeedbackProcessor": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "imports": [
                "os",
                "re",
                "uuid",
                "pathlib",
                "dreamforge.core.governance_memory_engine",
                "dreamos.utils.common_utils"
            ],
            "complexity": 5
        },
        "archive\\orphans\\services\\utils\\logging_utils.py": {
            "language": ".py",
            "functions": [
                "log_event",
                "get_logger"
            ],
            "classes": {},
            "imports": [
                "json",
                "logging",
                "typing",
                "dreamos.utils.common_utils"
            ],
            "complexity": 2
        },
        "archive\\orphans\\services\\utils\\retry_utils.py": {
            "language": ".py",
            "functions": [
                "retry_selenium_action",
                "decorator",
                "wrapper"
            ],
            "classes": {},
            "imports": [
                "logging",
                "time",
                "functools"
            ],
            "complexity": 3
        },
        "archive\\orphans\\services\\utils\\selenium_utils.py": {
            "language": ".py",
            "functions": [
                "wait_for_element",
                "safe_click",
                "safe_send_keys",
                "navigate_to"
            ],
            "classes": {},
            "imports": [
                "typing",
                "dreamos.services.utils.logging_utils",
                "selenium.common.exceptions",
                "selenium.webdriver.remote.webdriver",
                "selenium.webdriver.support",
                "selenium.webdriver.support.ui"
            ],
            "complexity": 4
        },
        "archive\\orphans\\services\\utils\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "imports": [],
            "complexity": 0,
            "error": "invalid syntax (<unknown>, line 4)"
        },
        "archive\\orphans\\services\\utils\\content\\post_context_generator.py": {
            "language": ".py",
            "functions": [
                "generate_context_from_governance"
            ],
            "classes": {},
            "imports": [
                "json",
                "os",
                "re",
                "sys",
                "traceback",
                "dreamos.core.logging.swarm_logger",
                "dreamos.prompt_staging_service",
                "governance_memory_engine",
                "template_engine",
                "sys"
            ],
            "complexity": 1
        },
        "archive\\orphans\\services\\utils\\content\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "imports": [],
            "complexity": 0,
            "error": "invalid syntax (<unknown>, line 3)"
        },
        "archive\\orphans\\skills\\pyautogui_control_module.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "imports": [],
            "complexity": 0,
            "error": "invalid syntax (<unknown>, line 958)"
        },
        "archive\\orphans\\tests\\conftest.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "imports": [
                "os",
                "sys"
            ],
            "complexity": 0
        },
        "archive\\orphans\\tests\\run_e2e_bridge_test.py": {
            "language": ".py",
            "functions": [
                "validate_prompt_file",
                "validate_coords",
                "run_bridge_loop",
                "validate_output"
            ],
            "classes": {},
            "imports": [
                "json",
                "logging",
                "subprocess",
                "datetime",
                "pathlib"
            ],
            "complexity": 4
        },
        "archive\\orphans\\tests\\test_legacy_empty.py": {
            "language": ".py",
            "functions": [
                "test_stub"
            ],
            "classes": {},
            "imports": [],
            "complexity": 1
        },
        "archive\\orphans\\tests\\bridge\\test_http_bridge_service.py": {
            "language": ".py",
            "functions": [
                "test_client",
                "test_health_check_success",
                "test_interact_success",
                "test_interact_bridge_error",
                "test_interact_value_error",
                "test_interact_unexpected_error",
                "test_interact_bridge_unavailable",
                "test_interact_config_unavailable",
                "test_health_check_bridge_unavailable",
                "test_health_check_config_unavailable",
                "test_health_check_both_unavailable"
            ],
            "classes": {},
            "imports": [
                "unittest.mock",
                "pytest",
                "fastapi.testclient",
                "src.dreamos.bridge.http_bridge_service"
            ],
            "complexity": 11
        },
        "archive\\orphans\\tests\\cli\\test_safe_edit_json_list.py": {
            "language": ".py",
            "functions": [
                "runner",
                "mock_filelock",
                "temp_json_file",
                "test_add_item_success",
                "test_add_item_to_empty_file",
                "test_remove_item_success",
                "test_remove_item_not_found",
                "test_update_item_success",
                "test_update_item_not_found",
                "test_invalid_json_item_data",
                "test_item_data_not_dict",
                "test_missing_item_id_for_remove",
                "test_missing_item_data_for_add",
                "test_target_file_not_list",
                "test_target_file_invalid_json",
                "acquire_side_effect",
                "release_side_effect",
                "_create_file"
            ],
            "classes": {},
            "imports": [
                "json",
                "sys",
                "pathlib",
                "unittest.mock",
                "pytest",
                "click.testing",
                "src.dreamos.cli.safe_edit_json_list"
            ],
            "complexity": 18
        },
        "archive\\orphans\\tests\\coordination\\test_agent_bus.py": {
            "language": ".py",
            "functions": [
                "agent_bus",
                "test_agent_bus_singleton",
                "test_agent_bus_delegates_to_simple_bus",
                "test_unsubscribe_removes_handler",
                "test_unsubscribe_removes_topic_if_empty",
                "test_unsubscribe_nonexistent_handler",
                "test_unsubscribe_nonexistent_topic",
                "handler1",
                "handler2",
                "handler",
                "handler1",
                "handler_never_subscribed",
                "handler"
            ],
            "classes": {},
            "imports": [
                "asyncio",
                "unittest.mock",
                "pytest",
                "dreamos.coordination.agent_bus"
            ],
            "complexity": 13
        },
        "archive\\orphans\\tests\\coordination\\test_project_board_manager.py": {
            "language": ".py",
            "functions": [
                "mock_app_config",
                "pbm",
                "sample_task_1",
                "sample_task_2",
                "temp_test_dir",
                "sample_task_details",
                "mock_pbm_with_schema",
                "pbm_with_real_schema",
                "test_pbm_initialization",
                "test_add_task_future_success",
                "test_add_task_duplicate_id",
                "test_add_task_missing_id",
                "test_add_task_missing_description",
                "test_claim_task_success",
                "test_claim_task_not_found",
                "test_claim_task_wrong_status",
                "test_update_task_success",
                "test_update_task_not_found",
                "test_update_task_future_board",
                "test_delete_task_future_success",
                "test_delete_task_working_success",
                "test_delete_task_not_found",
                "test_claim_task_fail_save_working_rollback",
                "test_update_task_lock_timeout",
                "test_claim_task_lock_timeout",
                "test_add_task_schema_validation_fail",
                "test_update_task_schema_validation_success",
                "test_update_task_schema_validation_fail",
                "test_load_schema_success",
                "test_load_schema_not_found",
                "test_load_schema_invalid_json",
                "test_claim_ready_task_success",
                "test_claim_task_not_in_ready",
                "test_move_task_to_completed_success",
                "test_move_task_to_completed_not_found",
                "test_get_task_success",
                "test_get_task_not_found",
                "__init__",
                "__enter__",
                "__exit__",
                "save_side_effect",
                "side_effect_wrapper",
                "test_promote_success",
                "test_promote_not_found",
                "test_promote_already_ready",
                "test_promote_working_task",
                "test_promote_completed_task",
                "test_create_from_cli_basic",
                "test_create_from_cli_with_overrides"
            ],
            "classes": {
                "MockFileLock": {
                    "methods": [
                        "__init__",
                        "__enter__",
                        "__exit__"
                    ],
                    "docstring": null,
                    "base_classes": []
                },
                "TestPromoteTaskToReady": {
                    "methods": [
                        "test_promote_success",
                        "test_promote_not_found",
                        "test_promote_already_ready",
                        "test_promote_working_task",
                        "test_promote_completed_task"
                    ],
                    "docstring": null,
                    "base_classes": []
                },
                "TestCreateFromCliArgs": {
                    "methods": [
                        "test_create_from_cli_basic",
                        "test_create_from_cli_with_overrides"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "imports": [
                "argparse",
                "json",
                "sys",
                "time",
                "pathlib",
                "unittest",
                "unittest.mock",
                "pytest",
                "dreamos.core.config",
                "dreamos.core.errors",
                "jsonschema",
                "dreamos.coordination.project_board_manager",
                "dreamos.core.errors"
            ],
            "complexity": 52
        },
        "archive\\orphans\\tests\\coordination\\test_voting_coordinator.py": {
            "language": ".py",
            "functions": [
                "mock_agent_bus",
                "mock_config",
                "coordinator",
                "test_coordinator_init",
                "test_initiate_vote",
                "test_cast_vote_valid",
                "test_cast_vote_invalid_topic",
                "test_cast_vote_invalid_choice",
                "test_tally_vote_simple_majority",
                "test_tally_vote_tie",
                "test_tally_vote_timeout",
                "__init__",
                "initiate_vote",
                "cast_vote",
                "tally_vote",
                "handle_event"
            ],
            "classes": {
                "VotingCoordinator": {
                    "methods": [
                        "__init__",
                        "initiate_vote",
                        "cast_vote",
                        "tally_vote",
                        "handle_event"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "imports": [
                "unittest.mock",
                "pytest"
            ],
            "complexity": 17
        },
        "archive\\orphans\\tests\\coordination\\dispatchers\\test_base_dispatcher.py": {
            "language": ".py",
            "functions": [
                "test_base_dispatcher_initialization",
                "test_add_task",
                "test_add_task_with_priority",
                "test_run_dispatcher_loop",
                "test_run_dispatcher_loop_priority",
                "test_run_dispatcher_handles_execution_error",
                "test_stop_dispatcher",
                "test_get_status",
                "__init__",
                "execute_task"
            ],
            "classes": {
                "MockDispatcher": {
                    "methods": [
                        "__init__",
                        "execute_task"
                    ],
                    "docstring": "Mock dispatcher for testing.",
                    "base_classes": [
                        "BaseDispatcher"
                    ]
                }
            },
            "imports": [
                "typing",
                "pytest",
                "dreamos.coordination.dispatchers.dispatchers.base_dispatcher"
            ],
            "complexity": 11
        },
        "archive\\orphans\\tests\\core\\test_config.py": {
            "language": ".py",
            "functions": [
                "clear_global_config_singleton",
                "sample_config_data",
                "create_test_yaml_file",
                "test_get_config_loads_default_if_available",
                "test_load_config_specific_path",
                "test_load_config_path_not_exists",
                "test_load_config_empty_yaml",
                "test_load_config_invalid_yaml",
                "test_get_config_returns_same_instance",
                "test_load_config_no_file_loads_defaults",
                "_create"
            ],
            "classes": {},
            "imports": [
                "pathlib",
                "pytest",
                "yaml",
                "dreamos.core.config",
                "dreamos.core.config",
                "dreamos.core.config"
            ],
            "complexity": 11
        },
        "archive\\orphans\\tests\\core\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "imports": [],
            "complexity": 0
        },
        "archive\\orphans\\tests\\core\\comms\\test_project_board.py": {
            "language": ".py",
            "functions": [
                "board_manager",
                "future_tasks_file",
                "working_tasks_file",
                "completed_tasks_file",
                "_read_json",
                "_write_json",
                "test_claim_success",
                "test_claim_not_found",
                "test_claim_already_working",
                "test_move_success",
                "test_move_not_found",
                "test_update_success",
                "test_update_not_found",
                "test_lock_timeout_on_read",
                "test_write_failure_on_update",
                "test_validation_calls_flake8",
                "test_validation_fails_on_flake8_error",
                "test_validation_handles_flake8_not_found",
                "test_update_task_on_future_board",
                "test_update_task_on_completed_board",
                "test_update_task_with_invalid_update_data_type",
                "test_validate_task_data_missing_id",
                "test_validate_task_data_valid",
                "test_validate_task_data_completed_missing_modified_files",
                "test_validate_task_data_completed_with_modified_files",
                "test_validate_task_data_schema_wrong_type",
                "test_validate_task_data_schema_missing_required"
            ],
            "classes": {
                "TestClaimFutureTask": {
                    "methods": [
                        "test_claim_success",
                        "test_claim_not_found",
                        "test_claim_already_working"
                    ],
                    "docstring": null,
                    "base_classes": []
                },
                "TestMoveTaskToCompleted": {
                    "methods": [
                        "test_move_success",
                        "test_move_not_found"
                    ],
                    "docstring": null,
                    "base_classes": []
                },
                "TestUpdateTask": {
                    "methods": [
                        "test_update_success",
                        "test_update_not_found"
                    ],
                    "docstring": null,
                    "base_classes": []
                },
                "TestErrorConditions": {
                    "methods": [
                        "test_lock_timeout_on_read",
                        "test_write_failure_on_update"
                    ],
                    "docstring": null,
                    "base_classes": []
                },
                "TestValidationLogic": {
                    "methods": [
                        "test_validation_calls_flake8",
                        "test_validation_fails_on_flake8_error",
                        "test_validation_handles_flake8_not_found"
                    ],
                    "docstring": null,
                    "base_classes": []
                },
                "TestUpdateTaskEdgeCases": {
                    "methods": [
                        "test_update_task_on_future_board",
                        "test_update_task_on_completed_board",
                        "test_update_task_with_invalid_update_data_type"
                    ],
                    "docstring": null,
                    "base_classes": []
                },
                "TestInternalValidation": {
                    "methods": [
                        "test_validate_task_data_missing_id",
                        "test_validate_task_data_valid",
                        "test_validate_task_data_completed_missing_modified_files",
                        "test_validate_task_data_completed_with_modified_files",
                        "test_validate_task_data_schema_wrong_type",
                        "test_validate_task_data_schema_missing_required"
                    ],
                    "docstring": null,
                    "base_classes": []
                },
                "ProjectBoardError": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "Exception"
                    ]
                }
            },
            "imports": [
                "asyncio",
                "json",
                "sys",
                "pathlib",
                "unittest.mock",
                "filelock",
                "pytest",
                "dreamos.coordination.project_board_manager",
                "dreamos.coordination.project_board_manager"
            ],
            "complexity": 35
        },
        "archive\\orphans\\tests\\core\\comms\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "imports": [],
            "complexity": 0
        },
        "archive\\orphans\\tests\\core\\coordination\\conftest.py": {
            "language": ".py",
            "functions": [
                "mock_agent_bus",
                "test_agent",
                "create_sample_task",
                "mock_agent"
            ],
            "classes": {
                "ConcreteAgent": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "BaseAgent"
                    ]
                },
                "MockConcreteAgent": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "BaseAgent"
                    ]
                }
            },
            "imports": [
                "asyncio",
                "pathlib",
                "unittest.mock",
                "pytest",
                "dreamos.core.coordination.base_agent"
            ],
            "complexity": 6
        },
        "archive\\orphans\\tests\\core\\coordination\\test_base_agent_event_helpers.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "imports": [
                "sys",
                "traceback",
                "pytest",
                "dreamos.coordination.agent_bus",
                "dreamos.core.coordination.base_agent",
                "dreamos.core.coordination.event_payloads"
            ],
            "complexity": 0
        },
        "archive\\orphans\\tests\\core\\coordination\\test_base_agent_lifecycle.py": {
            "language": ".py",
            "functions": [
                "test_base_agent_init",
                "capture_task"
            ],
            "classes": {
                "MinimalAgent": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "BaseAgent"
                    ]
                }
            },
            "imports": [
                "asyncio",
                "logging",
                "unittest.mock",
                "pytest",
                "dreamos.core.coordination.base_agent"
            ],
            "complexity": 3
        },
        "archive\\orphans\\tests\\core\\coordination\\test_base_agent_task_handling.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "imports": [
                "asyncio",
                "unittest.mock",
                "pytest",
                "dreamos.coordination.agent_bus",
                "dreamos.core.coordination.base_agent",
                "dreamos.core.pbm.project_board_manager"
            ],
            "complexity": 0
        },
        "archive\\orphans\\tests\\core\\coordination\\test_message_patterns.py": {
            "language": ".py",
            "functions": [
                "test_create_task_message_defaults",
                "test_create_task_message_explicit",
                "test_update_task_status",
                "test_task_message_to_from_dict",
                "test_task_message_from_dict_minimal",
                "test_task_message_from_dict_missing_required",
                "test_task_message_from_dict_invalid_enum"
            ],
            "classes": {},
            "imports": [
                "datetime",
                "pytest",
                "dreamos.core.coordination.message_patterns"
            ],
            "complexity": 7
        },
        "archive\\orphans\\tests\\core\\coordination\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "imports": [],
            "complexity": 0
        },
        "archive\\orphans\\tests\\core\\coordination\\tasks\\test_project_board_manager.py": {
            "language": ".py",
            "functions": [
                "mock_pbm",
                "mock_multi_board_pbm",
                "mock_load_board_func",
                "mock_atomic_write_func",
                "test_initialization",
                "test_add_task_success",
                "test_add_task_duplicate_id_should_fail",
                "test_get_task_success",
                "test_get_task_not_found",
                "test_update_task_status_success",
                "test_update_task_status_not_found",
                "test_claim_future_task_success",
                "test_claim_future_task_not_found",
                "test_complete_task_success",
                "test_complete_task_not_found",
                "test_list_tasks_empty",
                "test_list_tasks_with_data",
                "test_claim_future_task_success_multi",
                "test_claim_future_task_not_found_multi"
            ],
            "classes": {
                "TestProjectBoardManager": {
                    "methods": [
                        "test_initialization",
                        "test_add_task_success",
                        "test_add_task_duplicate_id_should_fail",
                        "test_get_task_success",
                        "test_get_task_not_found",
                        "test_update_task_status_success",
                        "test_update_task_status_not_found",
                        "test_claim_future_task_success",
                        "test_claim_future_task_not_found",
                        "test_complete_task_success",
                        "test_complete_task_not_found",
                        "test_list_tasks_empty",
                        "test_list_tasks_with_data",
                        "test_claim_future_task_success_multi",
                        "test_claim_future_task_not_found_multi"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "imports": [
                "unittest.mock",
                "pytest",
                "dreamos.core.coordination.project_board_manager",
                "dreamos.core.errors",
                "dreamos.core.errors"
            ],
            "complexity": 20
        },
        "archive\\orphans\\tests\\core\\coordination\\tasks\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "imports": [],
            "complexity": 0
        },
        "archive\\orphans\\tests\\core\\utils\\test_agent_utils.py": {
            "language": ".py",
            "functions": [
                "test_format_agent_report",
                "__init__"
            ],
            "classes": {
                "MockAgent": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "imports": [
                "asyncio",
                "unittest.mock",
                "pytest",
                "dreamos.agents.utils.agent_utils",
                "dreamos.coordination.agent_bus",
                "dreamos.core.coordination.message_patterns",
                "dreamos.core.utils.performance_logger"
            ],
            "complexity": 3
        },
        "archive\\orphans\\tests\\core\\utils\\test_onboarding_utils.py": {
            "language": ".py",
            "functions": [
                "test_successful_affirmation_new_agent",
                "test_successful_affirmation_existing_agent",
                "test_fail_protocol_hash_error",
                "test_fail_invalid_yaml_load",
                "test_fail_yaml_dump_error",
                "test_fail_write_permission_error",
                "test_update_contract_successful_lock",
                "test_update_contract_no_filelock_library",
                "open_side_effect",
                "open_side_effect",
                "open_side_effect"
            ],
            "classes": {
                "TestUpdateOnboardingContract": {
                    "methods": [
                        "test_successful_affirmation_new_agent",
                        "test_successful_affirmation_existing_agent",
                        "test_fail_protocol_hash_error",
                        "test_fail_invalid_yaml_load",
                        "test_fail_yaml_dump_error",
                        "test_fail_write_permission_error",
                        "test_update_contract_successful_lock",
                        "test_update_contract_no_filelock_library"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "imports": [
                "os",
                "sys",
                "unittest",
                "pathlib",
                "unittest.mock",
                "yaml",
                "dreamos.agents.utils.onboarding_utils"
            ],
            "complexity": 12
        },
        "archive\\orphans\\tests\\core\\utils\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "imports": [],
            "complexity": 0
        },
        "archive\\orphans\\tests\\dashboard\\test_dashboard_ui.py": {
            "language": ".py",
            "functions": [
                "mock_dashboard_deps",
                "test_dashboard_initialization",
                "test_dashboard_refresh_smoke",
                "test_dashboard_ui_loads",
                "test_dashboard_event_handling"
            ],
            "classes": {},
            "imports": [
                "unittest.mock",
                "pytest"
            ],
            "complexity": 5
        },
        "archive\\orphans\\tests\\dashboard\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "imports": [],
            "complexity": 0
        },
        "archive\\orphans\\tests\\dreamscape\\agents\\test_planner_agent.py": {
            "language": ".py",
            "functions": [
                "mock_agent_bus",
                "mock_app_config",
                "planner_agent",
                "test_planner_agent_init"
            ],
            "classes": {},
            "imports": [
                "unittest.mock",
                "pytest",
                "dreamos.coordination.agent_bus",
                "dreamos.core.config",
                "dreamos.core.coordination.base_agent",
                "src.dreamscape.agents.planner_agent"
            ],
            "complexity": 4
        },
        "archive\\orphans\\tests\\dreamscape\\agents\\test_writer_agent.py": {
            "language": ".py",
            "functions": [
                "mock_agent_bus",
                "mock_app_config",
                "writer_agent",
                "sample_plan",
                "test_writer_agent_init"
            ],
            "classes": {},
            "imports": [
                "unittest.mock",
                "pytest",
                "dreamos.coordination.agent_bus",
                "dreamos.core.config",
                "dreamos.core.coordination.base_agent",
                "src.dreamscape.agents.writer_agent",
                "src.dreamscape.core.content_models"
            ],
            "complexity": 5
        },
        "archive\\orphans\\tests\\dreamscape\\agents\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "imports": [],
            "complexity": 0
        },
        "archive\\orphans\\tests\\hooks\\test_chatgpt_responder.py": {
            "language": ".py",
            "functions": [
                "test_responder_init_dev_mode",
                "test_responder_init_prod_mode",
                "test_get_response_dev_mode",
                "test_get_response_prod_mode",
                "test_respond_to_mailbox",
                "test_respond_to_mailbox_no_messages",
                "test_responder_init_dev_mode_scraper_missing"
            ],
            "classes": {},
            "imports": [
                "unittest.mock",
                "pytest",
                "dreamos.hooks.chatgpt_responder"
            ],
            "complexity": 7
        },
        "archive\\orphans\\tests\\hooks\\test_chronicle_logger.py": {
            "language": ".py",
            "functions": [
                "mock_agent_bus_instance",
                "test_chronicle_logger_init",
                "test_chronicle_logger_format_entry",
                "test_chronicle_logger_handle_event"
            ],
            "classes": {},
            "imports": [
                "unittest.mock",
                "pytest",
                "dreamos.coordination.agent_bus",
                "dreamos.hooks.chronicle_logger"
            ],
            "complexity": 4
        },
        "archive\\orphans\\tests\\hooks\\test_stats_logger.py": {
            "language": ".py",
            "functions": [
                "mock_nexus",
                "test_stats_logger_log_snapshot"
            ],
            "classes": {},
            "imports": [
                "pathlib",
                "unittest.mock",
                "pytest",
                "dreamos.hooks.stats_logger"
            ],
            "complexity": 2
        },
        "archive\\orphans\\tests\\hooks\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "imports": [],
            "complexity": 0
        },
        "archive\\orphans\\tests\\integrations\\azure\\test_azure_blob_channel.py": {
            "language": ".py",
            "functions": [
                "test_push_and_pull_task",
                "test_push_and_pull_result"
            ],
            "classes": {},
            "imports": [
                "json",
                "unittest.mock",
                "dreamos.channels.azure_blob_channel"
            ],
            "complexity": 2
        },
        "archive\\orphans\\tests\\integrations\\azure\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "imports": [],
            "complexity": 0
        },
        "archive\\orphans\\tests\\memory\\test_compaction_utils.py": {
            "language": ".py",
            "functions": [
                "temp_file",
                "sample_data",
                "setup_segment_file",
                "test_rewrite_memory_safely_basic_write",
                "test_rewrite_memory_safely_compressed_write",
                "test_rewrite_memory_safely_serializes_datetime",
                "test_rewrite_memory_safely_write_failure",
                "test_rewrite_memory_safely_replace_failure",
                "test_compact_segment_data_time_policy",
                "test_compact_segment_data_keep_n_policy",
                "test_compact_segment_data_unknown_policy_returns_original",
                "test_compact_segment_data_default_policy_values",
                "test_compact_segment_file_on_json",
                "test_compact_segment_file_on_compressed",
                "test_compact_segment_file_no_op",
                "test_compact_segment_file_missing_ok",
                "test_compact_segment_file_empty_ok",
                "test_compact_segment_file_invalid_json_raises",
                "test_compact_segment_file_non_list_json_raises",
                "test_compact_segment_file_load_failure_raises",
                "test_compact_segment_file_save_failure_raises",
                "test_compact_segment_data_time_policy_with_tz",
                "test_compact_segment_data_keep_n_edge_cases",
                "test_compact_segment_data_logs_warnings",
                "test_rewrite_memory_safely_non_serializable_fails",
                "test_compact_segment_file_invalid_json_fails",
                "test_compact_segment_file_rewrite_failure",
                "test_compact_segment_file_logs_rewrite_failure"
            ],
            "classes": {
                "NonSerializable": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "imports": [
                "json",
                "os",
                "zlib",
                "datetime",
                "pathlib",
                "unittest.mock",
                "pytest",
                "dreamos.memory.compaction_utils"
            ],
            "complexity": 29
        },
        "archive\\orphans\\tests\\memory\\test_database_manager.py": {
            "language": ".py",
            "functions": [
                "temp_db_file",
                "db_manager",
                "test_db_manager_initialization_creates_db_and_tables",
                "test_record_interaction_inserts_data",
                "test_initialize_conversation_inserts_metadata",
                "test_initialize_conversation_ignores_duplicate",
                "test_fetch_conversation_retrieves_interactions",
                "test_fetch_conversation_empty_result"
            ],
            "classes": {},
            "imports": [
                "json",
                "sqlite3",
                "threading",
                "datetime",
                "pytest",
                "dreamos.memory.memory_manager"
            ],
            "complexity": 8
        },
        "archive\\orphans\\tests\\memory\\test_governance_memory_engine.py": {
            "language": ".py",
            "functions": [
                "setUp",
                "tearDown",
                "test_log_single_event",
                "test_log_multiple_events",
                "test_log_event_error_handling"
            ],
            "classes": {
                "TestGovernanceMemoryEngine": {
                    "methods": [
                        "setUp",
                        "tearDown",
                        "test_log_single_event",
                        "test_log_multiple_events",
                        "test_log_event_error_handling"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "imports": [
                "json",
                "os",
                "shutil",
                "sys",
                "tempfile",
                "unittest",
                "dreamos.governance_memory_engine"
            ],
            "complexity": 6
        },
        "archive\\orphans\\tests\\memory\\test_memory_compaction.py": {
            "language": ".py",
            "functions": [
                "memory_manager",
                "create_segment_file",
                "test_compaction_triggered_by_size",
                "test_compaction_triggered_by_entries",
                "test_compaction_not_triggered_below_thresholds",
                "test_time_based_compaction_list",
                "test_time_based_compaction_dict",
                "test_keep_n_compaction_list",
                "test_safe_rewrite",
                "test_compaction_handles_invalid_json",
                "test_compaction_handles_missing_timestamp",
                "_create"
            ],
            "classes": {},
            "imports": [
                "json",
                "os",
                "datetime",
                "unittest.mock",
                "pytest",
                "dreamos.memory.memory_manager"
            ],
            "complexity": 12
        },
        "archive\\orphans\\tests\\memory\\test_memory_manager.py": {
            "language": ".py",
            "functions": [
                "mock_config",
                "temp_memory_file",
                "memory_manager",
                "test_memory_manager_initialization_creates_file",
                "test_memory_manager_initialization_loads_existing",
                "test_load_memory_handles_empty_file",
                "test_load_memory_handles_invalid_json",
                "test_load_memory_handles_non_dict_json",
                "test_save_memory_writes_correctly",
                "test_save_memory_handles_write_error",
                "test_save_fragment_adds_new",
                "test_save_fragment_updates_existing",
                "test_save_fragment_invalid_input",
                "test_load_fragment_returns_data",
                "test_load_fragment_returns_none_for_missing",
                "test_delete_fragment_removes_existing",
                "test_delete_fragment_handles_missing",
                "test_list_fragment_ids",
                "test_list_fragment_ids_empty"
            ],
            "classes": {},
            "imports": [
                "json",
                "unittest.mock",
                "pytest",
                "dreamos.core.config",
                "dreamos.memory.memory_manager"
            ],
            "complexity": 19
        },
        "archive\\orphans\\tests\\memory\\test_summarization_utils.py": {
            "language": ".py",
            "functions": [
                "mock_summarizer_instance",
                "sample_policy",
                "create_segment_file",
                "sample_chunk",
                "test_summarize_segment_chunk_placeholder",
                "test_summarize_segment_chunk_with_summarizer",
                "test_summarize_segment_chunk_summarizer_error",
                "test_summarize_segment_chunk_empty_chunk",
                "sample_conversations",
                "test_summarize_conversations_simple_concat",
                "test_summarize_conversations_simple_concat_truncation",
                "test_summarize_conversations_simple_concat_empty",
                "test_summarize_conversations_llm_placeholder",
                "test_summarize_conversations_llm_placeholder_truncation",
                "test_summarize_conversations_llm_no_client_raises",
                "test_summarize_conversations_llm_empty_input",
                "test_summarize_conversations_unknown_strategy_raises",
                "test_build_llm_summary_prompt_basic",
                "test_build_llm_summary_prompt_missing_fields",
                "test_build_llm_summary_prompt_empty",
                "_creator"
            ],
            "classes": {
                "MockSummarizer": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "BaseSummarizer"
                    ]
                }
            },
            "imports": [
                "json",
                "os",
                "zlib",
                "unittest.mock",
                "pytest",
                "dreamos.core.config",
                "dreamos.utils.summarizer",
                "dreamos.memory.summarization_utils"
            ],
            "complexity": 22
        },
        "archive\\orphans\\tests\\memory\\test_summarizer.py": {
            "language": ".py",
            "functions": [
                "sample_memory_file",
                "test_generate_summary_basic",
                "test_generate_summary_empty_chunk",
                "test_generate_summary_missing_timestamps",
                "test_summarize_file_no_summarization_needed_too_few",
                "test_summarize_file_no_summarization_needed_all_recent",
                "test_summarize_file_simple_case",
                "test_summarize_handles_missing_timestamps",
                "test_summarize_file_does_not_summarize_summaries",
                "test_summarize_safe_write_and_backup",
                "test_summarize_file_not_found",
                "test_summarize_file_invalid_json",
                "test_summarize_file_empty_json",
                "test_summarize_file_json_not_list",
                "_create"
            ],
            "classes": {},
            "imports": [
                "json",
                "datetime",
                "unittest.mock",
                "pytest",
                "dreamos.memory.summarizer"
            ],
            "complexity": 15
        },
        "archive\\orphans\\tests\\memory\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "imports": [],
            "complexity": 0
        },
        "archive\\orphans\\tests\\monitoring\\test_correlation_validator.py": {
            "language": ".py",
            "functions": [
                "create_mock_event",
                "validator_instance",
                "configured_validator",
                "test_singleton_get_instance_unconfigured_raises_error",
                "test_singleton_configure_and_get_instance",
                "test_singleton_configure_called_multiple_times_logs_warning",
                "test_singleton_parallel_configuration",
                "test_validate_event_id_present_no_regex",
                "test_validate_event_id_missing",
                "test_validate_event_id_present_valid_format",
                "test_validate_event_id_present_invalid_format",
                "test_validate_event_context_id_match",
                "test_validate_event_context_id_mismatch",
                "test_validate_event_context_id_not_provided",
                "test_validate_event_all_issues_logged",
                "test_log_issue_adds_to_internal_log",
                "test_reset_issues_clears_log",
                "test_get_issues_returns_copy",
                "test_validate_sequence_empty_list",
                "test_validate_sequence_single_valid_event",
                "test_validate_sequence_single_invalid_event_missing_id",
                "test_validate_sequence_multiple_events_same_valid_id",
                "test_validate_sequence_multiple_events_one_missing_id",
                "test_validate_sequence_multiple_events_different_ids",
                "test_validate_sequence_multiple_events_invalid_format",
                "test_validate_sequence_with_explicit_matching_sequence_id",
                "test_validate_sequence_with_explicit_mismatching_sequence_id",
                "test_validate_sequence_first_event_no_id_no_explicit_sequence_id",
                "test_validate_sequence_missing_origin_event",
                "test_validate_sequence_present_origin_event",
                "test_validate_sequence_missing_terminal_event",
                "test_validate_sequence_present_terminal_event",
                "test_validate_sequence_correct_origin_and_terminal",
                "test_validate_sequence_multiple_possible_origin_types_found",
                "test_validate_sequence_multiple_possible_origin_types_missing",
                "test_validate_sequence_require_all_origin_types_met",
                "test_validate_sequence_require_all_origin_types_not_met",
                "test_validate_sequence_require_all_terminal_types_met",
                "test_validate_sequence_require_all_terminal_types_not_met",
                "test_validate_sequence_origin_type_check_with_id_failure",
                "test_validate_sequence_correct_order",
                "test_validate_sequence_incorrect_order",
                "test_validate_sequence_incomplete_order_too_short",
                "test_validate_sequence_order_correct_prefix_events_longer",
                "test_validate_sequence_order_empty_expected_order",
                "test_validate_sequence_order_empty_events_with_expected_order",
                "test_validate_sequence_order_with_other_failures",
                "configure_validator"
            ],
            "classes": {
                "MockEventType": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "imports": [
                "logging",
                "threading",
                "uuid",
                "typing",
                "unittest.mock",
                "pytest",
                "src.dreamos.monitoring.correlation_validator"
            ],
            "complexity": 49
        },
        "archive\\orphans\\tests\\monitoring\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "imports": [],
            "complexity": 0
        },
        "archive\\orphans\\tests\\rendering\\test_template_engine.py": {
            "language": ".py",
            "functions": [
                "setUpClass",
                "tearDownClass",
                "test_render_valid_template",
                "test_render_with_tojson_filter",
                "test_render_template_not_found",
                "test_render_with_missing_variable"
            ],
            "classes": {
                "TestTemplateEngine": {
                    "methods": [
                        "setUpClass",
                        "tearDownClass",
                        "test_render_valid_template",
                        "test_render_with_tojson_filter",
                        "test_render_template_not_found",
                        "test_render_with_missing_variable"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "imports": [
                "json",
                "os",
                "sys",
                "unittest",
                "dreamos.template_engine",
                "dreamos.template_engine",
                "dreamos.template_engine",
                "jinja2",
                "json"
            ],
            "complexity": 7
        },
        "archive\\orphans\\tests\\rendering\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "imports": [],
            "complexity": 0
        },
        "archive\\orphans\\tests\\scripts\\utils\\test_simple_task_updater.py": {
            "language": ".py",
            "functions": [
                "mock_board_manager",
                "run_script",
                "test_claim_success",
                "test_claim_failure_board",
                "test_claim_missing_arg",
                "test_update_working_success",
                "test_update_completed_success",
                "test_update_failure_board",
                "test_update_move_failure_board",
                "test_update_missing_arg",
                "test_invalid_action",
                "test_board_file_argument"
            ],
            "classes": {
                "TestSimpleTaskUpdaterScript": {
                    "methods": [
                        "test_claim_success",
                        "test_claim_failure_board",
                        "test_claim_missing_arg",
                        "test_update_working_success",
                        "test_update_completed_success",
                        "test_update_failure_board",
                        "test_update_move_failure_board",
                        "test_update_missing_arg",
                        "test_invalid_action",
                        "test_board_file_argument"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "imports": [
                "subprocess",
                "sys",
                "pathlib",
                "unittest.mock",
                "pytest"
            ],
            "complexity": 13
        },
        "archive\\orphans\\tests\\scripts\\utils\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "imports": [],
            "complexity": 0
        },
        "archive\\orphans\\tests\\services\\test_memory_maintenance_service.py": {
            "language": ".py",
            "functions": [
                "mock_app_config",
                "mock_summarizer",
                "maintenance_service",
                "get_memory_base_path",
                "get_snapshot_base_path"
            ],
            "classes": {
                "MockPathsConfig": {
                    "methods": [
                        "get_memory_base_path",
                        "get_snapshot_base_path"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "PathsConfig"
                    ]
                }
            },
            "imports": [
                "asyncio",
                "pathlib",
                "unittest.mock",
                "pytest",
                "dreamos.core.config",
                "dreamos.services.memory_maintenance_service",
                "dreamos.utils.file_locking",
                "dreamos.utils.summarizer"
            ],
            "complexity": 6
        },
        "archive\\orphans\\tests\\skills\\test_pyautogui_control_module_part2.py": {
            "language": ".py",
            "functions": [
                "setUp",
                "tearDown"
            ],
            "classes": {
                "TestPyAutoGUIControlModulePart2": {
                    "methods": [
                        "setUp",
                        "tearDown"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "imports": [
                "unittest",
                "pathlib",
                "unittest.mock",
                "dreamos.core.config",
                "dreamos.skills.pyautogui_control_module"
            ],
            "complexity": 3
        },
        "archive\\orphans\\tests\\social\\tests\\conftest.py": {
            "language": ".py",
            "functions": [
                "pytest_configure",
                "mock_setup_logging",
                "mock_driver"
            ],
            "classes": {},
            "imports": [
                "os",
                "sys",
                "pytest",
                "unittest.mock",
                "selenium.webdriver.remote.webdriver"
            ],
            "complexity": 3
        },
        "archive\\orphans\\tests\\social\\tests\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "imports": [],
            "complexity": 0
        },
        "archive\\orphans\\tests\\social\\tests\\core\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "imports": [],
            "complexity": 0
        },
        "archive\\orphans\\tests\\social\\tests\\integration\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "imports": [],
            "complexity": 0
        },
        "archive\\orphans\\tests\\social\\tests\\social\\strategies\\base_strategy_test.py": {
            "language": ".py",
            "functions": [
                "mock_config",
                "mock_api",
                "strategy",
                "snapshot_dir",
                "save_snapshot",
                "load_snapshot",
                "test_init_with_valid_credentials",
                "test_init_with_missing_credentials",
                "test_feedback_on_rate_limit",
                "verify_template_rendering"
            ],
            "classes": {
                "BaseStrategyTest": {
                    "methods": [
                        "mock_config",
                        "mock_api",
                        "strategy",
                        "snapshot_dir",
                        "save_snapshot",
                        "load_snapshot",
                        "test_init_with_valid_credentials",
                        "test_init_with_missing_credentials",
                        "test_feedback_on_rate_limit",
                        "verify_template_rendering"
                    ],
                    "docstring": "Base test class for all social media strategy tests.",
                    "base_classes": []
                }
            },
            "imports": [
                "json",
                "os",
                "typing",
                "unittest.mock",
                "pytest",
                "dreamos.exceptions.strategy_exceptions",
                "dreamos.services.feedback_engine"
            ],
            "complexity": 11
        },
        "archive\\orphans\\tests\\social\\tests\\social\\strategies\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "imports": [],
            "complexity": 0
        },
        "archive\\orphans\\tests\\social\\tests\\strategies\\base_strategy_test.py": {
            "language": ".py",
            "functions": [
                "login",
                "post_content",
                "scrape_mentions",
                "mock_config",
                "mock_driver",
                "strategy",
                "test_init_with_valid_config",
                "test_init_with_missing_config",
                "test_validate_media_files_success",
                "test_validate_media_files_missing",
                "test_wait_for_element_success",
                "test_wait_for_element_timeout",
                "test_safe_click_success",
                "test_safe_click_retry_success",
                "test_safe_click_failure",
                "test_safe_send_keys_success",
                "test_safe_send_keys_retry_success",
                "test_safe_send_keys_failure",
                "test_extract_error_details_success",
                "test_extract_error_details_failure"
            ],
            "classes": {
                "MockStrategy": {
                    "methods": [
                        "login",
                        "post_content",
                        "scrape_mentions"
                    ],
                    "docstring": "Mock strategy for testing base functionality.",
                    "base_classes": [
                        "BaseStrategy"
                    ]
                },
                "BaseStrategyTest": {
                    "methods": [
                        "mock_config",
                        "mock_driver",
                        "strategy",
                        "test_init_with_valid_config",
                        "test_init_with_missing_config",
                        "test_validate_media_files_success",
                        "test_validate_media_files_missing",
                        "test_wait_for_element_success",
                        "test_wait_for_element_timeout",
                        "test_safe_click_success",
                        "test_safe_click_retry_success",
                        "test_safe_click_failure",
                        "test_safe_send_keys_success",
                        "test_safe_send_keys_retry_success",
                        "test_safe_send_keys_failure",
                        "test_extract_error_details_success",
                        "test_extract_error_details_failure"
                    ],
                    "docstring": "Base test class for all strategy tests.",
                    "base_classes": []
                }
            },
            "imports": [
                "typing",
                "unittest.mock",
                "pytest",
                "dreamos.exceptions.strategy_exceptions",
                "dreamos.strategies.base_strategy",
                "selenium.common.exceptions",
                "selenium.webdriver.common.by",
                "selenium.webdriver.remote.webdriver"
            ],
            "complexity": 22
        },
        "archive\\orphans\\tests\\social\\tests\\strategies\\base_test.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "find_element",
                "find_elements",
                "get",
                "quit",
                "__init__",
                "click",
                "send_keys",
                "is_displayed",
                "get_attribute",
                "setUp",
                "tearDown",
                "assert_logged_event",
                "simulate_element_present",
                "simulate_element_not_found",
                "simulate_login_success",
                "simulate_login_failure",
                "simulate_post_success",
                "simulate_post_failure"
            ],
            "classes": {
                "MockWebDriver": {
                    "methods": [
                        "__init__",
                        "find_element",
                        "find_elements",
                        "get",
                        "quit"
                    ],
                    "docstring": "Mock Selenium WebDriver for testing.",
                    "base_classes": []
                },
                "MockElement": {
                    "methods": [
                        "__init__",
                        "click",
                        "send_keys",
                        "is_displayed",
                        "get_attribute"
                    ],
                    "docstring": "Mock Selenium WebElement for testing.",
                    "base_classes": []
                },
                "BaseStrategyTest": {
                    "methods": [
                        "setUp",
                        "tearDown",
                        "assert_logged_event",
                        "simulate_element_present",
                        "simulate_element_not_found",
                        "simulate_login_success",
                        "simulate_login_failure",
                        "simulate_post_success",
                        "simulate_post_failure"
                    ],
                    "docstring": "Base test class for all social media strategy tests.",
                    "base_classes": []
                }
            },
            "imports": [
                "unittest",
                "datetime",
                "typing",
                "unittest.mock",
                "tests.utils.test_utils"
            ],
            "complexity": 22
        },
        "archive\\orphans\\tests\\social\\tests\\strategies\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "imports": [],
            "complexity": 0
        },
        "archive\\orphans\\tests\\social\\tests\\tools\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "imports": [],
            "complexity": 0
        },
        "archive\\orphans\\tests\\social\\tests\\utils\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "imports": [],
            "complexity": 0
        },
        "archive\\orphans\\tests\\supervisor_tools\\test_command_supervisor.py": {
            "language": ".py",
            "functions": [
                "mock_agent_bus",
                "command_supervisor",
                "create_mock_process"
            ],
            "classes": {},
            "imports": [
                "asyncio",
                "unittest.mock",
                "pytest",
                "dreamos.core.agent_bus",
                "dreamos.core.bus_utils",
                "dreamos.supervisor_tools.command_supervisor"
            ],
            "complexity": 3
        },
        "archive\\orphans\\tests\\supervisor_tools\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "imports": [],
            "complexity": 0
        },
        "archive\\orphans\\tests\\tools\\test_base.py": {
            "language": ".py",
            "functions": [
                "setUp",
                "tearDown",
                "test_base_tool_initialization",
                "test_base_tool_validate_arguments_missing_required",
                "test_base_tool_validate_arguments_valid",
                "test_base_tool_abstract_execute_enforcement",
                "test_tool_context_initialization",
                "test_tool_context_get_arg",
                "test_tool_parameter_initialization"
            ],
            "classes": {
                "TestBaseTool": {
                    "methods": [
                        "setUp",
                        "tearDown",
                        "test_base_tool_initialization",
                        "test_base_tool_validate_arguments_missing_required",
                        "test_base_tool_validate_arguments_valid",
                        "test_base_tool_abstract_execute_enforcement",
                        "test_tool_context_initialization",
                        "test_tool_context_get_arg",
                        "test_tool_parameter_initialization"
                    ],
                    "docstring": null,
                    "base_classes": []
                },
                "DummyTool": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "BaseTool"
                    ]
                },
                "SimpleReqTool": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "BaseTool"
                    ]
                },
                "IncompleteTool": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "BaseTool"
                    ]
                }
            },
            "imports": [
                "os",
                "sys",
                "unittest",
                "src.dreamos.tools._core.base"
            ],
            "complexity": 13
        },
        "archive\\orphans\\tests\\tools\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "imports": [],
            "complexity": 0
        },
        "archive\\orphans\\tests\\tools\\cursor_bridge\\bridge_bootstrap_test.py": {
            "language": ".py",
            "functions": [
                "test_full_loop_success",
                "test_injection_failure",
                "test_extraction_failure_ocr"
            ],
            "classes": {
                "TestCursorBridgeBootstrap": {
                    "methods": [
                        "test_full_loop_success",
                        "test_injection_failure",
                        "test_extraction_failure_ocr"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "imports": [
                "logging",
                "unittest",
                "unittest.mock"
            ],
            "complexity": 4
        },
        "archive\\orphans\\tests\\tools\\cursor_bridge\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "imports": [],
            "complexity": 0
        },
        "archive\\orphans\\tests\\tools\\discovery\\test_find_todos.py": {
            "language": ".py",
            "functions": [
                "test_find_todos_in_file_basic",
                "test_find_todos_in_file_no_matches",
                "test_find_todos_in_file_empty_file",
                "test_scan_directory",
                "test_scan_directory"
            ],
            "classes": {},
            "imports": [
                "json",
                "pathlib",
                "typing",
                "pytest",
                "dreamos.tools.discovery.find_todos",
                "dreamos.tools.discovery.find_todos"
            ],
            "complexity": 5
        },
        "archive\\orphans\\tests\\tools\\discovery\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "imports": [],
            "complexity": 0
        },
        "archive\\orphans\\tests\\unit\\test_bridge_fault_inspector.py": {
            "language": ".py",
            "functions": [
                "setUp",
                "test_parse_integrity_logs_normalization",
                "test_parse_stress_results_normalization"
            ],
            "classes": {
                "TestTimestampNormalization": {
                    "methods": [
                        "setUp",
                        "test_parse_integrity_logs_normalization",
                        "test_parse_stress_results_normalization"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "imports": [
                "sys",
                "unittest",
                "datetime",
                "pathlib",
                "unittest.mock",
                "runtime.analytics"
            ],
            "complexity": 4
        },
        "archive\\orphans\\tests\\unit\\test_task_flow_migration.py": {
            "language": ".py",
            "functions": [
                "test_basic_future_task_transform",
                "test_basic_working_task_transform",
                "test_completed_task_transform",
                "test_missing_task_id",
                "test_missing_required_fields_defaulting",
                "transform_task"
            ],
            "classes": {
                "TestTaskTransformation": {
                    "methods": [
                        "test_basic_future_task_transform",
                        "test_basic_working_task_transform",
                        "test_completed_task_transform",
                        "test_missing_task_id",
                        "test_missing_required_fields_defaulting"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "imports": [
                "sys",
                "unittest",
                "pathlib",
                "task_flow_migration"
            ],
            "complexity": 7
        },
        "archive\\orphans\\tests\\unit\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "imports": [],
            "complexity": 0
        },
        "archive\\orphans\\tests\\utils\\test_json_io.py": {
            "language": ".py",
            "functions": [
                "test_write_read_json_dict",
                "test_write_read_json_list",
                "test_read_json_file_not_found",
                "test_read_json_invalid_json",
                "test_append_read_jsonl",
                "test_read_jsonl_file_not_found",
                "test_read_jsonl_invalid_line",
                "test_write_read_text",
                "test_read_text_file_not_found",
                "test_extract_content_success",
                "test_extract_content_no_response",
                "test_extract_content_empty_dict_response",
                "test_extract_content_missing_read_file_response_key",
                "test_extract_content_missing_results_key",
                "test_extract_content_results_not_a_list",
                "test_extract_content_results_empty_list",
                "test_extract_content_results_list_with_none",
                "test_extract_content_results_list_with_non_string_becomes_string",
                "test_extract_content_tool_error_in_results_string",
                "test_extract_content_tool_error_in_error_field",
                "test_extract_content_malformed_response_completely_unexpected_structure",
                "test_safe_read_success_full_read",
                "test_safe_read_full_read_tool_error_fallback_succeeds",
                "test_safe_read_full_read_response_no_content_fallback_succeeds",
                "test_safe_read_no_full_read_request_fallback_succeeds",
                "test_safe_read_warmup_tool_call_fails_returns_none",
                "test_safe_read_warmup_response_no_content_full_read_succeeds",
                "test_safe_read_all_attempts_fail_various_reasons",
                "test_safe_read_full_read_not_requested_all_attempts_fail"
            ],
            "classes": {},
            "imports": [
                "json",
                "pathlib",
                "unittest.mock",
                "dreamos.utils.file_io"
            ],
            "complexity": 29
        },
        "archive\\orphans\\tests\\utils\\test_logging_utils.py": {
            "language": ".py",
            "functions": [
                "test_log_handler_exception_basic",
                "test_log_handler_exception_no_handler_name",
                "sample_handler"
            ],
            "classes": {
                "TestLogHandlerException": {
                    "methods": [
                        "test_log_handler_exception_basic",
                        "test_log_handler_exception_no_handler_name"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "imports": [
                "unittest",
                "unittest.mock",
                "dreamos.utils.logging_utils"
            ],
            "complexity": 4
        },
        "archive\\orphans\\tests\\utils\\test_protocol_compliance_utils.py": {
            "language": ".py",
            "functions": [
                "test_check_mailbox_structure_exists",
                "test_check_mailbox_structure_missing"
            ],
            "classes": {
                "TestProtocolComplianceUtils": {
                    "methods": [
                        "test_check_mailbox_structure_exists",
                        "test_check_mailbox_structure_missing"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "imports": [
                "sys",
                "unittest",
                "pathlib",
                "unittest.mock",
                "dreamos.utils.protocol_compliance_utils",
                "dreamos.utils.protocol_compliance_utils"
            ],
            "complexity": 3
        },
        "archive\\orphans\\tests\\utils\\test_spec_parser.py": {
            "language": ".py",
            "functions": [
                "test_parse_project_plan_valid_main_tasks_table",
                "test_parse_project_plan_valid_legacy_md_tasks_table",
                "test_parse_project_plan_multiline_cell_content",
                "test_parse_project_plan_mixed_tables",
                "test_parse_project_plan_no_recognized_tables",
                "test_parse_project_plan_malformed_row_table",
                "test_parse_project_plan_file_not_found",
                "test_parse_project_plan_commonmark_not_installed",
                "test_cell_content_extraction_various_inline_markdown"
            ],
            "classes": {
                "TestSpecParser": {
                    "methods": [
                        "test_parse_project_plan_valid_main_tasks_table",
                        "test_parse_project_plan_valid_legacy_md_tasks_table",
                        "test_parse_project_plan_multiline_cell_content",
                        "test_parse_project_plan_mixed_tables",
                        "test_parse_project_plan_no_recognized_tables",
                        "test_parse_project_plan_malformed_row_table",
                        "test_parse_project_plan_file_not_found",
                        "test_parse_project_plan_commonmark_not_installed",
                        "test_cell_content_extraction_various_inline_markdown"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "imports": [
                "logging",
                "unittest",
                "unittest.mock",
                "dreamos.utils.spec_parser"
            ],
            "complexity": 10
        },
        "archive\\orphans\\tests\\utils\\test_terminal_execution.py": {
            "language": ".py",
            "functions": [
                "test_security_avoids_shell_true",
                "test_security_prevents_command_injection"
            ],
            "classes": {},
            "imports": [
                "pytest"
            ],
            "complexity": 2
        },
        "archive\\orphans\\tests\\utils\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "imports": [],
            "complexity": 0
        },
        "archive\\orphans\\tools\\command_supervisor.py": {
            "language": ".py",
            "functions": [
                "__init__"
            ],
            "classes": {
                "SupervisorEvent": {
                    "methods": [],
                    "docstring": "Represents an event structure specifically for the CommandSupervisor context.",
                    "base_classes": []
                },
                "ApprovalStatus": {
                    "methods": [],
                    "docstring": "Represents the possible states of a command approval request.",
                    "base_classes": [
                        "Enum"
                    ]
                },
                "CommandSupervisor": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Singleton class to manage potentially risky command execution requests.\n\nThis supervisor acts as a central gatekeeper for shell commands requested by\nvarious agents. It enforces a human-in-the-loop approval process before\nallowing any command execution, enhancing system safety.\n\nWorkflow:\n1. An agent publishes a `COMMAND_EXECUTION_REQUEST` event via AgentBus.\n2. `CommandSupervisor` receives the request (`handle_command_request`).\n3. It assigns a unique ID and publishes a `COMMAND_APPROVAL_REQUEST` event.\n4. A separate component (e.g., a UI Agent, a manual reviewer) observes the\n   approval request and publishes a `COMMAND_APPROVAL_RESPONSE` event.\n5. `CommandSupervisor` receives the response (`handle_approval_response`).\n6. If approved, it executes the command (`execute_command`) using asyncio\n   subprocesses.\n7. If rejected or upon completion/error, it publishes a\n   `COMMAND_EXECUTION_RESULT` event back to the original requesting agent.\n\nAttributes:\n    agent_bus (AgentBus): The shared AgentBus instance for communication.\n    pending_approvals (Dict[str, SupervisorEvent]): Stores requests awaiting approval.\n    approval_status (Dict[str, ApprovalStatus]): Tracks the status of each request.",
                    "base_classes": []
                }
            },
            "imports": [
                "asyncio",
                "logging",
                "time",
                "traceback",
                "dataclasses",
                "enum",
                "typing",
                "uuid",
                "dreamos.core.coordination",
                "dreamos.core.coordination.event_types"
            ],
            "complexity": 4
        },
        "archive\\orphans\\tools\\read_file.py": {
            "language": ".py",
            "functions": [
                "_detect_encoding",
                "_open_locked",
                "_read_once",
                "read_file",
                "read_json",
                "read_yaml"
            ],
            "classes": {
                "ReadFileError": {
                    "methods": [],
                    "docstring": "Raised when all read attempts fail.",
                    "base_classes": [
                        "RuntimeError"
                    ]
                },
                "ReadMetrics": {
                    "methods": [],
                    "docstring": "Lightweight container to expose metrics to a callback.",
                    "base_classes": [
                        "dict"
                    ]
                }
            },
            "imports": [
                "__future__",
                "io",
                "json",
                "locale",
                "logging",
                "os",
                "re",
                "time",
                "pathlib",
                "typing",
                "chardet",
                "filelock",
                "filelock",
                "tenacity",
                "yaml"
            ],
            "complexity": 8
        },
        "archive\\orphans\\tools\\task_editor.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "add_modification",
                "add_new_task",
                "to_dict",
                "from_dict",
                "__init__",
                "_load_task_schema",
                "analyze_and_propose_rewrite",
                "apply_task_edit"
            ],
            "classes": {
                "TaskAutoRewriterError": {
                    "methods": [],
                    "docstring": "Custom exception for TaskAutoRewriter errors.",
                    "base_classes": [
                        "Exception"
                    ]
                },
                "ProposedTaskEdit": {
                    "methods": [
                        "__init__",
                        "add_modification",
                        "add_new_task",
                        "to_dict",
                        "from_dict"
                    ],
                    "docstring": "Represents a proposed set of changes to a task or new tasks.",
                    "base_classes": []
                },
                "TaskAutoRewriter": {
                    "methods": [
                        "__init__",
                        "_load_task_schema",
                        "analyze_and_propose_rewrite",
                        "apply_task_edit"
                    ],
                    "docstring": "Analyzes task definitions and proposes rewrites to improve clarity,\nactionability, or to break down complex tasks.",
                    "base_classes": []
                }
            },
            "imports": [
                "__future__",
                "json",
                "logging",
                "typing",
                "dreamos.core.config",
                "dreamos.integrations.openai_client",
                "datetime"
            ],
            "complexity": 12
        },
        "archive\\orphans\\tools\\thea_relay_agent.py": {
            "language": ".py",
            "functions": [
                "_find_mock_project_root",
                "get_config",
                "__init__",
                "__init__",
                "__init__",
                "__init__",
                "validate_agent_id_format",
                "__init__",
                "_validate_response",
                "_sync_file_write",
                "_sync_load",
                "_sync_glob"
            ],
            "classes": {
                "_MockConfigPaths": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": null,
                    "base_classes": []
                },
                "_MockConfigAgentSettings": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": null,
                    "base_classes": []
                },
                "_MockConfig": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": null,
                    "base_classes": []
                },
                "_StandaloneDummyBaseAgent": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": null,
                    "base_classes": []
                },
                "TheaMessage": {
                    "methods": [
                        "validate_agent_id_format"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "BaseModel"
                    ]
                },
                "TheaRelayAgent": {
                    "methods": [
                        "__init__",
                        "_validate_response"
                    ],
                    "docstring": "An agent that monitors a directory for THEA responses, parses them,\nand dispatches them to the appropriate agent mailboxes.",
                    "base_classes": [
                        "_BaseAgent_cls"
                    ]
                }
            },
            "imports": [
                "asyncio",
                "json",
                "logging",
                "re",
                "datetime",
                "pathlib",
                "typing",
                "dreamos.utils",
                "pydantic",
                "dreamos.core.comms.mailbox_utils",
                "dreamos.core.coordination",
                "dreamos.core.coordination.base_agent"
            ],
            "complexity": 18
        },
        "archive\\orphans\\tools\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "imports": [],
            "complexity": 0
        },
        "archive\\orphans\\tools\\analysis\\dead_code.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "imports": [
                "asyncio",
                "logging",
                "re",
                "shutil",
                "pathlib",
                "typing"
            ],
            "complexity": 0
        },
        "archive\\orphans\\tools\\analysis\\project_scanner\\analyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_init_tree_sitter_language_sync",
                "analyze_file",
                "_analyze_python",
                "_analyze_rust",
                "_analyze_javascript",
                "_traverse",
                "get_node_text",
                "_traverse"
            ],
            "classes": {
                "LanguageAnalyzer": {
                    "methods": [
                        "__init__",
                        "_init_tree_sitter_language_sync",
                        "analyze_file",
                        "_analyze_python",
                        "_analyze_rust",
                        "_analyze_javascript"
                    ],
                    "docstring": "Handles language-specific code analysis for different programming languages.",
                    "base_classes": []
                }
            },
            "imports": [
                "ast",
                "logging",
                "pathlib",
                "typing",
                "tree_sitter"
            ],
            "complexity": 10
        },
        "archive\\orphans\\tools\\analysis\\project_scanner\\concurrency.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "get_results"
            ],
            "classes": {
                "MultibotManager": {
                    "methods": [
                        "__init__",
                        "get_results"
                    ],
                    "docstring": "Manages a pool of asyncio worker tasks for file processing.",
                    "base_classes": []
                }
            },
            "imports": [
                "asyncio",
                "logging",
                "pathlib",
                "typing"
            ],
            "complexity": 3
        },
        "archive\\orphans\\tools\\analysis\\project_scanner\\file_processor.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_sync_hash",
                "_sync_check_cache_and_get_data",
                "_sync_remove_excluded_from_cache",
                "_sync_read_source",
                "_sync_update_cache_with_analysis",
                "_sync_remove_fnf_from_cache",
                "_sync_remove_perm_error_from_cache",
                "_sync_remove_encoding_error_from_cache",
                "_sync_remove_general_error_from_cache"
            ],
            "classes": {
                "FileProcessor": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Handles file hashing, ignoring, caching checks, etc. Now with async methods.",
                    "base_classes": []
                }
            },
            "imports": [
                "asyncio",
                "hashlib",
                "logging",
                "threading",
                "pathlib",
                "typing",
                "analyzer"
            ],
            "complexity": 11
        },
        "archive\\orphans\\tools\\analysis\\project_scanner\\project_scanner.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "_load",
                "_save",
                "get",
                "set",
                "remove",
                "clear",
                "analyze_scan_results",
                "__init__",
                "analyze_file",
                "_analyze_python_ast",
                "_analyze_with_tree_sitter",
                "__init__",
                "hash_file",
                "should_exclude",
                "process_file",
                "__init__",
                "load_existing_report",
                "save_report",
                "generate_init_files",
                "load_existing_chatgpt_context",
                "export_chatgpt_context",
                "categorize_agents",
                "__init__",
                "_resolve_path_from_config",
                "progress_update"
            ],
            "classes": {
                "ProjectCache": {
                    "methods": [
                        "__init__",
                        "_load",
                        "_save",
                        "get",
                        "set",
                        "remove",
                        "clear",
                        "analyze_scan_results"
                    ],
                    "docstring": null,
                    "base_classes": []
                },
                "LanguageAnalyzer": {
                    "methods": [
                        "__init__",
                        "analyze_file",
                        "_analyze_python_ast",
                        "_analyze_with_tree_sitter"
                    ],
                    "docstring": "Handles language-specific code analysis for different programming languages.",
                    "base_classes": []
                },
                "FileProcessor": {
                    "methods": [
                        "__init__",
                        "hash_file",
                        "should_exclude",
                        "process_file"
                    ],
                    "docstring": "Handles file hashing, ignoring, caching checks, etc.",
                    "base_classes": []
                },
                "ReportGenerator": {
                    "methods": [
                        "__init__",
                        "load_existing_report",
                        "save_report",
                        "generate_init_files",
                        "load_existing_chatgpt_context",
                        "export_chatgpt_context",
                        "categorize_agents"
                    ],
                    "docstring": "Handles merging new analysis into existing project_analysis.json and chatgpt context.",
                    "base_classes": []
                },
                "ProjectScanner": {
                    "methods": [
                        "__init__",
                        "_resolve_path_from_config"
                    ],
                    "docstring": "Orchestrates the project scanning process using modular components.\nResponsibilities:\n  - Initializes all components (analyzer, processor, reporter, concurrency manager).\n  - Loads and saves the file hash cache (if enabled).\n  - Discovers files to be scanned.\n  - Detects moved files based on hash (if cache enabled).\n  - Manages asynchronous file processing via MultibotManager.\n  - Gathers results and passes them to the ReportGenerator.\n  - Provides methods to trigger optional steps like __init__ generation or context export.",
                    "base_classes": []
                }
            },
            "imports": [
                "argparse",
                "ast",
                "asyncio",
                "hashlib",
                "json",
                "logging",
                "threading",
                "pathlib",
                "typing",
                "dreamos.core.config",
                "analyzer",
                "file_processor",
                "report_generator",
                "tree_sitter",
                "collections",
                "dreamos.core.config",
                "dreamos.utils.project_root",
                "jinja2",
                "traceback",
                "traceback"
            ],
            "complexity": 32
        },
        "archive\\orphans\\tools\\analysis\\project_scanner\\report_generator.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "categorize_agents",
                "_maturity_level",
                "_agent_type",
                "_sync_load",
                "_sync_final_write",
                "_sync_load_context",
                "_sync_io_for_init",
                "_sync_write_json_context",
                "_read_template",
                "_write_rendered"
            ],
            "classes": {
                "ReportGenerator": {
                    "methods": [
                        "__init__",
                        "categorize_agents",
                        "_maturity_level",
                        "_agent_type"
                    ],
                    "docstring": "Handles merging new analysis into existing reports and context files. Async I/O.",
                    "base_classes": []
                }
            },
            "imports": [
                "asyncio",
                "json",
                "logging",
                "collections",
                "pathlib",
                "typing",
                "jinja2"
            ],
            "complexity": 12
        },
        "archive\\orphans\\tools\\analysis\\project_scanner\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "imports": [],
            "complexity": 0
        },
        "archive\\orphans\\tools\\calibration\\recalibrate_coords.py": {
            "language": ".py",
            "functions": [
                "capture_single_coordinate",
                "update_coords_file",
                "main"
            ],
            "classes": {},
            "imports": [
                "argparse",
                "json",
                "logging",
                "sys",
                "time",
                "pathlib",
                "portalocker",
                "pyautogui",
                "dreamos.core.config"
            ],
            "complexity": 3
        },
        "archive\\orphans\\tools\\calibration\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "imports": [],
            "complexity": 0
        },
        "archive\\orphans\\tools\\coordination\\broadcast_directive.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "imports": [
                "logging",
                "typing",
                "dreamos.core.coordination.agent_bus",
                "dreamos.core.coordination.events"
            ],
            "complexity": 0
        },
        "archive\\orphans\\tools\\coordination\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "imports": [],
            "complexity": 0,
            "error": "invalid syntax (<unknown>, line 3)"
        },
        "archive\\orphans\\tools\\cursor_bridge\\mock_cursor_bridge.py": {
            "language": ".py",
            "functions": [
                "create_mock_bridge",
                "get",
                "__init__",
                "inject_prompt",
                "__init__",
                "read_response",
                "__init__",
                "run_cycle"
            ],
            "classes": {
                "MockConfigInterface": {
                    "methods": [
                        "get"
                    ],
                    "docstring": "Mocks configuration retrieval.",
                    "base_classes": []
                },
                "MockPromptInjector": {
                    "methods": [
                        "__init__",
                        "inject_prompt"
                    ],
                    "docstring": "Mocks injecting prompts into Cursor UI.",
                    "base_classes": []
                },
                "MockResponseReader": {
                    "methods": [
                        "__init__",
                        "read_response"
                    ],
                    "docstring": "Mocks reading responses from Cursor UI (OCR/Clipboard).",
                    "base_classes": []
                },
                "MockLoopController": {
                    "methods": [
                        "__init__",
                        "run_cycle"
                    ],
                    "docstring": "Mocks the main bridge control loop.",
                    "base_classes": []
                }
            },
            "imports": [
                "logging",
                "time",
                "typing"
            ],
            "complexity": 12
        },
        "archive\\orphans\\tools\\cursor_bridge\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "imports": [],
            "complexity": 0
        },
        "archive\\orphans\\tools\\discovery\\archive_defunct_tests.py": {
            "language": ".py",
            "functions": [
                "archive_defunct_tests"
            ],
            "classes": {},
            "imports": [
                "argparse",
                "json",
                "logging",
                "pathlib",
                "dreamos.core.config",
                "dreamos.core.errors"
            ],
            "complexity": 1
        },
        "archive\\orphans\\tools\\discovery\\find_defunct_tests.py": {
            "language": ".py",
            "functions": [
                "find_python_files",
                "map_test_to_source",
                "find_defunct_tests"
            ],
            "classes": {},
            "imports": [
                "argparse",
                "json",
                "logging",
                "pathlib",
                "dreamos.core.config"
            ],
            "complexity": 3
        },
        "archive\\orphans\\tools\\discovery\\find_todos.py": {
            "language": ".py",
            "functions": [
                "find_todos_in_file",
                "write_log_entry",
                "scan_directory",
                "main"
            ],
            "classes": {},
            "imports": [
                "argparse",
                "json",
                "logging",
                "os",
                "re",
                "datetime",
                "pathlib",
                "dreamos.core.config"
            ],
            "complexity": 4
        },
        "archive\\orphans\\tools\\discovery\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "imports": [],
            "complexity": 0,
            "error": "invalid syntax (<unknown>, line 5)"
        },
        "archive\\orphans\\tools\\dreamos_utils\\check_agent_pulse.py": {
            "language": ".py",
            "functions": [
                "get_core_timestamp_utility",
                "check_agent_pulse",
                "fallback_timestamp"
            ],
            "classes": {},
            "imports": [
                "logging",
                "os",
                "sys",
                "datetime",
                "pathlib",
                "yaml",
                "dreamos.utils.common_utils"
            ],
            "complexity": 3
        },
        "archive\\orphans\\tools\\dreamos_utils\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "imports": [],
            "complexity": 0,
            "error": "invalid syntax (<unknown>, line 4)"
        },
        "archive\\orphans\\tools\\functional\\context_planner_tool.py": {
            "language": ".py",
            "functions": [
                "name",
                "description",
                "_extract_targets",
                "execute",
                "_rule_copy_file",
                "_rule_extract_symbol",
                "_rule_refactor_symbol",
                "_rule_create_file",
                "_rule_migrate_update_generic_refactor",
                "_rule_read_analyze",
                "_rule_search",
                "_rule_fallback_log",
                "_generate_plan_narration",
                "_log_execution"
            ],
            "classes": {
                "ContextPlannerTool": {
                    "methods": [
                        "name",
                        "description",
                        "_extract_targets",
                        "execute",
                        "_rule_copy_file",
                        "_rule_extract_symbol",
                        "_rule_refactor_symbol",
                        "_rule_create_file",
                        "_rule_migrate_update_generic_refactor",
                        "_rule_read_analyze",
                        "_rule_search",
                        "_rule_fallback_log",
                        "_generate_plan_narration",
                        "_log_execution"
                    ],
                    "docstring": "Generates a execution plan based on keywords and patterns in the task description.\nNOTE: This is a simplified rule-based planner, NOT an LLM-based planner.",
                    "base_classes": [
                        "BaseTool"
                    ]
                }
            },
            "imports": [
                "logging",
                "os",
                "re",
                "typing",
                "dreamos.tools._core.base",
                "re"
            ],
            "complexity": 15
        },
        "archive\\orphans\\tools\\functional\\gui_interaction.py": {
            "language": ".py",
            "functions": [
                "find_and_activate_cursor_window",
                "type_prompt_and_send",
                "copy_cursor_response",
                "interact_with_cursor"
            ],
            "classes": {},
            "imports": [
                "logging",
                "platform",
                "time",
                "pyautogui",
                "pyperclip",
                "dreamos.core.bots.orchestrator_bot"
            ],
            "complexity": 4
        },
        "archive\\orphans\\tools\\functional\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "imports": [],
            "complexity": 0,
            "error": "invalid syntax (<unknown>, line 3)"
        },
        "archive\\orphans\\tools\\maintenance\\archive_agent_comms.py": {
            "language": ".py",
            "functions": [
                "main"
            ],
            "classes": {},
            "imports": [
                "logging",
                "datetime",
                "pathlib",
                "dreamos.utils"
            ],
            "complexity": 1
        },
        "archive\\orphans\\tools\\maintenance\\archive_agent_mailboxes.py": {
            "language": ".py",
            "functions": [
                "archive_mailbox",
                "main"
            ],
            "classes": {},
            "imports": [
                "logging",
                "shutil",
                "datetime",
                "pathlib"
            ],
            "complexity": 2
        },
        "archive\\orphans\\tools\\maintenance\\augment_task_tags.py": {
            "language": ".py",
            "functions": [
                "augment_tasks_with_tags",
                "parse_args",
                "main"
            ],
            "classes": {},
            "imports": [
                "argparse",
                "logging",
                "sys",
                "datetime",
                "pathlib",
                "typing",
                "dreamos.core.tasks.nexus.task_nexus",
                "dreamos.agents.shadow_task_nexus",
                "dreamos.agents.shadow_task_nexus"
            ],
            "complexity": 3
        },
        "archive\\orphans\\tools\\maintenance\\validate_logs.py": {
            "language": ".py",
            "functions": [
                "load_schema_map",
                "find_jsonl_files"
            ],
            "classes": {},
            "imports": [
                "argparse",
                "glob",
                "json",
                "logging",
                "os",
                "sys",
                "typing",
                "dreamos.core.config",
                "src.dreamos.utils.log_validator"
            ],
            "complexity": 2
        },
        "archive\\orphans\\tools\\maintenance\\validate_onboarding_prompts.py": {
            "language": ".py",
            "functions": [
                "find_project_root",
                "main"
            ],
            "classes": {},
            "imports": [
                "argparse",
                "os",
                "sys",
                "pathlib",
                "dreamos.rendering.template_engine"
            ],
            "complexity": 2
        },
        "archive\\orphans\\tools\\maintenance\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "imports": [],
            "complexity": 0
        },
        "archive\\orphans\\tools\\tests\\circular_import_probe.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "imports": [
                "dreamos.utils.import_debugger"
            ],
            "complexity": 0
        },
        "archive\\orphans\\tools\\tests\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "imports": [],
            "complexity": 0,
            "error": "invalid syntax (<unknown>, line 3)"
        },
        "archive\\orphans\\tools\\validation\\check_dependencies.py": {
            "language": ".py",
            "functions": [
                "check_cli_dependencies",
                "main"
            ],
            "classes": {},
            "imports": [
                "logging",
                "shutil",
                "typing",
                "sys"
            ],
            "complexity": 2
        },
        "archive\\orphans\\tools\\validation\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "imports": [],
            "complexity": 0
        },
        "archive\\orphans\\tools\\_core\\base.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "__repr__",
                "__init__",
                "get_argument",
                "__init__",
                "__repr__",
                "__init__"
            ],
            "classes": {
                "ToolParameter": {
                    "methods": [
                        "__init__",
                        "__repr__"
                    ],
                    "docstring": null,
                    "base_classes": []
                },
                "ToolContext": {
                    "methods": [
                        "__init__",
                        "get_argument"
                    ],
                    "docstring": null,
                    "base_classes": []
                },
                "BaseTool": {
                    "methods": [
                        "__init__",
                        "__repr__"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "ABC"
                    ]
                },
                "BaseToolExecutor": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Placeholder base class for a tool executor concept. Now async.",
                    "base_classes": [
                        "ABC"
                    ]
                }
            },
            "imports": [
                "logging",
                "abc",
                "typing"
            ],
            "complexity": 11
        },
        "archive\\orphans\\tools\\_core\\registry.py": {
            "language": ".py",
            "functions": [
                "get_registry",
                "__init__",
                "register",
                "get_tool",
                "list_tools"
            ],
            "classes": {
                "ToolRegistry": {
                    "methods": [
                        "__init__",
                        "register",
                        "get_tool",
                        "list_tools"
                    ],
                    "docstring": "Minimal placeholder for ToolRegistry to resolve import errors.",
                    "base_classes": []
                }
            },
            "imports": [
                "logging",
                "typing",
                "base"
            ],
            "complexity": 6
        },
        "archive\\orphans\\utils\\ai_output_logger.py": {
            "language": ".py",
            "functions": [
                "log_ai_output"
            ],
            "classes": {},
            "imports": [
                "logging",
                "typing"
            ],
            "complexity": 1
        },
        "archive\\orphans\\utils\\autonomy_governor.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "check_operational_status",
                "get_next_action_suggestion",
                "validate_task_completion_checklist"
            ],
            "classes": {
                "AgentAutonomyGovernor": {
                    "methods": [
                        "__init__",
                        "check_operational_status",
                        "get_next_action_suggestion",
                        "validate_task_completion_checklist"
                    ],
                    "docstring": "Provides checks and guidance based on AUTONOMOUS_LOOP principles (v2.1 Inbox-Centric).",
                    "base_classes": []
                }
            },
            "imports": [
                "logging",
                "py_compile",
                "subprocess",
                "time",
                "typing",
                "core.coordination.agent_bus",
                "core.comms.mailbox_utils",
                "core.config",
                "core.coordination.project_board_manager"
            ],
            "complexity": 5
        },
        "archive\\orphans\\utils\\common_utils.py": {
            "language": ".py",
            "functions": [
                "get_utc_iso_timestamp"
            ],
            "classes": {},
            "imports": [
                "datetime"
            ],
            "complexity": 1
        },
        "archive\\orphans\\utils\\coords.py": {
            "language": ".py",
            "functions": [
                "load_coordinates",
                "save_coordinates"
            ],
            "classes": {},
            "imports": [
                "json",
                "pathlib",
                "typing"
            ],
            "complexity": 2
        },
        "archive\\orphans\\utils\\decorators.py": {
            "language": ".py",
            "functions": [
                "retry_on_exception",
                "async_retry_on_exception",
                "decorator",
                "decorator",
                "wrapper"
            ],
            "classes": {},
            "imports": [
                "asyncio",
                "functools",
                "logging",
                "time",
                "typing"
            ],
            "complexity": 5
        },
        "archive\\orphans\\utils\\file_io.py": {
            "language": ".py",
            "functions": [
                "read_json_file",
                "write_json_atomic",
                "read_jsonl_file",
                "append_jsonl",
                "read_text_file",
                "write_text_file_atomic",
                "_extract_content_from_tool_response",
                "safe_read_with_tool",
                "ensure_directory",
                "calculate_file_sha256",
                "move_file"
            ],
            "classes": {},
            "imports": [
                "json",
                "logging",
                "os",
                "tempfile",
                "pathlib",
                "typing",
                "hashlib",
                "shutil"
            ],
            "complexity": 11
        },
        "archive\\orphans\\utils\\gui_utils.py": {
            "language": ".py",
            "functions": [
                "get_specific_coordinate",
                "copy_text_from_cursor",
                "close_browser",
                "launch_browser",
                "inject_text_via_mouse",
                "perform_mouse_action",
                "navigate_to_page",
                "wait_for_login",
                "load_coordinates",
                "is_window_focused",
                "trigger_recalibration",
                "wait_for_element",
                "copy_thea_reply",
                "get_clipboard_content_safe",
                "copy_text_from_agent"
            ],
            "classes": {},
            "imports": [
                "json",
                "logging",
                "subprocess",
                "sys",
                "time",
                "pathlib",
                "typing",
                "dreamos.core.config",
                "pygetwindow",
                "pyautogui",
                "pyperclip"
            ],
            "complexity": 15
        },
        "archive\\orphans\\utils\\import_debugger.py": {
            "language": ".py",
            "functions": [
                "try_import"
            ],
            "classes": {},
            "imports": [
                "traceback"
            ],
            "complexity": 1
        },
        "archive\\orphans\\utils\\logging_utils.py": {
            "language": ".py",
            "functions": [
                "log_handler_exception"
            ],
            "classes": {},
            "imports": [
                "logging",
                "traceback",
                "typing"
            ],
            "complexity": 1
        },
        "archive\\orphans\\utils\\project_root.py": {
            "language": ".py",
            "functions": [
                "find_project_root"
            ],
            "classes": {},
            "imports": [
                "pathlib"
            ],
            "complexity": 1
        },
        "archive\\orphans\\utils\\protocol_compliance_utils.py": {
            "language": ".py",
            "functions": [
                "calculate_file_sha256",
                "load_yaml_registry",
                "check_mailbox_structure",
                "_find_agent_source_file",
                "check_agent_bus_usage",
                "check_task_status_reporting",
                "check_compliance",
                "__init__",
                "visit_ClassDef",
                "visit_Call",
                "report",
                "__init__",
                "visit_Assign",
                "visit_Call",
                "report"
            ],
            "classes": {
                "AgentBusAstVisitor": {
                    "methods": [
                        "__init__",
                        "visit_ClassDef",
                        "visit_Call",
                        "report"
                    ],
                    "docstring": null,
                    "base_classes": []
                },
                "TaskStatusAstVisitor": {
                    "methods": [
                        "__init__",
                        "visit_Assign",
                        "visit_Call",
                        "report"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "imports": [
                "ast",
                "hashlib",
                "logging",
                "re",
                "sys",
                "pathlib",
                "typing",
                "core.config",
                "core.errors",
                "yaml"
            ],
            "complexity": 17
        },
        "archive\\orphans\\utils\\safe_json_editor_template.py": {
            "language": ".py",
            "functions": [
                "load_json_list",
                "atomic_write_json",
                "add_item_to_list",
                "main"
            ],
            "classes": {},
            "imports": [
                "argparse",
                "json",
                "logging",
                "os",
                "sys",
                "tempfile",
                "pathlib",
                "typing"
            ],
            "complexity": 4
        },
        "archive\\orphans\\utils\\schema_validator.py": {
            "language": ".py",
            "functions": [
                "load_schema",
                "validate_payload"
            ],
            "classes": {},
            "imports": [
                "json",
                "logging",
                "pathlib",
                "typing",
                "jsonschema"
            ],
            "complexity": 2
        },
        "archive\\orphans\\utils\\search.py": {
            "language": ".py",
            "functions": [
                "is_ripgrep_installed",
                "run_ripgrep_search",
                "parse_ripgrep_output"
            ],
            "classes": {
                "RipgrepMatch": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "TypedDict"
                    ]
                }
            },
            "imports": [
                "logging",
                "re",
                "shutil",
                "subprocess",
                "typing"
            ],
            "complexity": 4
        },
        "archive\\orphans\\utils\\spec_parser.py": {
            "language": ".py",
            "functions": [
                "parse_project_plan_tasks",
                "__init__",
                "visit_Table",
                "visit_TableRow",
                "_extract_headers",
                "_extract_row_cells",
                "_extract_cell_content",
                "_normalize_headers",
                "_map_row_to_headers",
                "parse"
            ],
            "classes": {
                "ProjectPlanTableVisitor": {
                    "methods": [
                        "__init__",
                        "visit_Table",
                        "visit_TableRow",
                        "_extract_headers",
                        "_extract_row_cells",
                        "_extract_cell_content",
                        "_normalize_headers",
                        "_map_row_to_headers"
                    ],
                    "docstring": "AST Visitor to find and process specific task tables within PROJECT_PLAN.md.",
                    "base_classes": []
                },
                "NodeVisitor": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": []
                },
                "ParserWithTables": {
                    "methods": [
                        "parse"
                    ],
                    "docstring": null,
                    "base_classes": []
                },
                "RendererWithTables": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "imports": [
                "logging",
                "pathlib",
                "commonmark",
                "commonmark_extensions.tables"
            ],
            "complexity": 14
        },
        "archive\\orphans\\utils\\text.py": {
            "language": ".py",
            "functions": [
                "sanitize_filename"
            ],
            "classes": {},
            "imports": [
                "logging",
                "re"
            ],
            "complexity": 1
        },
        "archive\\orphans\\utils\\dream_mode_utils\\browser.py": {
            "language": ".py",
            "functions": [
                "launch_browser",
                "navigate_to_page",
                "wait_for_login",
                "close_browser"
            ],
            "classes": {},
            "imports": [
                "logging",
                "sys",
                "time",
                "pathlib",
                "typing",
                "dreamos.UnifiedDriverManager"
            ],
            "complexity": 4
        },
        "archive\\orphans\\utils\\dream_mode_utils\\channel_loader.py": {
            "language": ".py",
            "functions": [
                "get_blob_channel"
            ],
            "classes": {},
            "imports": [
                "logging",
                "typing",
                "azure.storage.blob",
                "dreamos.channels.azure_blob_channel",
                "dreamos.channels.local_blob_channel",
                "dreamos.core.config",
                "azure.identity.aio"
            ],
            "complexity": 1
        },
        "archive\\orphans\\utils\\dream_mode_utils\\cursor_session_manager.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "on_created",
                "start"
            ],
            "classes": {
                "CursorSessionManager": {
                    "methods": [
                        "__init__",
                        "on_created",
                        "start"
                    ],
                    "docstring": "Watches a directory for Cursor task files and launches Cursor IDE sessions to execute them.",
                    "base_classes": []
                }
            },
            "imports": [
                "logging",
                "os",
                "subprocess",
                "time",
                "pathlib",
                "typing",
                "watchdog.events",
                "watchdog.observers",
                "dreamos.core.config"
            ],
            "complexity": 4
        },
        "archive\\orphans\\utils\\dream_mode_utils\\html_parser.py": {
            "language": ".py",
            "functions": [
                "is_still_generating",
                "extract_latest_reply"
            ],
            "classes": {},
            "imports": [
                "logging",
                "selenium.common.exceptions",
                "selenium.webdriver.common.by"
            ],
            "complexity": 2
        },
        "archive\\orphans\\utils\\dream_mode_utils\\prompt_renderer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "render"
            ],
            "classes": {
                "PromptRenderer": {
                    "methods": [
                        "__init__",
                        "render"
                    ],
                    "docstring": "Loads and renders Jinja2 templates from a specified directory.",
                    "base_classes": []
                }
            },
            "imports": [
                "logging",
                "pathlib",
                "jinja2"
            ],
            "complexity": 3
        },
        "archive\\orphans\\utils\\dream_mode_utils\\task_parser.py": {
            "language": ".py",
            "functions": [
                "_extract_json_block",
                "_extract_regex_fallback",
                "extract_task_metadata"
            ],
            "classes": {},
            "imports": [
                "json",
                "logging",
                "re"
            ],
            "complexity": 3
        },
        "archive\\orphans\\utils\\dream_mode_utils\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "imports": [],
            "complexity": 0,
            "error": "invalid syntax (<unknown>, line 3)"
        },
        "dreamos_ai_organizer\\agent_identity.py": {
            "language": ".py",
            "functions": [
                "create_agent",
                "__init__",
                "_load_ethos",
                "validate_ethos_compliance",
                "_check_value_compliance",
                "_check_principle_compliance",
                "_check_safeguard_compliance",
                "confirm_identity",
                "should_pause",
                "__init__",
                "log_intent"
            ],
            "classes": {
                "EthosValidationResult": {
                    "methods": [],
                    "docstring": "Results from ethos validation checks.",
                    "base_classes": []
                },
                "AgentIdentity": {
                    "methods": [
                        "__init__",
                        "_load_ethos",
                        "validate_ethos_compliance",
                        "_check_value_compliance",
                        "_check_principle_compliance",
                        "_check_safeguard_compliance",
                        "confirm_identity",
                        "should_pause"
                    ],
                    "docstring": "Manages agent identity and ethos compliance.",
                    "base_classes": []
                },
                "EmpathyLogger": {
                    "methods": [
                        "__init__",
                        "log_intent"
                    ],
                    "docstring": "Handles logging of emotional context and intent.",
                    "base_classes": []
                }
            },
            "imports": [
                "json",
                "logging",
                "os",
                "pathlib",
                "typing",
                "dataclasses",
                "datetime"
            ],
            "complexity": 14
        },
        "dreamos_ai_organizer\\validate_ethos.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "_load_ethos",
                "analyze_logs",
                "_load_empathy_logs",
                "_load_action_logs",
                "_calculate_metrics",
                "_count_compliant_actions",
                "_count_warning_actions",
                "_generate_report",
                "_generate_recommendations"
            ],
            "classes": {
                "ValidationMetrics": {
                    "methods": [],
                    "docstring": "Metrics for ethos validation.",
                    "base_classes": []
                },
                "EthosValidator": {
                    "methods": [
                        "__init__",
                        "_load_ethos",
                        "analyze_logs",
                        "_load_empathy_logs",
                        "_load_action_logs",
                        "_calculate_metrics",
                        "_count_compliant_actions",
                        "_count_warning_actions",
                        "_generate_report",
                        "_generate_recommendations"
                    ],
                    "docstring": "Validates system behavior against ethos guidelines.",
                    "base_classes": []
                }
            },
            "imports": [
                "json",
                "logging",
                "pathlib",
                "datetime",
                "typing",
                "pandas",
                "dataclasses"
            ],
            "complexity": 13
        },
        "episodes\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "imports": [],
            "complexity": 0
        },
        "scripts\\debug_midnight_runner.py": {
            "language": ".py",
            "functions": [
                "main"
            ],
            "classes": {},
            "imports": [
                "logging",
                "sys",
                "pathlib",
                "src.dreamos.automation.midnight_runner",
                "src.dreamos.core.config"
            ],
            "complexity": 1
        },
        "scripts\\auditing\\scan_project.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "scan_file",
                "find_orphaned_files",
                "find_duplicate_code",
                "scan"
            ],
            "classes": {
                "ProjectScanner": {
                    "methods": [
                        "__init__",
                        "scan_file",
                        "find_orphaned_files",
                        "find_duplicate_code",
                        "scan"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "imports": [
                "json",
                "os",
                "pathlib",
                "typing",
                "ast",
                "importlib.util",
                "sys",
                "collections"
            ],
            "complexity": 7
        },
        "scripts\\maintenance\\cleanup_runtime.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "create_backup",
                "create_new_structure",
                "move_files",
                "consolidate_temp_dirs",
                "consolidate_task_dirs",
                "consolidate_log_dirs",
                "consolidate_bridge_dirs",
                "cleanup_empty_dirs",
                "save_moves_log",
                "run"
            ],
            "classes": {
                "RuntimeCleanup": {
                    "methods": [
                        "__init__",
                        "create_backup",
                        "create_new_structure",
                        "move_files",
                        "consolidate_temp_dirs",
                        "consolidate_task_dirs",
                        "consolidate_log_dirs",
                        "consolidate_bridge_dirs",
                        "cleanup_empty_dirs",
                        "save_moves_log",
                        "run"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "imports": [
                "os",
                "shutil",
                "json",
                "sys",
                "traceback",
                "datetime",
                "pathlib",
                "logging"
            ],
            "complexity": 12
        },
        "scripts\\maintenance\\project_cleanup_protocol.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "load_analysis",
                "calculate_file_utility_score",
                "identify_duplicate_functions",
                "find_orphaned_files",
                "archive_file",
                "log_cleanup_action",
                "run_cleanup_cycle",
                "run_until_clean"
            ],
            "classes": {
                "ProjectCleanupProtocol": {
                    "methods": [
                        "__init__",
                        "load_analysis",
                        "calculate_file_utility_score",
                        "identify_duplicate_functions",
                        "find_orphaned_files",
                        "archive_file",
                        "log_cleanup_action",
                        "run_cleanup_cycle",
                        "run_until_clean"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "imports": [
                "json",
                "os",
                "shutil",
                "datetime",
                "pathlib",
                "typing"
            ],
            "complexity": 11
        },
        "scripts\\maintenance\\project_scanner.py": {
            "language": ".py",
            "functions": [
                "get_file_stats",
                "extract_imports",
                "scan_directory",
                "generate_report",
                "main"
            ],
            "classes": {},
            "imports": [
                "ast",
                "json",
                "collections",
                "datetime",
                "pathlib",
                "typing"
            ],
            "complexity": 5
        },
        "scripts\\maintenance\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "imports": [],
            "complexity": 0
        },
        "scripts\\maintenance\\project_scanner\\analyzers.py": {
            "language": ".py",
            "functions": [
                "get_file_stats",
                "should_analyze",
                "extract_imports",
                "analyze_imports",
                "get_directory_size",
                "find_large_files",
                "format_size",
                "analyze_file",
                "_analyze_python",
                "_analyze_javascript",
                "_analyze_rust",
                "_analyze_frontend",
                "_calculate_complexity"
            ],
            "classes": {
                "AnalysisResult": {
                    "methods": [],
                    "docstring": "Container for file analysis results.",
                    "base_classes": []
                },
                "FileAnalyzer": {
                    "methods": [
                        "get_file_stats",
                        "should_analyze"
                    ],
                    "docstring": "Analyzes file statistics and content.",
                    "base_classes": []
                },
                "ImportAnalyzer": {
                    "methods": [
                        "extract_imports",
                        "analyze_imports"
                    ],
                    "docstring": "Analyzes Python import statements.",
                    "base_classes": []
                },
                "SizeAnalyzer": {
                    "methods": [
                        "get_directory_size",
                        "find_large_files",
                        "format_size"
                    ],
                    "docstring": "Analyzes file and directory sizes.",
                    "base_classes": []
                },
                "LanguageAnalyzer": {
                    "methods": [
                        "analyze_file",
                        "_analyze_python",
                        "_analyze_javascript",
                        "_analyze_rust",
                        "_analyze_frontend",
                        "_calculate_complexity"
                    ],
                    "docstring": "Base class for language-specific analyzers.",
                    "base_classes": []
                }
            },
            "imports": [
                "ast",
                "logging",
                "re",
                "collections",
                "dataclasses",
                "pathlib",
                "typing",
                "constants"
            ],
            "complexity": 18
        },
        "scripts\\maintenance\\project_scanner\\constants.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "imports": [
                "pathlib",
                "typing"
            ],
            "complexity": 0
        },
        "scripts\\maintenance\\project_scanner\\reporters.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_get_timestamp",
                "generate",
                "generate",
                "__init__",
                "save_report",
                "_save_json_report",
                "_save_markdown_report",
                "_generate_markdown_content",
                "generate_init_files",
                "export_chatgpt_context"
            ],
            "classes": {
                "BaseReporter": {
                    "methods": [
                        "__init__",
                        "_get_timestamp"
                    ],
                    "docstring": "Base class for report generators.",
                    "base_classes": []
                },
                "MarkdownReporter": {
                    "methods": [
                        "generate"
                    ],
                    "docstring": "Generates markdown reports.",
                    "base_classes": [
                        "BaseReporter"
                    ]
                },
                "JsonReporter": {
                    "methods": [
                        "generate"
                    ],
                    "docstring": "Generates JSON reports.",
                    "base_classes": [
                        "BaseReporter"
                    ]
                },
                "ReportGenerator": {
                    "methods": [
                        "__init__",
                        "save_report",
                        "_save_json_report",
                        "_save_markdown_report",
                        "_generate_markdown_content",
                        "generate_init_files",
                        "export_chatgpt_context"
                    ],
                    "docstring": "Generates reports in various formats.",
                    "base_classes": []
                }
            },
            "imports": [
                "json",
                "logging",
                "datetime",
                "pathlib",
                "typing",
                "jinja2",
                "analyzers",
                "constants"
            ],
            "complexity": 15
        },
        "scripts\\maintenance\\project_scanner\\scanner.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "hash_file",
                "should_exclude",
                "process_file",
                "__init__",
                "progress_update"
            ],
            "classes": {
                "FileProcessor": {
                    "methods": [
                        "__init__",
                        "hash_file",
                        "should_exclude",
                        "process_file"
                    ],
                    "docstring": "Handles file processing and caching.",
                    "base_classes": []
                },
                "ProjectScanner": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": "Main project scanner class.",
                    "base_classes": []
                }
            },
            "imports": [
                "ast",
                "asyncio",
                "hashlib",
                "json",
                "logging",
                "threading",
                "collections",
                "datetime",
                "pathlib",
                "typing",
                "analyzers",
                "constants",
                "reporters",
                "utils",
                "tree_sitter"
            ],
            "complexity": 8
        },
        "scripts\\maintenance\\project_scanner\\utils.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "__enter__",
                "__exit__",
                "__init__",
                "load_state",
                "save_state",
                "__init__",
                "register_handler",
                "unregister_handler",
                "handle_event",
                "get_memory_usage",
                "get_cpu_usage",
                "get_disk_usage",
                "ensure_dir",
                "safe_write",
                "safe_read"
            ],
            "classes": {
                "FileLock": {
                    "methods": [
                        "__init__",
                        "__enter__",
                        "__exit__"
                    ],
                    "docstring": "Thread-safe file locking mechanism.",
                    "base_classes": []
                },
                "StateManager": {
                    "methods": [
                        "__init__",
                        "load_state",
                        "save_state"
                    ],
                    "docstring": "Manages state persistence with file locking.",
                    "base_classes": []
                },
                "EventHandler": {
                    "methods": [
                        "__init__",
                        "register_handler",
                        "unregister_handler",
                        "handle_event"
                    ],
                    "docstring": "Base class for event handling.",
                    "base_classes": []
                },
                "HealthMonitor": {
                    "methods": [
                        "get_memory_usage",
                        "get_cpu_usage",
                        "get_disk_usage"
                    ],
                    "docstring": "System health monitoring utilities.",
                    "base_classes": []
                },
                "FileUtils": {
                    "methods": [
                        "ensure_dir",
                        "safe_write",
                        "safe_read"
                    ],
                    "docstring": "Common file operations.",
                    "base_classes": []
                }
            },
            "imports": [
                "os",
                "json",
                "logging",
                "threading",
                "psutil",
                "pathlib",
                "typing"
            ],
            "complexity": 21
        },
        "scripts\\maintenance\\project_scanner\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "imports": [
                "analyzers",
                "constants",
                "reporters",
                "scanner"
            ],
            "complexity": 0
        },
        "scripts\\maintenance\\project_scanner\\__main__.py": {
            "language": ".py",
            "functions": [
                "setup_logging",
                "parse_args",
                "get_base_dir",
                "main"
            ],
            "classes": {},
            "imports": [
                "argparse",
                "logging",
                "sys",
                "pathlib",
                "typing",
                "scanner",
                "utils"
            ],
            "complexity": 4
        },
        "src\\dreamos\\agents\\chatgpt_web_agent.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_initialize_browser",
                "_is_result_injected",
                "_mark_result_injected",
                "_get_and_cache_results",
                "sync_inject_and_selenium_send",
                "sync_scrape",
                "sync_close",
                "sync_read",
                "sync_write",
                "sync_read_prompt",
                "sync_scrape"
            ],
            "classes": {
                "ChatGPTWebAgent": {
                    "methods": [
                        "__init__",
                        "_initialize_browser",
                        "_is_result_injected",
                        "_mark_result_injected",
                        "_get_and_cache_results"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "imports": [
                "asyncio",
                "json",
                "logging",
                "time",
                "pathlib",
                "typing",
                "dreamos.core.config",
                "dreamos.core.tasks.nexus.task_nexus",
                "dreamos.utils.dream_mode_utils.browser",
                "dreamos.utils.dream_mode_utils.html_parser",
                "dreamos.utils.dream_mode_utils.task_parser",
                "dreamos.utils.gui_utils",
                "pyautogui",
                "pygetwindow",
                "selenium.common.exceptions",
                "selenium.webdriver.common.by",
                "dreamos.core.c2.local_blob_channel"
            ],
            "complexity": 13
        },
        "src\\dreamos\\automation\\disperse_tasks.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "load_tasks",
                "get_agent_inbox_path",
                "load_agent_inbox",
                "disperse_tasks",
                "create_agent_identity_config"
            ],
            "classes": {
                "TaskDisperser": {
                    "methods": [
                        "__init__",
                        "load_tasks",
                        "get_agent_inbox_path",
                        "load_agent_inbox",
                        "disperse_tasks",
                        "create_agent_identity_config"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "imports": [
                "json",
                "sys",
                "pathlib",
                "typing",
                "logging",
                "shutil"
            ],
            "complexity": 8
        },
        "src\\dreamos\\automation\\episode5_autonomy_loop.py": {
            "language": ".py",
            "functions": [
                "load_agent_prompt",
                "save_agent_output",
                "log_reflection",
                "run_episode5_loop"
            ],
            "classes": {},
            "imports": [
                "json",
                "logging",
                "time",
                "datetime",
                "pathlib",
                "typing",
                "core.config",
                "agents.utils.agent_utils",
                "cursor_orchestrator",
                "response_retriever"
            ],
            "complexity": 4
        },
        "src\\dreamos\\automation\\episode5_integration.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "start",
                "stop",
                "_run_episode5"
            ],
            "classes": {
                "Episode5Integration": {
                    "methods": [
                        "__init__",
                        "start",
                        "stop",
                        "_run_episode5"
                    ],
                    "docstring": "Integration handler for Episode 5 automation.",
                    "base_classes": []
                }
            },
            "imports": [
                "logging",
                "threading",
                "typing",
                "episode5_autonomy_loop",
                "core.config"
            ],
            "complexity": 5
        },
        "src\\dreamos\\automation\\episode_parser.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "validate_structure",
                "parse_tasks",
                "save_parsed_tasks"
            ],
            "classes": {
                "EpisodeParser": {
                    "methods": [
                        "__init__",
                        "validate_structure",
                        "parse_tasks",
                        "save_parsed_tasks"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "imports": [
                "yaml",
                "json",
                "sys",
                "pathlib",
                "typing",
                "logging"
            ],
            "complexity": 6
        },
        "src\\dreamos\\automation\\generate_episode_docs.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "load_episode",
                "generate_markdown",
                "save_documentation"
            ],
            "classes": {
                "EpisodeDocGenerator": {
                    "methods": [
                        "__init__",
                        "load_episode",
                        "generate_markdown",
                        "save_documentation"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "imports": [
                "yaml",
                "sys",
                "pathlib",
                "typing",
                "logging",
                "datetime"
            ],
            "complexity": 6
        },
        "src\\dreamos\\automation\\midnight_runner.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "start",
                "_handle_shutdown",
                "emergency_shutdown"
            ],
            "classes": {
                "MidnightRunner": {
                    "methods": [
                        "__init__",
                        "start",
                        "_handle_shutdown",
                        "emergency_shutdown"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "imports": [
                "json",
                "logging",
                "queue",
                "signal",
                "sys",
                "time",
                "datetime",
                "datetime",
                "pathlib",
                "typing",
                "episode5_integration"
            ],
            "complexity": 5
        },
        "src\\dreamos\\integrations\\cursor\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "imports": [
                "bridge"
            ],
            "complexity": 0
        },
        "src\\dreamos\\integrations\\cursor\\bridge\\bridge_loop.py": {
            "language": ".py",
            "functions": [
                "call_gpt_api",
                "write_bridge_output",
                "log_failure_trace",
                "relay_prompt_to_gpt",
                "get_file_mtime",
                "main_loop",
                "log_interaction"
            ],
            "classes": {},
            "imports": [
                "asyncio",
                "datetime",
                "json",
                "logging",
                "os",
                "sys",
                "time",
                "uuid",
                "pathlib",
                "yaml",
                "dreamos.agents.chatgpt_web_agent",
                "dreamos.core.config",
                "dreamos.core.tasks.nexus.task_nexus",
                "dreamos.integrations.cursor.utils.cursor_injector",
                "scraper"
            ],
            "complexity": 7
        },
        "src\\dreamos\\integrations\\cursor\\bridge\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "imports": [
                "bridge_loop",
                "http_bridge_service",
                "run_bridge_loop"
            ],
            "complexity": 0
        },
        "src\\dreamos\\integrations\\cursor\\bridge\\tests\\test_bridge_e2e.py": {
            "language": ".py",
            "functions": [
                "bridge_config",
                "bridge_loop",
                "test_bridge_prompt_response_flow",
                "test_bridge_config_loading"
            ],
            "classes": {},
            "imports": [
                "json",
                "os",
                "time",
                "pathlib",
                "pytest",
                "dreamos.integrations.cursor.bridge",
                "dreamos.core.config",
                "yaml",
                "threading",
                "yaml"
            ],
            "complexity": 4
        },
        "vendor\\tree-sitter-grammars\\tree-sitter-javascript\\setup.py": {
            "language": ".py",
            "functions": [
                "run",
                "get_tag"
            ],
            "classes": {
                "Build": {
                    "methods": [
                        "run"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "build"
                    ]
                },
                "BdistWheel": {
                    "methods": [
                        "get_tag"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "bdist_wheel"
                    ]
                }
            },
            "imports": [
                "os.path",
                "platform",
                "setuptools",
                "setuptools.command.build",
                "wheel.bdist_wheel"
            ],
            "complexity": 4
        },
        "vendor\\tree-sitter-grammars\\tree-sitter-javascript\\bindings\\python\\tests\\test_binding.py": {
            "language": ".py",
            "functions": [
                "test_can_load_grammar"
            ],
            "classes": {
                "TestLanguage": {
                    "methods": [
                        "test_can_load_grammar"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "TestCase"
                    ]
                }
            },
            "imports": [
                "unittest",
                "tree_sitter",
                "tree_sitter_javascript"
            ],
            "complexity": 2
        },
        "vendor\\tree-sitter-grammars\\tree-sitter-javascript\\bindings\\python\\tree_sitter_javascript\\__init__.py": {
            "language": ".py",
            "functions": [
                "_get_query",
                "__getattr__",
                "__dir__"
            ],
            "classes": {},
            "imports": [
                "importlib.resources",
                "_binding"
            ],
            "complexity": 3
        },
        "vendor\\tree-sitter-grammars\\tree-sitter-python\\setup.py": {
            "language": ".py",
            "functions": [
                "run",
                "get_tag"
            ],
            "classes": {
                "Build": {
                    "methods": [
                        "run"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "build"
                    ]
                },
                "BdistWheel": {
                    "methods": [
                        "get_tag"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "bdist_wheel"
                    ]
                }
            },
            "imports": [
                "os.path",
                "platform",
                "setuptools",
                "setuptools.command.build",
                "wheel.bdist_wheel"
            ],
            "complexity": 4
        },
        "vendor\\tree-sitter-grammars\\tree-sitter-python\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "imports": [],
            "complexity": 0
        },
        "vendor\\tree-sitter-grammars\\tree-sitter-python\\bindings\\python\\tests\\test_binding.py": {
            "language": ".py",
            "functions": [
                "test_can_load_grammar"
            ],
            "classes": {
                "TestLanguage": {
                    "methods": [
                        "test_can_load_grammar"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "TestCase"
                    ]
                }
            },
            "imports": [
                "unittest",
                "tree_sitter",
                "tree_sitter_python"
            ],
            "complexity": 2
        },
        "vendor\\tree-sitter-grammars\\tree-sitter-python\\bindings\\python\\tests\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "imports": [],
            "complexity": 0
        },
        "vendor\\tree-sitter-grammars\\tree-sitter-python\\bindings\\python\\tree_sitter_python\\__init__.py": {
            "language": ".py",
            "functions": [
                "_get_query",
                "__getattr__",
                "__dir__"
            ],
            "classes": {},
            "imports": [
                "importlib.resources",
                "_binding"
            ],
            "complexity": 3
        },
        "vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\compound-statement-without-trailing-newline.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "imports": [],
            "complexity": 0,
            "error": "Missing parentheses in call to 'print'. Did you mean print(...)? (<unknown>, line 3)"
        },
        "vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\crlf-line-endings.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "imports": [],
            "complexity": 0,
            "error": "Missing parentheses in call to 'print'. Did you mean print(...)? (<unknown>, line 1)"
        },
        "vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\mixed-spaces-tabs.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "imports": [],
            "complexity": 0,
            "error": "Missing parentheses in call to 'print'. Did you mean print(...)? (<unknown>, line 2)"
        },
        "vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\multiple-newlines.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "imports": [],
            "complexity": 0,
            "error": "Missing parentheses in call to 'print'. Did you mean print(...)? (<unknown>, line 5)"
        },
        "vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar-crlf.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "imports": [],
            "complexity": 0,
            "error": "leading zeros in decimal integer literals are not permitted; use an 0o prefix for octal integers (<unknown>, line 31)"
        },
        "vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "imports": [],
            "complexity": 0,
            "error": "leading zeros in decimal integer literals are not permitted; use an 0o prefix for octal integers (<unknown>, line 31)"
        },
        "vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar-crlf.py": {
            "language": ".py",
            "functions": [
                "test_main",
                "testBackslash",
                "testPlainIntegers",
                "testLongIntegers",
                "testUnderscoresInNumbers",
                "testFloats",
                "testEllipsis",
                "testEvalInput",
                "testFuncdef",
                "testLambdef",
                "testSimpleStmt",
                "testExprStmt",
                "testDelStmt",
                "testPassStmt",
                "testBreakStmt",
                "testContinueStmt",
                "test_break_continue_loop",
                "testReturn",
                "testYield",
                "testRaise",
                "testImport",
                "testGlobal",
                "testNonlocal",
                "testAssert",
                "testIf",
                "testWhile",
                "testFor",
                "testTry",
                "testSuite",
                "testTest",
                "testComparison",
                "testBinaryMaskOps",
                "testShiftOps",
                "testAdditiveOps",
                "testMultiplicativeOps",
                "testUnaryOps",
                "testSelectors",
                "testAtoms",
                "testClassdef",
                "testDictcomps",
                "testListcomps",
                "testGenexps",
                "testComprehensionSpecials",
                "test_with_statement",
                "testIfElseExpr",
                "testStringLiterals",
                "f1",
                "f2",
                "f3",
                "a1",
                "a2",
                "v0",
                "v1",
                "v2",
                "d01",
                "d11",
                "d21",
                "d02",
                "d12",
                "d22",
                "d01v",
                "d11v",
                "d21v",
                "d02v",
                "d12v",
                "d22v",
                "pos0key1",
                "pos2key2",
                "pos2key2dict",
                "f",
                "f",
                "f",
                "f",
                "f",
                "f",
                "f",
                "f",
                "f",
                "null",
                "f",
                "f",
                "f",
                "f",
                "f",
                "foo",
                "test_inner",
                "g1",
                "g2",
                "f",
                "class_decorator",
                "test_in_func",
                "test_nested_front",
                "_checkeval",
                "__init__",
                "__len__",
                "__getitem__",
                "meth1",
                "meth2",
                "meth3",
                "__enter__",
                "__exit__"
            ],
            "classes": {
                "TokenTests": {
                    "methods": [
                        "testBackslash",
                        "testPlainIntegers",
                        "testLongIntegers",
                        "testUnderscoresInNumbers",
                        "testFloats",
                        "testEllipsis"
                    ],
                    "docstring": null,
                    "base_classes": []
                },
                "GrammarTests": {
                    "methods": [
                        "testEvalInput",
                        "testFuncdef",
                        "testLambdef",
                        "testSimpleStmt",
                        "testExprStmt",
                        "testDelStmt",
                        "testPassStmt",
                        "testBreakStmt",
                        "testContinueStmt",
                        "test_break_continue_loop",
                        "testReturn",
                        "testYield",
                        "testRaise",
                        "testImport",
                        "testGlobal",
                        "testNonlocal",
                        "testAssert",
                        "testIf",
                        "testWhile",
                        "testFor",
                        "testTry",
                        "testSuite",
                        "testTest",
                        "testComparison",
                        "testBinaryMaskOps",
                        "testShiftOps",
                        "testAdditiveOps",
                        "testMultiplicativeOps",
                        "testUnaryOps",
                        "testSelectors",
                        "testAtoms",
                        "testClassdef",
                        "testDictcomps",
                        "testListcomps",
                        "testGenexps",
                        "testComprehensionSpecials",
                        "test_with_statement",
                        "testIfElseExpr",
                        "testStringLiterals"
                    ],
                    "docstring": null,
                    "base_classes": []
                },
                "Squares": {
                    "methods": [
                        "__init__",
                        "__len__",
                        "__getitem__"
                    ],
                    "docstring": null,
                    "base_classes": []
                },
                "B": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": []
                },
                "B2": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": []
                },
                "C1": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "B"
                    ]
                },
                "C2": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "B"
                    ]
                },
                "D": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "C1",
                        "C2",
                        "B"
                    ]
                },
                "C": {
                    "methods": [
                        "meth1",
                        "meth2",
                        "meth3"
                    ],
                    "docstring": null,
                    "base_classes": []
                },
                "G": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": []
                },
                "manager": {
                    "methods": [
                        "__enter__",
                        "__exit__"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "object"
                    ]
                }
            },
            "imports": [
                "test.support",
                "unittest",
                "sys",
                "sys",
                "sys",
                "sys",
                "time",
                "sys",
                "time",
                "time",
                "sys",
                "sys",
                "sys",
                "sys",
                "time"
            ],
            "complexity": 112
        },
        "vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar.py": {
            "language": ".py",
            "functions": [
                "test_main",
                "testBackslash",
                "testPlainIntegers",
                "testLongIntegers",
                "testUnderscoresInNumbers",
                "testFloats",
                "testEllipsis",
                "testEvalInput",
                "testFuncdef",
                "testLambdef",
                "testSimpleStmt",
                "testExprStmt",
                "testDelStmt",
                "testPassStmt",
                "testBreakStmt",
                "testContinueStmt",
                "test_break_continue_loop",
                "testReturn",
                "testYield",
                "testRaise",
                "testImport",
                "testGlobal",
                "testNonlocal",
                "testAssert",
                "testIf",
                "testWhile",
                "testFor",
                "testTry",
                "testSuite",
                "testTest",
                "testComparison",
                "testBinaryMaskOps",
                "testShiftOps",
                "testAdditiveOps",
                "testMultiplicativeOps",
                "testUnaryOps",
                "testSelectors",
                "testAtoms",
                "testClassdef",
                "testDictcomps",
                "testListcomps",
                "testGenexps",
                "testComprehensionSpecials",
                "test_with_statement",
                "testIfElseExpr",
                "testStringLiterals",
                "f1",
                "f2",
                "f3",
                "a1",
                "a2",
                "v0",
                "v1",
                "v2",
                "d01",
                "d11",
                "d21",
                "d02",
                "d12",
                "d22",
                "d01v",
                "d11v",
                "d21v",
                "d02v",
                "d12v",
                "d22v",
                "pos0key1",
                "pos2key2",
                "pos2key2dict",
                "f",
                "f",
                "f",
                "f",
                "f",
                "f",
                "f",
                "f",
                "f",
                "null",
                "f",
                "f",
                "f",
                "f",
                "f",
                "foo",
                "test_inner",
                "g1",
                "g2",
                "f",
                "class_decorator",
                "test_in_func",
                "test_nested_front",
                "_checkeval",
                "__init__",
                "__len__",
                "__getitem__",
                "meth1",
                "meth2",
                "meth3",
                "__enter__",
                "__exit__"
            ],
            "classes": {
                "TokenTests": {
                    "methods": [
                        "testBackslash",
                        "testPlainIntegers",
                        "testLongIntegers",
                        "testUnderscoresInNumbers",
                        "testFloats",
                        "testEllipsis"
                    ],
                    "docstring": null,
                    "base_classes": []
                },
                "GrammarTests": {
                    "methods": [
                        "testEvalInput",
                        "testFuncdef",
                        "testLambdef",
                        "testSimpleStmt",
                        "testExprStmt",
                        "testDelStmt",
                        "testPassStmt",
                        "testBreakStmt",
                        "testContinueStmt",
                        "test_break_continue_loop",
                        "testReturn",
                        "testYield",
                        "testRaise",
                        "testImport",
                        "testGlobal",
                        "testNonlocal",
                        "testAssert",
                        "testIf",
                        "testWhile",
                        "testFor",
                        "testTry",
                        "testSuite",
                        "testTest",
                        "testComparison",
                        "testBinaryMaskOps",
                        "testShiftOps",
                        "testAdditiveOps",
                        "testMultiplicativeOps",
                        "testUnaryOps",
                        "testSelectors",
                        "testAtoms",
                        "testClassdef",
                        "testDictcomps",
                        "testListcomps",
                        "testGenexps",
                        "testComprehensionSpecials",
                        "test_with_statement",
                        "testIfElseExpr",
                        "testStringLiterals"
                    ],
                    "docstring": null,
                    "base_classes": []
                },
                "Squares": {
                    "methods": [
                        "__init__",
                        "__len__",
                        "__getitem__"
                    ],
                    "docstring": null,
                    "base_classes": []
                },
                "B": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": []
                },
                "B2": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": []
                },
                "C1": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "B"
                    ]
                },
                "C2": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "B"
                    ]
                },
                "D": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "C1",
                        "C2",
                        "B"
                    ]
                },
                "C": {
                    "methods": [
                        "meth1",
                        "meth2",
                        "meth3"
                    ],
                    "docstring": null,
                    "base_classes": []
                },
                "G": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": []
                },
                "manager": {
                    "methods": [
                        "__enter__",
                        "__exit__"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "object"
                    ]
                }
            },
            "imports": [
                "test.support",
                "unittest",
                "sys",
                "sys",
                "sys",
                "sys",
                "time",
                "sys",
                "time",
                "time",
                "sys",
                "sys",
                "sys",
                "sys",
                "time"
            ],
            "complexity": 112
        },
        "vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3.8_grammar.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "imports": [],
            "complexity": 0,
            "error": "expected an indented block after function definition on line 315 (<unknown>, line 317)"
        },
        "vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\simple-statements-without-trailing-newline.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "imports": [],
            "complexity": 0,
            "error": "Missing parentheses in call to 'print'. Did you mean print(...)? (<unknown>, line 1)"
        },
        "vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\tabs.py": {
            "language": ".py",
            "functions": [
                "set_password",
                "main"
            ],
            "classes": {},
            "imports": [],
            "complexity": 2
        },
        "vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\trailing-whitespace.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "imports": [],
            "complexity": 0,
            "error": "Missing parentheses in call to 'print'. Did you mean print(...)? (<unknown>, line 1)"
        },
        "vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "imports": [],
            "complexity": 0,
            "error": "invalid decimal literal (<unknown>, line 12)"
        },
        "vendor\\tree-sitter-grammars\\tree-sitter-python\\test\\highlight\\keywords.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "imports": [],
            "complexity": 0
        },
        "vendor\\tree-sitter-grammars\\tree-sitter-python\\test\\highlight\\parameters.py": {
            "language": ".py",
            "functions": [
                "g"
            ],
            "classes": {},
            "imports": [],
            "complexity": 1
        },
        "vendor\\tree-sitter-grammars\\tree-sitter-python\\test\\highlight\\pattern_matching.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "imports": [],
            "complexity": 0,
            "error": "only single target (not tuple) can be annotated (<unknown>, line 48)"
        },
        "vendor\\tree-sitter-grammars\\tree-sitter-python\\test\\highlight\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "imports": [],
            "complexity": 0
        },
        "vendor\\tree-sitter-grammars\\tree-sitter-python\\test\\tags\\main.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "imports": [],
            "complexity": 0,
            "error": "Missing parentheses in call to 'print'. Did you mean print(...)? (<unknown>, line 5)"
        },
        "vendor\\tree-sitter-grammars\\tree-sitter-python\\test\\tags\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "imports": [],
            "complexity": 0
        },
        "vendor\\tree-sitter-grammars\\tree-sitter-rust\\setup.py": {
            "language": ".py",
            "functions": [
                "run",
                "get_tag"
            ],
            "classes": {
                "Build": {
                    "methods": [
                        "run"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "build"
                    ]
                },
                "BdistWheel": {
                    "methods": [
                        "get_tag"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "bdist_wheel"
                    ]
                }
            },
            "imports": [
                "os.path",
                "platform",
                "setuptools",
                "setuptools.command.build",
                "wheel.bdist_wheel"
            ],
            "complexity": 4
        },
        "vendor\\tree-sitter-grammars\\tree-sitter-rust\\bindings\\python\\tests\\test_binding.py": {
            "language": ".py",
            "functions": [
                "test_can_load_grammar"
            ],
            "classes": {
                "TestLanguage": {
                    "methods": [
                        "test_can_load_grammar"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "TestCase"
                    ]
                }
            },
            "imports": [
                "unittest",
                "tree_sitter",
                "tree_sitter_rust"
            ],
            "complexity": 2
        },
        "vendor\\tree-sitter-grammars\\tree-sitter-rust\\bindings\\python\\tree_sitter_rust\\__init__.py": {
            "language": ".py",
            "functions": [
                "_get_query",
                "__getattr__",
                "__dir__"
            ],
            "classes": {},
            "imports": [
                "importlib.resources",
                "_binding"
            ],
            "complexity": 3
        }
    },
    "file_counts": {
        "total_files": 522,
        "orphaned_files": 521,
        "missing_docs": 0,
        "modules": {
            "apps": 1,
            "archive": 464,
            "dreamos_ai_organizer": 2,
            "episodes": 1,
            "scripts": 13,
            "src": 11,
            "vendor": 30
        }
    },
    "dependencies": {},
    "duplicate_code": {
        "logger = logging.getLogger(__name__)  # Define logger at module level...": [
            "D:\\Dream.os\\archive\\orphans\\agents\\autonomy_recovery_patch.py",
            "D:\\Dream.os\\archive\\orphans\\coordination\\tasks\\task_utils.py"
        ],
        "# chatgpt_web_agent.py\n\"\"\"\nDefines the ChatGPTWebAgent, an agent responsible for interacting with a\n...": [
            "D:\\Dream.os\\archive\\orphans\\agents\\chatgpt_web_agent.py",
            "D:\\Dream.os\\src\\dreamos\\agents\\chatgpt_web_agent.py"
        ],
        "import asyncio\nimport json\nimport logging\nimport time\nfrom pathlib import Path\nfrom typing import Di...": [
            "D:\\Dream.os\\archive\\orphans\\agents\\chatgpt_web_agent.py",
            "D:\\Dream.os\\src\\dreamos\\agents\\chatgpt_web_agent.py"
        ],
        "from dreamos.core.config import AppConfig\nfrom dreamos.core.tasks.nexus.task_nexus import TaskNexus\n...": [
            "D:\\Dream.os\\archive\\orphans\\agents\\chatgpt_web_agent.py",
            "D:\\Dream.os\\src\\dreamos\\agents\\chatgpt_web_agent.py"
        ],
        "# Attempt to import pygetwindow for window activation, fail gracefully\n    try:\n        import pyget...": [
            "D:\\Dream.os\\archive\\orphans\\agents\\chatgpt_web_agent.py",
            "D:\\Dream.os\\src\\dreamos\\agents\\chatgpt_web_agent.py"
        ],
        "logger = logging.getLogger(\"ChatGPTWebAgent\")\nlogger.setLevel(logging.INFO)...": [
            "D:\\Dream.os\\archive\\orphans\\agents\\chatgpt_web_agent.py",
            "D:\\Dream.os\\src\\dreamos\\agents\\chatgpt_web_agent.py"
        ],
        "DEFAULT_INTERVAL = 10  # seconds between scrape attempts\n# AGENT_SCRIPT_DIR = Path(__file__).parent ...": [
            "D:\\Dream.os\\archive\\orphans\\agents\\chatgpt_web_agent.py",
            "D:\\Dream.os\\src\\dreamos\\agents\\chatgpt_web_agent.py"
        ],
        "class ChatGPTWebAgent:\n    def __init__(\n        self,\n        config: AppConfig,\n        agent_id: ...": [
            "D:\\Dream.os\\archive\\orphans\\agents\\chatgpt_web_agent.py",
            "D:\\Dream.os\\src\\dreamos\\agents\\chatgpt_web_agent.py"
        ],
        "Args:\n            config: The central application configuration object.\n            agent_id: The un...": [
            "D:\\Dream.os\\archive\\orphans\\agents\\chatgpt_web_agent.py",
            "D:\\Dream.os\\src\\dreamos\\agents\\chatgpt_web_agent.py"
        ],
        "# --- Configuration Loading from AppConfig ---\n        # Get agent-specific settings (assuming neste...": [
            "D:\\Dream.os\\archive\\orphans\\agents\\chatgpt_web_agent.py",
            "D:\\Dream.os\\src\\dreamos\\agents\\chatgpt_web_agent.py"
        ],
        "# Inbox Directory (Example: config.paths.agent_mailboxes)\n        inbox_root_config = getattr(\n     ...": [
            "D:\\Dream.os\\archive\\orphans\\agents\\chatgpt_web_agent.py",
            "D:\\Dream.os\\src\\dreamos\\agents\\chatgpt_web_agent.py"
        ],
        "# Scrape Interval (Example: config.chat_agent.scrape_interval)\n        self.interval = getattr(\n    ...": [
            "D:\\Dream.os\\archive\\orphans\\agents\\chatgpt_web_agent.py",
            "D:\\Dream.os\\src\\dreamos\\agents\\chatgpt_web_agent.py"
        ],
        "# Onboarding Prompt Path (Example: config.paths.onboarding_prompts)\n        onboarding_base_path_con...": [
            "D:\\Dream.os\\archive\\orphans\\agents\\chatgpt_web_agent.py",
            "D:\\Dream.os\\src\\dreamos\\agents\\chatgpt_web_agent.py"
        ],
        "# Reset Onboarding Flag (Example: config.chat_agent.reset_onboarding)\n        self.reset_onboarding_...": [
            "D:\\Dream.os\\archive\\orphans\\agents\\chatgpt_web_agent.py",
            "D:\\Dream.os\\src\\dreamos\\agents\\chatgpt_web_agent.py"
        ],
        "# Initialize C2 channel (e.g., LocalBlobChannel, RedisChannel)\n        c2_channel_type = getattr(\n  ...": [
            "D:\\Dream.os\\archive\\orphans\\agents\\chatgpt_web_agent.py",
            "D:\\Dream.os\\src\\dreamos\\agents\\chatgpt_web_agent.py"
        ],
        "self.channel = LocalBlobChannel()\n        # Example for another type:\n        # elif c2_channel_type...": [
            "D:\\Dream.os\\archive\\orphans\\agents\\chatgpt_web_agent.py",
            "D:\\Dream.os\\src\\dreamos\\agents\\chatgpt_web_agent.py"
        ],
        "# Track which results have been injected into ChatGPT UI\n        self.injected_result_ids = set()\n  ...": [
            "D:\\Dream.os\\archive\\orphans\\agents\\chatgpt_web_agent.py",
            "D:\\Dream.os\\src\\dreamos\\agents\\chatgpt_web_agent.py"
        ],
        "# Flag to ensure onboarding prompt is only sent once\n        self.onboarded = False...": [
            "D:\\Dream.os\\archive\\orphans\\agents\\chatgpt_web_agent.py",
            "D:\\Dream.os\\src\\dreamos\\agents\\chatgpt_web_agent.py"
        ],
        "self.inbox_dir.mkdir(parents=True, exist_ok=True)\n        if not self.inbox_file.exists():\n         ...": [
            "D:\\Dream.os\\archive\\orphans\\agents\\chatgpt_web_agent.py",
            "D:\\Dream.os\\src\\dreamos\\agents\\chatgpt_web_agent.py"
        ],
        "# --- Runtime Paths & State ---\n        runtime_path = config.paths.resolve_relative_path(\"runtime\")...": [
            "D:\\Dream.os\\archive\\orphans\\agents\\chatgpt_web_agent.py",
            "D:\\Dream.os\\src\\dreamos\\agents\\chatgpt_web_agent.py"
        ],
        "async def _load_pending_responses(self):\n        try:\n            # Define sync function\n           ...": [
            "D:\\Dream.os\\archive\\orphans\\agents\\chatgpt_web_agent.py",
            "D:\\Dream.os\\src\\dreamos\\agents\\chatgpt_web_agent.py"
        ],
        "# Run in thread\n            return await asyncio.to_thread(sync_read)\n        except Exception as e:...": [
            "D:\\Dream.os\\archive\\orphans\\agents\\chatgpt_web_agent.py",
            "D:\\Dream.os\\src\\dreamos\\agents\\chatgpt_web_agent.py"
        ],
        "async def _save_pending_responses(self, responses):\n        try:\n            # Define sync function\n...": [
            "D:\\Dream.os\\archive\\orphans\\agents\\chatgpt_web_agent.py",
            "D:\\Dream.os\\src\\dreamos\\agents\\chatgpt_web_agent.py"
        ],
        "# Run in thread\n            await asyncio.to_thread(sync_write)\n        except Exception as e:\n     ...": [
            "D:\\Dream.os\\archive\\orphans\\agents\\chatgpt_web_agent.py",
            "D:\\Dream.os\\src\\dreamos\\agents\\chatgpt_web_agent.py"
        ],
        "def _initialize_browser(self):\n        self.driver = launch_browser()\n        if not self.driver:\n  ...": [
            "D:\\Dream.os\\archive\\orphans\\agents\\chatgpt_web_agent.py",
            "D:\\Dream.os\\src\\dreamos\\agents\\chatgpt_web_agent.py"
        ],
        "navigate_to_page(self.conversation_url)\n        if not wait_for_login():\n            logger.error(\"L...": [
            "D:\\Dream.os\\archive\\orphans\\agents\\chatgpt_web_agent.py",
            "D:\\Dream.os\\src\\dreamos\\agents\\chatgpt_web_agent.py"
        ],
        "def _is_result_injected(self, result: Dict) -> bool:\n        \"\"\"Return True if this result (by task_...": [
            "D:\\Dream.os\\archive\\orphans\\agents\\chatgpt_web_agent.py",
            "D:\\Dream.os\\src\\dreamos\\agents\\chatgpt_web_agent.py"
        ],
        "def _mark_result_injected(self, result: Dict) -> None:\n        \"\"\"Mark this result as injected to av...": [
            "D:\\Dream.os\\archive\\orphans\\agents\\chatgpt_web_agent.py",
            "D:\\Dream.os\\src\\dreamos\\agents\\chatgpt_web_agent.py"
        ],
        "async def inject_response(self, message: str) -> None:\n        \"\"\"Inject a response into the ChatGPT...": [
            "D:\\Dream.os\\archive\\orphans\\agents\\chatgpt_web_agent.py",
            "D:\\Dream.os\\src\\dreamos\\agents\\chatgpt_web_agent.py"
        ],
        "# --- PyAutoGUI Configuration (from AppConfig ideally) ---\n        CHATGPT_WINDOW_TITLE_SUBSTRING = ...": [
            "D:\\Dream.os\\archive\\orphans\\agents\\chatgpt_web_agent.py",
            "D:\\Dream.os\\src\\dreamos\\agents\\chatgpt_web_agent.py"
        ],
        "# 1. Check window focus (Optional, using PyAutoGUI/pygetwindow)\n        if PYAUTOGUI_AVAILABLE and U...": [
            "D:\\Dream.os\\archive\\orphans\\agents\\chatgpt_web_agent.py",
            "D:\\Dream.os\\src\\dreamos\\agents\\chatgpt_web_agent.py"
        ],
        "# Wrapped Selenium actions in a sync function for asyncio.to_thread\n        def sync_inject_and_sele...": [
            "D:\\Dream.os\\archive\\orphans\\agents\\chatgpt_web_agent.py",
            "D:\\Dream.os\\src\\dreamos\\agents\\chatgpt_web_agent.py"
        ],
        "input_box.clear()\n                input_box.send_keys(message)\n                # Attempt to click th...": [
            "D:\\Dream.os\\archive\\orphans\\agents\\chatgpt_web_agent.py",
            "D:\\Dream.os\\src\\dreamos\\agents\\chatgpt_web_agent.py"
        ],
        "if not selenium_sent_successfully:\n                    logger.info(\n                        f\"[{self...": [
            "D:\\Dream.os\\archive\\orphans\\agents\\chatgpt_web_agent.py",
            "D:\\Dream.os\\src\\dreamos\\agents\\chatgpt_web_agent.py"
        ],
        "selenium_send_success = False\n        try:\n            selenium_send_success = await asyncio.to_thre...": [
            "D:\\Dream.os\\archive\\orphans\\agents\\chatgpt_web_agent.py",
            "D:\\Dream.os\\src\\dreamos\\agents\\chatgpt_web_agent.py"
        ],
        "if selenium_send_success:\n                logger.info(\n                    f\"[{self.agent_id}] \ud83d\udef0\ufe0f Me...": [
            "D:\\Dream.os\\archive\\orphans\\agents\\chatgpt_web_agent.py",
            "D:\\Dream.os\\src\\dreamos\\agents\\chatgpt_web_agent.py"
        ],
        "# Try clicking send button by image first\n                        send_button_location = None\n      ...": [
            "D:\\Dream.os\\archive\\orphans\\agents\\chatgpt_web_agent.py",
            "D:\\Dream.os\\src\\dreamos\\agents\\chatgpt_web_agent.py"
        ],
        "if send_button_location:\n                            pyautogui.click(send_button_location)\n         ...": [
            "D:\\Dream.os\\archive\\orphans\\agents\\chatgpt_web_agent.py",
            "D:\\Dream.os\\src\\dreamos\\agents\\chatgpt_web_agent.py"
        ],
        "except Exception as e:\n            logger.error(\n                f\"[{self.agent_id}] Overall failure...": [
            "D:\\Dream.os\\archive\\orphans\\agents\\chatgpt_web_agent.py",
            "D:\\Dream.os\\src\\dreamos\\agents\\chatgpt_web_agent.py"
        ],
        "def _get_and_cache_results(self) -> list:\n        \"\"\"Fetches results from the C2 channel and attempt...": [
            "D:\\Dream.os\\archive\\orphans\\agents\\chatgpt_web_agent.py",
            "D:\\Dream.os\\src\\dreamos\\agents\\chatgpt_web_agent.py"
        ],
        "FIXME: The current caching logic might be flawed. It compares the current\n               full pull o...": [
            "D:\\Dream.os\\archive\\orphans\\agents\\chatgpt_web_agent.py",
            "D:\\Dream.os\\src\\dreamos\\agents\\chatgpt_web_agent.py"
        ],
        "async def _scrape_latest_response(self, attempts=3, delay_seconds=5):\n        \"\"\"Scrapes the latest ...": [
            "D:\\Dream.os\\archive\\orphans\\agents\\chatgpt_web_agent.py",
            "D:\\Dream.os\\src\\dreamos\\agents\\chatgpt_web_agent.py"
        ],
        "Uses a synchronous scrape function run in a separate thread.\n        Compares against `self.last_see...": [
            "D:\\Dream.os\\archive\\orphans\\agents\\chatgpt_web_agent.py",
            "D:\\Dream.os\\src\\dreamos\\agents\\chatgpt_web_agent.py"
        ],
        "Args:\n            attempts: Number of times to try scraping.\n            delay_seconds: Delay betwee...": [
            "D:\\Dream.os\\archive\\orphans\\agents\\chatgpt_web_agent.py",
            "D:\\Dream.os\\src\\dreamos\\agents\\chatgpt_web_agent.py"
        ],
        "Returns:\n            The latest response text if a new one is found, otherwise None.\n        \"\"\"...": [
            "D:\\Dream.os\\archive\\orphans\\agents\\chatgpt_web_agent.py",
            "D:\\Dream.os\\src\\dreamos\\agents\\chatgpt_web_agent.py"
        ],
        "def sync_scrape():\n            # Wait for a new response to appear after injection\n            # Thi...": [
            "D:\\Dream.os\\archive\\orphans\\agents\\chatgpt_web_agent.py",
            "D:\\Dream.os\\src\\dreamos\\agents\\chatgpt_web_agent.py"
        ],
        "page_source = self.driver.page_source\n            # logger.debug(f\"Page source for scraping: {page_s...": [
            "D:\\Dream.os\\archive\\orphans\\agents\\chatgpt_web_agent.py",
            "D:\\Dream.os\\src\\dreamos\\agents\\chatgpt_web_agent.py"
        ],
        "for attempt in range(attempts):\n            try:\n                logger.info(\n                    f\"...": [
            "D:\\Dream.os\\archive\\orphans\\agents\\chatgpt_web_agent.py",
            "D:\\Dream.os\\src\\dreamos\\agents\\chatgpt_web_agent.py"
        ],
        "if attempt < attempts - 1:\n                logger.info(\n                    f\"[{self.agent_id}] Wait...": [
            "D:\\Dream.os\\archive\\orphans\\agents\\chatgpt_web_agent.py",
            "D:\\Dream.os\\src\\dreamos\\agents\\chatgpt_web_agent.py"
        ],
        "logger.warning(\n            f\"[{self.agent_id}] Failed to scrape a new response after {attempts} att...": [
            "D:\\Dream.os\\archive\\orphans\\agents\\chatgpt_web_agent.py",
            "D:\\Dream.os\\src\\dreamos\\agents\\chatgpt_web_agent.py"
        ],
        "async def process_prompt_via_ui(self, prompt_text: str) -> str | None:\n        \"\"\"Handles a single p...": [
            "D:\\Dream.os\\archive\\orphans\\agents\\chatgpt_web_agent.py",
            "D:\\Dream.os\\src\\dreamos\\agents\\chatgpt_web_agent.py"
        ],
        "In simulation mode, it returns a simulated response.\n        Otherwise, it initializes the browser i...": [
            "D:\\Dream.os\\archive\\orphans\\agents\\chatgpt_web_agent.py",
            "D:\\Dream.os\\src\\dreamos\\agents\\chatgpt_web_agent.py"
        ],
        "Args:\n            prompt_text: The text to inject as a prompt....": [
            "D:\\Dream.os\\archive\\orphans\\agents\\chatgpt_web_agent.py",
            "D:\\Dream.os\\src\\dreamos\\agents\\chatgpt_web_agent.py"
        ],
        "Returns:\n            The scraped response text, or None if processing fails or no response is found....": [
            "D:\\Dream.os\\archive\\orphans\\agents\\chatgpt_web_agent.py",
            "D:\\Dream.os\\src\\dreamos\\agents\\chatgpt_web_agent.py"
        ],
        "if not self.driver:\n            logger.info(\n                f\"[{self.agent_id}] Browser not initial...": [
            "D:\\Dream.os\\archive\\orphans\\agents\\chatgpt_web_agent.py",
            "D:\\Dream.os\\src\\dreamos\\agents\\chatgpt_web_agent.py"
        ],
        "try:\n            logger.info(\n                f\"[{self.agent_id}] Injecting prompt into UI: {prompt_...": [
            "D:\\Dream.os\\archive\\orphans\\agents\\chatgpt_web_agent.py",
            "D:\\Dream.os\\src\\dreamos\\agents\\chatgpt_web_agent.py"
        ],
        "logger.info(f\"[{self.agent_id}] Attempting to scrape response from UI.\")\n            response = awai...": [
            "D:\\Dream.os\\archive\\orphans\\agents\\chatgpt_web_agent.py",
            "D:\\Dream.os\\src\\dreamos\\agents\\chatgpt_web_agent.py"
        ],
        "if response:\n                logger.info(\n                    f\"[{self.agent_id}] Successfully proce...": [
            "D:\\Dream.os\\archive\\orphans\\agents\\chatgpt_web_agent.py",
            "D:\\Dream.os\\src\\dreamos\\agents\\chatgpt_web_agent.py"
        ],
        "async def run_cycle(self):\n        \"\"\"Executes one operational cycle of the ChatGPTWebAgent....": [
            "D:\\Dream.os\\archive\\orphans\\agents\\chatgpt_web_agent.py",
            "D:\\Dream.os\\src\\dreamos\\agents\\chatgpt_web_agent.py"
        ],
        "In simulation mode, it processes tasks from the C2 channel and simulates responses.\n        In norma...": [
            "D:\\Dream.os\\archive\\orphans\\agents\\chatgpt_web_agent.py",
            "D:\\Dream.os\\src\\dreamos\\agents\\chatgpt_web_agent.py"
        ],
        "if not self.driver and not self._initialize_browser():\n            return...": [
            "D:\\Dream.os\\archive\\orphans\\agents\\chatgpt_web_agent.py",
            "D:\\Dream.os\\src\\dreamos\\agents\\chatgpt_web_agent.py"
        ],
        "# Allow reset of onboarding prompt on each cycle if flag from config is set\n        if self.reset_on...": [
            "D:\\Dream.os\\archive\\orphans\\agents\\chatgpt_web_agent.py",
            "D:\\Dream.os\\src\\dreamos\\agents\\chatgpt_web_agent.py"
        ],
        "# Send onboarding start prompt on first cycle if available\n        if not self.onboarded:\n          ...": [
            "D:\\Dream.os\\archive\\orphans\\agents\\chatgpt_web_agent.py",
            "D:\\Dream.os\\src\\dreamos\\agents\\chatgpt_web_agent.py"
        ],
        "# Define sync read\n            def sync_read_prompt():\n                if prompt_path.exists():\n    ...": [
            "D:\\Dream.os\\archive\\orphans\\agents\\chatgpt_web_agent.py",
            "D:\\Dream.os\\src\\dreamos\\agents\\chatgpt_web_agent.py"
        ],
        "start_prompt = await asyncio.to_thread(sync_read_prompt)...": [
            "D:\\Dream.os\\archive\\orphans\\agents\\chatgpt_web_agent.py",
            "D:\\Dream.os\\src\\dreamos\\agents\\chatgpt_web_agent.py"
        ],
        "if start_prompt:\n                try:\n                    await self.inject_response(start_prompt)\n ...": [
            "D:\\Dream.os\\archive\\orphans\\agents\\chatgpt_web_agent.py",
            "D:\\Dream.os\\src\\dreamos\\agents\\chatgpt_web_agent.py"
        ],
        "logger.info(f\"[{self.agent_id}] \ud83d\udd0d Checking for ChatGPT reply...\")\n        try:\n            # Assumin...": [
            "D:\\Dream.os\\archive\\orphans\\agents\\chatgpt_web_agent.py",
            "D:\\Dream.os\\src\\dreamos\\agents\\chatgpt_web_agent.py"
        ],
        "# Case 1: Reply is None (means assistant is still generating)\n            if reply is None:\n        ...": [
            "D:\\Dream.os\\archive\\orphans\\agents\\chatgpt_web_agent.py",
            "D:\\Dream.os\\src\\dreamos\\agents\\chatgpt_web_agent.py"
        ],
        "# Case 2: Reply is same as last seen\n            if reply == self.last_seen:\n                logger....": [
            "D:\\Dream.os\\archive\\orphans\\agents\\chatgpt_web_agent.py",
            "D:\\Dream.os\\src\\dreamos\\agents\\chatgpt_web_agent.py"
        ],
        "# Case 3: New, complete reply detected\n            self.last_seen = reply\n            logger.info(f\"...": [
            "D:\\Dream.os\\archive\\orphans\\agents\\chatgpt_web_agent.py",
            "D:\\Dream.os\\src\\dreamos\\agents\\chatgpt_web_agent.py"
        ],
        "# Check if parsing was successful (TaskParser logs errors internally)\n            if parsed and pars...": [
            "D:\\Dream.os\\archive\\orphans\\agents\\chatgpt_web_agent.py",
            "D:\\Dream.os\\src\\dreamos\\agents\\chatgpt_web_agent.py"
        ],
        "# Add/Update in inbox\n                inbox = await self._load_pending_responses()\n                t...": [
            "D:\\Dream.os\\archive\\orphans\\agents\\chatgpt_web_agent.py",
            "D:\\Dream.os\\src\\dreamos\\agents\\chatgpt_web_agent.py"
        ],
        "# Use task_id for matching if available\n                if task_id_to_match:\n                    exi...": [
            "D:\\Dream.os\\archive\\orphans\\agents\\chatgpt_web_agent.py",
            "D:\\Dream.os\\src\\dreamos\\agents\\chatgpt_web_agent.py"
        ],
        "await self._save_pending_responses(inbox)\n                # Add parsed task to TaskNexus\n           ...": [
            "D:\\Dream.os\\archive\\orphans\\agents\\chatgpt_web_agent.py",
            "D:\\Dream.os\\src\\dreamos\\agents\\chatgpt_web_agent.py"
        ],
        "except Exception as e:\n            logger.error(\n                f\"[{self.agent_id}] Error during ag...": [
            "D:\\Dream.os\\archive\\orphans\\agents\\chatgpt_web_agent.py",
            "D:\\Dream.os\\src\\dreamos\\agents\\chatgpt_web_agent.py"
        ],
        "async def process_external_prompt(self, prompt_text: str) -> str | None:\n        \"\"\"Processes an ext...": [
            "D:\\Dream.os\\archive\\orphans\\agents\\chatgpt_web_agent.py",
            "D:\\Dream.os\\src\\dreamos\\agents\\chatgpt_web_agent.py"
        ],
        "This method injects the prompt, attempts to scrape the reply, and returns it.\n        It's designed ...": [
            "D:\\Dream.os\\archive\\orphans\\agents\\chatgpt_web_agent.py",
            "D:\\Dream.os\\src\\dreamos\\agents\\chatgpt_web_agent.py"
        ],
        "Args:\n            prompt_text: The prompt text to inject....": [
            "D:\\Dream.os\\archive\\orphans\\agents\\chatgpt_web_agent.py",
            "D:\\Dream.os\\src\\dreamos\\agents\\chatgpt_web_agent.py"
        ],
        "Returns:\n            The scraped reply text if successful, an empty string if no new reply\n         ...": [
            "D:\\Dream.os\\archive\\orphans\\agents\\chatgpt_web_agent.py",
            "D:\\Dream.os\\src\\dreamos\\agents\\chatgpt_web_agent.py"
        ],
        "if self.simulate:\n            logger.info(\n                f\"[{self.agent_id}] Simulating external p...": [
            "D:\\Dream.os\\archive\\orphans\\agents\\chatgpt_web_agent.py",
            "D:\\Dream.os\\src\\dreamos\\agents\\chatgpt_web_agent.py"
        ],
        "try:\n            # Ensure we are on the conversation page (might have navigated away or session expi...": [
            "D:\\Dream.os\\archive\\orphans\\agents\\chatgpt_web_agent.py",
            "D:\\Dream.os\\src\\dreamos\\agents\\chatgpt_web_agent.py"
        ],
        "logger.info(f\"[{self.agent_id}] Injecting external prompt into UI...\")\n            await self.inject...": [
            "D:\\Dream.os\\archive\\orphans\\agents\\chatgpt_web_agent.py",
            "D:\\Dream.os\\src\\dreamos\\agents\\chatgpt_web_agent.py"
        ],
        "# Wait a bit for the response to appear after injection.\n            # Using a fixed delay here. Mor...": [
            "D:\\Dream.os\\archive\\orphans\\agents\\chatgpt_web_agent.py",
            "D:\\Dream.os\\src\\dreamos\\agents\\chatgpt_web_agent.py"
        ],
        "logger.info(f\"[{self.agent_id}] Scraping reply for external prompt...\")\n            page_source = aw...": [
            "D:\\Dream.os\\archive\\orphans\\agents\\chatgpt_web_agent.py",
            "D:\\Dream.os\\src\\dreamos\\agents\\chatgpt_web_agent.py"
        ],
        "latest_reply, _ = extract_latest_reply(\n                page_source, self.last_seen\n            )  #...": [
            "D:\\Dream.os\\archive\\orphans\\agents\\chatgpt_web_agent.py",
            "D:\\Dream.os\\src\\dreamos\\agents\\chatgpt_web_agent.py"
        ],
        "if latest_reply:\n                self.last_seen = (\n                    latest_reply  # IMPORTANT: U...": [
            "D:\\Dream.os\\archive\\orphans\\agents\\chatgpt_web_agent.py",
            "D:\\Dream.os\\src\\dreamos\\agents\\chatgpt_web_agent.py"
        ],
        "except Exception as e:\n            logger.error(\n                f\"[{self.agent_id}] Error processin...": [
            "D:\\Dream.os\\archive\\orphans\\agents\\chatgpt_web_agent.py",
            "D:\\Dream.os\\src\\dreamos\\agents\\chatgpt_web_agent.py"
        ],
        "async def run(self):\n        \"\"\"Main asynchronous execution loop for the ChatGPTWebAgent....": [
            "D:\\Dream.os\\archive\\orphans\\agents\\chatgpt_web_agent.py",
            "D:\\Dream.os\\src\\dreamos\\agents\\chatgpt_web_agent.py"
        ],
        "Continuously runs the agent's operational cycle (`run_cycle`) at a configured\n        interval. This...": [
            "D:\\Dream.os\\archive\\orphans\\agents\\chatgpt_web_agent.py",
            "D:\\Dream.os\\src\\dreamos\\agents\\chatgpt_web_agent.py"
        ],
        "async def close(self):\n        \"\"\"Closes the browser session asynchronously....": [
            "D:\\Dream.os\\archive\\orphans\\agents\\chatgpt_web_agent.py",
            "D:\\Dream.os\\src\\dreamos\\agents\\chatgpt_web_agent.py"
        ],
        "Uses asyncio.to_thread to run the synchronous close_browser utility.\n        \"\"\"...": [
            "D:\\Dream.os\\archive\\orphans\\agents\\chatgpt_web_agent.py",
            "D:\\Dream.os\\src\\dreamos\\agents\\chatgpt_web_agent.py"
        ],
        "# Assume close_browser is sync\n        def sync_close():\n            close_browser()  # This is the ...": [
            "D:\\Dream.os\\archive\\orphans\\agents\\chatgpt_web_agent.py",
            "D:\\Dream.os\\src\\dreamos\\agents\\chatgpt_web_agent.py"
        ],
        "logger.info(f\"[{self.agent_id}] Attempting to close browser session...\")\n        try:\n            aw...": [
            "D:\\Dream.os\\archive\\orphans\\agents\\chatgpt_web_agent.py",
            "D:\\Dream.os\\src\\dreamos\\agents\\chatgpt_web_agent.py"
        ],
        "async def run_loop(agent_id: str):\n    \"\"\"Main loop for the ChatGPTWebAgent.\"\"\"\n    logger.info(f\"St...": [
            "D:\\Dream.os\\archive\\orphans\\agents\\chatgpt_web_agent.py",
            "D:\\Dream.os\\src\\dreamos\\agents\\chatgpt_web_agent.py"
        ],
        "import logging\nfrom typing import Any, Dict, Optional...": [
            "D:\\Dream.os\\archive\\orphans\\agents\\context_router_agent.py",
            "D:\\Dream.os\\archive\\orphans\\channels\\azure_blob_channel.py"
        ],
        "from pydantic import BaseModel, Field, ValidationError...": [
            "D:\\Dream.os\\archive\\orphans\\agents\\shadow_task_nexus.py",
            "D:\\Dream.os\\archive\\orphans\\core\\tasks\\nexus\\task_nexus.py"
        ],
        "# AUTO-GENERATED __init__.py\n# DO NOT EDIT MANUALLY - changes may be overwritten...": [
            "D:\\Dream.os\\archive\\orphans\\agents\\__init__.py",
            "D:\\Dream.os\\archive\\orphans\\agents\\utils\\__init__.py",
            "D:\\Dream.os\\archive\\orphans\\automation\\execution\\__init__.py",
            "D:\\Dream.os\\archive\\orphans\\cli\\__init__.py",
            "D:\\Dream.os\\archive\\orphans\\core\\coordination\\__init__.py",
            "D:\\Dream.os\\archive\\orphans\\modules\\scraper\\chatgpt_scraper\\__init__.py",
            "D:\\Dream.os\\archive\\orphans\\py\\__init__.py",
            "D:\\Dream.os\\archive\\orphans\\tests\\core\\__init__.py",
            "D:\\Dream.os\\archive\\orphans\\tests\\core\\comms\\__init__.py",
            "D:\\Dream.os\\archive\\orphans\\tests\\core\\coordination\\__init__.py",
            "D:\\Dream.os\\archive\\orphans\\tests\\core\\coordination\\tasks\\__init__.py",
            "D:\\Dream.os\\archive\\orphans\\tests\\core\\utils\\__init__.py",
            "D:\\Dream.os\\archive\\orphans\\tests\\dashboard\\__init__.py",
            "D:\\Dream.os\\archive\\orphans\\tests\\dreamscape\\agents\\__init__.py",
            "D:\\Dream.os\\archive\\orphans\\tests\\hooks\\__init__.py",
            "D:\\Dream.os\\archive\\orphans\\tests\\integrations\\azure\\__init__.py",
            "D:\\Dream.os\\archive\\orphans\\tests\\memory\\__init__.py",
            "D:\\Dream.os\\archive\\orphans\\tests\\monitoring\\__init__.py",
            "D:\\Dream.os\\archive\\orphans\\tests\\rendering\\__init__.py",
            "D:\\Dream.os\\archive\\orphans\\tests\\scripts\\utils\\__init__.py",
            "D:\\Dream.os\\archive\\orphans\\tests\\social\\tests\\social\\strategies\\__init__.py",
            "D:\\Dream.os\\archive\\orphans\\tests\\social\\tests\\strategies\\__init__.py",
            "D:\\Dream.os\\archive\\orphans\\tests\\supervisor_tools\\__init__.py",
            "D:\\Dream.os\\archive\\orphans\\tests\\tools\\__init__.py",
            "D:\\Dream.os\\archive\\orphans\\tests\\tools\\cursor_bridge\\__init__.py",
            "D:\\Dream.os\\archive\\orphans\\tests\\tools\\discovery\\__init__.py",
            "D:\\Dream.os\\archive\\orphans\\tests\\unit\\__init__.py",
            "D:\\Dream.os\\archive\\orphans\\tests\\utils\\__init__.py",
            "D:\\Dream.os\\archive\\orphans\\tools\\__init__.py",
            "D:\\Dream.os\\archive\\orphans\\tools\\analysis\\project_scanner\\__init__.py",
            "D:\\Dream.os\\archive\\orphans\\tools\\calibration\\__init__.py",
            "D:\\Dream.os\\archive\\orphans\\tools\\cursor_bridge\\__init__.py",
            "D:\\Dream.os\\archive\\orphans\\tools\\maintenance\\__init__.py",
            "D:\\Dream.os\\archive\\orphans\\tools\\validation\\__init__.py",
            "D:\\Dream.os\\episodes\\__init__.py",
            "D:\\Dream.os\\scripts\\maintenance\\__init__.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\__init__.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\bindings\\python\\tests\\__init__.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\__init__.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\test\\highlight\\__init__.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\test\\tags\\__init__.py"
        ],
        "\"\"\"Agent responsible for executing a plan consisting of tool calls.\"\"\"...": [
            "D:\\Dream.os\\archive\\orphans\\agents\\agents\\tool_executor_agent.py",
            "D:\\Dream.os\\archive\\orphans\\agents\\agents\\__init__.py"
        ],
        "import json\nimport logging\nimport time\nfrom pathlib import Path...": [
            "D:\\Dream.os\\archive\\orphans\\agents\\library\\agent_lore_writer.py",
            "D:\\Dream.os\\archive\\orphans\\py\\command_listener.py"
        ],
        "import asyncio\nimport datetime\nimport json\nimport logging\nimport os\nimport sys\nimport time\nimport uu...": [
            "D:\\Dream.os\\archive\\orphans\\bridge\\bridge_loop.py",
            "D:\\Dream.os\\src\\dreamos\\integrations\\cursor\\bridge\\bridge_loop.py"
        ],
        "# --- Configuration ---\nPOLL_INTERVAL_SECONDS = 5  # Simulate cycle duration\nSTALL_THRESHOLD_CYCLES ...": [
            "D:\\Dream.os\\archive\\orphans\\bridge\\bridge_loop.py",
            "D:\\Dream.os\\src\\dreamos\\integrations\\cursor\\bridge\\bridge_loop.py"
        ],
        "# --- Logging Setup ---\n# Status logger for polling activity\nstatus_logger = logging.getLogger(\"Brid...": [
            "D:\\Dream.os\\archive\\orphans\\bridge\\bridge_loop.py",
            "D:\\Dream.os\\src\\dreamos\\integrations\\cursor\\bridge\\bridge_loop.py"
        ],
        "# --- Scraper Log Import ---\nMODULE_PATH = os.path.abspath(\n    os.path.join(\n        os.path.dirnam...": [
            "D:\\Dream.os\\archive\\orphans\\bridge\\bridge_loop.py",
            "D:\\Dream.os\\src\\dreamos\\integrations\\cursor\\bridge\\bridge_loop.py"
        ],
        "print(f\"Successfully imported log_interaction from {MODULE_PATH}\")\nexcept ImportError as e:\n    prin...": [
            "D:\\Dream.os\\archive\\orphans\\bridge\\bridge_loop.py",
            "D:\\Dream.os\\src\\dreamos\\integrations\\cursor\\bridge\\bridge_loop.py"
        ],
        "if log_interaction is None:\n    # Define fallback if import failed, crucial for operation\n    def lo...": [
            "D:\\Dream.os\\archive\\orphans\\bridge\\bridge_loop.py",
            "D:\\Dream.os\\src\\dreamos\\integrations\\cursor\\bridge\\bridge_loop.py"
        ],
        "def call_gpt_api(prompt: str) -> str:\n    \"\"\"Calls the actual ChatGPTWebAgent to process the prompt....": [
            "D:\\Dream.os\\archive\\orphans\\bridge\\bridge_loop.py",
            "D:\\Dream.os\\src\\dreamos\\integrations\\cursor\\bridge\\bridge_loop.py"
        ],
        "if not chatgpt_agent_instance:\n        status_logger.error(\n            \"CRITICAL: chatgpt_agent_ins...": [
            "D:\\Dream.os\\archive\\orphans\\bridge\\bridge_loop.py",
            "D:\\Dream.os\\src\\dreamos\\integrations\\cursor\\bridge\\bridge_loop.py"
        ],
        "try:\n        try:\n            loop = asyncio.get_running_loop()\n        except RuntimeError:  # No e...": [
            "D:\\Dream.os\\archive\\orphans\\bridge\\bridge_loop.py",
            "D:\\Dream.os\\src\\dreamos\\integrations\\cursor\\bridge\\bridge_loop.py"
        ],
        "response = loop.run_until_complete(\n            chatgpt_agent_instance.process_external_prompt(promp...": [
            "D:\\Dream.os\\archive\\orphans\\bridge\\bridge_loop.py",
            "D:\\Dream.os\\src\\dreamos\\integrations\\cursor\\bridge\\bridge_loop.py"
        ],
        "if response is None:\n            status_logger.error(\n                \"ChatGPTWebAgent returned None...": [
            "D:\\Dream.os\\archive\\orphans\\bridge\\bridge_loop.py",
            "D:\\Dream.os\\src\\dreamos\\integrations\\cursor\\bridge\\bridge_loop.py"
        ],
        "status_logger.info(\"Response received from ChatGPTWebAgent.\")\n        return response\n    except Exc...": [
            "D:\\Dream.os\\archive\\orphans\\bridge\\bridge_loop.py",
            "D:\\Dream.os\\src\\dreamos\\integrations\\cursor\\bridge\\bridge_loop.py"
        ],
        "def write_bridge_output(prompt_id, log_id, gpt_response):\n    \"\"\"Writes the successful GPT response ...": [
            "D:\\Dream.os\\archive\\orphans\\bridge\\bridge_loop.py",
            "D:\\Dream.os\\src\\dreamos\\integrations\\cursor\\bridge\\bridge_loop.py"
        ],
        "def log_failure_trace(prompt_id, prompt_text, error_details):\n    \"\"\"Logs details of a failed proces...": [
            "D:\\Dream.os\\archive\\orphans\\bridge\\bridge_loop.py",
            "D:\\Dream.os\\src\\dreamos\\integrations\\cursor\\bridge\\bridge_loop.py"
        ],
        "def relay_prompt_to_gpt(prompt: str, prompt_id: str = \"unknown\") -> bool:\n    \"\"\"Relays prompt, logs...": [
            "D:\\Dream.os\\archive\\orphans\\bridge\\bridge_loop.py",
            "D:\\Dream.os\\src\\dreamos\\integrations\\cursor\\bridge\\bridge_loop.py"
        ],
        "# Step 2: Log interaction using imported function\n        logged_ok, log_id = log_interaction(\n     ...": [
            "D:\\Dream.os\\archive\\orphans\\bridge\\bridge_loop.py",
            "D:\\Dream.os\\src\\dreamos\\integrations\\cursor\\bridge\\bridge_loop.py"
        ],
        "# Step 3: Write response for Cursor pickup\n        write_ok = write_bridge_output(prompt_id, log_id,...": [
            "D:\\Dream.os\\archive\\orphans\\bridge\\bridge_loop.py",
            "D:\\Dream.os\\src\\dreamos\\integrations\\cursor\\bridge\\bridge_loop.py"
        ],
        "except Exception as e:\n        status_logger.error(\n            f\"Error during relay for prompt {pro...": [
            "D:\\Dream.os\\archive\\orphans\\bridge\\bridge_loop.py",
            "D:\\Dream.os\\src\\dreamos\\integrations\\cursor\\bridge\\bridge_loop.py"
        ],
        "def get_file_mtime(file_path):\n    \"\"\"Get last modification time of a file, return 0 if not found.\"\"...": [
            "D:\\Dream.os\\archive\\orphans\\bridge\\bridge_loop.py",
            "D:\\Dream.os\\src\\dreamos\\integrations\\cursor\\bridge\\bridge_loop.py"
        ],
        "def main_loop():\n    \"\"\"Main sentinel loop.\"\"\"\n    global chatgpt_agent_instance\n    status_logger.i...": [
            "D:\\Dream.os\\archive\\orphans\\bridge\\bridge_loop.py",
            "D:\\Dream.os\\src\\dreamos\\integrations\\cursor\\bridge\\bridge_loop.py"
        ],
        "# --- Load Bridge Configuration and Initialize ChatGPTWebAgent ---\n    try:\n        status_logger.in...": [
            "D:\\Dream.os\\archive\\orphans\\bridge\\bridge_loop.py",
            "D:\\Dream.os\\src\\dreamos\\integrations\\cursor\\bridge\\bridge_loop.py"
        ],
        "# Extract settings needed for TaskNexus and ChatGPTWebAgent from the loaded config\n        # These p...": [
            "D:\\Dream.os\\archive\\orphans\\bridge\\bridge_loop.py",
            "D:\\Dream.os\\src\\dreamos\\integrations\\cursor\\bridge\\bridge_loop.py"
        ],
        "# TaskNexus setup\n        nexus_task_file_str = (\n            app_cfg_for_agent.paths.task_list_file...": [
            "D:\\Dream.os\\archive\\orphans\\bridge\\bridge_loop.py",
            "D:\\Dream.os\\src\\dreamos\\integrations\\cursor\\bridge\\bridge_loop.py"
        ],
        "# ChatGPTWebAgent setup - getting settings from bridge_config.yaml via AppConfig\n        # We need a...": [
            "D:\\Dream.os\\archive\\orphans\\bridge\\bridge_loop.py",
            "D:\\Dream.os\\src\\dreamos\\integrations\\cursor\\bridge\\bridge_loop.py"
        ],
        "agent_id = agent_settings.get(\"agent_id\", \"bridge_chatgpt_agent_default\")\n        conversation_url =...": [
            "D:\\Dream.os\\archive\\orphans\\bridge\\bridge_loop.py",
            "D:\\Dream.os\\src\\dreamos\\integrations\\cursor\\bridge\\bridge_loop.py"
        ],
        "if not conversation_url:\n            raise CoreConfigurationError(\n                \"'conversation_ur...": [
            "D:\\Dream.os\\archive\\orphans\\bridge\\bridge_loop.py",
            "D:\\Dream.os\\src\\dreamos\\integrations\\cursor\\bridge\\bridge_loop.py"
        ],
        "# Instantiate the agent\n        chatgpt_agent_instance = ChatGPTWebAgent(\n            config=app_cfg...": [
            "D:\\Dream.os\\archive\\orphans\\bridge\\bridge_loop.py",
            "D:\\Dream.os\\src\\dreamos\\integrations\\cursor\\bridge\\bridge_loop.py"
        ],
        "# Ensure external_prompt_delay is available to the agent (set via AppConfig)\n        # The previous ...": [
            "D:\\Dream.os\\archive\\orphans\\bridge\\bridge_loop.py",
            "D:\\Dream.os\\src\\dreamos\\integrations\\cursor\\bridge\\bridge_loop.py"
        ],
        "status_logger.info(\n            f\"ChatGPTWebAgent instance '{agent_id}' initialized successfully for...": [
            "D:\\Dream.os\\archive\\orphans\\bridge\\bridge_loop.py",
            "D:\\Dream.os\\src\\dreamos\\integrations\\cursor\\bridge\\bridge_loop.py"
        ],
        "except CoreConfigurationError as e_core_cfg:\n        status_logger.critical(\n            f\"Core conf...": [
            "D:\\Dream.os\\archive\\orphans\\bridge\\bridge_loop.py",
            "D:\\Dream.os\\src\\dreamos\\integrations\\cursor\\bridge\\bridge_loop.py"
        ],
        "processed_ids = set()  # Track processed prompts within this run\n    last_prompt_mtime = get_file_mt...": [
            "D:\\Dream.os\\archive\\orphans\\bridge\\bridge_loop.py",
            "D:\\Dream.os\\src\\dreamos\\integrations\\cursor\\bridge\\bridge_loop.py"
        ],
        "while True:  # Run indefinitely until stopped externally\n        cycle_start_time = time.time()\n    ...": [
            "D:\\Dream.os\\archive\\orphans\\bridge\\bridge_loop.py",
            "D:\\Dream.os\\src\\dreamos\\integrations\\cursor\\bridge\\bridge_loop.py"
        ],
        "# --- Resumption Logic ---\n        if is_suspended:\n            if os.path.exists(RESUME_FLAG):\n    ...": [
            "D:\\Dream.os\\archive\\orphans\\bridge\\bridge_loop.py",
            "D:\\Dream.os\\src\\dreamos\\integrations\\cursor\\bridge\\bridge_loop.py"
        ],
        "# --- Stall Detection Logic ---\n        current_mtime = get_file_mtime(CURSOR_PROMPT_FILE)\n        i...": [
            "D:\\Dream.os\\archive\\orphans\\bridge\\bridge_loop.py",
            "D:\\Dream.os\\src\\dreamos\\integrations\\cursor\\bridge\\bridge_loop.py"
        ],
        "# --- Prompt Processing Logic ---\n        prompts_processed_this_cycle = 0\n        try:\n            ...": [
            "D:\\Dream.os\\archive\\orphans\\bridge\\bridge_loop.py",
            "D:\\Dream.os\\src\\dreamos\\integrations\\cursor\\bridge\\bridge_loop.py"
        ],
        "if prompt_id not in processed_ids and prompt_text:\n                                status_logger.inf...": [
            "D:\\Dream.os\\archive\\orphans\\bridge\\bridge_loop.py",
            "D:\\Dream.os\\src\\dreamos\\integrations\\cursor\\bridge\\bridge_loop.py"
        ],
        "if success:\n                                    consecutive_failures = 0  # Reset on success\n       ...": [
            "D:\\Dream.os\\archive\\orphans\\bridge\\bridge_loop.py",
            "D:\\Dream.os\\src\\dreamos\\integrations\\cursor\\bridge\\bridge_loop.py"
        ],
        "elif not prompt_text:\n                                status_logger.warning(\n                       ...": [
            "D:\\Dream.os\\archive\\orphans\\bridge\\bridge_loop.py",
            "D:\\Dream.os\\src\\dreamos\\integrations\\cursor\\bridge\\bridge_loop.py"
        ],
        "except json.JSONDecodeError as e:\n                            status_logger.error(\n                 ...": [
            "D:\\Dream.os\\archive\\orphans\\bridge\\bridge_loop.py",
            "D:\\Dream.os\\src\\dreamos\\integrations\\cursor\\bridge\\bridge_loop.py"
        ],
        "if prompts_processed_this_cycle == 0 and not is_suspended:\n                status_logger.info(\"No ne...": [
            "D:\\Dream.os\\archive\\orphans\\bridge\\bridge_loop.py",
            "D:\\Dream.os\\src\\dreamos\\integrations\\cursor\\bridge\\bridge_loop.py"
        ],
        "except Exception as e:\n            status_logger.error(\n                f\"Error reading or processin...": [
            "D:\\Dream.os\\archive\\orphans\\bridge\\bridge_loop.py",
            "D:\\Dream.os\\src\\dreamos\\integrations\\cursor\\bridge\\bridge_loop.py"
        ],
        "# --- Cycle End ---\n        cycle_end_time = time.time()\n        cycle_duration = cycle_end_time - c...": [
            "D:\\Dream.os\\archive\\orphans\\bridge\\bridge_loop.py",
            "D:\\Dream.os\\src\\dreamos\\integrations\\cursor\\bridge\\bridge_loop.py"
        ],
        "Autonomously:\n1.  Injects a prompt into the active Cursor window via PyAutoGUI\n2.  Waits (or polls) ...": [
            "D:\\Dream.os\\archive\\orphans\\bridge\\run_bridge_loop.py",
            "D:\\Dream.os\\archive\\orphans\\bridge\\__init__.py"
        ],
        "self.scraper.load_chat(chat_link)\n        time.sleep(2)...": [
            "D:\\Dream.os\\archive\\orphans\\chat_engine\\chat_cycle_controller.py",
            "D:\\Dream.os\\archive\\orphans\\chat_engine\\chat_cycle_controller.py"
        ],
        "#!/usr/bin/env python3\n\"\"\"Centralized manager for interacting with project task boards.\"\"\"...": [
            "D:\\Dream.os\\archive\\orphans\\coordination\\project_board_manager.py",
            "D:\\Dream.os\\archive\\orphans\\core\\coordination\\project_board_manager.py"
        ],
        "FILELOCK_AVAILABLE = True\nexcept ImportError:\n    filelock = None  # Indicate that filelock is not a...": [
            "D:\\Dream.os\\archive\\orphans\\coordination\\project_board_manager.py",
            "D:\\Dream.os\\archive\\orphans\\core\\coordination\\project_board_manager.py"
        ],
        "try:\n    import jsonschema\nexcept ImportError:\n    jsonschema = None  # Indicate library not availab...": [
            "D:\\Dream.os\\archive\\orphans\\coordination\\project_board_manager.py",
            "D:\\Dream.os\\archive\\orphans\\core\\coordination\\project_board_manager.py"
        ],
        "# Default paths relative to project root (assuming PROJECT_ROOT is defined elsewhere or passed in)  ...": [
            "D:\\Dream.os\\archive\\orphans\\coordination\\project_board_manager.py",
            "D:\\Dream.os\\archive\\orphans\\core\\coordination\\project_board_manager.py"
        ],
        "class ProjectBoardManager:\n    \"\"\"\n    Manages loading, saving, and modifying tasks on JSON-based pr...": [
            "D:\\Dream.os\\archive\\orphans\\coordination\\project_board_manager.py",
            "D:\\Dream.os\\archive\\orphans\\core\\coordination\\project_board_manager.py"
        ],
        "Supports Backlog, Ready Queue, Working, and Completed boards.\n    \"\"\"...": [
            "D:\\Dream.os\\archive\\orphans\\coordination\\project_board_manager.py",
            "D:\\Dream.os\\archive\\orphans\\core\\coordination\\project_board_manager.py"
        ],
        "def __init__(\n        self,\n        config: AppConfig,  # Pass the full AppConfig object\n        loc...": [
            "D:\\Dream.os\\archive\\orphans\\coordination\\project_board_manager.py",
            "D:\\Dream.os\\archive\\orphans\\core\\coordination\\project_board_manager.py"
        ],
        "# Derive paths from AppConfig\n        self.project_root = (\n            self.config.paths.project_ro...": [
            "D:\\Dream.os\\archive\\orphans\\coordination\\project_board_manager.py",
            "D:\\Dream.os\\archive\\orphans\\core\\coordination\\project_board_manager.py"
        ],
        "# Define board paths using config\n        self.backlog_path = self.boards_base_dir / DEFAULT_TASK_BA...": [
            "D:\\Dream.os\\archive\\orphans\\coordination\\project_board_manager.py",
            "D:\\Dream.os\\archive\\orphans\\core\\coordination\\project_board_manager.py"
        ],
        "# Define lock paths (remain derived from board paths)\n        self.backlog_lock_path = self.backlog_...": [
            "D:\\Dream.os\\archive\\orphans\\coordination\\project_board_manager.py",
            "D:\\Dream.os\\archive\\orphans\\core\\coordination\\project_board_manager.py"
        ],
        "logger.info(\"ProjectBoardManager initialized.\")\n        logger.info(f\"  Using Configured Task Boards...": [
            "D:\\Dream.os\\archive\\orphans\\coordination\\project_board_manager.py",
            "D:\\Dream.os\\archive\\orphans\\core\\coordination\\project_board_manager.py"
        ],
        "# Load the schema during initialization\n        self._task_schema: Optional[Dict[str, Any]] = self._...": [
            "D:\\Dream.os\\archive\\orphans\\coordination\\project_board_manager.py",
            "D:\\Dream.os\\archive\\orphans\\core\\coordination\\project_board_manager.py"
        ],
        "def _resolve_path(self, path: str | Path) -> Path:\n        \"\"\"Resolves a path relative to the projec...": [
            "D:\\Dream.os\\archive\\orphans\\coordination\\project_board_manager.py",
            "D:\\Dream.os\\archive\\orphans\\core\\coordination\\project_board_manager.py"
        ],
        "def _get_lock(self, file_path: Path) -> filelock.FileLock | None:\n        \"\"\"Gets a file lock object...": [
            "D:\\Dream.os\\archive\\orphans\\coordination\\project_board_manager.py",
            "D:\\Dream.os\\archive\\orphans\\core\\coordination\\project_board_manager.py"
        ],
        "# Determine lock path based on file path\n        if file_path == self.backlog_path:\n            lock...": [
            "D:\\Dream.os\\archive\\orphans\\coordination\\project_board_manager.py",
            "D:\\Dream.os\\archive\\orphans\\core\\coordination\\project_board_manager.py"
        ],
        "try:\n            return filelock.FileLock(lock_path, timeout=self.lock_timeout)\n        except Excep...": [
            "D:\\Dream.os\\archive\\orphans\\coordination\\project_board_manager.py",
            "D:\\Dream.os\\archive\\orphans\\core\\coordination\\project_board_manager.py"
        ],
        "def _load_file(self, file_path: Path) -> list[dict]:\n        \"\"\"Loads JSON data from a file, handlin...": [
            "D:\\Dream.os\\archive\\orphans\\coordination\\project_board_manager.py",
            "D:\\Dream.os\\archive\\orphans\\core\\coordination\\project_board_manager.py"
        ],
        "try:\n            if lock:\n                logger.debug(f\"Acquiring lock for reading {file_path}...\")...": [
            "D:\\Dream.os\\archive\\orphans\\coordination\\project_board_manager.py",
            "D:\\Dream.os\\archive\\orphans\\core\\coordination\\project_board_manager.py"
        ],
        "# Use _read_board_file helper inside the lock\n            loaded_data = self._read_board_file(file_p...": [
            "D:\\Dream.os\\archive\\orphans\\coordination\\project_board_manager.py",
            "D:\\Dream.os\\archive\\orphans\\core\\coordination\\project_board_manager.py"
        ],
        "except filelock.Timeout as e:  # Specifically catch lock timeout\n            logger.error(f\"Timeout ...": [
            "D:\\Dream.os\\archive\\orphans\\coordination\\project_board_manager.py",
            "D:\\Dream.os\\archive\\orphans\\core\\coordination\\project_board_manager.py"
        ],
        "# Ensure return type consistency (though _read_board_file should already ensure it)  # noqa: E501\n  ...": [
            "D:\\Dream.os\\archive\\orphans\\coordination\\project_board_manager.py",
            "D:\\Dream.os\\archive\\orphans\\core\\coordination\\project_board_manager.py"
        ],
        "# {{ EDIT START: Add helper for reading board files gracefully from core/comms version }}  # noqa: E...": [
            "D:\\Dream.os\\archive\\orphans\\coordination\\project_board_manager.py",
            "D:\\Dream.os\\archive\\orphans\\core\\coordination\\project_board_manager.py"
        ],
        "try:\n            content = file_path.read_text(encoding=\"utf-8\")\n            if not content.strip():...": [
            "D:\\Dream.os\\archive\\orphans\\coordination\\project_board_manager.py",
            "D:\\Dream.os\\archive\\orphans\\core\\coordination\\project_board_manager.py"
        ],
        "# --- Specific Load Methods (using _load_file) ---\n    def _load_backlog(self) -> list[dict]:\n      ...": [
            "D:\\Dream.os\\archive\\orphans\\coordination\\project_board_manager.py",
            "D:\\Dream.os\\archive\\orphans\\core\\coordination\\project_board_manager.py"
        ],
        "def _load_ready_queue(self) -> list[dict]:\n        return self._load_file(self.ready_queue_path)...": [
            "D:\\Dream.os\\archive\\orphans\\coordination\\project_board_manager.py",
            "D:\\Dream.os\\archive\\orphans\\core\\coordination\\project_board_manager.py"
        ],
        "def _load_working_tasks(self) -> list[dict]:\n        return self._load_file(self.working_tasks_path)...": [
            "D:\\Dream.os\\archive\\orphans\\coordination\\project_board_manager.py",
            "D:\\Dream.os\\archive\\orphans\\core\\coordination\\project_board_manager.py"
        ],
        "def _load_completed_tasks(self) -> list[dict]:\n        return self._load_file(self.completed_tasks_p...": [
            "D:\\Dream.os\\archive\\orphans\\coordination\\project_board_manager.py",
            "D:\\Dream.os\\archive\\orphans\\core\\coordination\\project_board_manager.py"
        ],
        "try:\n            jsonschema.validate(instance=task_data, schema=self._task_schema)\n            logge...": [
            "D:\\Dream.os\\archive\\orphans\\coordination\\project_board_manager.py",
            "D:\\Dream.os\\archive\\orphans\\core\\coordination\\project_board_manager.py"
        ],
        "def _find_task_index(\n        self, tasks: List[Dict[str, Any]], task_id: str\n    ) -> Optional[int]...": [
            "D:\\Dream.os\\archive\\orphans\\coordination\\project_board_manager.py",
            "D:\\Dream.os\\archive\\orphans\\core\\coordination\\project_board_manager.py"
        ],
        "def _atomic_write(self, file_path: Path, data: list[dict]):\n        \"\"\"Writes data to a file atomica...": [
            "D:\\Dream.os\\archive\\orphans\\coordination\\project_board_manager.py",
            "D:\\Dream.os\\archive\\orphans\\core\\coordination\\project_board_manager.py"
        ],
        "def _save_file(self, file_path: Path, data: list[dict]):\n        \"\"\"Saves JSON data to a file, handl...": [
            "D:\\Dream.os\\archive\\orphans\\coordination\\project_board_manager.py",
            "D:\\Dream.os\\archive\\orphans\\core\\coordination\\project_board_manager.py"
        ],
        "lock = self._get_lock(file_path)\n        lock_acquired_by_us = False...": [
            "D:\\Dream.os\\archive\\orphans\\coordination\\project_board_manager.py",
            "D:\\Dream.os\\archive\\orphans\\core\\coordination\\project_board_manager.py"
        ],
        "try:\n            if lock:\n                logger.debug(f\"Acquiring lock for writing {file_path}...\")...": [
            "D:\\Dream.os\\archive\\orphans\\coordination\\project_board_manager.py",
            "D:\\Dream.os\\archive\\orphans\\core\\coordination\\project_board_manager.py"
        ],
        "# Use atomic write helper inside the lock\n            self._atomic_write(file_path, data)\n          ...": [
            "D:\\Dream.os\\archive\\orphans\\coordination\\project_board_manager.py",
            "D:\\Dream.os\\archive\\orphans\\core\\coordination\\project_board_manager.py"
        ],
        "except filelock.Timeout as e:\n            logger.error(f\"Timeout acquiring lock for {file_path}: {e}...": [
            "D:\\Dream.os\\archive\\orphans\\coordination\\project_board_manager.py",
            "D:\\Dream.os\\archive\\orphans\\core\\coordination\\project_board_manager.py"
        ],
        "def get_task(\n        self,\n        task_id: str,\n        board: Literal[\"backlog\", \"ready\", \"workin...": [
            "D:\\Dream.os\\archive\\orphans\\coordination\\project_board_manager.py",
            "D:\\Dream.os\\archive\\orphans\\core\\coordination\\project_board_manager.py"
        ],
        "task = None\n        if board in [\"backlog\", \"any\"]:\n            backlog = self._load_backlog()\n     ...": [
            "D:\\Dream.os\\archive\\orphans\\coordination\\project_board_manager.py",
            "D:\\Dream.os\\archive\\orphans\\core\\coordination\\project_board_manager.py"
        ],
        "if board in [\"ready\", \"any\"]:\n            ready_queue = self._load_ready_queue()\n            task = ...": [
            "D:\\Dream.os\\archive\\orphans\\coordination\\project_board_manager.py",
            "D:\\Dream.os\\archive\\orphans\\core\\coordination\\project_board_manager.py"
        ],
        "if board in [\"working\", \"any\"]:\n            working = self._load_working_tasks()\n            task = ...": [
            "D:\\Dream.os\\archive\\orphans\\coordination\\project_board_manager.py",
            "D:\\Dream.os\\archive\\orphans\\core\\coordination\\project_board_manager.py"
        ],
        "if board in [\"completed\", \"any\"]:\n            completed = self._load_completed_tasks()\n            t...": [
            "D:\\Dream.os\\archive\\orphans\\coordination\\project_board_manager.py",
            "D:\\Dream.os\\archive\\orphans\\core\\coordination\\project_board_manager.py"
        ],
        "def list_backlog_tasks(self, status: Optional[str] = None) -> List[Dict[str, Any]]:\n        \"\"\"Lists...": [
            "D:\\Dream.os\\archive\\orphans\\coordination\\project_board_manager.py",
            "D:\\Dream.os\\archive\\orphans\\core\\coordination\\project_board_manager.py"
        ],
        "def list_ready_queue_tasks(\n        self, status: Optional[str] = None\n    ) -> List[Dict[str, Any]]...": [
            "D:\\Dream.os\\archive\\orphans\\coordination\\project_board_manager.py",
            "D:\\Dream.os\\archive\\orphans\\core\\coordination\\project_board_manager.py"
        ],
        "def list_working_tasks(\n        self, agent_id: Optional[str] = None\n    ) -> List[Dict[str, Any]]:\n...": [
            "D:\\Dream.os\\archive\\orphans\\coordination\\project_board_manager.py",
            "D:\\Dream.os\\archive\\orphans\\core\\coordination\\project_board_manager.py"
        ],
        "# ... (_add_history remains the same) ...\n    # ... (_find_task_index remains the same) ......": [
            "D:\\Dream.os\\archive\\orphans\\coordination\\project_board_manager.py",
            "D:\\Dream.os\\archive\\orphans\\core\\coordination\\project_board_manager.py"
        ],
        "# Update add_task to add to backlog by default\n    def add_task(self, task_details: dict[str, Any], ...": [
            "D:\\Dream.os\\archive\\orphans\\coordination\\project_board_manager.py",
            "D:\\Dream.os\\archive\\orphans\\core\\coordination\\project_board_manager.py"
        ],
        "new_task = {\n            \"task_id\": task_id,\n            \"name\": task_details.get(\"name\", \"Untitled ...": [
            "D:\\Dream.os\\archive\\orphans\\coordination\\project_board_manager.py",
            "D:\\Dream.os\\archive\\orphans\\core\\coordination\\project_board_manager.py"
        ],
        "# Check for duplicate ID before adding\n            if any(t.get(\"task_id\") == task_id for t in backl...": [
            "D:\\Dream.os\\archive\\orphans\\coordination\\project_board_manager.py",
            "D:\\Dream.os\\archive\\orphans\\core\\coordination\\project_board_manager.py"
        ],
        "backlog.append(new_task)\n            self._save_backlog(backlog)\n            logger.info(f\"Task {tas...": [
            "D:\\Dream.os\\archive\\orphans\\coordination\\project_board_manager.py",
            "D:\\Dream.os\\archive\\orphans\\core\\coordination\\project_board_manager.py"
        ],
        "def _generate_task_id(self) -> str:\n        \"\"\"Generates a unique task ID.\"\"\"\n        # Simple UUID ...": [
            "D:\\Dream.os\\archive\\orphans\\coordination\\project_board_manager.py",
            "D:\\Dream.os\\archive\\orphans\\core\\coordination\\project_board_manager.py"
        ],
        "# update_task should probably be renamed update_working_task for clarity\n    def update_working_task...": [
            "D:\\Dream.os\\archive\\orphans\\coordination\\project_board_manager.py",
            "D:\\Dream.os\\archive\\orphans\\core\\coordination\\project_board_manager.py"
        ],
        "try:\n            working_tasks = self._load_working_tasks()\n            task_index = self._find_task...": [
            "D:\\Dream.os\\archive\\orphans\\coordination\\project_board_manager.py",
            "D:\\Dream.os\\archive\\orphans\\core\\coordination\\project_board_manager.py"
        ],
        "if task_index is None:\n                logger.error(\n                    f\"Task ID {task_id} not fou...": [
            "D:\\Dream.os\\archive\\orphans\\coordination\\project_board_manager.py",
            "D:\\Dream.os\\archive\\orphans\\core\\coordination\\project_board_manager.py"
        ],
        "# Apply updates\n            updated_task = original_task.copy()\n            updated_task.update(upda...": [
            "D:\\Dream.os\\archive\\orphans\\coordination\\project_board_manager.py",
            "D:\\Dream.os\\archive\\orphans\\core\\coordination\\project_board_manager.py"
        ],
        "# Update the list in place\n            working_tasks[task_index] = updated_task...": [
            "D:\\Dream.os\\archive\\orphans\\coordination\\project_board_manager.py",
            "D:\\Dream.os\\archive\\orphans\\core\\coordination\\project_board_manager.py"
        ],
        "# Save the entire updated list back\n            self._save_working_tasks(working_tasks)\n            ...": [
            "D:\\Dream.os\\archive\\orphans\\coordination\\project_board_manager.py",
            "D:\\Dream.os\\archive\\orphans\\core\\coordination\\project_board_manager.py"
        ],
        "except (BoardLockError, TaskNotFoundError, TaskValidationError) as e:\n            logger.error(f\"Fai...": [
            "D:\\Dream.os\\archive\\orphans\\coordination\\project_board_manager.py",
            "D:\\Dream.os\\archive\\orphans\\core\\coordination\\project_board_manager.py"
        ],
        "# Save the modified list back\n            save_func(tasks)\n            return True...": [
            "D:\\Dream.os\\archive\\orphans\\coordination\\project_board_manager.py",
            "D:\\Dream.os\\archive\\orphans\\core\\coordination\\project_board_manager.py"
        ],
        "except BoardLockError as e:\n            logger.error(f\"Failed to delete task {task_id} from {board_n...": [
            "D:\\Dream.os\\archive\\orphans\\coordination\\project_board_manager.py",
            "D:\\Dream.os\\archive\\orphans\\core\\coordination\\project_board_manager.py"
        ],
        "# --- Critical Section (Both Locks Held) ---\n            ready_queue = self._read_board_file(self.re...": [
            "D:\\Dream.os\\archive\\orphans\\coordination\\project_board_manager.py",
            "D:\\Dream.os\\archive\\orphans\\core\\coordination\\project_board_manager.py"
        ],
        "logger.info(\n                f\"Task {task_id} successfully claimed by {agent_id} from ready queue.\"\n...": [
            "D:\\Dream.os\\archive\\orphans\\coordination\\project_board_manager.py",
            "D:\\Dream.os\\archive\\orphans\\core\\coordination\\project_board_manager.py"
        ],
        "try:\n            # Acquire locks (Backlog first, then Ready Queue)\n            if backlog_lock:\n    ...": [
            "D:\\Dream.os\\archive\\orphans\\coordination\\project_board_manager.py",
            "D:\\Dream.os\\archive\\orphans\\core\\coordination\\project_board_manager.py"
        ],
        "if ready_lock:\n                logger.debug(f\"Acquiring lock for {self.ready_queue_path}...\")\n      ...": [
            "D:\\Dream.os\\archive\\orphans\\coordination\\project_board_manager.py",
            "D:\\Dream.os\\archive\\orphans\\core\\coordination\\project_board_manager.py"
        ],
        "# --- Critical Section (Both Locks Held) ---\n            backlog = self._read_board_file(self.backlo...": [
            "D:\\Dream.os\\archive\\orphans\\coordination\\project_board_manager.py",
            "D:\\Dream.os\\archive\\orphans\\core\\coordination\\project_board_manager.py"
        ],
        "if task_index is None:\n                logger.warning(f\"Task {task_id} not found in backlog for prom...": [
            "D:\\Dream.os\\archive\\orphans\\coordination\\project_board_manager.py",
            "D:\\Dream.os\\archive\\orphans\\core\\coordination\\project_board_manager.py"
        ],
        "# Check if task status is appropriate (e.g., PENDING)\n            promotable_statuses = {\"PENDING\"} ...": [
            "D:\\Dream.os\\archive\\orphans\\coordination\\project_board_manager.py",
            "D:\\Dream.os\\archive\\orphans\\core\\coordination\\project_board_manager.py"
        ],
        "ready_queue.append(task_to_move)\n            logger.debug(f\"Task {task_id} added to ready queue list...": [
            "D:\\Dream.os\\archive\\orphans\\coordination\\project_board_manager.py",
            "D:\\Dream.os\\archive\\orphans\\core\\coordination\\project_board_manager.py"
        ],
        "# Save both files (atomicity handled by _atomic_write internally)\n            self._atomic_write(sel...": [
            "D:\\Dream.os\\archive\\orphans\\coordination\\project_board_manager.py",
            "D:\\Dream.os\\archive\\orphans\\core\\coordination\\project_board_manager.py"
        ],
        "logger.info(\n                f\"Task {task_id} successfully promoted from backlog to ready queue.\"\n  ...": [
            "D:\\Dream.os\\archive\\orphans\\coordination\\project_board_manager.py",
            "D:\\Dream.os\\archive\\orphans\\core\\coordination\\project_board_manager.py"
        ],
        "Note: Several functions for direct task file manipulation (read_tasks, write_tasks,\nupdate_task_stat...": [
            "D:\\Dream.os\\archive\\orphans\\coordination\\tasks\\task_utils.py",
            "D:\\Dream.os\\archive\\orphans\\coordination\\tasks\\__init__.py"
        ],
        "# --- Capability Definitions (for registration) --- #...": [
            "D:\\Dream.os\\archive\\orphans\\core\\agents\\capabilities\\library\\debate_management.py",
            "D:\\Dream.os\\archive\\orphans\\core\\agents\\capabilities\\library\\meeting_management.py"
        ],
        "# TODO (Masterpiece Review - Captain-Agent-8): Ensure UUID format consistency.\n#      This uses `str...": [
            "D:\\Dream.os\\archive\\orphans\\core\\comms\\debate_schemas.py",
            "D:\\Dream.os\\archive\\orphans\\core\\comms\\meeting_schemas.py"
        ],
        "def current_utc_iso():\n    return datetime.now(timezone.utc).isoformat()...": [
            "D:\\Dream.os\\archive\\orphans\\core\\comms\\debate_schemas.py",
            "D:\\Dream.os\\archive\\orphans\\core\\comms\\meeting_schemas.py"
        ],
        "\"\"\"Utility functions for agent mailbox interactions.\"\"\"...": [
            "D:\\Dream.os\\archive\\orphans\\core\\comms\\mailbox_utils.py",
            "D:\\Dream.os\\archive\\orphans\\core\\comms\\__init__.py"
        ],
        "original_task_copy = task_to_move.copy()\n            # --- END EDIT ---...": [
            "D:\\Dream.os\\archive\\orphans\\core\\coordination\\project_board_manager.py",
            "D:\\Dream.os\\archive\\orphans\\core\\coordination\\project_board_manager.py"
        ],
        "current_backlog.append(original_task_copy)\n                            # --- END EDIT ---...": [
            "D:\\Dream.os\\archive\\orphans\\core\\coordination\\project_board_manager.py",
            "D:\\Dream.os\\archive\\orphans\\core\\coordination\\project_board_manager.py"
        ],
        "\"\"\"Defines the base event structure for the AgentBus.\"\"\"...": [
            "D:\\Dream.os\\archive\\orphans\\core\\events\\base_event.py",
            "D:\\Dream.os\\archive\\orphans\\core\\events\\__init__.py"
        ],
        "logger.info(f\"{CHECK_NAME} check complete. Overall status: {overall_status}\")\n        return {\"check...": [
            "D:\\Dream.os\\archive\\orphans\\core\\health_checks\\cursor_status_check.py",
            "D:\\Dream.os\\archive\\orphans\\core\\health_checks\\cursor_window_check.py"
        ],
        "pprint.pprint(check_results)\n    print(\"-------------------\")...": [
            "D:\\Dream.os\\archive\\orphans\\core\\health_checks\\cursor_status_check.py",
            "D:\\Dream.os\\archive\\orphans\\core\\health_checks\\cursor_window_check.py"
        ],
        "# Import the adapter\nfrom dreamos.core.db.sqlite_adapter import SQLiteAdapter...": [
            "D:\\Dream.os\\archive\\orphans\\core\\tasks\\nexus\\capability_registry.py",
            "D:\\Dream.os\\archive\\orphans\\core\\tasks\\nexus\\db_task_nexus.py"
        ],
        "logging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)...": [
            "D:\\Dream.os\\archive\\orphans\\core\\tasks\\nexus\\shadow_task_nexus.py",
            "D:\\Dream.os\\src\\dreamos\\automation\\disperse_tasks.py",
            "D:\\Dream.os\\src\\dreamos\\automation\\episode_parser.py",
            "D:\\Dream.os\\src\\dreamos\\automation\\generate_episode_docs.py"
        ],
        "# from .tts_interface import TTSInterface\nclass TTSInterface:  # Placeholder\n    def synthesize(self...": [
            "D:\\Dream.os\\archive\\orphans\\core\\tts\\elevenlabs_tts.py",
            "D:\\Dream.os\\archive\\orphans\\core\\tts\\local_tts.py"
        ],
        "def is_available(self) -> bool:\n        return self._available...": [
            "D:\\Dream.os\\archive\\orphans\\core\\tts\\tts_factory.py",
            "D:\\Dream.os\\archive\\orphans\\core\\tts\\tts_factory.py"
        ],
        "\"\"\"Client for interacting with Azure Blob Storage.\"\"\"...": [
            "D:\\Dream.os\\archive\\orphans\\integrations\\azure_blob_client.py",
            "D:\\Dream.os\\archive\\orphans\\integrations\\__init__.py"
        ],
        "from dreamos.core.config import get_config\nfrom ..core.errors import DreamOSError...": [
            "D:\\Dream.os\\archive\\orphans\\integrations\\azure_blob_client.py",
            "D:\\Dream.os\\archive\\orphans\\integrations\\browser_client.py",
            "D:\\Dream.os\\archive\\orphans\\integrations\\discord_client.py",
            "D:\\Dream.os\\archive\\orphans\\integrations\\openai_client.py"
        ],
        "class APIError(IntegrationError):\n    \"\"\"Error related to external API interaction.\"\"\"...": [
            "D:\\Dream.os\\archive\\orphans\\integrations\\azure_blob_client.py",
            "D:\\Dream.os\\archive\\orphans\\integrations\\browser_client.py",
            "D:\\Dream.os\\archive\\orphans\\integrations\\discord_client.py",
            "D:\\Dream.os\\archive\\orphans\\integrations\\openai_client.py"
        ],
        "# Define Integration/API errors locally\nclass IntegrationError(DreamOSError):\n    \"\"\"Base error for ...": [
            "D:\\Dream.os\\archive\\orphans\\integrations\\discord_client.py",
            "D:\\Dream.os\\archive\\orphans\\integrations\\openai_client.py"
        ],
        "\"\"\"Module to launch, detect, and manage a swarm of Cursor instances.\"\"\"...": [
            "D:\\Dream.os\\archive\\orphans\\integrations\\cursor\\swarm_bootloader.py",
            "D:\\Dream.os\\archive\\orphans\\integrations\\cursor\\__init__.py"
        ],
        "\"\"\"Defines the abstract base class for all LLM Bridge Adapters.\"\"\"...": [
            "D:\\Dream.os\\archive\\orphans\\llm_bridge\\bridge_adapters\\base_adapter.py",
            "D:\\Dream.os\\archive\\orphans\\llm_bridge\\bridge_adapters\\__init__.py"
        ],
        "exists = await asyncio.to_thread(file_path.exists)\n    size = (await asyncio.to_thread(file_path.sta...": [
            "D:\\Dream.os\\archive\\orphans\\memory\\compaction_utils.py",
            "D:\\Dream.os\\archive\\orphans\\memory\\summarization_utils.py"
        ],
        "is_compressed = file_path.suffix == \".z\"\n    original_data: Optional[List[Dict[str, Any]]] = None...": [
            "D:\\Dream.os\\archive\\orphans\\memory\\compaction_utils.py",
            "D:\\Dream.os\\archive\\orphans\\memory\\summarization_utils.py"
        ],
        "def _sync_read_and_parse():\n        if is_compressed:\n            with open(file_path, \"rb\") as f:\n ...": [
            "D:\\Dream.os\\archive\\orphans\\memory\\compaction_utils.py",
            "D:\\Dream.os\\archive\\orphans\\memory\\summarization_utils.py"
        ],
        "# Check moved up for clarity (should be impossible if exceptions raised)\n    # if original_data is N...": [
            "D:\\Dream.os\\archive\\orphans\\memory\\compaction_utils.py",
            "D:\\Dream.os\\archive\\orphans\\memory\\compaction_utils.py"
        ],
        "try:\n        # Apply compaction logic\n        compacted_data = compact_segment_data(original_data, p...": [
            "D:\\Dream.os\\archive\\orphans\\memory\\compaction_utils.py",
            "D:\\Dream.os\\archive\\orphans\\memory\\compaction_utils.py"
        ],
        "# Save only if data changed\n        if len(compacted_data) < len(original_data):\n            logger....": [
            "D:\\Dream.os\\archive\\orphans\\memory\\compaction_utils.py",
            "D:\\Dream.os\\archive\\orphans\\memory\\compaction_utils.py"
        ],
        "try:\n            memory_base_path.mkdir(parents=True, exist_ok=True)\n        except Exception as e:\n...": [
            "D:\\Dream.os\\archive\\orphans\\memory\\memory_manager.py",
            "D:\\Dream.os\\archive\\orphans\\memory\\memory_manager.py"
        ],
        "await self._ensure_segments_loaded()  # Ensure segments are loaded...": [
            "D:\\Dream.os\\archive\\orphans\\memory\\memory_manager.py",
            "D:\\Dream.os\\archive\\orphans\\memory\\memory_manager.py",
            "D:\\Dream.os\\archive\\orphans\\memory\\memory_manager.py"
        ],
        "\"\"\"PromptExecutionMonitor monitors prompts, archives failures, and requeues them.\"\"\"...": [
            "D:\\Dream.os\\archive\\orphans\\monitoring\\prompt_execution_monitor.py",
            "D:\\Dream.os\\archive\\orphans\\monitoring\\__init__.py"
        ],
        "# --- Path Setup ---\nproject_root = Path(__file__).resolve().parents[1]\nif str(project_root) not in ...": [
            "D:\\Dream.os\\archive\\orphans\\py\\analyze_latency_trends.py",
            "D:\\Dream.os\\archive\\orphans\\py\\bridge_mutation_impact_report.py",
            "D:\\Dream.os\\archive\\orphans\\py\\mutation_test_bridge.py",
            "D:\\Dream.os\\archive\\orphans\\py\\stress_test_bridge.py"
        ],
        "with open(report_path, \"w\", encoding=\"utf-8\") as f:\n        f.write(report)...": [
            "D:\\Dream.os\\archive\\orphans\\py\\bloat_watcher.py",
            "D:\\Dream.os\\scripts\\maintenance\\project_scanner.py"
        ],
        "def _save_state(self):\n        \"\"\"Persist current state to storage.\"\"\"\n        try:\n            with...": [
            "D:\\Dream.os\\archive\\orphans\\py\\bridge_expansion.py",
            "D:\\Dream.os\\archive\\orphans\\py\\midnight_runner.py"
        ],
        "# Set up signal handlers\n        signal.signal(signal.SIGINT, self._handle_shutdown)\n        signal....": [
            "D:\\Dream.os\\archive\\orphans\\py\\bridge_expansion.py",
            "D:\\Dream.os\\archive\\orphans\\py\\midnight_runner.py",
            "D:\\Dream.os\\src\\dreamos\\automation\\midnight_runner.py"
        ],
        "def _handle_shutdown(self, signum, frame):\n        \"\"\"Handle shutdown signals.\"\"\"\n        logger.inf...": [
            "D:\\Dream.os\\archive\\orphans\\py\\bridge_expansion.py",
            "D:\\Dream.os\\archive\\orphans\\py\\midnight_runner.py"
        ],
        "# Configure logging\nlogging.basicConfig(\n    level=logging.INFO, format=\"%(asctime)s - %(levelname)s...": [
            "D:\\Dream.os\\archive\\orphans\\py\\test_edit_file_failures.py",
            "D:\\Dream.os\\archive\\orphans\\py\\validate_imports.py"
        ],
        "# --- Path Setup ---\n# Assuming script is in analytics/\nproject_root = Path(__file__).resolve().pare...": [
            "D:\\Dream.os\\archive\\orphans\\py\\chrono_sentinel.py",
            "D:\\Dream.os\\archive\\orphans\\py\\temporal_ledger_auditor.py"
        ],
        "# Configure logging (integrate with KNURLSHADE later)\nlogging.basicConfig(\n    level=logging.INFO, f...": [
            "D:\\Dream.os\\archive\\orphans\\py\\command_listener.py",
            "D:\\Dream.os\\archive\\orphans\\py\\status_pusher.py"
        ],
        "logging.basicConfig(\n    level=logging.INFO, format=\"%(asctime)s - %(levelname)s - %(message)s\"\n)...": [
            "D:\\Dream.os\\archive\\orphans\\py\\context_injector.py",
            "D:\\Dream.os\\archive\\orphans\\py\\summarizer.py"
        ],
        "except FileNotFoundError:\n        print(f\"Error: Log file not found at {log_file_path}\")\n        ret...": [
            "D:\\Dream.os\\archive\\orphans\\py\\drift_injector.py",
            "D:\\Dream.os\\archive\\orphans\\py\\test_drift_detection.py"
        ],
        "import json\nimport logging\nimport os\nfrom datetime import datetime, timezone...": [
            "D:\\Dream.os\\archive\\orphans\\py\\feedback_patch.py",
            "D:\\Dream.os\\archive\\orphans\\py\\status_pusher.py"
        ],
        "except Exception as e:\n        logger.error(f\"Failed to fix duplicate in {file_path}: {e}\")...": [
            "D:\\Dream.os\\archive\\orphans\\py\\find_duplicate_tasks.py",
            "D:\\Dream.os\\archive\\orphans\\py\\find_duplicate_tasks.py"
        ],
        "def main():\n    config = AppConfig()\n    scraper = ChatGPTScraper(config=config, headless=False)...": [
            "D:\\Dream.os\\archive\\orphans\\py\\generate_chatgpt_cookies.py",
            "D:\\Dream.os\\archive\\orphans\\py\\test_scraper_interactively.py"
        ],
        "def analyze_file(self, file_path: Path, source_code: str) -> Dict:\n        \"\"\"\n        Analyzes sour...": [
            "D:\\Dream.os\\archive\\orphans\\py\\main.py",
            "D:\\Dream.os\\archive\\orphans\\tools\\analysis\\project_scanner\\analyzer.py",
            "D:\\Dream.os\\archive\\orphans\\tools\\analysis\\project_scanner\\project_scanner.py"
        ],
        "Args:\n            file_path: Path to the source file\n            source_code: Contents of the source...": [
            "D:\\Dream.os\\archive\\orphans\\py\\main.py",
            "D:\\Dream.os\\archive\\orphans\\tools\\analysis\\project_scanner\\analyzer.py",
            "D:\\Dream.os\\archive\\orphans\\tools\\analysis\\project_scanner\\project_scanner.py"
        ],
        "Returns:\n            Dict with structure {language, functions, classes, routes, complexity}\n        ...": [
            "D:\\Dream.os\\archive\\orphans\\py\\main.py",
            "D:\\Dream.os\\archive\\orphans\\tools\\analysis\\project_scanner\\analyzer.py"
        ],
        "for node in ast.walk(tree):\n            if isinstance(node, ast.FunctionDef):\n                functi...": [
            "D:\\Dream.os\\archive\\orphans\\py\\main.py",
            "D:\\Dream.os\\archive\\orphans\\tools\\analysis\\project_scanner\\analyzer.py"
        ],
        "# Complexity = function count + sum of class methods\n        complexity = len(functions) + sum(len(c...": [
            "D:\\Dream.os\\archive\\orphans\\py\\main.py",
            "D:\\Dream.os\\archive\\orphans\\tools\\analysis\\project_scanner\\analyzer.py"
        ],
        "def hash_file(self, file_path: Path) -> str:\n        try:\n            with file_path.open(\"rb\") as f...": [
            "D:\\Dream.os\\archive\\orphans\\py\\main.py",
            "D:\\Dream.os\\archive\\orphans\\tools\\analysis\\project_scanner\\project_scanner.py"
        ],
        "def should_exclude(self, file_path: Path) -> bool:\n        \"\"\"Exclude logic for venvs, node_modules,...": [
            "D:\\Dream.os\\archive\\orphans\\py\\main.py",
            "D:\\Dream.os\\archive\\orphans\\tools\\analysis\\project_scanner\\project_scanner.py"
        ],
        "default_exclude_dirs = {\n            \"__pycache__\",\n            \"node_modules\",\n            \"migrati...": [
            "D:\\Dream.os\\archive\\orphans\\py\\main.py",
            "D:\\Dream.os\\archive\\orphans\\tools\\analysis\\project_scanner\\project_scanner.py"
        ],
        "# Check if this is the scanner itself\n        try:\n            if file_abs == Path(__file__).resolve...": [
            "D:\\Dream.os\\archive\\orphans\\py\\main.py",
            "D:\\Dream.os\\archive\\orphans\\tools\\analysis\\project_scanner\\project_scanner.py"
        ],
        "# Check additional ignore directories\n        for ignore in self.additional_ignore_dirs:\n           ...": [
            "D:\\Dream.os\\archive\\orphans\\py\\main.py",
            "D:\\Dream.os\\archive\\orphans\\tools\\analysis\\project_scanner\\project_scanner.py"
        ],
        "# Check for virtual environment indicators\n        try:\n            # Look for pyvenv.cfg or similar...": [
            "D:\\Dream.os\\archive\\orphans\\py\\main.py",
            "D:\\Dream.os\\archive\\orphans\\tools\\analysis\\project_scanner\\project_scanner.py"
        ],
        "# Look for bin/activate or Scripts/activate.bat\n            for parent in file_abs.parents:\n        ...": [
            "D:\\Dream.os\\archive\\orphans\\py\\main.py",
            "D:\\Dream.os\\archive\\orphans\\tools\\analysis\\project_scanner\\project_scanner.py"
        ],
        "# Check for excluded directory names in the path\n        if any(excluded in file_path.parts for excl...": [
            "D:\\Dream.os\\archive\\orphans\\py\\main.py",
            "D:\\Dream.os\\archive\\orphans\\tools\\analysis\\project_scanner\\project_scanner.py"
        ],
        "# Check for common virtual environment path patterns\n        path_str = str(file_abs).lower()\n      ...": [
            "D:\\Dream.os\\archive\\orphans\\py\\main.py",
            "D:\\Dream.os\\archive\\orphans\\tools\\analysis\\project_scanner\\project_scanner.py"
        ],
        "# Merge logic: new data overrides old entries with the same filename,\n        # but preserves any ol...": [
            "D:\\Dream.os\\archive\\orphans\\py\\main.py",
            "D:\\Dream.os\\archive\\orphans\\tools\\analysis\\project_scanner\\project_scanner.py"
        ],
        "logger.info(f\"\u2705 Project analysis updated and saved to {report_path}\")...": [
            "D:\\Dream.os\\archive\\orphans\\py\\main.py",
            "D:\\Dream.os\\archive\\orphans\\tools\\analysis\\project_scanner\\project_scanner.py"
        ],
        "def generate_init_files(self, overwrite: bool = True):\n        \"\"\"Auto-generate __init__.py for all ...": [
            "D:\\Dream.os\\archive\\orphans\\py\\main.py",
            "D:\\Dream.os\\archive\\orphans\\tools\\analysis\\project_scanner\\project_scanner.py"
        ],
        "package_modules = defaultdict(list)\n        for rel_path in self.analysis.keys():\n            if rel...": [
            "D:\\Dream.os\\archive\\orphans\\py\\main.py",
            "D:\\Dream.os\\archive\\orphans\\tools\\analysis\\project_scanner\\project_scanner.py"
        ],
        "for package, modules in package_modules.items():\n            package_path = self.project_root / pack...": [
            "D:\\Dream.os\\archive\\orphans\\py\\main.py",
            "D:\\Dream.os\\archive\\orphans\\tools\\analysis\\project_scanner\\project_scanner.py"
        ],
        "lines = [\n                \"# AUTO-GENERATED __init__.py\",\n                \"# DO NOT EDIT MANUALLY - ...": [
            "D:\\Dream.os\\archive\\orphans\\py\\main.py",
            "D:\\Dream.os\\archive\\orphans\\tools\\analysis\\project_scanner\\project_scanner.py"
        ],
        "if overwrite or not init_file.exists():\n                with init_file.open(\"w\", encoding=\"utf-8\") a...": [
            "D:\\Dream.os\\archive\\orphans\\py\\main.py",
            "D:\\Dream.os\\archive\\orphans\\tools\\analysis\\project_scanner\\project_scanner.py"
        ],
        "with open(template_path, \"r\", encoding=\"utf-8\") as tf:\n                template_content = tf.read()\n...": [
            "D:\\Dream.os\\archive\\orphans\\py\\main.py",
            "D:\\Dream.os\\archive\\orphans\\tools\\analysis\\project_scanner\\project_scanner.py"
        ],
        "\"\"\"\nMIDNIGHT.MISSION.RUNNER\nCore system for overnight operation cycles....": [
            "D:\\Dream.os\\archive\\orphans\\py\\midnight_runner.py",
            "D:\\Dream.os\\src\\dreamos\\automation\\midnight_runner.py"
        ],
        "import json\nimport logging\nimport queue\nimport signal\nimport sys\nimport time\nfrom datetime import da...": [
            "D:\\Dream.os\\archive\\orphans\\py\\midnight_runner.py",
            "D:\\Dream.os\\src\\dreamos\\automation\\midnight_runner.py"
        ],
        "# Configure logging\nlogging.basicConfig(\n    level=logging.INFO,\n    format=\"[%(asctime)s] %(levelna...": [
            "D:\\Dream.os\\archive\\orphans\\py\\midnight_runner.py",
            "D:\\Dream.os\\src\\dreamos\\automation\\midnight_runner.py"
        ],
        "def start(self):\n        \"\"\"Start the midnight runner.\"\"\"\n        logger.info(\"Starting MIDNIGHT.MIS...": [
            "D:\\Dream.os\\archive\\orphans\\py\\midnight_runner.py",
            "D:\\Dream.os\\src\\dreamos\\automation\\midnight_runner.py"
        ],
        "try:\n            while self.is_running:\n                self.run_cycle()\n                time.sleep(...": [
            "D:\\Dream.os\\archive\\orphans\\py\\midnight_runner.py",
            "D:\\Dream.os\\src\\dreamos\\automation\\midnight_runner.py"
        ],
        "#!/usr/bin/env python\nimport argparse\nimport os\nimport subprocess...": [
            "D:\\Dream.os\\archive\\orphans\\py\\move_application_content.py",
            "D:\\Dream.os\\archive\\orphans\\py\\move_archived_content.py",
            "D:\\Dream.os\\archive\\orphans\\py\\move_sandbox_content.py"
        ],
        "git_mv_command = [\"git\", \"mv\", source_item_path, dest_item_path]...": [
            "D:\\Dream.os\\archive\\orphans\\py\\move_application_content.py",
            "D:\\Dream.os\\archive\\orphans\\py\\move_archived_content.py"
        ],
        "success = push_feedback(payload)\n        self.assertTrue(success)...": [
            "D:\\Dream.os\\archive\\orphans\\py\\test_status_pusher.py",
            "D:\\Dream.os\\archive\\orphans\\py\\test_status_pusher.py"
        ],
        "except Exception as e:\n        print(f\"Error processing file {filepath}: {e}\")\n        return False...": [
            "D:\\Dream.os\\archive\\orphans\\py\\update_markdown_links.py",
            "D:\\Dream.os\\archive\\orphans\\py\\update_python_imports.py"
        ],
        "Args:\n            platform: Platform to analyze\n            days: Number of days to look back...": [
            "D:\\Dream.os\\archive\\orphans\\services\\utils\\devlog_analyzer.py",
            "D:\\Dream.os\\archive\\orphans\\services\\utils\\devlog_analyzer.py",
            "D:\\Dream.os\\archive\\orphans\\services\\utils\\devlog_analyzer.py"
        ],
        "with self._get_connection() as conn:\n                df = pd.read_sql_query(\n                    que...": [
            "D:\\Dream.os\\archive\\orphans\\services\\utils\\devlog_analyzer.py",
            "D:\\Dream.os\\archive\\orphans\\services\\utils\\devlog_analyzer.py"
        ],
        "with patch(\n        \"src.dreamos.cli.safe_edit_json_list._atomic_write_json\"\n    ) as mock_atomic_wr...": [
            "D:\\Dream.os\\archive\\orphans\\tests\\cli\\test_safe_edit_json_list.py",
            "D:\\Dream.os\\archive\\orphans\\tests\\cli\\test_safe_edit_json_list.py"
        ],
        "item_to_add = {\"id\": \"task1\"}\n    item_data_json = json.dumps(item_to_add)...": [
            "D:\\Dream.os\\archive\\orphans\\tests\\cli\\test_safe_edit_json_list.py",
            "D:\\Dream.os\\archive\\orphans\\tests\\cli\\test_safe_edit_json_list.py"
        ],
        "result = runner.invoke(\n        safe_edit_json_list,\n        [\n            \"--target-file\",\n        ...": [
            "D:\\Dream.os\\archive\\orphans\\tests\\cli\\test_safe_edit_json_list.py",
            "D:\\Dream.os\\archive\\orphans\\tests\\cli\\test_safe_edit_json_list.py"
        ],
        "def handler1(event):\n        nonlocal handler1_called\n        handler1_called = True...": [
            "D:\\Dream.os\\archive\\orphans\\tests\\coordination\\test_agent_bus.py",
            "D:\\Dream.os\\archive\\orphans\\tests\\coordination\\test_agent_bus.py"
        ],
        "mock_lock_instance = mock.MagicMock()\n    mock_lock_instance.acquire.side_effect = filelock.Timeout(...": [
            "D:\\Dream.os\\archive\\orphans\\tests\\coordination\\test_project_board_manager.py",
            "D:\\Dream.os\\archive\\orphans\\tests\\coordination\\test_project_board_manager.py"
        ],
        "pbm_instance = ProjectBoardManager._create_from_cli_args(args)...": [
            "D:\\Dream.os\\archive\\orphans\\tests\\coordination\\test_project_board_manager.py",
            "D:\\Dream.os\\archive\\orphans\\tests\\coordination\\test_project_board_manager.py"
        ],
        "result = board_manager.claim_future_task(task_id, agent_id)...": [
            "D:\\Dream.os\\archive\\orphans\\tests\\core\\comms\\test_project_board.py",
            "D:\\Dream.os\\archive\\orphans\\tests\\core\\comms\\test_project_board.py",
            "D:\\Dream.os\\archive\\orphans\\tests\\core\\comms\\test_project_board.py"
        ],
        "async def run_validation():\n            return await board_manager._validate_task_completion(\n      ...": [
            "D:\\Dream.os\\archive\\orphans\\tests\\core\\comms\\test_project_board.py",
            "D:\\Dream.os\\archive\\orphans\\tests\\core\\comms\\test_project_board.py"
        ],
        "import asyncio\nfrom pathlib import Path\nfrom unittest.mock import AsyncMock, MagicMock, patch...": [
            "D:\\Dream.os\\archive\\orphans\\tests\\core\\coordination\\conftest.py",
            "D:\\Dream.os\\archive\\orphans\\tests\\services\\test_memory_maintenance_service.py"
        ],
        "# Fixtures like test_agent, mock_agent_bus are automatically discovered from conftest.py...": [
            "D:\\Dream.os\\archive\\orphans\\tests\\core\\coordination\\test_base_agent_event_helpers.py",
            "D:\\Dream.os\\archive\\orphans\\tests\\core\\coordination\\test_base_agent_lifecycle.py"
        ],
        "passed, details = await mock_agent._validate_task_completion(\n        task, result, []\n    )  # Adde...": [
            "D:\\Dream.os\\archive\\orphans\\tests\\core\\coordination\\test_base_agent_task_handling.py",
            "D:\\Dream.os\\archive\\orphans\\tests\\core\\coordination\\test_base_agent_task_handling.py",
            "D:\\Dream.os\\archive\\orphans\\tests\\core\\coordination\\test_base_agent_task_handling.py"
        ],
        "assert passed is False\n    assert \"Handler result dictionary is missing, None, or empty\" in details\n...": [
            "D:\\Dream.os\\archive\\orphans\\tests\\core\\coordination\\test_base_agent_task_handling.py",
            "D:\\Dream.os\\archive\\orphans\\tests\\core\\coordination\\test_base_agent_task_handling.py"
        ],
        "# Act\n        result = update_onboarding_contract(\n            agent_id=agent_id,\n            protoc...": [
            "D:\\Dream.os\\archive\\orphans\\tests\\core\\utils\\test_onboarding_utils.py",
            "D:\\Dream.os\\archive\\orphans\\tests\\core\\utils\\test_onboarding_utils.py",
            "D:\\Dream.os\\archive\\orphans\\tests\\core\\utils\\test_onboarding_utils.py",
            "D:\\Dream.os\\archive\\orphans\\tests\\core\\utils\\test_onboarding_utils.py"
        ],
        "# Act\n        result = update_onboarding_contract(agent_id, protocol_path, contract_path)...": [
            "D:\\Dream.os\\archive\\orphans\\tests\\core\\utils\\test_onboarding_utils.py",
            "D:\\Dream.os\\archive\\orphans\\tests\\core\\utils\\test_onboarding_utils.py"
        ],
        "writer_agent.publish_task_progress = AsyncMock()\n    result = await writer_agent.handle_write_reques...": [
            "D:\\Dream.os\\archive\\orphans\\tests\\dreamscape\\agents\\test_writer_agent.py",
            "D:\\Dream.os\\archive\\orphans\\tests\\dreamscape\\agents\\test_writer_agent.py"
        ],
        "import json\nfrom unittest.mock import MagicMock, patch...": [
            "D:\\Dream.os\\archive\\orphans\\tests\\integrations\\azure\\test_azure_blob_channel.py",
            "D:\\Dream.os\\archive\\orphans\\tests\\memory\\test_memory_manager.py"
        ],
        "channel = AzureBlobChannel(\n        container_name=\"test\", sas_token=\"fake_sas\", connection_string=N...": [
            "D:\\Dream.os\\archive\\orphans\\tests\\integrations\\azure\\test_azure_blob_channel.py",
            "D:\\Dream.os\\archive\\orphans\\tests\\integrations\\azure\\test_azure_blob_channel.py"
        ],
        "# Add project root to sys.path to allow importing core modules\nproject_root = os.path.abspath(os.pat...": [
            "D:\\Dream.os\\archive\\orphans\\tests\\memory\\test_governance_memory_engine.py",
            "D:\\Dream.os\\archive\\orphans\\tests\\rendering\\test_template_engine.py"
        ],
        "await maintenance_service._process_agent_memory(agent_memory_dir)...": [
            "D:\\Dream.os\\archive\\orphans\\tests\\services\\test_memory_maintenance_service.py",
            "D:\\Dream.os\\archive\\orphans\\tests\\services\\test_memory_maintenance_service.py"
        ],
        "await command_supervisor.execute_command(command_id, request_event)...": [
            "D:\\Dream.os\\archive\\orphans\\tests\\supervisor_tools\\test_command_supervisor.py",
            "D:\\Dream.os\\archive\\orphans\\tests\\supervisor_tools\\test_command_supervisor.py",
            "D:\\Dream.os\\archive\\orphans\\tests\\supervisor_tools\\test_command_supervisor.py",
            "D:\\Dream.os\\archive\\orphans\\tests\\supervisor_tools\\test_command_supervisor.py",
            "D:\\Dream.os\\archive\\orphans\\tests\\supervisor_tools\\test_command_supervisor.py",
            "D:\\Dream.os\\archive\\orphans\\tests\\supervisor_tools\\test_command_supervisor.py"
        ],
        "# Verify subprocess call\n    mock_create_subprocess.assert_called_once_with(\n        test_command, s...": [
            "D:\\Dream.os\\archive\\orphans\\tests\\supervisor_tools\\test_command_supervisor.py",
            "D:\\Dream.os\\archive\\orphans\\tests\\supervisor_tools\\test_command_supervisor.py"
        ],
        "# Verify result published\n    mock_agent_bus.publish.assert_called_once()\n    published_event = mock...": [
            "D:\\Dream.os\\archive\\orphans\\tests\\supervisor_tools\\test_command_supervisor.py",
            "D:\\Dream.os\\archive\\orphans\\tests\\supervisor_tools\\test_command_supervisor.py",
            "D:\\Dream.os\\archive\\orphans\\tests\\supervisor_tools\\test_command_supervisor.py",
            "D:\\Dream.os\\archive\\orphans\\tests\\supervisor_tools\\test_command_supervisor.py",
            "D:\\Dream.os\\archive\\orphans\\tests\\supervisor_tools\\test_command_supervisor.py",
            "D:\\Dream.os\\archive\\orphans\\tests\\supervisor_tools\\test_command_supervisor.py",
            "D:\\Dream.os\\archive\\orphans\\tests\\supervisor_tools\\test_command_supervisor.py",
            "D:\\Dream.os\\archive\\orphans\\tests\\supervisor_tools\\test_command_supervisor.py"
        ],
        "# Verify cleanup\n    assert command_id not in command_supervisor.approval_status...": [
            "D:\\Dream.os\\archive\\orphans\\tests\\supervisor_tools\\test_command_supervisor.py",
            "D:\\Dream.os\\archive\\orphans\\tests\\supervisor_tools\\test_command_supervisor.py",
            "D:\\Dream.os\\archive\\orphans\\tests\\supervisor_tools\\test_command_supervisor.py"
        ],
        "request_event = SupervisorEvent(\n        event_type=EventType.COMMAND_EXECUTION_REQUEST,\n        sen...": [
            "D:\\Dream.os\\archive\\orphans\\tests\\supervisor_tools\\test_command_supervisor.py",
            "D:\\Dream.os\\archive\\orphans\\tests\\supervisor_tools\\test_command_supervisor.py",
            "D:\\Dream.os\\archive\\orphans\\tests\\supervisor_tools\\test_command_supervisor.py",
            "D:\\Dream.os\\archive\\orphans\\tests\\supervisor_tools\\test_command_supervisor.py",
            "D:\\Dream.os\\archive\\orphans\\tests\\supervisor_tools\\test_command_supervisor.py"
        ],
        "mock_agent_bus.publish.assert_called_once()\n    published_event = mock_agent_bus.publish.call_args[0...": [
            "D:\\Dream.os\\archive\\orphans\\tests\\supervisor_tools\\test_command_supervisor.py",
            "D:\\Dream.os\\archive\\orphans\\tests\\supervisor_tools\\test_command_supervisor.py"
        ],
        "async def execute(self, context: ToolContext) -> str:\n                return \"\"...": [
            "D:\\Dream.os\\archive\\orphans\\tests\\tools\\test_base.py",
            "D:\\Dream.os\\archive\\orphans\\tests\\tools\\test_base.py"
        ],
        "patterns = [\"TODO\", \"FIXME\"]\n    findings = find_todos_in_file(file_path, patterns, base_dir)\n    as...": [
            "D:\\Dream.os\\archive\\orphans\\tests\\tools\\discovery\\test_find_todos.py",
            "D:\\Dream.os\\archive\\orphans\\tests\\tools\\discovery\\test_find_todos.py"
        ],
        "if __name__ == \"__main__\":\n    unittest.main(argv=[\"first-arg-is-ignored\"], exit=False)...": [
            "D:\\Dream.os\\archive\\orphans\\tests\\unit\\test_bridge_fault_inspector.py",
            "D:\\Dream.os\\archive\\orphans\\tests\\utils\\test_protocol_compliance_utils.py"
        ],
        "write_json_atomic(file_path, data_to_write)\n    assert file_path.exists()...": [
            "D:\\Dream.os\\archive\\orphans\\tests\\utils\\test_json_io.py",
            "D:\\Dream.os\\archive\\orphans\\tests\\utils\\test_json_io.py"
        ],
        "read_data = read_json_file(file_path)\n    assert read_data == data_to_write...": [
            "D:\\Dream.os\\archive\\orphans\\tests\\utils\\test_json_io.py",
            "D:\\Dream.os\\archive\\orphans\\tests\\utils\\test_json_io.py"
        ],
        "# EDIT START: Import AppConfig\nfrom dreamos.core.config import load_app_config...": [
            "D:\\Dream.os\\archive\\orphans\\tools\\calibration\\recalibrate_coords.py",
            "D:\\Dream.os\\archive\\orphans\\tools\\maintenance\\validate_logs.py"
        ],
        "\"\"\"Broadcasts coordination directives to agents via AgentBus.\"\"\"...": [
            "D:\\Dream.os\\archive\\orphans\\tools\\coordination\\broadcast_directive.py",
            "D:\\Dream.os\\archive\\orphans\\tools\\coordination\\__init__.py"
        ],
        "import argparse\nimport json\nimport logging\nfrom pathlib import Path...": [
            "D:\\Dream.os\\archive\\orphans\\tools\\discovery\\archive_defunct_tests.py",
            "D:\\Dream.os\\archive\\orphans\\tools\\discovery\\find_defunct_tests.py"
        ],
        "# Setup logging\nlogging.basicConfig(\n    level=logging.INFO, format=\"%(asctime)s - %(levelname)s - %...": [
            "D:\\Dream.os\\archive\\orphans\\tools\\discovery\\archive_defunct_tests.py",
            "D:\\Dream.os\\archive\\orphans\\tools\\discovery\\find_defunct_tests.py"
        ],
        "\"\"\"A rule-based planner tool that generates a basic execution plan.\"\"\"...": [
            "D:\\Dream.os\\archive\\orphans\\tools\\functional\\context_planner_tool.py",
            "D:\\Dream.os\\archive\\orphans\\tools\\functional\\__init__.py"
        ],
        "MOVED FROM: src/dreamos/tools/dreamos_utils/ by Agent 5 (2025-04-28)\n\"\"\"...": [
            "D:\\Dream.os\\archive\\orphans\\tools\\maintenance\\archive_agent_comms.py",
            "D:\\Dream.os\\archive\\orphans\\tools\\maintenance\\archive_agent_mailboxes.py"
        ],
        "# Extract date string (first 8 chars)\n            if len(filename) < 8:\n                logger.warni...": [
            "D:\\Dream.os\\archive\\orphans\\tools\\maintenance\\archive_agent_comms.py",
            "D:\\Dream.os\\archive\\orphans\\tools\\maintenance\\archive_agent_mailboxes.py"
        ],
        "# Configure logging\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)...": [
            "D:\\Dream.os\\dreamos_ai_organizer\\agent_identity.py",
            "D:\\Dream.os\\dreamos_ai_organizer\\validate_ethos.py"
        ],
        "__all__ = [\n    'BridgeLoop',\n    'bridge_service',\n    'cli',\n    'main_loop',\n]...": [
            "D:\\Dream.os\\src\\dreamos\\integrations\\cursor\\__init__.py",
            "D:\\Dream.os\\src\\dreamos\\integrations\\cursor\\bridge\\__init__.py"
        ],
        "from os.path import isdir, join\nfrom platform import system...": [
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-javascript\\setup.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\setup.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-rust\\setup.py"
        ],
        "from setuptools import Extension, find_packages, setup\nfrom setuptools.command.build import build\nfr...": [
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-javascript\\setup.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\setup.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-rust\\setup.py"
        ],
        "class BdistWheel(bdist_wheel):\n    def get_tag(self):\n        python, abi, platform = super().get_ta...": [
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-javascript\\setup.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\setup.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-rust\\setup.py"
        ],
        "def _get_query(name, file):\n    query = _files(f\"{__package__}.queries\") / file\n    globals()[name] ...": [
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-javascript\\bindings\\python\\tree_sitter_javascript\\__init__.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\bindings\\python\\tree_sitter_python\\__init__.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-rust\\bindings\\python\\tree_sitter_rust\\__init__.py"
        ],
        "raise AttributeError(f\"module {__name__!r} has no attribute {name!r}\")...": [
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-javascript\\bindings\\python\\tree_sitter_javascript\\__init__.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\bindings\\python\\tree_sitter_python\\__init__.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-rust\\bindings\\python\\tree_sitter_rust\\__init__.py"
        ],
        "def __dir__():\n    return sorted(__all__ + [\n        \"__all__\", \"__builtins__\", \"__cached__\", \"__doc...": [
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-javascript\\bindings\\python\\tree_sitter_javascript\\__init__.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\bindings\\python\\tree_sitter_python\\__init__.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-rust\\bindings\\python\\tree_sitter_rust\\__init__.py"
        ],
        "# Python test set -- part 1, grammar.\n# This just tests whether the parser accepts them all....": [
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3.8_grammar.py"
        ],
        "# NOTE: When you run this test as a script from the command line, you\n# get warnings about certain h...": [
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar.py"
        ],
        "from test.test_support import run_unittest, check_syntax_error\nimport unittest\nimport sys\n# testing ...": [
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar.py"
        ],
        "def testBackslash(self):\n        # Backslash means line continuation:\n        x = 1 \\\n        + 1\n  ...": [
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar.py"
        ],
        "# Backslash does not means continuation in comments :\\\n        x = 0\n        self.assertEquals(x, 0,...": [
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar.py"
        ],
        "def testLongIntegers(self):\n        x = 0L\n        x = 0l\n        x = 0xffffffffffffffffL\n        x ...": [
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar.py"
        ],
        "def testFloats(self):\n        x = 3.14\n        x = 314.\n        x = 0.314\n        # XXX x = 000.314\n...": [
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar.py"
        ],
        "# single_input: NEWLINE | simple_stmt | compound_stmt NEWLINE\n    # XXX can't test in a script -- th...": [
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3.8_grammar.py"
        ],
        "# file_input: (NEWLINE | stmt)* ENDMARKER\n    # Being tested as this very moment this very module...": [
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3.8_grammar.py"
        ],
        "# expr_input: testlist NEWLINE\n    # XXX Hard to test -- used only in calls to input()...": [
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3.8_grammar.py"
        ],
        "def testEvalInput(self):\n        # testlist ENDMARKER\n        x = eval('1, 0 or 1')...": [
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar.py"
        ],
        "def testFuncdef(self):\n        ### 'def' NAME parameters ':' suite\n        ### parameters: '(' [vara...": [
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar.py"
        ],
        "f1()\n        f2(1)\n        f2(1,)\n        f3(1, 2)\n        f3(1, 2,)\n        f4(1, (2, (3, 4)))\n    ...": [
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar.py"
        ],
        "# ceval unpacks the formal arguments into the first argcount names;\n        # thus, the names nested...": [
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar.py"
        ],
        "# keyword arguments after *arglist\n        def f(*args, **kwargs):\n            return args, kwargs\n ...": [
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar.py"
        ],
        "# Check ast errors in *args and *kwargs\n        check_syntax_error(self, \"f(*g(1=2))\")\n        check...": [
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3.8_grammar.py"
        ],
        "def testLambdef(self):\n        ### lambdef: 'lambda' [varargslist] ':' test\n        l1 = lambda : 0\n...": [
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar.py"
        ],
        "### stmt: simple_stmt | compound_stmt\n    # Tested below...": [
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3.8_grammar.py"
        ],
        "def testSimpleStmt(self):\n        ### simple_stmt: small_stmt (';' small_stmt)* [';']\n        x = 1;...": [
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar.py"
        ],
        "### small_stmt: expr_stmt | print_stmt  | pass_stmt | del_stmt | flow_stmt | import_stmt | global_st...": [
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar.py"
        ],
        "def testExprStmt(self):\n        # (exprlist '=')* exprlist\n        1\n        1, 2, 3\n        x = 1\n ...": [
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar.py"
        ],
        "check_syntax_error(self, \"x + 1 = 1\")\n        check_syntax_error(self, \"a + 1 = b + 2\")...": [
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3.8_grammar.py"
        ],
        "def testPrintStmt(self):\n        # 'print' (test ',')* [test]\n        import StringIO...": [
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar.py"
        ],
        "# Can't test printing to real stdout without comparing output\n        # which is not available in un...": [
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar.py"
        ],
        "print 1, 2, 3\n        print 1, 2, 3,\n        print\n        print 0 or 1, 0 or 1,\n        print 0 or ...": [
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar.py"
        ],
        "# 'print' '>>' test ','\n        print >> sys.stdout, 1, 2, 3\n        print >> sys.stdout, 1, 2, 3,\n ...": [
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar.py"
        ],
        "# test printing to an instance\n        class Gulp:\n            def write(self, msg): pass...": [
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar.py"
        ],
        "gulp = Gulp()\n        print >> gulp, 1, 2, 3\n        print >> gulp, 1, 2, 3,\n        print >> gulp\n ...": [
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar.py"
        ],
        "# test print >> None\n        def driver():\n            oldstdout = sys.stdout\n            sys.stdout...": [
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar.py"
        ],
        "# we should see this once\n        def tellme(file=sys.stdout):\n            print >> file, 'hello wor...": [
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar.py"
        ],
        "# we should not see this at all\n        def tellme(file=None):\n            print >> file, 'goodbye u...": [
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar.py"
        ],
        "self.assertEqual(sys.stdout.getvalue(), '''\\\n1 2 3\n1 2 3\n1 1 1\n1 2 3\n1 2 3\n1 1 1\nhello world\n''')\n  ...": [
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar.py"
        ],
        "# syntax errors\n        check_syntax_error(self, 'print ,')\n        check_syntax_error(self, 'print ...": [
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar.py"
        ],
        "def testDelStmt(self):\n        # 'del' exprlist\n        abc = [1,2,3]\n        x, y, z = abc\n        ...": [
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar.py"
        ],
        "def testPassStmt(self):\n        # 'pass'\n        pass...": [
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar.py"
        ],
        "# flow_stmt: break_stmt | continue_stmt | return_stmt | raise_stmt\n    # Tested below...": [
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3.8_grammar.py"
        ],
        "def testBreakStmt(self):\n        # 'break'\n        while 1: break...": [
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar.py"
        ],
        "def testContinueStmt(self):\n        # 'continue'\n        i = 1\n        while i: i = 0; continue...": [
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar.py"
        ],
        "msg = \"\"\n        while not msg:\n            msg = \"ok\"\n            try:\n                continue\n   ...": [
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3.8_grammar.py"
        ],
        "msg = \"\"\n        while not msg:\n            msg = \"finally block not called\"\n            try:\n      ...": [
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3.8_grammar.py"
        ],
        "def test_break_continue_loop(self):\n        # This test warrants an explanation. It is a test specif...": [
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3.8_grammar.py"
        ],
        "def test_inner(extra_burning_oil = 1, count=0):\n            big_hippo = 2\n            while big_hipp...": [
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3.8_grammar.py"
        ],
        "def testReturn(self):\n        # 'return' [testlist]\n        def g1(): return\n        def g2(): retur...": [
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar.py"
        ],
        "def testYield(self):\n        check_syntax_error(self, \"class foo:yield 1\")...": [
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar.py"
        ],
        "def testRaise(self):\n        # 'raise' test [',' test]\n        try: raise RuntimeError, 'just testin...": [
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar.py"
        ],
        "def testImport(self):\n        # 'import' dotted_as_names\n        import sys\n        import time, sys...": [
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar.py"
        ],
        "def testGlobal(self):\n        # 'global' NAME (',' NAME)*\n        global a\n        global a, b\n     ...": [
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar.py"
        ],
        "def testExec(self):\n        # 'exec' expr ['in' expr [',' expr]]\n        z = None\n        del z\n    ...": [
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar.py"
        ],
        "import warnings\n        warnings.filterwarnings(\"ignore\", \"global statement\", module=\"<string>\")\n   ...": [
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar.py"
        ],
        "def testAssert(self):\n        # assert_stmt: 'assert' test [',' test]\n        assert 1\n        asser...": [
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar.py"
        ],
        "### compound_stmt: if_stmt | while_stmt | for_stmt | try_stmt | funcdef | classdef\n    # Tested belo...": [
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3.8_grammar.py"
        ],
        "def testIf(self):\n        # 'if' test ':' suite ('elif' test ':' suite)* ['else' ':' suite]\n        ...": [
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar.py"
        ],
        "def testWhile(self):\n        # 'while' test ':' suite ['else' ':' suite]\n        while 0: pass\n     ...": [
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar.py"
        ],
        "# Issue1920: \"while 0\" is optimized away,\n        # ensure that the \"else\" clause is still present.\n...": [
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar.py"
        ],
        "def testFor(self):\n        # 'for' exprlist 'in' exprlist ':' suite ['else' ':' suite]\n        for i...": [
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar.py"
        ],
        "result = []\n        for x, in [(1,), (2,), (3,)]:\n            result.append(x)\n        self.assertEq...": [
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3.8_grammar.py"
        ],
        "def testTry(self):\n        ### try_stmt: 'try' ':' suite (except_clause ':' suite)+ ['else' ':' suit...": [
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar.py"
        ],
        "def testSuite(self):\n        # simple_stmt | NEWLINE INDENT NEWLINE* (stmt NEWLINE*)+ DEDENT\n       ...": [
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar.py"
        ],
        "def testTest(self):\n        ### and_test ('or' and_test)*\n        ### and_test: not_test ('and' not_...": [
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar.py"
        ],
        "def testComparison(self):\n        ### comparison: expr (comp_op expr)*\n        ### comp_op: '<'|'>'|...": [
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar.py"
        ],
        "def testBinaryMaskOps(self):\n        x = 1 & 1\n        x = 1 ^ 1\n        x = 1 | 1...": [
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar.py"
        ],
        "def testShiftOps(self):\n        x = 1 << 1\n        x = 1 >> 1\n        x = 1 << 1 >> 1...": [
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar.py"
        ],
        "def testAdditiveOps(self):\n        x = 1\n        x = 1 + 1\n        x = 1 - 1 - 1\n        x = 1 - 1 +...": [
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar.py"
        ],
        "def testMultiplicativeOps(self):\n        x = 1 * 1\n        x = 1 / 1\n        x = 1 % 1\n        x = 1...": [
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar.py"
        ],
        "def testUnaryOps(self):\n        x = +1\n        x = -1\n        x = ~1\n        x = ~1 ^ 1 & 1 | 1 & 1 ...": [
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar.py"
        ],
        "def testSelectors(self):\n        ### trailer: '(' [testlist] ')' | '[' subscript ']' | '.' NAME\n    ...": [
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar.py"
        ],
        "import sys, time\n        c = sys.path[0]\n        x = time.time()\n        x = sys.modules['time'].tim...": [
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar.py"
        ],
        "def testAtoms(self):\n        ### atom: '(' [testlist] ')' | '[' [testlist] ']' | '{' [dictmaker] '}'...": [
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar.py"
        ],
        "x = (1)\n        x = (1 or 2 or 3)\n        x = (1 or 2 or 3, 2, 3)...": [
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3.8_grammar.py"
        ],
        "x = []\n        x = [1]\n        x = [1 or 2 or 3]\n        x = [1 or 2 or 3, 2, 3]\n        x = []...": [
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3.8_grammar.py"
        ],
        "x = {}\n        x = {'one': 1}\n        x = {'one': 1,}\n        x = {'one' or 'two': 1 or 2}\n        x...": [
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3.8_grammar.py"
        ],
        "x = `x`\n        x = `1 or 2 or 3`\n        self.assertEqual(`1,2`, '(1, 2)')...": [
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar.py"
        ],
        "### exprlist: expr (',' expr)* [',']\n    ### testlist: test (',' test)* [',']\n    # These have been ...": [
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3.8_grammar.py"
        ],
        "def testClassdef(self):\n        # 'class' NAME ['(' [testlist] ')'] ':' suite\n        class B: pass\n...": [
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar.py"
        ],
        "def testListcomps(self):\n        # list comprehension tests\n        nums = [1, 2, 3, 4, 5]\n        s...": [
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar.py"
        ],
        "self.assertEqual([s.strip() for s in spcs], ['Apple', 'Banana', 'Coco  nut'])\n        self.assertEqu...": [
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3.8_grammar.py"
        ],
        "def test_in_func(l):\n            return [None < x < 3 for x in l if x > 2]...": [
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar.py"
        ],
        "self.assertEqual(test_in_func(nums), [False, False, False])...": [
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3.8_grammar.py"
        ],
        "def test_nested_front():\n            self.assertEqual([[y for y in [x, x + 1]] for x in [1,3,5]],\n  ...": [
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3.8_grammar.py"
        ],
        "check_syntax_error(self, \"[i, s for i in nums for s in strs]\")\n        check_syntax_error(self, \"[x ...": [
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3.8_grammar.py"
        ],
        "suppliers = [\n          (1, \"Boeing\"),\n          (2, \"Ford\"),\n          (3, \"Macdonalds\")\n        ]...": [
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3.8_grammar.py"
        ],
        "parts = [\n          (10, \"Airliner\"),\n          (20, \"Engine\"),\n          (30, \"Cheeseburger\")\n     ...": [
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3.8_grammar.py"
        ],
        "suppart = [\n          (1, 10), (1, 20), (2, 20), (3, 30)\n        ]...": [
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3.8_grammar.py"
        ],
        "x = [\n          (sname, pname)\n            for (sno, sname) in suppliers\n              for (pno, pna...": [
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3.8_grammar.py"
        ],
        "self.assertEqual(x, [('Boeing', 'Airliner'), ('Boeing', 'Engine'), ('Ford', 'Engine'),\n             ...": [
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3.8_grammar.py"
        ],
        "def testGenexps(self):\n        # generator expression tests\n        g = ([x for x in range(10)] for ...": [
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar.py"
        ],
        "a = 1\n        try:\n            g = (a for d in a)\n            g.next()\n            self.fail('should...": [
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar.py"
        ],
        "self.assertEqual(list((x, y) for x in 'abcd' for y in 'abcd'), [(x, y) for x in 'abcd' for y in 'abc...": [
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3.8_grammar.py"
        ],
        "a = [x for x in range(10)]\n        b = (x for x in (y for y in a))\n        self.assertEqual(sum(b), ...": [
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3.8_grammar.py"
        ],
        "self.assertEqual(sum(x**2 for x in range(10)), sum([x**2 for x in range(10)]))\n        self.assertEq...": [
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3.8_grammar.py"
        ],
        "def testComprehensionSpecials(self):\n        # test for outmost iterable precomputation\n        x = ...": [
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar.py"
        ],
        "# This should hold, since we're only precomputing outmost iterable.\n        x = 10; t = False; g = (...": [
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3.8_grammar.py"
        ],
        "# Grammar allows multiple adjacent 'if's in listcomps and genexps,\n        # even though it's silly....": [
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3.8_grammar.py"
        ],
        "# verify unpacking single element tuples in listcomp/genexp.\n        self.assertEqual([x for x, in [...": [
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3.8_grammar.py"
        ],
        "def test_with_statement(self):\n        class manager(object):\n            def __enter__(self):\n     ...": [
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3.8_grammar.py"
        ],
        "with manager():\n            pass\n        with manager() as x:\n            pass\n        with manager(...": [
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3.8_grammar.py"
        ],
        "def testIfElseExpr(self):\n        # Test ifelse expressions in various cases\n        def _checkeval(...": [
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar.py"
        ],
        "self.assertEqual([ x() for x in lambda: True, lambda: False if x() ], [True])\n        self.assertEqu...": [
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar.py"
        ],
        "def testStringLiterals(self):\n        x = ''; y = \"\"; self.assert_(len(x) == 0 and x == y)\n        x...": [
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar-crlf.py"
        ],
        "def test_main():\n    run_unittest(TokenTests, GrammarTests)...": [
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python2-grammar.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar.py"
        ],
        "from test.support import run_unittest, check_syntax_error\nimport unittest\nimport sys\n# testing impor...": [
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar.py"
        ],
        "def testPlainIntegers(self):\n        self.assertEquals(type(000), type(0))\n        self.assertEquals...": [
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar.py"
        ],
        "def testLongIntegers(self):\n        x = 0\n        x = 0xffffffffffffffff\n        x = 0Xfffffffffffff...": [
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar.py"
        ],
        "def testUnderscoresInNumbers(self):\n        # Integers\n        x = 1_0\n        x = 123_456_7_89\n    ...": [
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar.py"
        ],
        "# Floats\n        x = 3_1.4\n        x = 03_1.4\n        x = 3_1.\n        x = .3_1\n        x = 3.1_4\n  ...": [
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar.py"
        ],
        "def testEllipsis(self):\n        x = ...\n        self.assert_(x is Ellipsis)\n        self.assertRaise...": [
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar.py"
        ],
        "def testFuncdef(self):\n        ### [decorators] 'def' NAME parameters ['->' test] ':' suite\n        ...": [
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar.py"
        ],
        "f1()\n        f2(1)\n        f2(1,)\n        f3(1, 2)\n        f3(1, 2,)\n        v0()\n        v0(1)\n    ...": [
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3.8_grammar.py"
        ],
        "def d01(a=1): pass\n        d01()\n        d01(1)\n        d01(*(1,))\n        d01(**{'a':2})\n        de...": [
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar.py"
        ],
        "# keyword argument type tests\n        try:\n            str('x', **{b'foo':1 })\n        except TypeEr...": [
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3.8_grammar.py"
        ],
        "# argument annotation tests\n        def f(x) -> list: pass\n        self.assertEquals(f.__annotations...": [
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar.py"
        ],
        "# test closures with a variety of oparg's\n        closure = 1\n        def f(): return closure\n      ...": [
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar.py"
        ],
        "### small_stmt: expr_stmt | pass_stmt | del_stmt | flow_stmt | import_stmt | global_stmt | access_st...": [
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3.8_grammar.py"
        ],
        "def testRaise(self):\n        # 'raise' test [',' test]\n        try: raise RuntimeError('just testing...": [
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar.py"
        ],
        "def testNonlocal(self):\n        # 'nonlocal' NAME (',' NAME)*\n        x = 0\n        y = 0\n        de...": [
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar.py"
        ],
        "def testAtoms(self):\n        ### atom: '(' [testlist] ')' | '[' [testlist] ']' | '{' [dictsetmaker] ...": [
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar.py"
        ],
        "x = {'one'}\n        x = {'one', 1,}\n        x = {'one', 'two', 'three'}\n        x = {2, 3, 4,}...": [
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3.8_grammar.py"
        ],
        "# decorator: '@' dotted_name [ '(' [arglist] ')' ] NEWLINE\n        # decorators: decorator+\n        ...": [
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3.8_grammar.py"
        ],
        "def testDictcomps(self):\n        # dictorsetmaker: ( (test ':' test (comp_for |\n        #           ...": [
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar.py"
        ],
        "def test_in_func(l):\n            return [0 < x < 3 for x in l if x > 2]...": [
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3.8_grammar.py"
        ],
        "a = 1\n        try:\n            g = (a for d in a)\n            next(g)\n            self.fail('should ...": [
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3.8_grammar.py"
        ],
        "# the next line is not allowed anymore\n        #self.assertEqual([ x() for x in lambda: True, lambda...": [
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar-crlf.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3-grammar.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3.8_grammar.py"
        ],
        "with self.assertRaises(Done):\n            foo().send(None)...": [
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3.8_grammar.py",
            "D:\\Dream.os\\vendor\\tree-sitter-grammars\\tree-sitter-python\\examples\\python3.8_grammar.py"
        ]
    },
    "unused_imports": {}
}