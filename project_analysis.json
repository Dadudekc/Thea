{
    "chunk_tasks.py": {
        "language": ".py",
        "functions": [
            "dedupe_and_chunk"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "main.py": {
        "language": ".py",
        "functions": [
            "setup_logging"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "check_import.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "apply_proposals.py": {
        "language": ".py",
        "functions": [
            "get_existing_rule_ids",
            "parse_proposal",
            "update_proposal_block_status",
            "append_rule_to_rulebook"
        ],
        "classes": {},
        "routes": [],
        "complexity": 4
    },
    "e2e_smoke.py": {
        "language": ".py",
        "functions": [
            "main",
            "__init__",
            "execute"
        ],
        "classes": {
            "DummyAdapter": {
                "methods": [
                    "__init__",
                    "execute"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 5
    },
    "conftest.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "cli.py": {
        "language": ".py",
        "functions": [
            "run",
            "log_stats",
            "get_help",
            "setup_logging"
        ],
        "classes": {
            "DreamGroup": {
                "methods": [
                    "get_help"
                ],
                "docstring": null,
                "base_classes": [
                    "click.Group"
                ]
            },
            "ConfigError": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "Exception"
                ]
            }
        },
        "routes": [],
        "complexity": 5
    },
    "governance_scraper.py": {
        "language": ".py",
        "functions": [
            "load_recent_governance_events",
            "load_recent_reflections",
            "load_proposals",
            "get_rulebook_summary",
            "generate_governance_data"
        ],
        "classes": {},
        "routes": [],
        "complexity": 5
    },
    "move_uncomplete_tasks.py": {
        "language": ".py",
        "functions": [
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "run_dream_loop.py": {
        "language": ".py",
        "functions": [
            "main",
            "chatgpt_loop"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "run_dream_os.py": {
        "language": ".py",
        "functions": [
            "simulate_cursor_workers",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "setup.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "streamlit.py": {
        "language": ".py",
        "functions": [
            "set_page_config",
            "title",
            "caption",
            "empty",
            "subheader",
            "dataframe",
            "info",
            "error",
            "__init__",
            "container",
            "__enter__",
            "__exit__"
        ],
        "classes": {
            "_Container": {
                "methods": [
                    "__init__",
                    "container",
                    "__enter__",
                    "__exit__"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 16
    },
    "test_pyqt.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "_internal_test_loop.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "test_scraper.py": {
        "language": ".py",
        "functions": [
            "run_scraper_test"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "agents\\AletheiaContentDispatcher.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "execute_full_dispatch"
        ],
        "classes": {
            "AletheiaContentDispatcher": {
                "methods": [
                    "__init__",
                    "execute_full_dispatch"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 4
    },
    "main_copy.py": {
        "language": ".py",
        "functions": [],
        "classes": {
            "MainCopy": {
                "methods": [],
                "docstring": "Placeholder for MainCopy.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 0
    },
    "monitor_analyzer_agent.py": {
        "language": ".py",
        "functions": [
            "load_rules_from_rulebook",
            "load_tasks",
            "is_halt_unnecessary",
            "log_unnecessary_halt",
            "broadcast_alert",
            "request_rulebook_update",
            "__init__",
            "process_status_file"
        ],
        "classes": {
            "HaltStatusHandler": {
                "methods": [
                    "__init__",
                    "process_status_file"
                ],
                "docstring": "Handler for processing agent status files, especially 'halted' status.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 10
    },
    "dashboard.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_setup_tasks_tab",
            "_setup_mailboxes_tab",
            "_setup_agents_tab",
            "_setup_comm_tab",
            "refresh_all",
            "_load_tasks",
            "_load_mailboxes",
            "inject_task",
            "claim_next_task",
            "update_messages",
            "capture_spot",
            "refresh_agents_table",
            "_on_accept",
            "_on_reject",
            "add_task",
            "get_all_tasks",
            "claim_task"
        ],
        "classes": {
            "DashboardWindow": {
                "methods": [
                    "__init__",
                    "_setup_tasks_tab",
                    "_setup_mailboxes_tab",
                    "_setup_agents_tab",
                    "_setup_comm_tab",
                    "refresh_all",
                    "_load_tasks",
                    "_load_mailboxes",
                    "inject_task",
                    "claim_next_task",
                    "update_messages",
                    "capture_spot",
                    "refresh_agents_table",
                    "_on_accept",
                    "_on_reject"
                ],
                "docstring": "Main dashboard for Dream.OS agents, tasks, mailboxes, etc.",
                "base_classes": [
                    "QMainWindow"
                ]
            }
        },
        "routes": [],
        "complexity": 33
    },
    "chat_mate_config.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "get"
        ],
        "classes": {
            "Config": {
                "methods": [
                    "__init__",
                    "get"
                ],
                "docstring": "Stub Config for chat_cycle_controller dependencies",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 4
    },
    "agents\\cursor_integration_agent.py": {
        "language": ".py",
        "functions": [
            "format_prompt_for_cursor",
            "parse_cursor_response",
            "parse_cursor_response",
            "__init__",
            "register_handler",
            "is_running"
        ],
        "classes": {
            "AgentStatus": {
                "methods": [],
                "docstring": null,
                "base_classes": []
            },
            "EventType": {
                "methods": [],
                "docstring": null,
                "base_classes": []
            },
            "Event": {
                "methods": [
                    "__init__"
                ],
                "docstring": null,
                "base_classes": []
            },
            "PlaceholderAgentBus": {
                "methods": [
                    "register_handler",
                    "is_running"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 9
    },
    "agents\\base_agent.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "run",
            "get_id",
            "__str__",
            "__repr__"
        ],
        "classes": {
            "BaseAgent": {
                "methods": [
                    "__init__",
                    "run",
                    "get_id",
                    "__str__",
                    "__repr__"
                ],
                "docstring": "Abstract base class for all autonomous agents in the Dream.OS agent swarm.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 10
    },
    "agents\\echo_agent.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_process_mailbox_message",
            "start_listening",
            "stop"
        ],
        "classes": {
            "EchoAgent": {
                "methods": [
                    "__init__",
                    "_process_mailbox_message",
                    "start_listening",
                    "stop"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 8
    },
    "agents\\planner_agent.py": {
        "language": ".py",
        "functions": [
            "create_task_message",
            "log_event",
            "__init__",
            "parse_json_response",
            "__init__",
            "_parse_llm_plan",
            "stage_and_execute_prompt",
            "extract_json_from_response",
            "__init__",
            "to_dict",
            "__init__",
            "__init__",
            "render",
            "__init__",
            "register_command_handler"
        ],
        "classes": {
            "LLMParser": {
                "methods": [
                    "__init__",
                    "parse_json_response"
                ],
                "docstring": null,
                "base_classes": []
            },
            "PlannerAgent": {
                "methods": [
                    "__init__",
                    "_parse_llm_plan"
                ],
                "docstring": "Agent responsible for breaking down goals into actionable task lists.\nUses BaseAgent for lifecycle, bus communication, and logging.",
                "base_classes": [
                    "BaseAgent"
                ]
            },
            "TaskMessage": {
                "methods": [
                    "__init__",
                    "to_dict"
                ],
                "docstring": null,
                "base_classes": []
            },
            "MockAgentBus": {
                "methods": [
                    "__init__"
                ],
                "docstring": null,
                "base_classes": []
            },
            "MockLLMProvider": {
                "methods": [],
                "docstring": null,
                "base_classes": []
            },
            "TemplateEngine": {
                "methods": [
                    "__init__",
                    "render"
                ],
                "docstring": null,
                "base_classes": []
            },
            "BaseAgent": {
                "methods": [
                    "__init__",
                    "register_command_handler"
                ],
                "docstring": null,
                "base_classes": []
            },
            "AgentBus": {
                "methods": [],
                "docstring": null,
                "base_classes": []
            },
            "Task": {
                "methods": [],
                "docstring": null,
                "base_classes": []
            },
            "TaskStatus": {
                "methods": [],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 26
    },
    "agents\\prompt_feedback_loop_agent.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "register_handler",
            "is_running"
        ],
        "classes": {
            "AgentStatus": {
                "methods": [],
                "docstring": null,
                "base_classes": []
            },
            "EventType": {
                "methods": [],
                "docstring": null,
                "base_classes": []
            },
            "Event": {
                "methods": [
                    "__init__"
                ],
                "docstring": null,
                "base_classes": []
            },
            "PlaceholderAgentBus": {
                "methods": [
                    "register_handler",
                    "is_running"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 6
    },
    "agents\\reflection_agent.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "run"
        ],
        "classes": {
            "ReflectionAgent": {
                "methods": [
                    "__init__",
                    "run"
                ],
                "docstring": "A concrete agent implementation focusing on reflection, using VictorVoiceEngine.",
                "base_classes": [
                    "BaseAgent"
                ]
            }
        },
        "routes": [],
        "complexity": 4
    },
    "agents\\setup.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "agents\\sim_cursor_chat_coordinator.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "register_handler",
            "is_running"
        ],
        "classes": {
            "AgentStatus": {
                "methods": [],
                "docstring": null,
                "base_classes": []
            },
            "EventType": {
                "methods": [],
                "docstring": null,
                "base_classes": []
            },
            "Event": {
                "methods": [
                    "__init__"
                ],
                "docstring": null,
                "base_classes": []
            },
            "PlaceholderAgentBus": {
                "methods": [
                    "register_handler",
                    "is_running"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 6
    },
    "agents\\social_task_orchestrator.py": {
        "language": ".py",
        "functions": [
            "validate_task",
            "__init__",
            "register_handler",
            "is_running"
        ],
        "classes": {
            "AgentStatus": {
                "methods": [],
                "docstring": null,
                "base_classes": []
            },
            "EventType": {
                "methods": [],
                "docstring": null,
                "base_classes": []
            },
            "Event": {
                "methods": [
                    "__init__"
                ],
                "docstring": null,
                "base_classes": []
            },
            "PlaceholderAgentBus": {
                "methods": [
                    "register_handler",
                    "is_running"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 7
    },
    "agents\\task_orchestrator_agent.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "plan_task",
            "assign_agent",
            "check_status",
            "route_feedback",
            "receive_message",
            "start_workflow",
            "update_task_status",
            "_execute_next_tasks",
            "_check_workflow_completion",
            "_find_capable_agents",
            "_select_optimal_agent",
            "_estimate_task_duration",
            "_calculate_resource_requirements",
            "_should_retry",
            "_retry_task",
            "__init__",
            "_load_tasks",
            "_save_tasks",
            "_check_dependencies",
            "_dispatch_task",
            "run_cycle",
            "start",
            "stop",
            "_run_loop",
            "__init__",
            "receive_message"
        ],
        "classes": {
            "WorkflowAgent": {
                "methods": [
                    "__init__",
                    "plan_task",
                    "assign_agent",
                    "check_status",
                    "route_feedback",
                    "receive_message",
                    "start_workflow",
                    "update_task_status",
                    "_execute_next_tasks",
                    "_check_workflow_completion",
                    "_find_capable_agents",
                    "_select_optimal_agent",
                    "_estimate_task_duration",
                    "_calculate_resource_requirements",
                    "_should_retry",
                    "_retry_task"
                ],
                "docstring": "Orchestrates the execution of tasks defined in a plan. \nReceives plan details from PlannerAgent, routes tasks to specialist agents,\nand manages workflow progress with integrated feedback loops.\n\nCore Responsibilities:\n- Task planning and dependency management\n- Agent assignment and load balancing\n- Status tracking and progress monitoring\n- Feedback collection and routing",
                "base_classes": []
            },
            "TaskOrchestratorAgent": {
                "methods": [
                    "__init__",
                    "_load_tasks",
                    "_save_tasks",
                    "_check_dependencies",
                    "_dispatch_task",
                    "run_cycle",
                    "start",
                    "stop",
                    "_run_loop"
                ],
                "docstring": "Monitors task_list.json and dispatches TASK_QUEUED events for tasks ready to execute.",
                "base_classes": []
            },
            "MockExecutorAgent": {
                "methods": [
                    "__init__",
                    "receive_message"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 54
    },
    "agents\\thea_auto_planner.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "analyze_feedback_and_generate_next",
            "inject_task"
        ],
        "classes": {
            "TheaAutoPlanner": {
                "methods": [
                    "__init__",
                    "analyze_feedback_and_generate_next",
                    "inject_task"
                ],
                "docstring": "TheaAutoPlanner ingests failure feedback and generates new directives\nto improve system stability.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 6
    },
    "agents\\workflow_agent.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_get_workflow_path",
            "create_workflow",
            "list_workflows",
            "delete_workflow",
            "execute_workflow"
        ],
        "classes": {
            "WorkflowAgent": {
                "methods": [
                    "__init__",
                    "_get_workflow_path",
                    "create_workflow",
                    "list_workflows",
                    "delete_workflow",
                    "execute_workflow"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 12
    },
    "agents\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "agents\\calendar\\calendar_agent.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_parse_llm_schedule_response",
            "schedule_tasks",
            "add_event",
            "get_availability",
            "render_template",
            "stage_and_execute_prompt",
            "log_event"
        ],
        "classes": {
            "CalendarAgent": {
                "methods": [
                    "__init__",
                    "_parse_llm_schedule_response",
                    "schedule_tasks",
                    "add_event",
                    "get_availability"
                ],
                "docstring": "Responsible for scheduling tasks onto a calendar, considering dependencies,\ndurations, and existing commitments.\nCommunicates with the LLM via the Prompt Staging Service for complex scheduling logic.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 13
    },
    "agents\\calendar\\agent.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "schedule_tasks",
            "find_available_slots",
            "_load_existing_schedule",
            "_parse_llm_schedule",
            "_parse_llm_slots",
            "log_event",
            "log_event"
        ],
        "classes": {
            "CalendarAgent": {
                "methods": [
                    "__init__",
                    "schedule_tasks",
                    "find_available_slots",
                    "_load_existing_schedule",
                    "_parse_llm_schedule",
                    "_parse_llm_slots"
                ],
                "docstring": "Agent responsible for scheduling tasks and managing time blocks via AgentBus dispatch.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 14
    },
    "agents\\cursor\\control_agent.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "generate_task",
            "context_reload",
            "internal_reload_context",
            "_handle_resume_operation",
            "_handle_diagnose_loop",
            "_handle_confirmation_check",
            "_handle_clarify_objective",
            "_handle_generic_recovery",
            "_handle_generate_code",
            "__init__",
            "run_command",
            "get_output",
            "__init__",
            "send_prompt_to_chat",
            "log_event"
        ],
        "classes": {
            "CursorControlAgent": {
                "methods": [
                    "__init__",
                    "generate_task",
                    "context_reload",
                    "internal_reload_context",
                    "_handle_resume_operation",
                    "_handle_diagnose_loop",
                    "_handle_confirmation_check",
                    "_handle_clarify_objective",
                    "_handle_generic_recovery",
                    "_handle_generate_code"
                ],
                "docstring": null,
                "base_classes": []
            },
            "CursorTerminalController": {
                "methods": [
                    "__init__",
                    "run_command",
                    "get_output"
                ],
                "docstring": null,
                "base_classes": []
            },
            "CursorPromptController": {
                "methods": [
                    "__init__",
                    "send_prompt_to_chat"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 31
    },
    "agents\\dreamforge\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "agents\\cursor\\cursor_dispatcher.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "execute_cursor_task",
            "_handle_test_generation",
            "_handle_code_fix",
            "_handle_file_analysis",
            "run_dispatcher_loop",
            "stop"
        ],
        "classes": {
            "CursorDispatcher": {
                "methods": [
                    "__init__",
                    "execute_cursor_task",
                    "_handle_test_generation",
                    "_handle_code_fix",
                    "_handle_file_analysis",
                    "run_dispatcher_loop",
                    "stop"
                ],
                "docstring": "Handles execution of Cursor tasks and communication with the agent bus.\nActs as a bridge between ChatGPT and Cursor operations.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 14
    },
    "agents\\dreamforge\\agents\\agent_monitor_agent.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "__init__",
            "__init__",
            "register_handler",
            "is_running"
        ],
        "classes": {
            "AgentMonitorAgent": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Monitors the status of other agents in the system.\n\nListens for AGENT_STATUS events on the AgentBus and logs them.\nThis is a basic stub implementation fulfilling the requirement from\ntask 'fill_missing_placeholders_001'.",
                "base_classes": [
                    "BaseAgent"
                ]
            },
            "AgentStatus": {
                "methods": [],
                "docstring": null,
                "base_classes": []
            },
            "EventType": {
                "methods": [],
                "docstring": null,
                "base_classes": []
            },
            "Event": {
                "methods": [
                    "__init__"
                ],
                "docstring": null,
                "base_classes": []
            },
            "BaseAgent": {
                "methods": [
                    "__init__"
                ],
                "docstring": null,
                "base_classes": []
            },
            "PlaceholderAgentBus": {
                "methods": [
                    "register_handler",
                    "is_running"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 10
    },
    "agents\\dreamforge\\agents\\planner_agent.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_estimate_duration"
        ],
        "classes": {
            "PlannerAgent": {
                "methods": [
                    "__init__",
                    "_estimate_duration"
                ],
                "docstring": "Agent responsible for planning and coordinating tasks.",
                "base_classes": [
                    "BaseAgent"
                ]
            }
        },
        "routes": [],
        "complexity": 4
    },
    "agents\\dreamforge\\agents\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "agents\\dreamforge\\agents\\workflow_agent.py": {
        "language": ".py",
        "functions": [
            "_get_value_from_context",
            "__init__",
            "_parse_llm_workflow",
            "_interpolate_params",
            "_recursive_render"
        ],
        "classes": {
            "WorkflowAgent": {
                "methods": [
                    "__init__",
                    "_parse_llm_workflow",
                    "_interpolate_params"
                ],
                "docstring": "Agent responsible for managing and executing workflows.",
                "base_classes": [
                    "BaseAgent"
                ]
            }
        },
        "routes": [],
        "complexity": 8
    },
    "agents\\dreamforge\\core\\agent_protocols.py": {
        "language": ".py",
        "functions": [
            "__post_init__",
            "to_dict",
            "from_dict"
        ],
        "classes": {
            "ErrorDetail": {
                "methods": [],
                "docstring": null,
                "base_classes": []
            },
            "MetricsData": {
                "methods": [],
                "docstring": null,
                "base_classes": []
            },
            "FeedbackEventMessage": {
                "methods": [
                    "__post_init__",
                    "to_dict",
                    "from_dict"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 6
    },
    "agents\\dreamforge\\core\\chatgpt_commander_agent.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "execute_chat_prompt"
        ],
        "classes": {
            "ChatGPTCommander": {
                "methods": [
                    "__init__",
                    "execute_chat_prompt"
                ],
                "docstring": "Agent for commanding and interacting with ChatGPT via AgentBus dispatch.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 4
    },
    "agents\\dreamforge\\core\\config.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "agents\\dreamforge\\core\\feedback_consumer.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_extract_metadata",
            "__init__"
        ],
        "classes": {
            "FeedbackProcessingError": {
                "methods": [],
                "docstring": "Raised when feedback processing fails.",
                "base_classes": [
                    "Exception"
                ]
            },
            "FeedbackConsumerService": {
                "methods": [
                    "__init__",
                    "_extract_metadata"
                ],
                "docstring": null,
                "base_classes": []
            },
            "FeedbackConsumer": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Consumes feedback events and potentially triggers prompt refinement.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 6
    },
    "agents\\dreamforge\\core\\cursor_dispatcher.py": {
        "language": ".py",
        "functions": [
            "__init__"
        ],
        "classes": {
            "CursorDispatcher": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Cursor dispatcher agent for handling cursor-related tasks.",
                "base_classes": [
                    "BaseAgent"
                ]
            }
        },
        "routes": [],
        "complexity": 2
    },
    "agents\\dreamforge\\core\\prompt_staging_service.py": {
        "language": ".py",
        "functions": [
            "render_prompt",
            "stage_prompt_for_cursor",
            "write_to_cursor_input",
            "read_from_cursor_output"
        ],
        "classes": {},
        "routes": [],
        "complexity": 4
    },
    "agents\\dreamforge\\core\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "agents\\dreamforge\\core\\llm_parser.py": {
        "language": ".py",
        "functions": [
            "extract_json_from_response",
            "extract_code_from_response",
            "extract_list_from_response"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "agents\\dreamforge\\core\\coordination\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "agents\\dreamforge\\core\\feedback\\consumer.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_setup_metrics",
            "_validate_feedback",
            "_record_metrics",
            "_apply_refinement"
        ],
        "classes": {
            "FeedbackConsumerService": {
                "methods": [
                    "__init__",
                    "_setup_metrics",
                    "_validate_feedback",
                    "_record_metrics",
                    "_apply_refinement"
                ],
                "docstring": "Service for consuming and processing feedback from various sources.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 10
    },
    "agents\\dreamforge\\core\\feedback\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "agents\\dreamforge\\core\\memory\\governance_memory_engine.py": {
        "language": ".py",
        "functions": [
            "log_event",
            "_store_event",
            "get_events",
            "_event_matches",
            "clear_events"
        ],
        "classes": {},
        "routes": [],
        "complexity": 5
    },
    "agents\\dreamforge\\core\\memory\\memory_manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_ensure_storage_exists",
            "store_feedback",
            "get_feedback_history",
            "_save_feedback",
            "_load_feedback",
            "clear_feedback"
        ],
        "classes": {
            "MemoryManager": {
                "methods": [
                    "__init__",
                    "_ensure_storage_exists",
                    "store_feedback",
                    "get_feedback_history",
                    "_save_feedback",
                    "_load_feedback",
                    "clear_feedback"
                ],
                "docstring": "Manages persistent memory storage for agents.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 14
    },
    "agents\\dreamforge\\core\\models\\workflow.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "to_dict",
            "from_dict",
            "start",
            "complete",
            "fail",
            "__init__",
            "add_step",
            "get_step",
            "update_step",
            "_update",
            "to_dict",
            "from_dict"
        ],
        "classes": {
            "WorkflowStep": {
                "methods": [
                    "__init__",
                    "to_dict",
                    "from_dict",
                    "start",
                    "complete",
                    "fail"
                ],
                "docstring": "A single step in a workflow.",
                "base_classes": []
            },
            "WorkflowDefinition": {
                "methods": [
                    "__init__",
                    "add_step",
                    "get_step",
                    "update_step",
                    "_update",
                    "to_dict",
                    "from_dict"
                ],
                "docstring": "A complete workflow definition.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 26
    },
    "agents\\dreamforge\\core\\tests\\test_governance_memory_engine.py": {
        "language": ".py",
        "functions": [
            "setUp",
            "tearDown",
            "test_store_event_success",
            "test_store_event_validation",
            "test_query_events_by_type",
            "test_query_events_by_agent",
            "test_query_events_with_time_range",
            "test_event_persistence",
            "test_event_aggregation",
            "test_event_cleanup",
            "test_concurrent_event_storage",
            "test_query_with_complex_filters",
            "test_event_persistence_error_handling",
            "test_event_aggregation_advanced",
            "test_memory_management",
            "test_event_batching",
            "store_events"
        ],
        "classes": {
            "TestGovernanceMemoryEngine": {
                "methods": [
                    "setUp",
                    "tearDown",
                    "test_store_event_success",
                    "test_store_event_validation",
                    "test_query_events_by_type",
                    "test_query_events_by_agent",
                    "test_query_events_with_time_range",
                    "test_event_persistence",
                    "test_event_aggregation",
                    "test_event_cleanup",
                    "test_concurrent_event_storage",
                    "test_query_with_complex_filters",
                    "test_event_persistence_error_handling",
                    "test_event_aggregation_advanced",
                    "test_memory_management",
                    "test_event_batching"
                ],
                "docstring": null,
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 33
    },
    "agents\\dreamforge\\core\\tests\\test_template_engine.py": {
        "language": ".py",
        "functions": [
            "setUp",
            "tearDown",
            "test_render_valid_template",
            "test_render_missing_template",
            "test_render_missing_variables",
            "test_template_caching",
            "test_template_reload",
            "test_nested_template_rendering",
            "test_template_inheritance",
            "test_template_filters",
            "test_template_error_handling",
            "mock_load",
            "mock_load",
            "mock_load",
            "custom_trim"
        ],
        "classes": {
            "TestTemplateEngine": {
                "methods": [
                    "setUp",
                    "tearDown",
                    "test_render_valid_template",
                    "test_render_missing_template",
                    "test_render_missing_variables",
                    "test_template_caching",
                    "test_template_reload",
                    "test_nested_template_rendering",
                    "test_template_inheritance",
                    "test_template_filters",
                    "test_template_error_handling"
                ],
                "docstring": null,
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 26
    },
    "agents\\dreamforge\\tests\\conftest.py": {
        "language": ".py",
        "functions": [
            "mock_agent_bus",
            "mock_perf_logger",
            "create_test_message",
            "create_test_task"
        ],
        "classes": {},
        "routes": [],
        "complexity": 4
    },
    "agents\\dreamforge\\tests\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "agents\\dreamforge\\tests\\agents\\test_utils.py": {
        "language": ".py",
        "functions": [
            "create_llm_response",
            "create_mock_llm_chain",
            "validate_plan",
            "validate_plan_refinement",
            "validate_llm_call",
            "setup_mock_llm_chain"
        ],
        "classes": {},
        "routes": [],
        "complexity": 6
    },
    "agents\\dreamforge\\tests\\agents\\test_planner_agent.py": {
        "language": ".py",
        "functions": [
            "planner_agent",
            "test_plan_from_goal_success",
            "test_plan_from_goal_render_fails",
            "test_plan_from_goal_llm_fails",
            "test_plan_from_goal_parsing_fails_no_json",
            "test_plan_from_goal_parsing_fails_bad_json",
            "test_plan_from_goal_parsing_fails_wrong_type",
            "test_plan_from_goal_parsing_fails_bad_item",
            "test_refine_plan_success",
            "test_refine_plan_render_fails",
            "test_refine_plan_llm_fails",
            "test_refine_plan_parsing_fails"
        ],
        "classes": {},
        "routes": [],
        "complexity": 12
    },
    "agents\\dreamforge\\tests\\agents\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "agents\\dreamforge\\tests\\agents\\test_workflow_agent.py": {
        "language": ".py",
        "functions": [
            "_setup_and_cleanup",
            "workflow_agent_instance",
            "sample_workflow_dict",
            "test_system_health",
            "test_generate_workflow_success",
            "test_generate_workflow_llm_fails",
            "test_generate_workflow_parsing_fails",
            "test_generate_workflow_save_fails",
            "test_execute_workflow_success",
            "test_execute_workflow_step_fails",
            "test_list_workflows_success",
            "test_list_workflows_empty",
            "test_list_workflows_dir_not_found"
        ],
        "classes": {
            "TestWorkflowGeneration": {
                "methods": [
                    "test_generate_workflow_success",
                    "test_generate_workflow_llm_fails",
                    "test_generate_workflow_parsing_fails",
                    "test_generate_workflow_save_fails"
                ],
                "docstring": "Tests for workflow generation functionality.",
                "base_classes": []
            },
            "TestWorkflowExecution": {
                "methods": [
                    "test_execute_workflow_success",
                    "test_execute_workflow_step_fails"
                ],
                "docstring": "Tests for workflow execution functionality.",
                "base_classes": []
            },
            "TestWorkflowManagement": {
                "methods": [
                    "test_list_workflows_success",
                    "test_list_workflows_empty",
                    "test_list_workflows_dir_not_found"
                ],
                "docstring": "Tests for workflow management functionality.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 22
    },
    "agents\\dreamforge\\tests\\core\\test_agent_bus.py": {
        "language": ".py",
        "functions": [
            "error_logger"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "agents\\dreamforge\\tests\\core\\test_cursor_dispatcher.py": {
        "language": ".py",
        "functions": [
            "mock_agent_bus",
            "dispatcher",
            "test_execute_cursor_task_generate_code",
            "test_execute_cursor_task_edit_file",
            "test_execute_cursor_task_failure"
        ],
        "classes": {},
        "routes": [],
        "complexity": 5
    },
    "agents\\dreamforge\\tests\\core\\test_cursor_listener.py": {
        "language": ".py",
        "functions": [
            "cursor_listener",
            "mock_message_queue"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "agents\\dreamforge\\tests\\core\\test_feedback_consumer.py": {
        "language": ".py",
        "functions": [
            "memory_manager",
            "feedback_consumer"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "agents\\dreamforge\\tests\\core\\test_llm_parser.py": {
        "language": ".py",
        "functions": [
            "sample_json_response",
            "sample_code_response",
            "sample_list_response",
            "test_setup",
            "test_with_backticks",
            "test_without_language_tag",
            "test_with_curly_braces",
            "test_invalid_json",
            "test_no_json",
            "test_with_language",
            "test_any_language",
            "test_no_code",
            "test_multiple_blocks",
            "test_bullet_points",
            "test_numbered_list",
            "test_json_array",
            "test_no_list",
            "test_invalid_json_array",
            "demonstrate_llm_parsing_with_kickoff"
        ],
        "classes": {
            "TestJSONExtraction": {
                "methods": [
                    "test_with_backticks",
                    "test_without_language_tag",
                    "test_with_curly_braces",
                    "test_invalid_json",
                    "test_no_json"
                ],
                "docstring": "Tests for JSON extraction functionality.",
                "base_classes": []
            },
            "TestCodeExtraction": {
                "methods": [
                    "test_with_language",
                    "test_any_language",
                    "test_no_code",
                    "test_multiple_blocks"
                ],
                "docstring": "Tests for code extraction functionality.",
                "base_classes": []
            },
            "TestListExtraction": {
                "methods": [
                    "test_bullet_points",
                    "test_numbered_list",
                    "test_json_array",
                    "test_no_list",
                    "test_invalid_json_array"
                ],
                "docstring": "Tests for list extraction functionality.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 33
    },
    "agents\\dreamforge\\tests\\core\\test_prompt_staging_service.py": {
        "language": ".py",
        "functions": [
            "mock_template_engine",
            "mock_config",
            "test_render_prompt_success",
            "test_render_prompt_failure",
            "test_stage_prompt_for_cursor_success",
            "test_stage_prompt_for_cursor_render_failure",
            "test_write_to_cursor_input_success",
            "test_write_to_cursor_input_failure",
            "test_read_from_cursor_output_success",
            "test_read_from_cursor_output_file_not_exists",
            "test_read_from_cursor_output_empty_file",
            "test_read_from_cursor_output_invalid_json"
        ],
        "classes": {},
        "routes": [],
        "complexity": 12
    },
    "agents\\dreamforge\\tests\\core\\test_template_engine.py": {
        "language": ".py",
        "functions": [
            "template_engine",
            "test_template_engine_initialization",
            "test_render_valid_template",
            "test_render_template_with_filters",
            "test_render_template_with_includes",
            "test_render_template_with_loops",
            "test_render_template_with_conditionals",
            "test_render_missing_template",
            "test_render_invalid_template_syntax",
            "test_render_with_undefined_variable",
            "test_render_with_custom_undefined_behavior",
            "test_render_with_nested_context",
            "test_template_cache",
            "mock_open_wrapper"
        ],
        "classes": {},
        "routes": [],
        "complexity": 14
    },
    "agents\\dreamforge\\tests\\core\\test_workflow_models.py": {
        "language": ".py",
        "functions": [
            "test_workflow_step_initialization",
            "test_workflow_step_lifecycle",
            "test_workflow_step_serialization",
            "test_workflow_definition_initialization",
            "test_workflow_definition_step_management",
            "test_workflow_definition_status_updates",
            "test_workflow_definition_serialization"
        ],
        "classes": {},
        "routes": [],
        "complexity": 7
    },
    "agents\\dreamforge\\tests\\core\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "agents\\dreamforge\\tests\\core\\coordination\\test_base_agent.py": {
        "language": ".py",
        "functions": [
            "mock_agent_bus",
            "test_agent",
            "__init__"
        ],
        "classes": {
            "TestAgent": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Test agent implementation.",
                "base_classes": [
                    "BaseAgent"
                ]
            }
        },
        "routes": [],
        "complexity": 4
    },
    "agents\\dreamforge\\tests\\core\\utils\\llm_test_utils.py": {
        "language": ".py",
        "functions": [
            "create_llm_test_chain",
            "patch_llm_chain",
            "with_json",
            "with_code",
            "with_list",
            "with_error",
            "__init__",
            "setup_response",
            "verify_call",
            "verify_not_called",
            "decorator"
        ],
        "classes": {
            "LLMTestResponse": {
                "methods": [
                    "with_json",
                    "with_code",
                    "with_list",
                    "with_error"
                ],
                "docstring": "Test response formats for LLM outputs.",
                "base_classes": []
            },
            "LLMChainMock": {
                "methods": [
                    "__init__",
                    "setup_response",
                    "verify_call",
                    "verify_not_called"
                ],
                "docstring": "Mock for LLM chain testing.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 19
    },
    "agents\\dreamforge\\tests\\core\\utils\\test_agent_utils.py": {
        "language": ".py",
        "functions": [
            "test_log_task_performance",
            "test_log_task_performance_error_handling",
            "test_log_task_performance_with_missing_fields",
            "__init__"
        ],
        "classes": {
            "TestClass": {
                "methods": [
                    "__init__"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 5
    },
    "agents\\dreamforge\\tests\\core\\utils\\test_data.py": {
        "language": ".py",
        "functions": [
            "create_test_response",
            "validate_json_response",
            "validate_code_response",
            "validate_list_response"
        ],
        "classes": {},
        "routes": [],
        "complexity": 4
    },
    "agents\\dreamforge\\tests\\core\\utils\\test_utils.py": {
        "language": ".py",
        "functions": [
            "setup_test_imports",
            "init_test_suite",
            "validate_agent_files",
            "cleanup_stale_test_files",
            "check_system_health",
            "mock_agent_bus",
            "temp_workspace",
            "cleanup_test_env",
            "run_system_validation"
        ],
        "classes": {},
        "routes": [],
        "complexity": 9
    },
    "agents\\integrations\\chatgpt_commander.py": {
        "language": ".py",
        "functions": [
            "save_log",
            "process_single_task",
            "run_chatgpt_commander_agent_loop",
            "log_event"
        ],
        "classes": {},
        "routes": [],
        "complexity": 4
    },
    "agents\\meta\\architects_edge.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "__init__"
        ],
        "classes": {
            "ArchitectsEdgeAgent": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Interprets high-level directives and dispatches tasks to specialized agents.\nUses BaseAgent for core lifecycle and bus interaction.",
                "base_classes": [
                    "BaseAgent"
                ]
            },
            "MockAgentBus": {
                "methods": [
                    "__init__"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 4
    },
    "agents\\meta_architect\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "agents\\recovery\\stall_agent.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "perform_stall_check",
            "_is_system_busy",
            "check_for_stall",
            "log_stall_event",
            "dispatch_recovery_task",
            "attempt_recovery",
            "read_tasks",
            "produce_project_context",
            "log_event"
        ],
        "classes": {
            "StallRecoveryAgent": {
                "methods": [
                    "__init__",
                    "perform_stall_check",
                    "_is_system_busy",
                    "check_for_stall",
                    "log_stall_event",
                    "dispatch_recovery_task",
                    "attempt_recovery"
                ],
                "docstring": "Detects system stalls by monitoring logs and dispatches recovery tasks via AgentBus.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 17
    },
    "agents\\recovery\\supervisor_oria_agent.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "handle_heartbeat",
            "handle_task_failure",
            "_monitor_loop",
            "shutdown"
        ],
        "classes": {
            "SupervisorOriaAgent": {
                "methods": [
                    "__init__",
                    "handle_heartbeat",
                    "handle_task_failure",
                    "_monitor_loop",
                    "shutdown"
                ],
                "docstring": "Agent to supervise other agents and trigger recovery when they become idle.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 10
    },
    "agents\\recovery\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "agents\\reflection\\agent.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_load_logs",
            "analyze_logs",
            "generate_insights",
            "suggest_improvements",
            "run_reflection_cycle",
            "log_event"
        ],
        "classes": {
            "ReflectionAgent": {
                "methods": [
                    "__init__",
                    "_load_logs",
                    "analyze_logs",
                    "generate_insights",
                    "suggest_improvements",
                    "run_reflection_cycle"
                ],
                "docstring": "Agent responsible for analyzing system logs and generating insights via AgentBus dispatch.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 13
    },
    "agents\\reflection_agent\\reflection_agent.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_decide_response",
            "__init__"
        ],
        "classes": {
            "ReflectionAgent": {
                "methods": [
                    "__init__",
                    "_decide_response"
                ],
                "docstring": "Agent responsible for reflecting on and responding to governance alerts.\nUses BaseAgent for core lifecycle, bus interaction, and logging.",
                "base_classes": [
                    "BaseAgent"
                ]
            },
            "MockAgentBus": {
                "methods": [
                    "__init__"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 6
    },
    "agents\\social\\agent_monitor_agent.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_log_event",
            "handle_event",
            "shutdown"
        ],
        "classes": {
            "AgentMonitorAgent": {
                "methods": [
                    "__init__",
                    "_log_event",
                    "handle_event",
                    "shutdown"
                ],
                "docstring": "Listens to the AgentBus and logs significant events based on EventType.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 8
    },
    "agents\\social\\cursor_control_agent.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "handle_message",
            "shutdown"
        ],
        "classes": {
            "CursorControlAgent": {
                "methods": [
                    "__init__",
                    "handle_message",
                    "shutdown"
                ],
                "docstring": "Agent that controls Cursor UI interactions based on bus messages.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 6
    },
    "agents\\social\\meredith_resonance_scanner.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "start",
            "stop",
            "handle_event",
            "_perform_scan"
        ],
        "classes": {
            "MeredithResonanceScanner": {
                "methods": [
                    "__init__",
                    "start",
                    "stop",
                    "handle_event",
                    "_perform_scan"
                ],
                "docstring": "Agent responsible for scanning social media platforms for mentions\nrelated to 'Meredith' and analyzing their resonance or sentiment.\n(Refactored to use Event protocol)",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 10
    },
    "agents\\social\\prompt_feedback_loop_agent.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_check_and_increment_repair_attempts",
            "_create_diagnostic_task_data",
            "_dispatch_diagnostic_task",
            "_log_injection_event",
            "handle_event",
            "shutdown"
        ],
        "classes": {
            "PromptFeedbackLoopAgent": {
                "methods": [
                    "__init__",
                    "_check_and_increment_repair_attempts",
                    "_create_diagnostic_task_data",
                    "_dispatch_diagnostic_task",
                    "_log_injection_event",
                    "handle_event",
                    "shutdown"
                ],
                "docstring": "Monitors for TASK_FAILED events via AgentBus and injects diagnostic tasks.",
                "base_classes": []
            },
            "TaskStatus": {
                "methods": [],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 14
    },
    "agents\\social\\social_media_agent.py": {
        "language": ".py",
        "functions": [
            "generate_context_from_governance",
            "render_template",
            "log_event",
            "export_prompt_for_cursor",
            "__init__",
            "_load_config",
            "_initialize_driver",
            "_get_or_load_strategy",
            "_execute_strategy_action",
            "login",
            "_generate_post_content",
            "post",
            "check_login_status",
            "scrape_mentions",
            "scrape_trends",
            "scrape_community",
            "_dispatch_response_event",
            "handle_bus_event",
            "_handle_post_command",
            "_handle_get_analytics_command",
            "_handle_login_command",
            "_handle_check_login_status_command",
            "_handle_agent_status_command",
            "_handle_request_cursor_action_command",
            "_handle_process_feedback_item_command",
            "shutdown",
            "deep_merge_dicts"
        ],
        "classes": {
            "SocialMediaAgent": {
                "methods": [
                    "__init__",
                    "_load_config",
                    "_initialize_driver",
                    "_get_or_load_strategy",
                    "_execute_strategy_action",
                    "login",
                    "_generate_post_content",
                    "post",
                    "check_login_status",
                    "scrape_mentions",
                    "scrape_trends",
                    "scrape_community",
                    "_dispatch_response_event",
                    "handle_bus_event",
                    "_handle_post_command",
                    "_handle_get_analytics_command",
                    "_handle_login_command",
                    "_handle_check_login_status_command",
                    "_handle_agent_status_command",
                    "_handle_request_cursor_action_command",
                    "_handle_process_feedback_item_command",
                    "shutdown"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 49
    },
    "agents\\social\\task_executor_agent.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_normalize_status",
            "handle_event",
            "_dispatch_task",
            "_process_task_update",
            "_run_loop",
            "start",
            "stop",
            "__init__",
            "update_task_status"
        ],
        "classes": {
            "TaskExecutorAgent": {
                "methods": [
                    "__init__",
                    "_normalize_status",
                    "handle_event",
                    "_dispatch_task",
                    "_process_task_update",
                    "_run_loop",
                    "start",
                    "stop"
                ],
                "docstring": "Receives TASK_QUEUED events and orchestrates task execution via other agents.",
                "base_classes": []
            },
            "TaskStatus": {
                "methods": [],
                "docstring": null,
                "base_classes": []
            },
            "TaskStatusUpdater": {
                "methods": [
                    "__init__",
                    "update_task_status"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 20
    },
    "agents\\social\\strategies\\facebook_strategy.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "generate_content",
            "dispatch_content",
            "post_update",
            "post_comment",
            "_extract_post_id"
        ],
        "classes": {
            "FacebookStrategy": {
                "methods": [
                    "__init__",
                    "generate_content",
                    "dispatch_content",
                    "post_update",
                    "post_comment",
                    "_extract_post_id"
                ],
                "docstring": null,
                "base_classes": [
                    "SocialStrategy"
                ]
            }
        },
        "routes": [],
        "complexity": 12
    },
    "agents\\social\\task_injector.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_validate_and_prepare_task",
            "run_cycle",
            "_run_loop",
            "start",
            "stop",
            "shutdown",
            "register_agent",
            "send_message"
        ],
        "classes": {
            "TaskInjector": {
                "methods": [
                    "__init__",
                    "_validate_and_prepare_task",
                    "run_cycle",
                    "_run_loop",
                    "start",
                    "stop",
                    "shutdown"
                ],
                "docstring": "Watches an input file and injects tasks via AgentBus messages.",
                "base_classes": []
            },
            "TaskStatus": {
                "methods": [],
                "docstring": null,
                "base_classes": []
            },
            "DummyBusForInjector": {
                "methods": [
                    "register_agent",
                    "send_message"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 18
    },
    "agents\\social\\strategies\\instagram_strategy.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "generate_content",
            "dispatch_content",
            "_generate_image",
            "post_photo",
            "post_comment"
        ],
        "classes": {
            "InstagramStrategy": {
                "methods": [
                    "__init__",
                    "generate_content",
                    "dispatch_content",
                    "_generate_image",
                    "post_photo",
                    "post_comment"
                ],
                "docstring": null,
                "base_classes": [
                    "SocialStrategy"
                ]
            }
        },
        "routes": [],
        "complexity": 12
    },
    "agents\\social\\strategies\\linkedin_strategy.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "generate_content",
            "dispatch_content",
            "post_update",
            "post_comment"
        ],
        "classes": {
            "LinkedInStrategy": {
                "methods": [
                    "__init__",
                    "generate_content",
                    "dispatch_content",
                    "post_update",
                    "post_comment"
                ],
                "docstring": null,
                "base_classes": [
                    "SocialStrategy"
                ]
            }
        },
        "routes": [],
        "complexity": 10
    },
    "agents\\social\\strategies\\twitter_strategy.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "generate_content",
            "dispatch_content",
            "post_update",
            "post_comment"
        ],
        "classes": {
            "TwitterStrategy": {
                "methods": [
                    "__init__",
                    "generate_content",
                    "dispatch_content",
                    "post_update",
                    "post_comment"
                ],
                "docstring": null,
                "base_classes": [
                    "SocialStrategy"
                ]
            }
        },
        "routes": [],
        "complexity": 10
    },
    "agents\\social\\strategies\\__init__.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "generate_content",
            "dispatch_content"
        ],
        "classes": {
            "SocialStrategy": {
                "methods": [
                    "__init__",
                    "generate_content",
                    "dispatch_content"
                ],
                "docstring": "Base class for all social media platform strategies.",
                "base_classes": [
                    "ABC"
                ]
            }
        },
        "routes": [],
        "complexity": 6
    },
    "agents\\tests\\test_architects_edge_agent.py": {
        "language": ".py",
        "functions": [
            "mock_agent_bus_instance",
            "architects_edge_agent_instance",
            "test_interpret_directive_success",
            "test_interpret_directive_render_fails",
            "test_interpret_directive_llm_fails",
            "test_interpret_directive_parsing_fails_no_json",
            "test_interpret_directive_parsing_fails_bad_json",
            "test_interpret_directive_parsing_fails_missing_keys",
            "test_dispatch_to_dreamforge_success",
            "test_dispatch_to_dreamforge_no_params",
            "test_dispatch_to_dreamforge_invalid_action_none",
            "test_dispatch_to_dreamforge_invalid_action_dict",
            "test_dispatch_to_dreamforge_invalid_params"
        ],
        "classes": {},
        "routes": [],
        "complexity": 13
    },
    "agents\\tests\\test_calendar_agent.py": {
        "language": ".py",
        "functions": [
            "sample_tasks_input",
            "mock_llm_schedule_response",
            "mock_llm_slots_response",
            "calendar_agent_instance",
            "test_schedule_tasks_success",
            "test_schedule_tasks_missing_in_response",
            "test_schedule_tasks_render_fails",
            "test_schedule_tasks_llm_fails",
            "test_schedule_tasks_parsing_fails",
            "test_find_available_slots_success",
            "test_find_available_slots_render_fails",
            "test_find_available_slots_llm_fails",
            "test_find_available_slots_parsing_fails",
            "test_find_available_slots_complex_constraints"
        ],
        "classes": {},
        "routes": [],
        "complexity": 14
    },
    "agents\\tests\\tests\\test_reflection_agent.py": {
        "language": ".py",
        "functions": [
            "agent",
            "test_message_factory",
            "create_message",
            "setUp",
            "tearDown",
            "test_analyze_logs_with_date_range",
            "test_analyze_logs_invalid_date_range",
            "test_analyze_logs_corrupted_data"
        ],
        "classes": {
            "TestReflectionAgent": {
                "methods": [
                    "setUp",
                    "tearDown",
                    "test_analyze_logs_with_date_range",
                    "test_analyze_logs_invalid_date_range",
                    "test_analyze_logs_corrupted_data"
                ],
                "docstring": "Unit tests for ReflectionAgent.",
                "base_classes": [
                    "unittest.TestCase"
                ]
            },
            "TestReflectionAgentAsync": {
                "methods": [],
                "docstring": "Async tests for ReflectionAgent.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 13
    },
    "agents\\tests\\tests\\test_workflow_agent.py": {
        "language": ".py",
        "functions": [
            "setUp",
            "tearDown",
            "test_create_workflow_success",
            "test_create_workflow_duplicate",
            "test_execute_workflow_step_failure",
            "test_workflow_validation",
            "test_workflow_persistence_failure",
            "test_concurrent_workflow_execution",
            "test_workflow_timeout",
            "test_create_workflow_invalid_definition",
            "test_execute_workflow_success",
            "test_execute_workflow_not_found",
            "test_list_workflows_empty",
            "test_list_workflows_with_items",
            "test_delete_workflow_success",
            "test_delete_workflow_not_found",
            "test_workflow_persistence",
            "test_workflow_step_retry_mechanism",
            "test_workflow_conditional_execution",
            "test_workflow_parallel_execution",
            "test_workflow_resource_cleanup",
            "test_workflow_version_compatibility",
            "test_workflow_dynamic_step_generation",
            "test_workflow_rollback_mechanism",
            "test_workflow_state_persistence",
            "test_workflow_metrics_collection",
            "test_workflow_dependency_resolution",
            "mock_execute",
            "mock_execute_step",
            "mock_execute_step"
        ],
        "classes": {
            "TestWorkflowAgent": {
                "methods": [
                    "setUp",
                    "tearDown",
                    "test_create_workflow_success",
                    "test_create_workflow_duplicate",
                    "test_execute_workflow_step_failure",
                    "test_workflow_validation",
                    "test_workflow_persistence_failure",
                    "test_concurrent_workflow_execution",
                    "test_workflow_timeout",
                    "test_create_workflow_invalid_definition",
                    "test_execute_workflow_success",
                    "test_execute_workflow_not_found",
                    "test_list_workflows_empty",
                    "test_list_workflows_with_items",
                    "test_delete_workflow_success",
                    "test_delete_workflow_not_found",
                    "test_workflow_persistence",
                    "test_workflow_step_retry_mechanism",
                    "test_workflow_conditional_execution",
                    "test_workflow_parallel_execution",
                    "test_workflow_resource_cleanup",
                    "test_workflow_version_compatibility",
                    "test_workflow_dynamic_step_generation",
                    "test_workflow_rollback_mechanism",
                    "test_workflow_state_persistence",
                    "test_workflow_metrics_collection",
                    "test_workflow_dependency_resolution"
                ],
                "docstring": null,
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 57
    },
    "apps\\browser\\main.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "navigate_to_url"
        ],
        "classes": {
            "BrowserMainWindow": {
                "methods": [
                    "__init__",
                    "navigate_to_url"
                ],
                "docstring": null,
                "base_classes": [
                    "QMainWindow"
                ]
            }
        },
        "routes": [],
        "complexity": 4
    },
    "core\\agent_utils.py": {
        "language": ".py",
        "functions": [
            "_load_coords",
            "_save_coords",
            "save_agent_spot",
            "get_agent_spot",
            "click_agent_spot"
        ],
        "classes": {},
        "routes": [],
        "complexity": 5
    },
    "core\\config.py": {
        "language": ".py",
        "functions": [
            "setup_logging",
            "resolve_log_dir",
            "resolve_relative_path",
            "resolve_target_files",
            "resolve_output_path",
            "load",
            "_ensure_dirs_exist"
        ],
        "classes": {
            "LoggingConfig": {
                "methods": [
                    "resolve_log_dir"
                ],
                "docstring": null,
                "base_classes": [
                    "BaseModel"
                ]
            },
            "PathsConfig": {
                "methods": [
                    "resolve_relative_path"
                ],
                "docstring": null,
                "base_classes": [
                    "BaseModel"
                ]
            },
            "TaskDetailsConfig": {
                "methods": [
                    "resolve_target_files",
                    "resolve_output_path"
                ],
                "docstring": null,
                "base_classes": [
                    "BaseModel"
                ]
            },
            "AppConfig": {
                "methods": [
                    "load",
                    "_ensure_dirs_exist"
                ],
                "docstring": null,
                "base_classes": [
                    "BaseModel"
                ]
            },
            "ConfigError": {
                "methods": [],
                "docstring": "Exception raised for errors in the configuration process.",
                "base_classes": [
                    "Exception"
                ]
            }
        },
        "routes": [],
        "complexity": 13
    },
    "core\\FileManager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "save",
            "load"
        ],
        "classes": {
            "FileManager": {
                "methods": [
                    "__init__",
                    "save",
                    "load"
                ],
                "docstring": "Stub FileManager to satisfy imports. Implement actual file operations as needed.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 6
    },
    "core\\login_utils.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "core\\thea_orchestrator.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "dispatch_directive",
            "extract_json_from_response",
            "run",
            "run_loop",
            "list_history"
        ],
        "classes": {
            "TheaOrchestrator": {
                "methods": [
                    "__init__",
                    "dispatch_directive",
                    "extract_json_from_response",
                    "run",
                    "run_loop",
                    "list_history"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 12
    },
    "core\\voice_engine.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "speak",
            "_inject_persona_context",
            "_get_tone_directives",
            "__init__",
            "ask"
        ],
        "classes": {
            "VictorVoiceEngine": {
                "methods": [
                    "__init__",
                    "speak",
                    "_inject_persona_context",
                    "_get_tone_directives"
                ],
                "docstring": "Unified voice engine to generate persona-aligned text.",
                "base_classes": []
            },
            "AIChatAgent": {
                "methods": [
                    "__init__",
                    "ask"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 12
    },
    "core\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "core\\agents\\task_executor_agent.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_load_tasks",
            "_check_dependencies",
            "handle_response",
            "run_cycle"
        ],
        "classes": {
            "TaskStatus": {
                "methods": [],
                "docstring": null,
                "base_classes": []
            },
            "TaskExecutorAgent": {
                "methods": [
                    "__init__",
                    "_load_tasks",
                    "_check_dependencies",
                    "handle_response",
                    "run_cycle"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 10
    },
    "core\\agents\\tool_executor_agent.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "execute_plan"
        ],
        "classes": {
            "ToolExecutionAgent": {
                "methods": [
                    "__init__",
                    "execute_plan"
                ],
                "docstring": "Executes a plan (list of tool call steps) sequentially.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 4
    },
    "core\\agents\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "core\\chat_engine\\chat_cycle_controller.py": {
        "language": ".py",
        "functions": [
            "sanitize_filename",
            "__init__",
            "_default_output_callback",
            "append_output",
            "start",
            "process_chat",
            "run_single_chat",
            "_save_prompt_response",
            "_save_run_summary",
            "shutdown",
            "__init__",
            "get"
        ],
        "classes": {
            "ChatCycleController": {
                "methods": [
                    "__init__",
                    "_default_output_callback",
                    "append_output",
                    "start",
                    "process_chat",
                    "run_single_chat",
                    "_save_prompt_response",
                    "_save_run_summary",
                    "shutdown"
                ],
                "docstring": "Master orchestrator for chat scraping, prompt cycles,\nmemory updates, and Discord dispatching.",
                "base_classes": []
            },
            "Config": {
                "methods": [
                    "__init__",
                    "get"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 23
    },
    "core\\chat_engine\\chat_scraper_service.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "get_all_chats",
            "get_filtered_chats",
            "validate_login",
            "manual_login_flow"
        ],
        "classes": {
            "ChatScraperService": {
                "methods": [
                    "__init__",
                    "get_all_chats",
                    "get_filtered_chats",
                    "validate_login",
                    "manual_login_flow"
                ],
                "docstring": "ChatScraperService retrieves available chat titles and links from the chat UI.\nIt handles exclusions and filtering for downstream execution cycles.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 10
    },
    "core\\chat_engine\\discord_dispatcher.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_setup_events",
            "send_message",
            "dispatch_memory_update",
            "dispatch_dreamscape_episode",
            "dispatch_feedback_loop",
            "run_bot",
            "shutdown"
        ],
        "classes": {
            "DiscordDispatcher": {
                "methods": [
                    "__init__",
                    "_setup_events",
                    "send_message",
                    "dispatch_memory_update",
                    "dispatch_dreamscape_episode",
                    "dispatch_feedback_loop",
                    "run_bot",
                    "shutdown"
                ],
                "docstring": "DiscordDispatcher - Manages communication to a Discord server.\nSends updates on system events, memory updates, and AI output.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 16
    },
    "core\\chat_engine\\feedback_engine.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_load_memory",
            "_save_memory",
            "save_memory_async",
            "parse_and_update_memory",
            "apply_memory_updates",
            "log_feedback",
            "export_feedback_log",
            "analyze_feedback",
            "review_memory",
            "feedback_loop",
            "save_context_memory_async",
            "save_context_db",
            "review_context_memory"
        ],
        "classes": {
            "FeedbackEngine": {
                "methods": [
                    "__init__",
                    "_load_memory",
                    "_save_memory",
                    "save_memory_async",
                    "parse_and_update_memory",
                    "apply_memory_updates",
                    "log_feedback",
                    "export_feedback_log",
                    "analyze_feedback",
                    "review_memory",
                    "feedback_loop",
                    "save_context_memory_async",
                    "save_context_db",
                    "review_context_memory"
                ],
                "docstring": "FeedbackEngine - Parses AI responses, updates persistent memory,\ntracks reinforcement loops, and evolves Victor.OS intelligence.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 28
    },
    "core\\chat_engine\\driver_manager.py": {
        "language": ".py",
        "functions": [
            "setup_logger",
            "example_main",
            "get_instance",
            "__init__",
            "__enter__",
            "__exit__",
            "_get_cached_driver_path",
            "_download_driver_if_needed",
            "_is_session_expired",
            "_renew_driver_session",
            "get_session_info",
            "set_session_timeout",
            "_create_chrome_options",
            "get_driver",
            "_quit_driver_instance",
            "release_driver",
            "save_cookies",
            "load_cookies",
            "clear_cookies",
            "is_logged_in",
            "execute_with_retry",
            "scroll_into_view",
            "scroll_page",
            "scroll_to_bottom_smoothly",
            "update_options",
            "shutdown",
            "_force_kill_browsers",
            "__del__"
        ],
        "classes": {
            "DriverManager": {
                "methods": [
                    "get_instance",
                    "__init__",
                    "__enter__",
                    "__exit__",
                    "_get_cached_driver_path",
                    "_download_driver_if_needed",
                    "_is_session_expired",
                    "_renew_driver_session",
                    "get_session_info",
                    "set_session_timeout",
                    "_create_chrome_options",
                    "get_driver",
                    "_quit_driver_instance",
                    "release_driver",
                    "save_cookies",
                    "load_cookies",
                    "clear_cookies",
                    "is_logged_in",
                    "execute_with_retry",
                    "scroll_into_view",
                    "scroll_page",
                    "scroll_to_bottom_smoothly",
                    "update_options",
                    "shutdown",
                    "_force_kill_browsers",
                    "__del__"
                ],
                "docstring": "Unified DriverManager for Selenium-based browser automation.\n\nFeatures:\n  - Singleton pattern to ensure a single active driver instance per configuration hash\n  - Session management with automatic expiration (default 1 hour) and renewal\n  - Persistent profile support (or temporary profiles in headless mode)\n  - Cookie saving/loading for session persistence\n  - Support for headless mode, mobile emulation, and optional undetected mode\n  - Auto-downloading and caching of the ChromeDriver executable\n  - Robust retry mechanisms for resilient browser operations\n  - Utilities for waiting, scrolling, and option updates",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 54
    },
    "core\\chat_engine\\feedback_engine_v2.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "analyze_failures",
            "save_analysis"
        ],
        "classes": {
            "FeedbackEngineV2": {
                "methods": [
                    "__init__",
                    "analyze_failures",
                    "save_analysis"
                ],
                "docstring": "FeedbackEngineV2 analyzes failed prompts using an LLM and provides root cause analysis\nand recommended fixes based on archived failure data.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 6
    },
    "core\\chat_engine\\gui_event_handler.py": {
        "language": ".py",
        "functions": [
            "run_gui",
            "__init__",
            "init_ui",
            "toggle_headless",
            "toggle_reverse",
            "toggle_archive",
            "start_dispatcher",
            "stop_dispatcher",
            "log",
            "__init__",
            "exec_",
            "__init__",
            "__init__",
            "__init__",
            "__init__",
            "__init__"
        ],
        "classes": {
            "GUIEventHandler": {
                "methods": [
                    "__init__",
                    "init_ui",
                    "toggle_headless",
                    "toggle_reverse",
                    "toggle_archive",
                    "start_dispatcher",
                    "stop_dispatcher",
                    "log"
                ],
                "docstring": "GUI Event Handler for ChatMate Agent Control Panel\n- Control Config Flags (Headless, Reverse Order, Archive)\n- Start/Stop the Agent Dispatcher\n- Display logs or status updates",
                "base_classes": [
                    "QMainWindow"
                ]
            },
            "QtWidgets": {
                "methods": [],
                "docstring": null,
                "base_classes": []
            },
            "QtCore": {
                "methods": [],
                "docstring": null,
                "base_classes": []
            },
            "QApplication": {
                "methods": [
                    "__init__",
                    "exec_"
                ],
                "docstring": null,
                "base_classes": []
            },
            "QMainWindow": {
                "methods": [
                    "__init__"
                ],
                "docstring": null,
                "base_classes": []
            },
            "QPushButton": {
                "methods": [
                    "__init__"
                ],
                "docstring": null,
                "base_classes": []
            },
            "QLabel": {
                "methods": [
                    "__init__"
                ],
                "docstring": null,
                "base_classes": []
            },
            "QCheckBox": {
                "methods": [
                    "__init__"
                ],
                "docstring": null,
                "base_classes": []
            },
            "QTextEdit": {
                "methods": [
                    "__init__"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 31
    },
    "core\\chat_engine\\prompt_execution_service.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "get_prompt",
            "execute_prompt_cycle",
            "execute_prompts_single_chat",
            "execute_prompts_concurrently",
            "_execute_single_prompt_thread",
            "_determine_wait_time",
            "_post_process_jawbone_response",
            "_send_prompt",
            "_fetch_response"
        ],
        "classes": {
            "PromptExecutionService": {
                "methods": [
                    "__init__",
                    "get_prompt",
                    "execute_prompt_cycle",
                    "execute_prompts_single_chat",
                    "execute_prompts_concurrently",
                    "_execute_single_prompt_thread",
                    "_determine_wait_time",
                    "_post_process_jawbone_response",
                    "_send_prompt",
                    "_fetch_response"
                ],
                "docstring": "PromptExecutionService handles sending prompts and retrieving responses.\nIt manages execution cycles for single chats or cycles across multiple prompts.\nNow supports model switching, feedback integration, and parallel execution.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 20
    },
    "core\\chat_engine\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "core\\coordination\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "core\\coordination\\dispatchers\\base_dispatcher.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "add_task",
            "run_dispatcher_loop",
            "stop",
            "get_status"
        ],
        "classes": {
            "BaseDispatcher": {
                "methods": [
                    "__init__",
                    "add_task",
                    "run_dispatcher_loop",
                    "stop",
                    "get_status"
                ],
                "docstring": "Base dispatcher that manages a task queue and processes tasks.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 10
    },
    "core\\coordination\\dispatchers\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "core\\gui\\main_window.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "add_tab",
            "get_tab_by_name",
            "__init__",
            "_save_state",
            "_load_state",
            "manual_save_state",
            "auto_save_state",
            "__init__",
            "warning"
        ],
        "classes": {
            "TaskManager": {
                "methods": [],
                "docstring": null,
                "base_classes": []
            },
            "FeedbackEngine": {
                "methods": [],
                "docstring": null,
                "base_classes": []
            },
            "DreamOSTabManager": {
                "methods": [
                    "__init__",
                    "add_tab",
                    "get_tab_by_name"
                ],
                "docstring": null,
                "base_classes": []
            },
            "DreamOSMainWindow": {
                "methods": [
                    "__init__",
                    "_save_state",
                    "_load_state",
                    "manual_save_state",
                    "auto_save_state"
                ],
                "docstring": null,
                "base_classes": [
                    "QMainWindow"
                ]
            },
            "QMainWindow": {
                "methods": [
                    "__init__"
                ],
                "docstring": null,
                "base_classes": []
            },
            "QMessageBox": {
                "methods": [
                    "warning"
                ],
                "docstring": null,
                "base_classes": []
            },
            "QStatusBar": {
                "methods": [],
                "docstring": null,
                "base_classes": []
            },
            "QLabel": {
                "methods": [],
                "docstring": null,
                "base_classes": []
            },
            "QTimer": {
                "methods": [],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 20
    },
    "core\\gui\\tab_system_shutdown.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_handle_shutdown_error",
            "initiate_shutdown",
            "emit"
        ],
        "classes": {
            "TabSystemShutdownManager": {
                "methods": [
                    "__init__",
                    "_handle_shutdown_error",
                    "initiate_shutdown"
                ],
                "docstring": "Manager to handle shutdown sequence of GUI tabs and persist their state.",
                "base_classes": []
            },
            "Signal": {
                "methods": [
                    "emit"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 8
    },
    "core\\gui\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "core\\hooks\\chatgpt_responder.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "get_response",
            "respond_to_mailbox"
        ],
        "classes": {
            "ChatGPTResponder": {
                "methods": [
                    "__init__",
                    "get_response",
                    "respond_to_mailbox"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 6
    },
    "core\\hooks\\stats_logger.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "log_snapshot"
        ],
        "classes": {
            "StatsLoggingHook": {
                "methods": [
                    "__init__",
                    "log_snapshot"
                ],
                "docstring": "Logs periodic snapshots of TaskNexus stats to a JSON file.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 4
    },
    "core\\llm_bridge\\bridge_adapters\\another_fancy_adapter.py": {
        "language": ".py",
        "functions": [],
        "classes": {
            "AnotherFancyAdapter": {
                "methods": [],
                "docstring": "Placeholder for AnotherFancyAdapter.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 0
    },
    "core\\llm_bridge\\bridge_adapters\\base_adapter.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "name",
            "_validate_config",
            "get_config_value",
            "__init__",
            "__str__"
        ],
        "classes": {
            "BaseAdapter": {
                "methods": [
                    "__init__",
                    "name",
                    "_validate_config",
                    "get_config_value"
                ],
                "docstring": "Abstract Base Class for LLM Bridge Adapters.\n\nDefines the common interface required for interacting with different\nLLM services or models through a unified bridge.",
                "base_classes": [
                    "ABC"
                ]
            },
            "AdapterError": {
                "methods": [
                    "__init__",
                    "__str__"
                ],
                "docstring": "Custom exception for errors originating from an adapter.",
                "base_classes": [
                    "Exception"
                ]
            }
        },
        "routes": [],
        "complexity": 12
    },
    "core\\llm_bridge\\bridge_adapters\\fancy_adapter.py": {
        "language": ".py",
        "functions": [],
        "classes": {
            "FancyAdapter": {
                "methods": [],
                "docstring": "Placeholder for FancyAdapter.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 0
    },
    "core\\memory\\memory_manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_ensure_storage_exists",
            "load_memory",
            "save_memory",
            "save_fragment",
            "load_fragment",
            "delete_fragment",
            "list_fragment_ids"
        ],
        "classes": {
            "MemoryManager": {
                "methods": [
                    "__init__",
                    "_ensure_storage_exists",
                    "load_memory",
                    "save_memory",
                    "save_fragment",
                    "load_fragment",
                    "delete_fragment",
                    "list_fragment_ids"
                ],
                "docstring": "Handles loading and saving of dictionary-like fragments to a JSON file.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 16
    },
    "core\\memory\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "core\\monitoring\\prompt_execution_monitor.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "start_monitoring",
            "report_success",
            "report_failure",
            "_monitor_loop",
            "recover_and_requeue"
        ],
        "classes": {
            "PromptExecutionMonitor": {
                "methods": [
                    "__init__",
                    "start_monitoring",
                    "report_success",
                    "report_failure",
                    "_monitor_loop",
                    "recover_and_requeue"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 12
    },
    "core\\rendering\\template_engine.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "render"
        ],
        "classes": {
            "TemplateEngine": {
                "methods": [
                    "__init__",
                    "render"
                ],
                "docstring": "Wraps Jinja2 for rendering template strings.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 4
    },
    "core\\rendering\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "core\\services\\event_logger.py": {
        "language": ".py",
        "functions": [
            "log_structured_event"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "core\\services\\failed_prompt_archive.py": {
        "language": ".py",
        "functions": [
            "load_json_safe",
            "write_json_safe",
            "__init__",
            "log_failure",
            "get_failures",
            "get_by_prompt_id"
        ],
        "classes": {
            "FailedPromptArchiveService": {
                "methods": [
                    "__init__",
                    "log_failure",
                    "get_failures",
                    "get_by_prompt_id"
                ],
                "docstring": "Service to archive failed prompts with full metadata.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 10
    },
    "core\\services\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "core\\tools\\base.py": {
        "language": ".py",
        "functions": [
            "name",
            "description",
            "execute",
            "_log_execution"
        ],
        "classes": {
            "AgentTool": {
                "methods": [
                    "name",
                    "description",
                    "execute",
                    "_log_execution"
                ],
                "docstring": "Abstract base class for all tools usable by agents.",
                "base_classes": [
                    "ABC"
                ]
            }
        },
        "routes": [],
        "complexity": 8
    },
    "core\\tools\\registry.py": {
        "language": ".py",
        "functions": [
            "get_registry",
            "_populate_default_tools",
            "__init__",
            "register",
            "get_tool",
            "list_tools"
        ],
        "classes": {
            "ToolRegistry": {
                "methods": [
                    "__init__",
                    "register",
                    "get_tool",
                    "list_tools"
                ],
                "docstring": "Manages a collection of available AgentTools.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 10
    },
    "core\\tools\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "core\\tools\\functional\\context_planner_tool.py": {
        "language": ".py",
        "functions": [
            "name",
            "description",
            "_extract_targets",
            "execute",
            "_rule_copy_file",
            "_rule_extract_symbol",
            "_rule_refactor_symbol",
            "_rule_create_file",
            "_rule_migrate_update_generic_refactor",
            "_rule_read_analyze",
            "_rule_search",
            "_rule_fallback_log",
            "_generate_plan_narration",
            "_log_execution"
        ],
        "classes": {
            "ContextPlannerTool": {
                "methods": [
                    "name",
                    "description",
                    "_extract_targets",
                    "execute",
                    "_rule_copy_file",
                    "_rule_extract_symbol",
                    "_rule_refactor_symbol",
                    "_rule_create_file",
                    "_rule_migrate_update_generic_refactor",
                    "_rule_read_analyze",
                    "_rule_search",
                    "_rule_fallback_log",
                    "_generate_plan_narration",
                    "_log_execution"
                ],
                "docstring": "Generates a execution plan based on keywords and patterns in the task description.\nNOTE: This is a simplified rule-based planner, NOT an LLM-based planner.",
                "base_classes": [
                    "AgentTool"
                ]
            }
        },
        "routes": [],
        "complexity": 28
    },
    "core\\tools\\functional\\file_tools.py": {
        "language": ".py",
        "functions": [
            "name",
            "description",
            "execute",
            "name",
            "description",
            "execute"
        ],
        "classes": {
            "FileReadTool": {
                "methods": [
                    "name",
                    "description",
                    "execute"
                ],
                "docstring": "Reads the content of a specified file.",
                "base_classes": [
                    "AgentTool"
                ]
            },
            "FileWriteTool": {
                "methods": [
                    "name",
                    "description",
                    "execute"
                ],
                "docstring": "Writes content to a specified file, overwriting if it exists.",
                "base_classes": [
                    "AgentTool"
                ]
            },
            "SecurityException": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "Exception"
                ]
            }
        },
        "routes": [],
        "complexity": 12
    },
    "core\\tools\\functional\\utils_tools.py": {
        "language": ".py",
        "functions": [
            "name",
            "description",
            "execute"
        ],
        "classes": {
            "LogMessageTool": {
                "methods": [
                    "name",
                    "description",
                    "execute"
                ],
                "docstring": "A simple tool that logs a message using the standard logger.",
                "base_classes": [
                    "AgentTool"
                ]
            }
        },
        "routes": [],
        "complexity": 6
    },
    "core\\tools\\functional\\search_tools.py": {
        "language": ".py",
        "functions": [
            "name",
            "description",
            "_check_ripgrep_installed",
            "execute"
        ],
        "classes": {
            "GrepSearchTool": {
                "methods": [
                    "name",
                    "description",
                    "_check_ripgrep_installed",
                    "execute"
                ],
                "docstring": "Performs a search using Ripgrep (rg) command.",
                "base_classes": [
                    "AgentTool"
                ]
            }
        },
        "routes": [],
        "complexity": 8
    },
    "core\\tools\\functional\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "core\\utils\\json_io.py": {
        "language": ".py",
        "functions": [
            "write_json_safe"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "dreamforge\\main.py": {
        "language": ".py",
        "functions": [
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "dreamforge\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamforge\\services\\discord_service.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_register_events",
            "_register_commands",
            "load_config",
            "save_config",
            "run",
            "stop",
            "send_message",
            "send_file",
            "send_template",
            "get_status",
            "set_log_callback",
            "_log",
            "map_prompt_to_channel",
            "unmap_prompt_channel",
            "get_channel_for_prompt",
            "send_dreamscape_episode",
            "send_prompt_response",
            "update_status",
            "get_prompt_status",
            "run_bot"
        ],
        "classes": {
            "UnifiedDiscordService": {
                "methods": [
                    "__init__",
                    "_register_events",
                    "_register_commands",
                    "load_config",
                    "save_config",
                    "run",
                    "stop",
                    "send_message",
                    "send_file",
                    "send_template",
                    "get_status",
                    "set_log_callback",
                    "_log",
                    "map_prompt_to_channel",
                    "unmap_prompt_channel",
                    "get_channel_for_prompt",
                    "send_dreamscape_episode",
                    "send_prompt_response",
                    "update_status",
                    "get_prompt_status"
                ],
                "docstring": "Centralized Discord integration service that handles:\n- Bot lifecycle management\n- Message/file dispatch\n- Template rendering\n- Channel mapping\n- Status monitoring\n- Event notifications\n- Dreamscape episode management\n- Prompt response handling",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 41
    },
    "dreamforge\\services\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamforge\\tests\\conftest.py": {
        "language": ".py",
        "functions": [
            "mock_log_event",
            "mock_file_ops",
            "mock_web_driver",
            "mock_wait",
            "assert_event_structure",
            "test_data_dir",
            "snapshot_dir"
        ],
        "classes": {},
        "routes": [],
        "complexity": 7
    },
    "dreamforge\\tests\\agents\\test_calendar_agent.py": {
        "language": ".py",
        "functions": [
            "calendar_agent",
            "original_tasks",
            "assert_list_of_dicts_equal",
            "test_parse_schedule_partial",
            "test_parse_schedule_full_success",
            "test_parse_schedule_invalid_item",
            "test_parse_schedule_invalid_json",
            "test_parse_schedule_non_json",
            "test_parse_schedule_wrong_type",
            "test_parse_schedule_empty_response",
            "test_parse_schedule_empty_input_tasks"
        ],
        "classes": {},
        "routes": [],
        "complexity": 11
    },
    "dreamforge\\tests\\agents\\test_chatgpt_commander.py": {
        "language": ".py",
        "functions": [
            "mock_agent_bus",
            "commander",
            "test_send_generate_tests_task",
            "test_send_code_fix_task",
            "test_send_analysis_task",
            "test_wait_for_task_completion",
            "test_wait_for_task_timeout",
            "test_get_task_status",
            "test_cleanup_old_tasks"
        ],
        "classes": {},
        "routes": [],
        "complexity": 9
    },
    "dreamforge\\tests\\agents\\test_cursor_dispatcher.py": {
        "language": ".py",
        "functions": [
            "mock_agent_bus",
            "cursor_dispatcher",
            "test_execute_cursor_task_test_generation",
            "test_execute_cursor_task_code_fix",
            "test_execute_cursor_task_file_analysis",
            "test_dispatcher_loop_integration",
            "test_error_handling"
        ],
        "classes": {},
        "routes": [],
        "complexity": 7
    },
    "dreamforge\\tests\\agents\\test_planner_agent.py": {
        "language": ".py",
        "functions": [
            "planner_agent",
            "test_parse_valid_json_list",
            "test_parse_valid_json_in_markdown",
            "test_parse_valid_json_dict_wrapper",
            "test_parse_invalid_json",
            "test_parse_non_json_text",
            "test_parse_json_wrong_type",
            "test_parse_empty_string",
            "test_parse_none_input",
            "test_plan_from_goal_mocked_llm",
            "test_plan_from_goal_template_render_fails",
            "mock_stage_prompt",
            "mock_stage_prompt_should_not_run"
        ],
        "classes": {},
        "routes": [],
        "complexity": 13
    },
    "dreamforge\\tests\\agents\\test_workflow_agent.py": {
        "language": ".py",
        "functions": [
            "mock_agent_bus",
            "mock_feedback_engine",
            "mock_prompt_staging",
            "workflow_agent",
            "test_plan_task_capable_agent_selection",
            "test_plan_task_no_capable_agents",
            "test_plan_task_load_balancing",
            "test_assign_agent_success",
            "test_assign_agent_fallback",
            "test_assign_agent_all_fail",
            "test_check_status_metrics_format",
            "test_check_status_unknown_task",
            "test_route_feedback_success_case",
            "test_route_feedback_failure_and_retry",
            "test_route_feedback_prompt_update",
            "test_find_capable_agents",
            "test_select_optimal_agent",
            "test_full_task_lifecycle"
        ],
        "classes": {},
        "routes": [],
        "complexity": 18
    },
    "dreamforge\\tests\\coordination\\test_agent_bus.py": {
        "language": ".py",
        "functions": [
            "clean_agent_bus",
            "agent_a",
            "agent_b",
            "test_singleton_instance",
            "test_register_agent_success",
            "test_register_agent_no_receive_method",
            "test_register_agent_overwrite",
            "test_unregister_agent_success",
            "test_unregister_agent_not_found",
            "test_send_message_success",
            "test_send_message_recipient_not_found",
            "test_send_message_recipient_error",
            "test_list_agents",
            "test_get_agent",
            "__init__",
            "receive_message",
            "__str__"
        ],
        "classes": {
            "MockAgent": {
                "methods": [
                    "__init__",
                    "receive_message",
                    "__str__"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 20
    },
    "dreamforge\\tests\\core\\test_feedback_engine.py": {
        "language": ".py",
        "functions": [
            "feedback_engine",
            "test_process_feedback_success",
            "test_process_feedback_failure_with_retry",
            "test_max_retries_exceeded",
            "test_process_multiple_feedback_entries",
            "test_get_nonexistent_feedback",
            "test_clear_feedback",
            "test_invalid_feedback_data",
            "test_feedback_timestamp_tracking"
        ],
        "classes": {},
        "routes": [],
        "complexity": 9
    },
    "dreamforge\\tests\\core\\test_governance_memory_engine.py": {
        "language": ".py",
        "functions": [
            "mock_file_ops",
            "test_log_event_success",
            "test_log_event_makedirs_error",
            "test_log_event_write_error",
            "test_log_event_invalid_params",
            "test_get_events_empty_file",
            "test_get_events_with_filter",
            "test_get_events_with_limit",
            "test_get_events_invalid_json",
            "test_get_events_file_not_found",
            "test_source_id_constant",
            "test_governance_log_file_path"
        ],
        "classes": {},
        "routes": [],
        "complexity": 12
    },
    "dreamforge\\tests\\core\\test_llm_bridge.py": {
        "language": ".py",
        "functions": [
            "mock_log_event",
            "test_call_llm_task_list_response",
            "test_call_llm_default_response",
            "test_call_llm_with_custom_model",
            "test_call_llm_with_temperature",
            "test_call_llm_invalid_prompts",
            "test_call_llm_example_prompts",
            "test_call_llm_error_handling",
            "test_source_id_constant"
        ],
        "classes": {},
        "routes": [],
        "complexity": 9
    },
    "dreamforge\\tests\\core\\test_prompt_staging_service.py": {
        "language": ".py",
        "functions": [
            "mock_log_event",
            "mock_call_llm_success",
            "mock_call_llm_failure",
            "setup_mocks",
            "test_stage_and_execute_success",
            "test_stage_and_execute_llm_failure",
            "test_stage_and_execute_no_config",
            "test_stage_and_execute_invalid_inputs",
            "test_stage_and_execute_invalid_config",
            "test_stage_and_execute_logging_failure",
            "test_stage_and_execute_long_prompt",
            "test_stage_and_execute_retry_logic",
            "test_stage_and_execute_outbox_error",
            "test_stage_and_execute_memory_pressure",
            "test_stage_and_execute_transaction_rollback",
            "test_stage_and_execute_cleanup_on_success",
            "test_stage_and_execute_rate_limiting",
            "test_stage_and_execute_partial_failure_recovery",
            "test_stage_and_execute_prompt_validation",
            "test_stage_and_execute_file_permissions",
            "test_stage_and_execute_disk_full",
            "test_stage_and_execute_integration_llm",
            "test_stage_and_execute_malformed_response",
            "test_stage_and_execute_unicode_handling",
            "mock_log_event_failure",
            "mock_llm_with_retry",
            "mock_write_failure",
            "mock_stage_failure",
            "mock_cleanup",
            "mock_partial_success",
            "mock_disk_full_write",
            "mock_malformed_response"
        ],
        "classes": {},
        "routes": [],
        "complexity": 32
    },
    "dreamforge\\tests\\core\\test_template_engine.py": {
        "language": ".py",
        "functions": [
            "mock_log_event",
            "setup_mocks",
            "test_render_template_success",
            "test_render_template_not_found",
            "test_render_template_render_error",
            "test_render_template_complex_context",
            "test_render_template_io_error",
            "test_gme_ready_fallback",
            "test_environment_configuration",
            "test_render_empty_context",
            "test_main_execution_with_sample_data",
            "test_main_execution_fallback_context",
            "test_main_execution_json_error"
        ],
        "classes": {},
        "routes": [],
        "complexity": 13
    },
    "dreamforge\\tests\\services\\test_discord_service.py": {
        "language": ".py",
        "functions": [
            "mock_bot",
            "mock_channel",
            "service",
            "test_init_with_config",
            "test_run_bot_already_running",
            "test_run_bot_no_token",
            "test_send_message_not_running",
            "test_send_file_not_found",
            "test_send_template",
            "test_get_status",
            "test_logging_with_callback",
            "test_prompt_channel_mapping",
            "test_status_management",
            "test_prompt_channel_mapping_extended",
            "callback"
        ],
        "classes": {},
        "routes": [],
        "complexity": 15
    },
    "dreamforge\\utils\\common_utils.py": {
        "language": ".py",
        "functions": [
            "parse_cursor_result_file",
            "log_event"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "dreamforge\\utils\\image_utils.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dreamforge\\utils\\text_utils.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dream_mode\\config.py": {
        "language": ".py",
        "functions": [
            "load_config"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "dream_mode\\azure_blob_channel.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_safe_upload",
            "_safe_download",
            "_safe_delete",
            "push_task",
            "pull_tasks",
            "push_result",
            "pull_results",
            "healthcheck"
        ],
        "classes": {
            "AzureBlobChannel": {
                "methods": [
                    "__init__",
                    "_safe_upload",
                    "_safe_download",
                    "_safe_delete",
                    "push_task",
                    "pull_tasks",
                    "push_result",
                    "pull_results",
                    "healthcheck"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 18
    },
    "dream_mode\\cursor_fleet_launcher.py": {
        "language": ".py",
        "functions": [
            "launch_cursor_instance",
            "move_window",
            "get_cursor_windows",
            "assign_windows_to_monitors",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 5
    },
    "dream_mode\\DreamModeSleep.py": {
        "language": ".py",
        "functions": [
            "run_chatgpt_web_agent",
            "run_cursor_dispatcher",
            "run_task_feedback_router"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "dream_mode\\local_blob_channel.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "push_task",
            "pull_tasks",
            "push_result",
            "pull_results",
            "healthcheck"
        ],
        "classes": {
            "LocalBlobChannel": {
                "methods": [
                    "__init__",
                    "push_task",
                    "pull_tasks",
                    "push_result",
                    "pull_results",
                    "healthcheck"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 12
    },
    "dream_mode\\swarm_controller.py": {
        "language": ".py",
        "functions": [
            "_resolve_config_args",
            "_resolve_config",
            "_resolve_stats_interval",
            "__init__",
            "start",
            "_worker_loop",
            "_route_loop",
            "_handle_result",
            "shutdown",
            "_start_stats_autologger",
            "_stats_loop"
        ],
        "classes": {
            "SwarmController": {
                "methods": [
                    "_resolve_config_args",
                    "_resolve_config",
                    "_resolve_stats_interval",
                    "__init__",
                    "start",
                    "_worker_loop",
                    "_route_loop",
                    "_handle_result",
                    "shutdown",
                    "_start_stats_autologger",
                    "_stats_loop"
                ],
                "docstring": "Controls a fleet of Cursor agents using LocalBlobChannel for task/result exchange.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 22
    },
    "dream_mode\\thea_feedback_ingestor.py": {
        "language": ".py",
        "functions": [
            "load_recent_feedback",
            "inject_feedback_to_thea"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "dream_mode\\virtual_desktop_runner.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "launch_cursor_headless",
            "inject_keystrokes",
            "teardown"
        ],
        "classes": {
            "VirtualDesktopController": {
                "methods": [
                    "__init__",
                    "launch_cursor_headless",
                    "inject_keystrokes",
                    "teardown"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 8
    },
    "dream_mode\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dream_mode\\agents\\chatgpt_web_agent.py": {
        "language": ".py",
        "functions": [
            "run_loop",
            "__init__",
            "_load_pending_responses",
            "_save_pending_responses",
            "_initialize_browser",
            "_is_result_injected",
            "_mark_result_injected",
            "inject_response",
            "_get_and_cache_results",
            "run_cycle",
            "close"
        ],
        "classes": {
            "ChatGPTWebAgent": {
                "methods": [
                    "__init__",
                    "_load_pending_responses",
                    "_save_pending_responses",
                    "_initialize_browser",
                    "_is_result_injected",
                    "_mark_result_injected",
                    "inject_response",
                    "_get_and_cache_results",
                    "run_cycle",
                    "close"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 21
    },
    "dream_mode\\agents\\cursor_dispatcher.py": {
        "language": ".py",
        "functions": [
            "render_task_prompt",
            "load_queue",
            "save_queue",
            "dispatch_tasks",
            "run_loop"
        ],
        "classes": {},
        "routes": [],
        "complexity": 5
    },
    "dream_mode\\agents\\cursor_worker.py": {
        "language": ".py",
        "functions": [
            "run",
            "click_button",
            "wait_for_idle",
            "process_task_ui"
        ],
        "classes": {},
        "routes": [],
        "complexity": 4
    },
    "dream_mode\\agents\\supervisor_agent.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "load_directives",
            "dispatch_tasks",
            "gather_results",
            "save_results",
            "run_loop"
        ],
        "classes": {
            "SupervisorAgent": {
                "methods": [
                    "__init__",
                    "load_directives",
                    "dispatch_tasks",
                    "gather_results",
                    "save_results",
                    "run_loop"
                ],
                "docstring": "Orchestrates tasks between ChatGPT WebAgents and Cursor workers.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 12
    },
    "dream_mode\\agents\\task_feedback_router.py": {
        "language": ".py",
        "functions": [
            "find_task_file",
            "route_feedback",
            "run_loop"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "dream_mode\\agents\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dream_mode\\task_nexus\\task_nexus.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_load",
            "_save",
            "_load_agents",
            "_save_agents",
            "record_heartbeat",
            "get_all_registered_agents",
            "get_next_task",
            "add_task",
            "update_task_status",
            "get_all_tasks",
            "stats",
            "reclaim_stale_tasks"
        ],
        "classes": {
            "TaskNexus": {
                "methods": [
                    "__init__",
                    "_load",
                    "_save",
                    "_load_agents",
                    "_save_agents",
                    "record_heartbeat",
                    "get_all_registered_agents",
                    "get_next_task",
                    "add_task",
                    "update_task_status",
                    "get_all_tasks",
                    "stats",
                    "reclaim_stale_tasks"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 26
    },
    "dream_mode\\tests\\test_azure_blob_channel.py": {
        "language": ".py",
        "functions": [
            "test_push_and_pull_task",
            "test_push_and_pull_result"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "dream_mode\\utils\\browser.py": {
        "language": ".py",
        "functions": [
            "launch_browser",
            "navigate_to_page",
            "wait_for_login",
            "close_browser"
        ],
        "classes": {},
        "routes": [],
        "complexity": 4
    },
    "dream_mode\\utils\\channel_loader.py": {
        "language": ".py",
        "functions": [
            "get_blob_channel"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "dream_mode\\utils\\cursor_session_manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "on_created",
            "start"
        ],
        "classes": {
            "CursorSessionManager": {
                "methods": [
                    "__init__",
                    "on_created",
                    "start"
                ],
                "docstring": "Watches a directory for Cursor task files and launches Cursor IDE sessions to execute them.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 6
    },
    "dream_mode\\utils\\html_parser.py": {
        "language": ".py",
        "functions": [
            "is_still_generating",
            "extract_latest_reply"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "dream_mode\\utils\\prompt_renderer.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "render"
        ],
        "classes": {
            "PromptRenderer": {
                "methods": [
                    "__init__",
                    "render"
                ],
                "docstring": "Loads and renders Jinja2 templates from a specified directory.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 4
    },
    "dream_mode\\utils\\task_parser.py": {
        "language": ".py",
        "functions": [
            "_extract_json_block",
            "_extract_regex_fallback",
            "extract_task_metadata"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "dream_mode\\utils\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dream_os\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dream_os\\adapters\\base_adapter.py": {
        "language": ".py",
        "functions": [
            "execute",
            "register",
            "get"
        ],
        "classes": {
            "Adapter": {
                "methods": [
                    "execute"
                ],
                "docstring": null,
                "base_classes": [
                    "ABC"
                ]
            },
            "AdapterRegistry": {
                "methods": [
                    "register",
                    "get"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 6
    },
    "dream_os\\adapters\\cursor_rpc_adapter.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "execute"
        ],
        "classes": {
            "CursorRPCAdapter": {
                "methods": [
                    "__init__",
                    "execute"
                ],
                "docstring": null,
                "base_classes": [
                    "Adapter"
                ]
            }
        },
        "routes": [],
        "complexity": 4
    },
    "dream_os\\adapters\\discord_adapter.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "execute"
        ],
        "classes": {
            "DiscordAdapter": {
                "methods": [
                    "__init__",
                    "execute"
                ],
                "docstring": null,
                "base_classes": [
                    "Adapter"
                ]
            }
        },
        "routes": [],
        "complexity": 4
    },
    "dream_os\\adapters\\openai_adapter.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "execute"
        ],
        "classes": {
            "OpenAIAdapter": {
                "methods": [
                    "__init__",
                    "execute"
                ],
                "docstring": null,
                "base_classes": [
                    "Adapter"
                ]
            }
        },
        "routes": [],
        "complexity": 4
    },
    "dream_os\\cli\\run_thea_loop.py": {
        "language": ".py",
        "functions": [
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "dream_os\\core\\crew_agent_base.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "can_handle",
            "execute"
        ],
        "classes": {
            "CrewAgent": {
                "methods": [
                    "__init__",
                    "can_handle",
                    "execute"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 6
    },
    "dream_os\\cli\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dream_os\\core\\crew_roles.py": {
        "language": ".py",
        "functions": [
            "get_role"
        ],
        "classes": {
            "CrewRole": {
                "methods": [],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 1
    },
    "dream_os\\services\\prompt_router_service.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "run",
            "_select_agent"
        ],
        "classes": {
            "PromptRouterService": {
                "methods": [
                    "__init__",
                    "run",
                    "_select_agent"
                ],
                "docstring": "Continuously pulls tasks, routes to best-fit agent, logs outcome.",
                "base_classes": [
                    "threading.Thread"
                ]
            }
        },
        "routes": [],
        "complexity": 6
    },
    "dream_os\\services\\task_nexus.py": {
        "language": ".py",
        "functions": [
            "_get_nexus_file",
            "_load",
            "_save",
            "add_task",
            "pop_task",
            "log_result"
        ],
        "classes": {},
        "routes": [],
        "complexity": 6
    },
    "dream_os\\services\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dream_os\\ui\\main_window.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_make_placeholder",
            "closeEvent"
        ],
        "classes": {
            "MainWindow": {
                "methods": [
                    "__init__",
                    "_make_placeholder",
                    "closeEvent"
                ],
                "docstring": null,
                "base_classes": [
                    "QMainWindow"
                ]
            }
        },
        "routes": [],
        "complexity": 6
    },
    "dream_os\\ui\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "integrations\\agent_services\\cursor_shadow_controller.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "send_prompt_to_cursor",
            "monitor_output",
            "run_prompt_cycle"
        ],
        "classes": {
            "CursorShadowController": {
                "methods": [
                    "__init__",
                    "send_prompt_to_cursor",
                    "monitor_output",
                    "run_prompt_cycle"
                ],
                "docstring": "Shadow controller that allows background execution of prompts in Cursor\nwithout requiring visible GUI interaction, using a file-based inbox/outbox.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 8
    },
    "integrations\\cursor\\cursor_prompt_controller.py": {
        "language": ".py",
        "functions": [
            "_activate_cursor_window",
            "_focus_chat_input",
            "send_prompt_to_chat"
        ],
        "classes": {
            "CursorPromptController": {
                "methods": [
                    "_activate_cursor_window",
                    "_focus_chat_input",
                    "send_prompt_to_chat"
                ],
                "docstring": "Uses pyautogui to send prompts to the Cursor chat interface.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 6
    },
    "integrations\\cursor\\window_controller.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_setup_os_specific_handlers",
            "detect_all_instances",
            "activate_window",
            "get_window_by_id",
            "print_window_map",
            "enum_callback",
            "get_window_info"
        ],
        "classes": {
            "WindowWrapper": {
                "methods": [],
                "docstring": "Cross-platform window handle wrapper.",
                "base_classes": []
            },
            "CursorWindowController": {
                "methods": [
                    "__init__",
                    "_setup_os_specific_handlers",
                    "detect_all_instances",
                    "activate_window",
                    "get_window_by_id",
                    "print_window_map"
                ],
                "docstring": "Controls multiple Cursor window instances.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 14
    },
    "PyQt5_local_backup\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "PyQt5_local_backup\\QtCore\\__init__.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "setStringList"
        ],
        "classes": {
            "QTimer": {
                "methods": [],
                "docstring": null,
                "base_classes": []
            },
            "Qt": {
                "methods": [],
                "docstring": null,
                "base_classes": []
            },
            "QStringListModel": {
                "methods": [
                    "__init__",
                    "setStringList"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 4
    },
    "PyQt5_local_backup\\QtWidgets\\__init__.py": {
        "language": ".py",
        "functions": [
            "instance",
            "__init__",
            "__init__",
            "statusBar",
            "__init__",
            "addTab",
            "widget",
            "count",
            "tabText",
            "__init__",
            "__init__",
            "showMessage",
            "__init__",
            "__init__",
            "__init__",
            "__init__",
            "setPlaceholderText",
            "setCompleter",
            "__init__",
            "setPlaceholderText",
            "setMinimumHeight",
            "__init__",
            "setStyleSheet",
            "__init__",
            "addItems",
            "setToolTip",
            "__init__",
            "setLabelAlignment",
            "setSpacing",
            "addRow",
            "__init__",
            "__init__",
            "setCaseSensitivity",
            "__init__",
            "setLayout",
            "__init__",
            "setRange",
            "setSuffix",
            "setToolTip",
            "__init__",
            "setAlternatingRowColors",
            "setMaximumHeight",
            "setCurrentRow",
            "addItem",
            "setSpacing",
            "count",
            "__init__"
        ],
        "classes": {
            "QApplication": {
                "methods": [
                    "instance",
                    "__init__"
                ],
                "docstring": null,
                "base_classes": []
            },
            "QMainWindow": {
                "methods": [
                    "__init__",
                    "statusBar"
                ],
                "docstring": null,
                "base_classes": []
            },
            "QTabWidget": {
                "methods": [
                    "__init__",
                    "addTab",
                    "widget",
                    "count",
                    "tabText"
                ],
                "docstring": null,
                "base_classes": []
            },
            "QLabel": {
                "methods": [
                    "__init__"
                ],
                "docstring": null,
                "base_classes": []
            },
            "QStatusBar": {
                "methods": [
                    "__init__",
                    "showMessage"
                ],
                "docstring": null,
                "base_classes": []
            },
            "QWidget": {
                "methods": [
                    "__init__"
                ],
                "docstring": null,
                "base_classes": []
            },
            "QVBoxLayout": {
                "methods": [
                    "__init__"
                ],
                "docstring": null,
                "base_classes": []
            },
            "QHBoxLayout": {
                "methods": [
                    "__init__"
                ],
                "docstring": null,
                "base_classes": []
            },
            "QLineEdit": {
                "methods": [
                    "__init__",
                    "setPlaceholderText",
                    "setCompleter"
                ],
                "docstring": null,
                "base_classes": []
            },
            "QTextEdit": {
                "methods": [
                    "__init__",
                    "setPlaceholderText",
                    "setMinimumHeight"
                ],
                "docstring": null,
                "base_classes": []
            },
            "QPushButton": {
                "methods": [
                    "__init__",
                    "setStyleSheet"
                ],
                "docstring": null,
                "base_classes": []
            },
            "QComboBox": {
                "methods": [
                    "__init__",
                    "addItems",
                    "setToolTip"
                ],
                "docstring": null,
                "base_classes": []
            },
            "QFormLayout": {
                "methods": [
                    "__init__",
                    "setLabelAlignment",
                    "setSpacing",
                    "addRow"
                ],
                "docstring": null,
                "base_classes": []
            },
            "QSizePolicy": {
                "methods": [
                    "__init__"
                ],
                "docstring": null,
                "base_classes": []
            },
            "QFileDialog": {
                "methods": [],
                "docstring": null,
                "base_classes": []
            },
            "QCompleter": {
                "methods": [
                    "__init__",
                    "setCaseSensitivity"
                ],
                "docstring": null,
                "base_classes": []
            },
            "QGroupBox": {
                "methods": [
                    "__init__",
                    "setLayout"
                ],
                "docstring": null,
                "base_classes": []
            },
            "QSpinBox": {
                "methods": [
                    "__init__",
                    "setRange",
                    "setSuffix",
                    "setToolTip"
                ],
                "docstring": null,
                "base_classes": []
            },
            "QListWidget": {
                "methods": [
                    "__init__",
                    "setAlternatingRowColors",
                    "setMaximumHeight",
                    "setCurrentRow",
                    "addItem",
                    "setSpacing",
                    "count"
                ],
                "docstring": null,
                "base_classes": []
            },
            "QListWidgetItem": {
                "methods": [
                    "__init__"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 94
    },
    "scripts\\agent_auto_storyteller.py": {
        "language": ".py",
        "functions": [
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "scripts\\auto_claim_tasks_agent_002.py": {
        "language": ".py",
        "functions": [
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "scripts\\claim_one_task_agent_002.py": {
        "language": ".py",
        "functions": [
            "claim_one_task"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "scripts\\convert_task_lists_to_json.py": {
        "language": ".py",
        "functions": [
            "parse_markdown_tasks",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "scripts\\deduplicate_tasks.py": {
        "language": ".py",
        "functions": [
            "load_tasks",
            "dedupe",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "scripts\\find_duplicate_tasks.py": {
        "language": ".py",
        "functions": [
            "parse_json_file",
            "parse_md_file",
            "find_task_files",
            "normalize",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 5
    },
    "scripts\\organize_task_pool_v1.py": {
        "language": ".py",
        "functions": [
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "scripts\\run_qa.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "sky_viewer\\sky_viewer.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "send_fullscreen_toggle",
            "toggle_fullscreen",
            "open_splash"
        ],
        "classes": {
            "SkyViewer": {
                "methods": [
                    "__init__",
                    "send_fullscreen_toggle",
                    "toggle_fullscreen",
                    "open_splash"
                ],
                "docstring": null,
                "base_classes": [
                    "QMainWindow"
                ]
            }
        },
        "routes": [],
        "complexity": 8
    },
    "social\\setup.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "social\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "social\\config\\settings.py": {
        "language": ".py",
        "functions": [
            "get_all_config"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "social\\core\\agent_bus.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "register_agent",
            "deregister_agent",
            "send_message",
            "broadcast_message",
            "process_messages",
            "get_agent_status",
            "find_first_agent_by_capability",
            "get_all_agent_statuses"
        ],
        "classes": {
            "AgentBus": {
                "methods": [
                    "__init__",
                    "register_agent",
                    "deregister_agent",
                    "send_message",
                    "broadcast_message",
                    "process_messages",
                    "get_agent_status",
                    "find_first_agent_by_capability",
                    "get_all_agent_statuses"
                ],
                "docstring": "Central message bus for agent coordination and communication.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 18
    },
    "social\\core\\constants.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "social\\core\\mailbox.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "create_mailbox",
            "send_message",
            "get_messages",
            "clear_mailbox",
            "delete_mailbox",
            "broadcast_message"
        ],
        "classes": {
            "MailboxHandler": {
                "methods": [
                    "__init__",
                    "create_mailbox",
                    "send_message",
                    "get_messages",
                    "clear_mailbox",
                    "delete_mailbox",
                    "broadcast_message"
                ],
                "docstring": "Handles inter-service communication through file-based mailboxes.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 14
    },
    "social\\core\\main.py": {
        "language": ".py",
        "functions": [
            "signal_handler",
            "setup_task_list",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "social\\core\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "social\\core\\coordination\\cursor\\cursor_editor_controller.py": {
        "language": ".py",
        "functions": [
            "_log_tool_action",
            "_update_status_file",
            "_append_to_task_list",
            "_update_project_board",
            "__init__",
            "_validate_pos",
            "get_text",
            "set_text",
            "insert_text",
            "get_cursor_position",
            "set_cursor_position",
            "get_selection",
            "set_selection",
            "get_current_file"
        ],
        "classes": {
            "CursorEditorController": {
                "methods": [
                    "__init__",
                    "_validate_pos",
                    "get_text",
                    "set_text",
                    "insert_text",
                    "get_cursor_position",
                    "set_cursor_position",
                    "get_selection",
                    "set_selection",
                    "get_current_file"
                ],
                "docstring": "Manages interactions with the Cursor editor pane (Placeholders).",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 24
    },
    "social\\core\\coordination\\cursor\\cursor_instance_controller.py": {
        "language": ".py",
        "functions": [
            "_log_tool_action",
            "_update_status_file",
            "_append_to_task_list",
            "_update_project_board",
            "__init__",
            "_find_cursor_executable",
            "launch_instance",
            "find_existing_instances",
            "focus_instance",
            "close_instance"
        ],
        "classes": {
            "CursorInstanceController": {
                "methods": [
                    "__init__",
                    "_find_cursor_executable",
                    "launch_instance",
                    "find_existing_instances",
                    "focus_instance",
                    "close_instance"
                ],
                "docstring": "Manages Cursor application instances using subprocess and psutil (if available).",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 16
    },
    "social\\core\\coordination\\cursor\\cursor_terminal_controller.py": {
        "language": ".py",
        "functions": [
            "_log_tool_action",
            "_update_status_file",
            "_append_to_task_list",
            "_update_project_board",
            "__init__",
            "_read_output",
            "_update_output_buffer",
            "_handle_cd",
            "run_command",
            "get_output",
            "get_current_directory",
            "send_input",
            "is_busy"
        ],
        "classes": {
            "CursorTerminalController": {
                "methods": [
                    "__init__",
                    "_read_output",
                    "_update_output_buffer",
                    "_handle_cd",
                    "run_command",
                    "get_output",
                    "get_current_directory",
                    "send_input",
                    "is_busy"
                ],
                "docstring": "Manages interactions with the Cursor integrated terminal (using subprocess).",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 22
    },
    "social\\core\\coordination\\cursor\\cursor_ui_trainer.py": {
        "language": ".py",
        "functions": [
            "_log_tool_action",
            "_update_status_file",
            "_append_to_task_list",
            "_update_project_board",
            "__init__",
            "start_recording_session",
            "_capture_ui_event",
            "stop_recording_session",
            "train_model_from_session"
        ],
        "classes": {
            "CursorUITrainer": {
                "methods": [
                    "__init__",
                    "start_recording_session",
                    "_capture_ui_event",
                    "stop_recording_session",
                    "train_model_from_session"
                ],
                "docstring": "Placeholder class for training Cursor UI interaction models.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 14
    },
    "social\\core\\coordination\\cursor\\cursor_window_controller.py": {
        "language": ".py",
        "functions": [
            "_log_tool_action",
            "_update_status_file",
            "_append_to_task_list",
            "_update_project_board",
            "__init__",
            "focus",
            "move",
            "resize",
            "close",
            "get_title",
            "get_position",
            "get_size",
            "is_visible"
        ],
        "classes": {
            "CursorWindowController": {
                "methods": [
                    "__init__",
                    "focus",
                    "move",
                    "resize",
                    "close",
                    "get_title",
                    "get_position",
                    "get_size",
                    "is_visible"
                ],
                "docstring": "Manages interactions with the Cursor application window (Placeholders).",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 22
    },
    "social\\core\\coordination\\cursor\\editor_service.py": {
        "language": ".py",
        "functions": [
            "__init__"
        ],
        "classes": {
            "CursorEditorService": {
                "methods": [
                    "__init__"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 2
    },
    "social\\core\\coordination\\cursor\\locator_service.py": {
        "language": ".py",
        "functions": [
            "__init__"
        ],
        "classes": {
            "CursorLocatorService": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Service layer for locating UI elements within Cursor.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 2
    },
    "social\\core\\coordination\\cursor\\task_execution_monitor.py": {
        "language": ".py",
        "functions": [
            "_log_tool_action",
            "_update_status_file",
            "_append_to_task_list",
            "_update_project_board",
            "__init__",
            "start_monitoring_task",
            "update_task_status",
            "_check_tasks",
            "_monitor_loop",
            "_start_monitor_thread",
            "stop_monitoring",
            "get_task_summary"
        ],
        "classes": {
            "TaskExecutionMonitor": {
                "methods": [
                    "__init__",
                    "start_monitoring_task",
                    "update_task_status",
                    "_check_tasks",
                    "_monitor_loop",
                    "_start_monitor_thread",
                    "stop_monitoring",
                    "get_task_summary"
                ],
                "docstring": "Placeholder class for monitoring agent task execution.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 20
    },
    "social\\core\\coordination\\cursor\\task_execution_state_machine.py": {
        "language": ".py",
        "functions": [
            "_log_tool_action",
            "_update_status_file",
            "_append_to_task_list",
            "_update_project_board",
            "__init__",
            "state",
            "_log_transition",
            "_trigger_callbacks",
            "register_callback",
            "transition_to",
            "set_received",
            "set_running",
            "set_paused",
            "set_completed",
            "set_failed",
            "set_error",
            "set_cancelled",
            "example_completion_callback"
        ],
        "classes": {
            "TaskState": {
                "methods": [],
                "docstring": "Enumeration of possible task states.",
                "base_classes": [
                    "Enum"
                ]
            },
            "TaskExecutionStateMachine": {
                "methods": [
                    "__init__",
                    "state",
                    "_log_transition",
                    "_trigger_callbacks",
                    "register_callback",
                    "transition_to",
                    "set_received",
                    "set_running",
                    "set_paused",
                    "set_completed",
                    "set_failed",
                    "set_error",
                    "set_cancelled"
                ],
                "docstring": "Manages the state transitions for a single agent task.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 31
    },
    "social\\core\\coordination\\cursor\\window_service.py": {
        "language": ".py",
        "functions": [
            "__init__"
        ],
        "classes": {
            "CursorWindowService": {
                "methods": [
                    "__init__"
                ],
                "docstring": "High-level service wrapper for controlling the Cursor application window.\nDelegates to the injected low-level window controller.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 2
    },
    "social\\core\\coordination\\cursor\\terminal_service.py": {
        "language": ".py",
        "functions": [
            "__init__"
        ],
        "classes": {
            "CursorTerminalService": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Service layer for Cursor terminal operations.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 2
    },
    "social\\core\\exceptions\\strategy_exceptions.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "__init__",
            "__init__",
            "__init__",
            "__init__",
            "__init__",
            "__init__"
        ],
        "classes": {
            "StrategyError": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Base class for strategy-related errors.",
                "base_classes": [
                    "Exception"
                ]
            },
            "LoginError": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Error during platform login.",
                "base_classes": [
                    "StrategyError"
                ]
            },
            "PostError": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Error during posting content.",
                "base_classes": [
                    "StrategyError"
                ]
            },
            "ScrapeError": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Error during scraping content.",
                "base_classes": [
                    "StrategyError"
                ]
            },
            "RateLimitError": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Error due to hitting API rate limits.",
                "base_classes": [
                    "StrategyError"
                ]
            },
            "AuthenticationError": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Error specifically related to invalid credentials or auth failure.",
                "base_classes": [
                    "LoginError"
                ]
            },
            "ContentError": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Error related to invalid or rejected content.",
                "base_classes": [
                    "StrategyError"
                ]
            }
        },
        "routes": [],
        "complexity": 14
    },
    "social\\core\\exceptions\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "social\\core\\strategies\\base_strategy.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "login",
            "create_post",
            "get_analytics",
            "check_login_status",
            "upload_media",
            "add_tags",
            "schedule_post",
            "navigate_to",
            "wait_for_element",
            "_validate_media_files",
            "_wait_for_element",
            "_handle_verification",
            "_handle_email_verification",
            "_handle_phone_verification",
            "_extract_error_details",
            "log_agent_task",
            "update_agent_mailbox",
            "sync_task_board",
            "run_strategy_demo_task"
        ],
        "classes": {
            "BaseSocialStrategy": {
                "methods": [
                    "__init__",
                    "login",
                    "create_post",
                    "get_analytics",
                    "check_login_status",
                    "upload_media",
                    "add_tags",
                    "schedule_post",
                    "navigate_to",
                    "wait_for_element",
                    "_validate_media_files",
                    "_wait_for_element",
                    "_handle_verification",
                    "_handle_email_verification",
                    "_handle_phone_verification",
                    "_extract_error_details"
                ],
                "docstring": "Abstract base class for social media platform interactions.",
                "base_classes": [
                    "ABC"
                ]
            }
        },
        "routes": [],
        "complexity": 36
    },
    "social\\core\\strategies\\facebook_strategy.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "login",
            "create_post",
            "get_analytics",
            "demo_facebook_capabilities",
            "_get_demo_config"
        ],
        "classes": {
            "FacebookStrategy": {
                "methods": [
                    "__init__",
                    "login",
                    "create_post",
                    "get_analytics"
                ],
                "docstring": "Strategy for interacting with Facebook platform.",
                "base_classes": [
                    "BaseSocialStrategy"
                ]
            }
        },
        "routes": [],
        "complexity": 10
    },
    "social\\core\\strategies\\linkedin_strategy.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "login",
            "create_post",
            "get_analytics",
            "post_update",
            "post_article",
            "_get_user_id",
            "_get_blog_url",
            "demo_linkedin_capabilities",
            "_get_demo_config"
        ],
        "classes": {
            "LinkedInStrategy": {
                "methods": [
                    "__init__",
                    "login",
                    "create_post",
                    "get_analytics",
                    "post_update",
                    "post_article",
                    "_get_user_id",
                    "_get_blog_url"
                ],
                "docstring": "Strategy for interacting with LinkedIn platform.",
                "base_classes": [
                    "BaseSocialStrategy"
                ]
            }
        },
        "routes": [],
        "complexity": 18
    },
    "social\\core\\strategies\\twitter_strategy.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "login",
            "create_post",
            "get_analytics",
            "post_update",
            "post_thread",
            "_get_bearer_token",
            "_split_into_tweets"
        ],
        "classes": {
            "TwitterStrategy": {
                "methods": [
                    "__init__",
                    "login",
                    "create_post",
                    "get_analytics",
                    "post_update",
                    "post_thread",
                    "_get_bearer_token",
                    "_split_into_tweets"
                ],
                "docstring": "Strategy for interacting with Twitter platform.",
                "base_classes": [
                    "BaseSocialStrategy"
                ]
            }
        },
        "routes": [],
        "complexity": 16
    },
    "social\\core\\strategies\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "social\\digital_dreamscape\\app.py": {
        "language": ".py",
        "functions": [
            "main",
            "__init__",
            "run",
            "__init__",
            "_get_config_path",
            "_load_credentials",
            "_load_and_apply_credentials",
            "_save_credentials",
            "_delete_credentials",
            "init_ui",
            "refresh_chats",
            "update_progress",
            "update_chat_list",
            "show_error",
            "update_selection",
            "select_all_chats",
            "clear_selection",
            "export_selected"
        ],
        "classes": {
            "ChatScraperWorker": {
                "methods": [
                    "__init__",
                    "run"
                ],
                "docstring": "Worker thread for running the ChatGPT scraper.",
                "base_classes": [
                    "QThread"
                ]
            },
            "DigitalDreamscapeWindow": {
                "methods": [
                    "__init__",
                    "_get_config_path",
                    "_load_credentials",
                    "_load_and_apply_credentials",
                    "_save_credentials",
                    "_delete_credentials",
                    "init_ui",
                    "refresh_chats",
                    "update_progress",
                    "update_chat_list",
                    "show_error",
                    "update_selection",
                    "select_all_chats",
                    "clear_selection",
                    "export_selected"
                ],
                "docstring": "Main window for the Digital Dreamscape Chronicles application.",
                "base_classes": [
                    "QMainWindow"
                ]
            }
        },
        "routes": [],
        "complexity": 35
    },
    "social\\digital_dreamscape\\assistant_worker.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "job",
            "run",
            "stop"
        ],
        "classes": {
            "AssistantWorker": {
                "methods": [
                    "__init__",
                    "job",
                    "run",
                    "stop"
                ],
                "docstring": "A background thread that periodically generates episodes.",
                "base_classes": [
                    "threading.Thread"
                ]
            }
        },
        "routes": [],
        "complexity": 8
    },
    "social\\digital_dreamscape\\chat_scraper.py": {
        "language": ".py",
        "functions": [
            "process_all_chats"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "social\\digital_dreamscape\\episode_generator.py": {
        "language": ".py",
        "functions": [
            "_generation_worker",
            "__init__",
            "stop",
            "run",
            "_pump_queues",
            "__init__",
            "run",
            "_log_status",
            "stop",
            "__init__",
            "_template_selected",
            "_start",
            "_cancel",
            "_ctx_update",
            "_result_update",
            "_cycle_done",
            "_log",
            "_load_history_from_file",
            "_start_history_fetch",
            "_on_history_fetch_done",
            "on_saga_output_ready",
            "_saga_generation_finished",
            "_select_all_history",
            "_load_ignored_chat_titles",
            "on_generate_saga_clicked",
            "get_ordered_filtered_chats",
            "_on_tab_double_click"
        ],
        "classes": {
            "Config": {
                "methods": [],
                "docstring": null,
                "base_classes": []
            },
            "CycleThread": {
                "methods": [
                    "__init__",
                    "stop",
                    "run",
                    "_pump_queues"
                ],
                "docstring": null,
                "base_classes": [
                    "QThread"
                ]
            },
            "HistoryFetchThread": {
                "methods": [
                    "__init__",
                    "run",
                    "_log_status",
                    "stop"
                ],
                "docstring": "Worker thread to fetch chat history non-headlessly.",
                "base_classes": [
                    "QThread"
                ]
            },
            "DreamscapeGenerator": {
                "methods": [
                    "__init__",
                    "_template_selected",
                    "_start",
                    "_cancel",
                    "_ctx_update",
                    "_result_update",
                    "_cycle_done",
                    "_log",
                    "_load_history_from_file",
                    "_start_history_fetch",
                    "_on_history_fetch_done",
                    "on_saga_output_ready",
                    "_saga_generation_finished",
                    "_select_all_history",
                    "_load_ignored_chat_titles",
                    "on_generate_saga_clicked",
                    "get_ordered_filtered_chats",
                    "_on_tab_double_click"
                ],
                "docstring": null,
                "base_classes": [
                    "QMainWindow"
                ]
            },
            "GenerationWorker": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "QThread"
                ]
            }
        },
        "routes": [],
        "complexity": 53
    },
    "social\\digital_dreamscape\\memory_manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_initialize_db",
            "record_interaction",
            "initialize_conversation",
            "get_conversation",
            "close",
            "__init__",
            "_get_segment_file_path",
            "_load_segment",
            "_load_all_segments",
            "_save_segment",
            "set",
            "get",
            "delete",
            "clear_segment",
            "get_segment_keys",
            "get_segment_size",
            "get_stats",
            "optimize",
            "record_interaction",
            "initialize_conversation",
            "retrieve_conversation",
            "export_conversation_for_finetuning",
            "get_user_history",
            "user_sentiment_summary",
            "clear_user_history",
            "clear_platform_history",
            "generate_narrative",
            "close",
            "__del__"
        ],
        "classes": {
            "DatabaseManager": {
                "methods": [
                    "__init__",
                    "_initialize_db",
                    "record_interaction",
                    "initialize_conversation",
                    "get_conversation",
                    "close"
                ],
                "docstring": "DatabaseManager stores interactions and conversation metadata for\nlong-term retention using SQLite.",
                "base_classes": []
            },
            "UnifiedMemoryManager": {
                "methods": [
                    "__init__",
                    "_get_segment_file_path",
                    "_load_segment",
                    "_load_all_segments",
                    "_save_segment",
                    "set",
                    "get",
                    "delete",
                    "clear_segment",
                    "get_segment_keys",
                    "get_segment_size",
                    "get_stats",
                    "optimize",
                    "record_interaction",
                    "initialize_conversation",
                    "retrieve_conversation",
                    "export_conversation_for_finetuning",
                    "get_user_history",
                    "user_sentiment_summary",
                    "clear_user_history",
                    "clear_platform_history",
                    "generate_narrative",
                    "close",
                    "__del__"
                ],
                "docstring": "UnifiedMemoryManager combines features from an optimized memory manager with:\n  - LRU caching and data compression (for fast short-term storage)\n  - JSON file storage for ephemeral memory segments\n  - SQLite-based long-term storage of interactions via DatabaseManager\n  - Narrative generation via Jinja2 templates\n\nMemory is segmented by context (e.g. \"system\", \"prompts\", \"interactions\").",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 60
    },
    "social\\digital_dreamscape\\saga_orchestrator.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_log",
            "run",
            "stop",
            "handle_output",
            "handle_finished",
            "handle_progress",
            "handle_error",
            "get",
            "set",
            "__init__",
            "text",
            "data"
        ],
        "classes": {
            "OrchestratedSagaRunner": {
                "methods": [
                    "__init__",
                    "_log",
                    "run",
                    "stop"
                ],
                "docstring": "Coordinates running ReflectionAgent before starting SagaGenerationWorker,\ninjecting the detected emotion into the saga generation process.",
                "base_classes": []
            },
            "MockMemoryManager": {
                "methods": [
                    "get",
                    "set"
                ],
                "docstring": null,
                "base_classes": []
            },
            "MockQListWidgetItem": {
                "methods": [
                    "__init__",
                    "text",
                    "data"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 22
    },
    "social\\digital_dreamscape\\vector_db.py": {
        "language": ".py",
        "functions": [
            "upsert",
            "query",
            "_load",
            "_save",
            "_vectorize"
        ],
        "classes": {},
        "routes": [],
        "complexity": 5
    },
    "social\\digital_dreamscape\\utils.py": {
        "language": ".py",
        "functions": [
            "log_event",
            "post_to_discord",
            "load_models_yaml",
            "load_prompt_templates",
            "sanitize_filename",
            "__init__",
            "emit"
        ],
        "classes": {
            "QtLogEmitter": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "QObject"
                ]
            },
            "GuiLogHandler": {
                "methods": [
                    "__init__",
                    "emit"
                ],
                "docstring": "Emits each formatted record via Qt signal so the GUI thread\ncan safely append to a QTextEdit.",
                "base_classes": [
                    "logging.Handler"
                ]
            }
        },
        "routes": [],
        "complexity": 9
    },
    "social\\digital_dreamscape\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "social\\digital_dreamscape\\dreamscape_generator\\config.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "social\\digital_dreamscape\\dreamscape_generator\\main.py": {
        "language": ".py",
        "functions": [
            "run_generation"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "social\\digital_dreamscape\\dreamscape_generator\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "social\\digital_dreamscape\\dreamscape_generator\\src\\chatgpt_locators.py": {
        "language": ".py",
        "functions": [],
        "classes": {
            "ChatGPTLocators": {
                "methods": [],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 0
    },
    "social\\digital_dreamscape\\dreamscape_generator\\src\\chatgpt_scraper.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_get_driver",
            "send_prompt",
            "_fetch_latest_response_text",
            "_wait_for_stable_response",
            "get_all_chat_titles",
            "scrape_current_chat_messages",
            "safe_get"
        ],
        "classes": {
            "ChatGPTScraper": {
                "methods": [
                    "__init__",
                    "_get_driver",
                    "send_prompt",
                    "_fetch_latest_response_text",
                    "_wait_for_stable_response",
                    "get_all_chat_titles",
                    "scrape_current_chat_messages",
                    "safe_get"
                ],
                "docstring": "Handles interaction with the ChatGPT web UI using Selenium/undetected-chromedriver.",
                "base_classes": []
            },
            "MockConfig": {
                "methods": [],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 16
    },
    "social\\digital_dreamscape\\dreamscape_generator\\src\\cli.py": {
        "language": ".py",
        "functions": [
            "main",
            "get_recent_snippets"
        ],
        "classes": {
            "DummyHistoryManager": {
                "methods": [
                    "get_recent_snippets"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 3
    },
    "social\\digital_dreamscape\\dreamscape_generator\\src\\context_manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "build_prompt_context"
        ],
        "classes": {
            "ContextManager": {
                "methods": [
                    "__init__",
                    "build_prompt_context"
                ],
                "docstring": "Builds the context dictionary for Jinja2 prompt templates.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 4
    },
    "social\\digital_dreamscape\\dreamscape_generator\\src\\experience_parser.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "parse"
        ],
        "classes": {
            "ExperienceParser": {
                "methods": [
                    "__init__",
                    "parse"
                ],
                "docstring": "Parses LLM responses to extract narrative and structured experience updates.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 4
    },
    "social\\digital_dreamscape\\dreamscape_generator\\src\\external_stubs.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "send_message"
        ],
        "classes": {
            "StubDiscordManager": {
                "methods": [
                    "__init__",
                    "send_message"
                ],
                "docstring": "Placeholder for DiscordManager.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 4
    },
    "social\\digital_dreamscape\\dreamscape_generator\\src\\generation_engine.py": {
        "language": ".py",
        "functions": [
            "build_context",
            "generate_episode"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "social\\digital_dreamscape\\dreamscape_generator\\src\\history_manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "find_history_files",
            "get_recent_snippets"
        ],
        "classes": {
            "HistoryManager": {
                "methods": [
                    "__init__",
                    "find_history_files",
                    "get_recent_snippets"
                ],
                "docstring": "Manages access to chat history files.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 6
    },
    "social\\digital_dreamscape\\dreamscape_generator\\src\\story_generator.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_render_prompt",
            "_call_llm",
            "generate_episodes_from_web",
            "_generate_single_episode_from_scraped"
        ],
        "classes": {
            "StoryGenerator": {
                "methods": [
                    "__init__",
                    "_render_prompt",
                    "_call_llm",
                    "generate_episodes_from_web",
                    "_generate_single_episode_from_scraped"
                ],
                "docstring": "Generates narrative episodes based on history and RPG state using LLMs.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 10
    },
    "social\\digital_dreamscape\\dreamscape_generator\\src\\unified_chrome_driver.py": {
        "language": ".py",
        "functions": [
            "setup_logger",
            "main",
            "__new__",
            "__init__",
            "__enter__",
            "__exit__",
            "get_driver",
            "quit_driver",
            "save_cookies",
            "load_cookies",
            "is_logged_in",
            "scroll_into_view",
            "manual_scroll",
            "update_options",
            "__del__"
        ],
        "classes": {
            "UnifiedDriverManager": {
                "methods": [
                    "__new__",
                    "__init__",
                    "__enter__",
                    "__exit__",
                    "get_driver",
                    "quit_driver",
                    "save_cookies",
                    "load_cookies",
                    "is_logged_in",
                    "scroll_into_view",
                    "manual_scroll",
                    "update_options",
                    "__del__"
                ],
                "docstring": "Singleton for managing an undetected Chrome WebDriver with:\n  - self\u2011healing retry logic\n  - cached driver download\n  - headless vs persistent profiles\n  - cookie persistence\n  - mobile emulation\n  - context\u2011manager support",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 28
    },
    "social\\digital_dreamscape\\dreamscape_generator\\src\\utils.py": {
        "language": ".py",
        "functions": [
            "sanitize_filename",
            "save_episode_file"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "social\\digital_dreamscape\\dreamscape_generator\\src\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "social\\digital_dreamscape\\dreamscape_generator\\src\\core\\DiscordManager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "send_message"
        ],
        "classes": {
            "DiscordManager": {
                "methods": [
                    "__init__",
                    "send_message"
                ],
                "docstring": "Placeholder for DiscordManager within the core package.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 4
    },
    "social\\digital_dreamscape\\dreamscape_generator\\src\\core\\MemoryManager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_load_state",
            "_save_state",
            "get_current_state_data",
            "get_full_state",
            "_deep_merge_dicts",
            "update_state",
            "save_task"
        ],
        "classes": {
            "MemoryManager": {
                "methods": [
                    "__init__",
                    "_load_state",
                    "_save_state",
                    "get_current_state_data",
                    "get_full_state",
                    "_deep_merge_dicts",
                    "update_state"
                ],
                "docstring": "Manages the consolidated RPG world state stored in a single JSON file.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 15
    },
    "social\\digital_dreamscape\\dreamscape_generator\\src\\core\\UnifiedDriverManager.py": {
        "language": ".py",
        "functions": [
            "main",
            "_on_rm_error",
            "__new__",
            "__init__",
            "__enter__",
            "__exit__",
            "_get_cached_driver_path",
            "_download_driver_if_needed",
            "get_driver",
            "_get_chrome_major_version",
            "quit_driver",
            "save_cookies",
            "load_cookies",
            "is_logged_in"
        ],
        "classes": {
            "UnifiedDriverManager": {
                "methods": [
                    "__new__",
                    "__init__",
                    "__enter__",
                    "__exit__",
                    "_get_cached_driver_path",
                    "_download_driver_if_needed",
                    "get_driver",
                    "_get_chrome_major_version",
                    "quit_driver",
                    "save_cookies",
                    "load_cookies",
                    "is_logged_in"
                ],
                "docstring": "Singleton class for managing an undetected Chrome WebDriver instance.\nFeatures:\n  - Persistent profile support (or temporary profiles in headless mode)\n  - Cookie saving and loading for session persistence\n  - Mobile emulation and headless mode support\n  - Context management for automatic cleanup\n  - Ability to update driver options dynamically",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 26
    },
    "social\\digital_dreamscape\\dreamscape_generator\\src\\core\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "social\\digital_dreamscape\\dreamscape_generator\\src\\core\\monitoring\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "social\\digital_dreamscape\\dreamscape_generator\\src\\core\\monitoring\\prompt_execution_monitor.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "start_monitoring",
            "report_success",
            "report_failure"
        ],
        "classes": {
            "PromptExecutionMonitor": {
                "methods": [
                    "__init__",
                    "start_monitoring",
                    "report_success",
                    "report_failure"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 8
    },
    "social\\digital_dreamscape\\dreamscape_generator\\threads\\saga_worker.py": {
        "language": ".py",
        "functions": [
            "render_string",
            "__init__",
            "stop",
            "run"
        ],
        "classes": {
            "TemplateEngine": {
                "methods": [
                    "render_string"
                ],
                "docstring": null,
                "base_classes": []
            },
            "SagaGenerationWorker": {
                "methods": [
                    "__init__",
                    "stop",
                    "run"
                ],
                "docstring": "Background thread to generate a full saga by iterating over chat items,\nrendering prompts via Jinja2, calling chat_completion, and emitting\nprogress, results, and errors back to the GUI.",
                "base_classes": [
                    "QThread"
                ]
            }
        },
        "routes": [],
        "complexity": 8
    },
    "social\\digital_dreamscape\\dreamscape_generator\\threads\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "social\\digital_dreamscape\\dreamscape_gui\\dreamscape_tab.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "run",
            "__init__",
            "_init_ui",
            "_toggle_target_chat",
            "_load_initial_data",
            "_load_episode_list",
            "_display_episode_content",
            "_load_chat_list_async",
            "_update_chat_list_combo",
            "_show_chat_list_error",
            "_on_target_chat_selected",
            "_update_generate_button_state",
            "_on_send_context"
        ],
        "classes": {
            "ChatListWorker": {
                "methods": [
                    "__init__",
                    "run"
                ],
                "docstring": "Worker thread to fetch chat list without blocking GUI.",
                "base_classes": [
                    "QThread"
                ]
            },
            "DreamscapeTabWidget": {
                "methods": [
                    "__init__",
                    "_init_ui",
                    "_toggle_target_chat",
                    "_load_initial_data",
                    "_load_episode_list",
                    "_display_episode_content",
                    "_load_chat_list_async",
                    "_update_chat_list_combo",
                    "_show_chat_list_error",
                    "_on_target_chat_selected",
                    "_update_generate_button_state",
                    "_on_send_context"
                ],
                "docstring": null,
                "base_classes": [
                    "QWidget"
                ]
            }
        },
        "routes": [],
        "complexity": 28
    },
    "social\\digital_dreamscape\\dreamscape_gui\\main_window.py": {
        "language": ".py",
        "functions": [
            "run_gui",
            "__init__",
            "closeEvent"
        ],
        "classes": {
            "MainWindow": {
                "methods": [
                    "__init__",
                    "closeEvent"
                ],
                "docstring": null,
                "base_classes": [
                    "QMainWindow"
                ]
            }
        },
        "routes": [],
        "complexity": 5
    },
    "social\\digital_dreamscape\\dreamscape_gui\\swarm_dashboard_tab.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "update_tasks",
            "update_agents",
            "update_stats",
            "update_lore",
            "_on_pause_clicked",
            "_on_retry_clicked"
        ],
        "classes": {
            "SwarmDashboardTab": {
                "methods": [
                    "__init__",
                    "update_tasks",
                    "update_agents",
                    "update_stats",
                    "update_lore",
                    "_on_pause_clicked",
                    "_on_retry_clicked"
                ],
                "docstring": null,
                "base_classes": [
                    "QWidget"
                ]
            }
        },
        "routes": [],
        "complexity": 14
    },
    "social\\digital_dreamscape\\dreamscape_gui\\swarm_data_bridge.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_run"
        ],
        "classes": {
            "SwarmDataBridge": {
                "methods": [
                    "__init__",
                    "_run"
                ],
                "docstring": null,
                "base_classes": [
                    "QObject"
                ]
            }
        },
        "routes": [],
        "complexity": 4
    },
    "social\\digital_dreamscape\\scripts\\dreamscape_cli.py": {
        "language": ".py",
        "functions": [
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "social\\digital_dreamscape\\tests\\test_saga_generation_worker.py": {
        "language": ".py",
        "functions": [
            "saga_worker",
            "test_format_raw_excerpt_dict",
            "test_parse_result_no_json",
            "test_parse_result_with_json",
            "test_parse_result_invalid_json",
            "__init__",
            "get",
            "set"
        ],
        "classes": {
            "DummyMem": {
                "methods": [
                    "__init__",
                    "get",
                    "set"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 11
    },
    "social\\digital_dreamscape\\tests\\test_saga_monitor_integration.py": {
        "language": ".py",
        "functions": [
            "create_worker",
            "test_saga_monitor_success",
            "test_saga_monitor_failure",
            "__init__",
            "emit",
            "__init__",
            "save_fragment",
            "load_fragment",
            "__init__",
            "start_monitoring",
            "report_success",
            "report_failure",
            "fake_chat_completion"
        ],
        "classes": {
            "DummySignal": {
                "methods": [
                    "__init__",
                    "emit"
                ],
                "docstring": null,
                "base_classes": []
            },
            "DummyMemory": {
                "methods": [
                    "__init__",
                    "save_fragment",
                    "load_fragment"
                ],
                "docstring": null,
                "base_classes": []
            },
            "DummyMonitor": {
                "methods": [
                    "__init__",
                    "start_monitoring",
                    "report_success",
                    "report_failure"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 22
    },
    "social\\scripts\\debug_imports.py": {
        "language": ".py",
        "functions": [
            "print_python_path",
            "check_module_structure"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "social\\scripts\\engagement_dashboard.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "update_metrics",
            "get_aggregated_metrics",
            "calculate_unified_score",
            "display_dashboard",
            "log_event"
        ],
        "classes": {
            "EngagementDashboard": {
                "methods": [
                    "__init__",
                    "update_metrics",
                    "get_aggregated_metrics",
                    "calculate_unified_score",
                    "display_dashboard"
                ],
                "docstring": "A simple class to aggregate and display social engagement metrics.\n    Now includes a basic weighted unified engagement score calculation.\n    ",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 11
    },
    "social\\scripts\\inject_task.py": {
        "language": ".py",
        "functions": [
            "parse_arguments",
            "main"
        ],
        "classes": {
            "TaskStatus": {
                "methods": [],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 2
    },
    "social\\tests\\conftest.py": {
        "language": ".py",
        "functions": [
            "pytest_configure"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "social\\tests\\test_agent_load.py": {
        "language": ".py",
        "functions": [
            "generate_message_file",
            "run_load_test"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "social\\tests\\test_devlog_analyzer.py": {
        "language": ".py",
        "functions": [
            "test_db",
            "sample_post_data",
            "sample_metrics",
            "test_track_post",
            "test_update_metrics",
            "test_get_best_posting_times",
            "test_get_top_performing_tags",
            "test_get_content_insights"
        ],
        "classes": {},
        "routes": [],
        "complexity": 8
    },
    "social\\tests\\test_devlog_dispatcher.py": {
        "language": ".py",
        "functions": [
            "mock_twitter",
            "mock_linkedin",
            "test_content_dir",
            "dispatcher",
            "test_handle_new_blog_post",
            "test_handle_new_twitter_content",
            "test_handle_new_linkedin_content",
            "test_content_handler",
            "test_schedule_post",
            "test_duplicate_handling",
            "__init__"
        ],
        "classes": {
            "MockEvent": {
                "methods": [
                    "__init__"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 12
    },
    "social\\tests\\test_devlog_generator.py": {
        "language": ".py",
        "functions": [
            "mock_chat_data",
            "generator",
            "test_process_conversation",
            "test_generate_blog_post",
            "test_generate_social_content",
            "test_content_block_processing",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 7
    },
    "social\\tests\\test_linkedin_strategy.py": {
        "language": ".py",
        "functions": [
            "mock_setup_logging",
            "setUp",
            "start_patch",
            "tearDown",
            "test_login_success",
            "test_login_token_exchange_fails",
            "test_post_text_success",
            "test_post_requires_login",
            "test_post_handles_api_error",
            "test_register_image_upload_success",
            "test_upload_image_binary_success",
            "test_post_with_image_success"
        ],
        "classes": {
            "TestLinkedInStrategy": {
                "methods": [
                    "setUp",
                    "start_patch",
                    "tearDown",
                    "test_login_success",
                    "test_login_token_exchange_fails",
                    "test_post_text_success",
                    "test_post_requires_login",
                    "test_post_handles_api_error",
                    "test_register_image_upload_success",
                    "test_upload_image_binary_success",
                    "test_post_with_image_success"
                ],
                "docstring": null,
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 23
    },
    "social\\tests\\test_reddit_strategy.py": {
        "language": ".py",
        "functions": [
            "mock_setup_logging",
            "setUp",
            "test_login_success",
            "test_post_text_success",
            "test_scrape_mentions_success",
            "test_post_praw_api_exception",
            "test_scrape_mentions_no_mentions"
        ],
        "classes": {
            "TestRedditStrategy": {
                "methods": [
                    "setUp",
                    "test_login_success",
                    "test_post_text_success",
                    "test_scrape_mentions_success",
                    "test_post_praw_api_exception",
                    "test_scrape_mentions_no_mentions"
                ],
                "docstring": null,
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 13
    },
    "social\\tests\\test_social_agent_e2e.py": {
        "language": ".py",
        "functions": [
            "setUp",
            "tearDown",
            "test_cycle_post_success",
            "test_cycle_post_error",
            "test_cycle_unknown_command"
        ],
        "classes": {
            "TestSocialAgentE2E": {
                "methods": [
                    "setUp",
                    "tearDown",
                    "test_cycle_post_success",
                    "test_cycle_post_error",
                    "test_cycle_unknown_command"
                ],
                "docstring": null,
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 10
    },
    "social\\tests\\test_twitter_strategy.py": {
        "language": ".py",
        "functions": [
            "setUp",
            "test_login_timeout_exception_handling",
            "test_post_element_not_found_handling",
            "find_element_side_effect"
        ],
        "classes": {
            "TestTwitterStrategyErrorHandling": {
                "methods": [
                    "setUp",
                    "test_login_timeout_exception_handling",
                    "test_post_element_not_found_handling"
                ],
                "docstring": null,
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 7
    },
    "social\\tests\\test_social_media_agent.py": {
        "language": ".py",
        "functions": [
            "setUp",
            "test_agent_initialization_loads_config",
            "test_agent_initialization_initializes_mailbox",
            "test_process_incoming_message_valid_login",
            "test_process_incoming_message_unknown_command",
            "test_process_incoming_message_valid_post",
            "test_process_incoming_message_missing_command",
            "test_process_incoming_message_scrape_mentions",
            "test_process_incoming_message_check_login_status",
            "test_process_incoming_message_scrape_trends",
            "test_process_incoming_message_scrape_community",
            "test_process_incoming_message_agent_status",
            "test_initialize_driver_success",
            "test_initialize_driver_failure",
            "test_get_or_load_strategy_success_first_time",
            "test_get_or_load_strategy_already_loaded",
            "test_get_or_load_strategy_module_not_found",
            "test_agent_post_method_success",
            "test_agent_post_method_strategy_load_fails",
            "test_agent_post_method_strategy_post_fails",
            "test_agent_scrape_mentions_success",
            "test_agent_scrape_mentions_strategy_missing_method",
            "test_agent_scrape_mentions_strategy_fails",
            "test_agent_scrape_trends_success",
            "test_agent_scrape_community_success"
        ],
        "classes": {
            "TestSocialMediaAgent": {
                "methods": [
                    "setUp",
                    "test_agent_initialization_loads_config",
                    "test_agent_initialization_initializes_mailbox",
                    "test_process_incoming_message_valid_login",
                    "test_process_incoming_message_unknown_command",
                    "test_process_incoming_message_valid_post",
                    "test_process_incoming_message_missing_command",
                    "test_process_incoming_message_scrape_mentions",
                    "test_process_incoming_message_check_login_status",
                    "test_process_incoming_message_scrape_trends",
                    "test_process_incoming_message_scrape_community",
                    "test_process_incoming_message_agent_status",
                    "test_initialize_driver_success",
                    "test_initialize_driver_failure",
                    "test_get_or_load_strategy_success_first_time",
                    "test_get_or_load_strategy_already_loaded",
                    "test_get_or_load_strategy_module_not_found",
                    "test_agent_post_method_success",
                    "test_agent_post_method_strategy_load_fails",
                    "test_agent_post_method_strategy_post_fails",
                    "test_agent_scrape_mentions_success",
                    "test_agent_scrape_mentions_strategy_missing_method",
                    "test_agent_scrape_mentions_strategy_fails",
                    "test_agent_scrape_trends_success",
                    "test_agent_scrape_community_success"
                ],
                "docstring": null,
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 50
    },
    "social\\tests\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "social\\tests\\core\\test_agent_monitor_agent.py": {
        "language": ".py",
        "functions": [
            "setUp",
            "test_log_event",
            "test_handle_event_message_task_completed",
            "test_handle_event_message_task_failed",
            "test_handle_event_message_generic_error",
            "test_handle_event_message_unknown"
        ],
        "classes": {
            "TestAgentMonitorAgent": {
                "methods": [
                    "setUp",
                    "test_log_event",
                    "test_handle_event_message_task_completed",
                    "test_handle_event_message_task_failed",
                    "test_handle_event_message_generic_error",
                    "test_handle_event_message_unknown"
                ],
                "docstring": null,
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 12
    },
    "social\\tests\\core\\test_cursor_control_agent.py": {
        "language": ".py",
        "functions": [
            "setUp",
            "test_initialization",
            "test_initialization_coordinator_fails",
            "test_handle_message_get_editor_content_success",
            "test_handle_message_get_editor_content_fail",
            "test_handle_message_run_terminal_success",
            "test_handle_message_run_terminal_fail",
            "test_handle_message_run_terminal_missing_command",
            "test_handle_message_get_terminal_output_success",
            "test_handle_message_get_terminal_output_fail",
            "test_handle_message_open_file_success",
            "test_handle_message_open_file_fail",
            "test_handle_message_open_file_missing_path",
            "test_handle_message_unknown_action",
            "test_handle_message_no_coordinator",
            "test_shutdown_closes_launched_coordinator",
            "test_shutdown_does_not_close_existing_coordinator",
            "test_shutdown_handles_no_coordinator"
        ],
        "classes": {
            "TestCursorControlAgent": {
                "methods": [
                    "setUp",
                    "test_initialization",
                    "test_initialization_coordinator_fails",
                    "test_handle_message_get_editor_content_success",
                    "test_handle_message_get_editor_content_fail",
                    "test_handle_message_run_terminal_success",
                    "test_handle_message_run_terminal_fail",
                    "test_handle_message_run_terminal_missing_command",
                    "test_handle_message_get_terminal_output_success",
                    "test_handle_message_get_terminal_output_fail",
                    "test_handle_message_open_file_success",
                    "test_handle_message_open_file_fail",
                    "test_handle_message_open_file_missing_path",
                    "test_handle_message_unknown_action",
                    "test_handle_message_no_coordinator",
                    "test_shutdown_closes_launched_coordinator",
                    "test_shutdown_does_not_close_existing_coordinator",
                    "test_shutdown_handles_no_coordinator"
                ],
                "docstring": null,
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 36
    },
    "social\\tests\\core\\test_meredith_resonance_scanner.py": {
        "language": ".py",
        "functions": [
            "setUp",
            "test_initialization",
            "test_handle_message_request_scan",
            "test_handle_message_direct_message",
            "test_handle_message_ignored_type",
            "test_perform_scan_sends_result"
        ],
        "classes": {
            "TestMeredithResonanceScanner": {
                "methods": [
                    "setUp",
                    "test_initialization",
                    "test_handle_message_request_scan",
                    "test_handle_message_direct_message",
                    "test_handle_message_ignored_type",
                    "test_perform_scan_sends_result"
                ],
                "docstring": null,
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 12
    },
    "social\\tests\\core\\test_prompt_feedback_loop_agent.py": {
        "language": ".py",
        "functions": [
            "setUp",
            "test_mark_repair_triggered_success",
            "test_mark_repair_triggered_increment",
            "test_mark_repair_triggered_not_found",
            "test_create_diagnostic_task_run_terminal",
            "test_create_diagnostic_task_open_file",
            "test_create_diagnostic_task_cursor_action",
            "test_create_diagnostic_task_unknown_action"
        ],
        "classes": {
            "TestPromptFeedbackLoopAgent": {
                "methods": [
                    "setUp",
                    "test_mark_repair_triggered_success",
                    "test_mark_repair_triggered_increment",
                    "test_mark_repair_triggered_not_found",
                    "test_create_diagnostic_task_run_terminal",
                    "test_create_diagnostic_task_open_file",
                    "test_create_diagnostic_task_cursor_action",
                    "test_create_diagnostic_task_unknown_action"
                ],
                "docstring": null,
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 16
    },
    "social\\tests\\core\\test_prompt_staging_service.py": {
        "language": ".py",
        "functions": [
            "test_render_prompt_success",
            "test_render_prompt_state_load_failure",
            "test_render_prompt_analysis_load_failure",
            "test_render_prompt_engine_unavailable",
            "test_render_prompt_render_itself_fails"
        ],
        "classes": {
            "TestPromptStagingServiceRender": {
                "methods": [
                    "test_render_prompt_success",
                    "test_render_prompt_state_load_failure",
                    "test_render_prompt_analysis_load_failure",
                    "test_render_prompt_engine_unavailable",
                    "test_render_prompt_render_itself_fails"
                ],
                "docstring": null,
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 10
    },
    "social\\tests\\core\\test_task_injector.py": {
        "language": ".py",
        "functions": [
            "setUp",
            "tearDown",
            "test_initialization",
            "test_run_cycle_injects_tasks_from_file",
            "test_run_cycle_no_input_file"
        ],
        "classes": {
            "TestTaskInjector": {
                "methods": [
                    "setUp",
                    "tearDown",
                    "test_initialization",
                    "test_run_cycle_injects_tasks_from_file",
                    "test_run_cycle_no_input_file"
                ],
                "docstring": null,
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 10
    },
    "social\\tests\\core\\test_task_executor_agent.py": {
        "language": ".py",
        "functions": [
            "setUp",
            "tearDown",
            "test_initialization",
            "test_initialization_creates_task_file",
            "test_load_tasks_valid",
            "test_load_tasks_empty_list",
            "test_load_tasks_invalid_json",
            "test_load_tasks_file_not_found",
            "test_check_dependencies_no_deps",
            "test_check_dependencies_met",
            "test_check_dependencies_unmet_pending",
            "test_check_dependencies_unmet_failed",
            "test_check_dependencies_missing",
            "test_handle_response_success",
            "test_handle_response_failure",
            "test_handle_response_execution_error",
            "test_handle_response_no_task_id",
            "test_handle_response_unhandled_status",
            "test_run_cycle_dispatches_pending_task",
            "test_run_cycle_skips_completed_task",
            "test_run_cycle_skips_unmet_dependencies"
        ],
        "classes": {
            "TestTaskExecutorAgent": {
                "methods": [
                    "setUp",
                    "tearDown",
                    "test_initialization",
                    "test_initialization_creates_task_file",
                    "test_load_tasks_valid",
                    "test_load_tasks_empty_list",
                    "test_load_tasks_invalid_json",
                    "test_load_tasks_file_not_found",
                    "test_check_dependencies_no_deps",
                    "test_check_dependencies_met",
                    "test_check_dependencies_unmet_pending",
                    "test_check_dependencies_unmet_failed",
                    "test_check_dependencies_missing",
                    "test_handle_response_success",
                    "test_handle_response_failure",
                    "test_handle_response_execution_error",
                    "test_handle_response_no_task_id",
                    "test_handle_response_unhandled_status",
                    "test_run_cycle_dispatches_pending_task",
                    "test_run_cycle_skips_completed_task",
                    "test_run_cycle_skips_unmet_dependencies"
                ],
                "docstring": null,
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 42
    },
    "social\\tests\\core\\test_template_engine.py": {
        "language": ".py",
        "functions": [
            "setUp",
            "tearDown",
            "test_render_generic_event_success",
            "test_render_proposal_update_success",
            "test_render_template_not_found",
            "test_render_template_syntax_error",
            "test_render_engine_unavailable",
            "test_render_complex_template",
            "test_render_with_undefined_variables",
            "test_render_with_custom_filters",
            "test_render_with_general_exception",
            "custom_upper"
        ],
        "classes": {
            "TestRenderTemplateFunction": {
                "methods": [
                    "setUp",
                    "tearDown",
                    "test_render_generic_event_success",
                    "test_render_proposal_update_success",
                    "test_render_template_not_found",
                    "test_render_template_syntax_error",
                    "test_render_engine_unavailable",
                    "test_render_complex_template",
                    "test_render_with_undefined_variables",
                    "test_render_with_custom_filters",
                    "test_render_with_general_exception"
                ],
                "docstring": null,
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 23
    },
    "social\\tests\\core\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "social\\tests\\core\\memory\\test_governance_memory_engine.py": {
        "language": ".py",
        "functions": [
            "setUp",
            "tearDown",
            "test_log_single_event",
            "test_log_multiple_events_consistency_and_order",
            "test_log_event_write_failure"
        ],
        "classes": {
            "TestGovernanceMemoryEngine": {
                "methods": [
                    "setUp",
                    "tearDown",
                    "test_log_single_event",
                    "test_log_multiple_events_consistency_and_order",
                    "test_log_event_write_failure"
                ],
                "docstring": null,
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 10
    },
    "social\\tests\\integration\\test_error_recovery.py": {
        "language": ".py",
        "functions": [
            "social_agent",
            "mock_log_event",
            "test_login_failure_authentication",
            "test_post_failure_rate_limit",
            "test_scrape_failure_timeout"
        ],
        "classes": {},
        "routes": [],
        "complexity": 5
    },
    "social\\tests\\integration\\test_core_task_execution.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_get_next_id",
            "register_agent",
            "register_handler",
            "send_message",
            "process_messages",
            "get_agents_with_capability",
            "setUp",
            "tearDown",
            "_create_test_task_list",
            "test_simple_task_execution_success",
            "test_simple_task_execution_failure",
            "test_task_dependency_flow"
        ],
        "classes": {
            "MockQueueAgentBus": {
                "methods": [
                    "__init__",
                    "_get_next_id",
                    "register_agent",
                    "register_handler",
                    "send_message",
                    "process_messages",
                    "get_agents_with_capability"
                ],
                "docstring": null,
                "base_classes": []
            },
            "TestCoreTaskExecution": {
                "methods": [
                    "setUp",
                    "tearDown",
                    "_create_test_task_list",
                    "test_simple_task_execution_success",
                    "test_simple_task_execution_failure",
                    "test_task_dependency_flow"
                ],
                "docstring": null,
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 26
    },
    "social\\tests\\integration\\test_full_prompt_cycle.py": {
        "language": ".py",
        "functions": [
            "test_simulated_prompt_cycle"
        ],
        "classes": {
            "TestFullPromptCycleSimulation": {
                "methods": [
                    "test_simulated_prompt_cycle"
                ],
                "docstring": null,
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 2
    },
    "social\\tests\\integration\\test_posting_workflow.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "get_platform_name",
            "login",
            "post",
            "check_login_status",
            "quit",
            "setUp",
            "_create_post_message",
            "test_post_twitter_success",
            "test_post_reddit_success",
            "test_post_linkedin_success",
            "test_post_strategy_returns_false",
            "test_post_strategy_raises_post_error",
            "test_post_strategy_raises_auth_error",
            "test_post_with_image",
            "side_effect_import"
        ],
        "classes": {
            "MockPostingStrategy": {
                "methods": [
                    "__init__",
                    "get_platform_name",
                    "login",
                    "post",
                    "check_login_status",
                    "quit"
                ],
                "docstring": null,
                "base_classes": [
                    "BaseSocialStrategy"
                ]
            },
            "TestPostingWorkflow": {
                "methods": [
                    "setUp",
                    "_create_post_message",
                    "test_post_twitter_success",
                    "test_post_reddit_success",
                    "test_post_linkedin_success",
                    "test_post_strategy_returns_false",
                    "test_post_strategy_raises_post_error",
                    "test_post_strategy_raises_auth_error",
                    "test_post_with_image"
                ],
                "docstring": null,
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 31
    },
    "social\\tests\\integration\\test_social_agent_loop.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "get_platform_name",
            "login",
            "post",
            "check_login_status",
            "scrape_mentions",
            "scrape_trends",
            "scrape_community",
            "quit",
            "setUp",
            "test_01_process_valid_post_message",
            "test_02_process_valid_scrape_message",
            "test_03_process_message_strategy_fails",
            "test_04_process_invalid_command",
            "test_05_process_post_not_logged_in",
            "test_06_process_post_with_governance_context",
            "test_07_loop_runs_multiple_cycles_empty_inbox",
            "test_08_loop_processes_message_then_empty",
            "test_09_loop_handles_check_messages_error",
            "test_10_loop_shutdown_called_on_interrupt",
            "side_effect_import",
            "shutdown_wrapper"
        ],
        "classes": {
            "MockStrategy": {
                "methods": [
                    "__init__",
                    "get_platform_name",
                    "login",
                    "post",
                    "check_login_status",
                    "scrape_mentions",
                    "scrape_trends",
                    "scrape_community",
                    "quit"
                ],
                "docstring": null,
                "base_classes": [
                    "BaseSocialStrategy"
                ]
            },
            "TestSocialAgentLoop": {
                "methods": [
                    "setUp",
                    "test_01_process_valid_post_message",
                    "test_02_process_valid_scrape_message",
                    "test_03_process_message_strategy_fails",
                    "test_04_process_invalid_command",
                    "test_05_process_post_not_logged_in",
                    "test_06_process_post_with_governance_context",
                    "test_07_loop_runs_multiple_cycles_empty_inbox",
                    "test_08_loop_processes_message_then_empty",
                    "test_09_loop_handles_check_messages_error",
                    "test_10_loop_shutdown_called_on_interrupt"
                ],
                "docstring": null,
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 42
    },
    "social\\tests\\integration\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "social\\tests\\social\\test_facebook_strategy.py": {
        "language": ".py",
        "functions": [
            "mock_config",
            "facebook_strategy",
            "test_reply_posting_success",
            "test_reply_posting_failure",
            "test_reward_mechanism",
            "test_missing_credentials",
            "test_end_to_end_post_and_reply",
            "test_sentiment_integration"
        ],
        "classes": {
            "TestFacebookStrategy": {
                "methods": [
                    "test_reply_posting_success",
                    "test_reply_posting_failure",
                    "test_reward_mechanism",
                    "test_missing_credentials",
                    "test_end_to_end_post_and_reply",
                    "test_sentiment_integration"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 14
    },
    "social\\tests\\social\\test_linkedin_strategy.py": {
        "language": ".py",
        "functions": [
            "mock_config",
            "linkedin_strategy",
            "test_post_creation_success",
            "test_metric_gathering_success",
            "test_metric_gathering_failure",
            "test_connection_growth_tracking",
            "test_sentiment_analysis_integration",
            "test_missing_credentials",
            "test_end_to_end_post_workflow",
            "test_post_template_snapshot"
        ],
        "classes": {
            "TestLinkedInStrategy": {
                "methods": [
                    "test_post_creation_success",
                    "test_metric_gathering_success",
                    "test_metric_gathering_failure",
                    "test_connection_growth_tracking",
                    "test_sentiment_analysis_integration",
                    "test_missing_credentials",
                    "test_end_to_end_post_workflow",
                    "test_post_template_snapshot"
                ],
                "docstring": null,
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 18
    },
    "social\\tests\\social\\test_twitter_strategy.py": {
        "language": ".py",
        "functions": [
            "mock_config",
            "twitter_strategy",
            "test_tweet_posting_success",
            "test_reply_posting_success",
            "test_rate_limit_handling",
            "test_intermediate_screen_handling",
            "test_sentiment_analysis_integration",
            "test_missing_credentials",
            "test_end_to_end_tweet_workflow",
            "test_tweet_template_snapshot"
        ],
        "classes": {
            "TestTwitterStrategy": {
                "methods": [
                    "test_tweet_posting_success",
                    "test_reply_posting_success",
                    "test_rate_limit_handling",
                    "test_intermediate_screen_handling",
                    "test_sentiment_analysis_integration",
                    "test_missing_credentials",
                    "test_end_to_end_tweet_workflow",
                    "test_tweet_template_snapshot"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 18
    },
    "social\\tests\\social\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "social\\tests\\social\\strategies\\base_strategy_test.py": {
        "language": ".py",
        "functions": [
            "mock_config",
            "mock_api",
            "strategy",
            "snapshot_dir",
            "save_snapshot",
            "load_snapshot",
            "test_init_with_valid_credentials",
            "test_init_with_missing_credentials",
            "test_feedback_on_rate_limit",
            "verify_template_rendering"
        ],
        "classes": {
            "BaseStrategyTest": {
                "methods": [
                    "mock_config",
                    "mock_api",
                    "strategy",
                    "snapshot_dir",
                    "save_snapshot",
                    "load_snapshot",
                    "test_init_with_valid_credentials",
                    "test_init_with_missing_credentials",
                    "test_feedback_on_rate_limit",
                    "verify_template_rendering"
                ],
                "docstring": "Base test class for all social media strategy tests.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 20
    },
    "social\\tests\\social\\strategies\\test_twitter_strategy.py": {
        "language": ".py",
        "functions": [
            "mock_config",
            "mock_api",
            "strategy",
            "snapshot_dir",
            "save_snapshot",
            "load_snapshot",
            "test_init_with_valid_credentials",
            "test_init_with_missing_credentials",
            "test_feedback_on_rate_limit",
            "test_post_tweet_success",
            "test_post_tweet_rate_limit",
            "test_post_reply_success",
            "test_analyze_tweet_sentiment",
            "test_detect_and_handle_intermediate_screens_phone",
            "test_detect_and_handle_intermediate_screens_email",
            "test_detect_and_handle_intermediate_screens_no_screens",
            "test_render_tweet_template",
            "test_render_tweet_template_no_hashtags",
            "test_render_tweet_template_empty_content",
            "test_render_tweet_template_missing_content",
            "test_post_tweet_with_max_length"
        ],
        "classes": {
            "TestTwitterStrategy": {
                "methods": [
                    "test_post_tweet_success",
                    "test_post_tweet_rate_limit",
                    "test_post_reply_success",
                    "test_analyze_tweet_sentiment",
                    "test_detect_and_handle_intermediate_screens_phone",
                    "test_detect_and_handle_intermediate_screens_email",
                    "test_detect_and_handle_intermediate_screens_no_screens",
                    "test_render_tweet_template",
                    "test_render_tweet_template_no_hashtags",
                    "test_render_tweet_template_empty_content",
                    "test_render_tweet_template_missing_content",
                    "test_post_tweet_with_max_length"
                ],
                "docstring": "Test suite for Twitter platform strategy.",
                "base_classes": [
                    "BaseStrategyTest"
                ]
            }
        },
        "routes": [],
        "complexity": 33
    },
    "social\\tests\\strategies\\base_strategy_test.py": {
        "language": ".py",
        "functions": [
            "login",
            "post_content",
            "scrape_mentions",
            "mock_config",
            "mock_driver",
            "strategy",
            "test_init_with_valid_config",
            "test_init_with_missing_config",
            "test_validate_media_files_success",
            "test_validate_media_files_missing",
            "test_wait_for_element_success",
            "test_wait_for_element_timeout",
            "test_safe_click_success",
            "test_safe_click_retry_success",
            "test_safe_click_failure",
            "test_safe_send_keys_success",
            "test_safe_send_keys_retry_success",
            "test_safe_send_keys_failure",
            "test_extract_error_details_success",
            "test_extract_error_details_failure"
        ],
        "classes": {
            "MockStrategy": {
                "methods": [
                    "login",
                    "post_content",
                    "scrape_mentions"
                ],
                "docstring": "Mock strategy for testing base functionality.",
                "base_classes": [
                    "BaseStrategy"
                ]
            },
            "BaseStrategyTest": {
                "methods": [
                    "mock_config",
                    "mock_driver",
                    "strategy",
                    "test_init_with_valid_config",
                    "test_init_with_missing_config",
                    "test_validate_media_files_success",
                    "test_validate_media_files_missing",
                    "test_wait_for_element_success",
                    "test_wait_for_element_timeout",
                    "test_safe_click_success",
                    "test_safe_click_retry_success",
                    "test_safe_click_failure",
                    "test_safe_send_keys_success",
                    "test_safe_send_keys_retry_success",
                    "test_safe_send_keys_failure",
                    "test_extract_error_details_success",
                    "test_extract_error_details_failure"
                ],
                "docstring": "Base test class for all strategy tests.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 40
    },
    "social\\tests\\strategies\\base_test.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "find_element",
            "find_elements",
            "get",
            "quit",
            "__init__",
            "click",
            "send_keys",
            "is_displayed",
            "get_attribute",
            "setUp",
            "tearDown",
            "assert_logged_event",
            "simulate_element_present",
            "simulate_element_not_found",
            "simulate_login_success",
            "simulate_login_failure",
            "simulate_post_success",
            "simulate_post_failure"
        ],
        "classes": {
            "MockWebDriver": {
                "methods": [
                    "__init__",
                    "find_element",
                    "find_elements",
                    "get",
                    "quit"
                ],
                "docstring": "Mock Selenium WebDriver for testing.",
                "base_classes": []
            },
            "MockElement": {
                "methods": [
                    "__init__",
                    "click",
                    "send_keys",
                    "is_displayed",
                    "get_attribute"
                ],
                "docstring": "Mock Selenium WebElement for testing.",
                "base_classes": []
            },
            "BaseStrategyTest": {
                "methods": [
                    "setUp",
                    "tearDown",
                    "assert_logged_event",
                    "simulate_element_present",
                    "simulate_element_not_found",
                    "simulate_login_success",
                    "simulate_login_failure",
                    "simulate_post_success",
                    "simulate_post_failure"
                ],
                "docstring": "Base test class for all social media strategy tests.",
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 38
    },
    "social\\tests\\strategies\\test_facebook_strategy.py": {
        "language": ".py",
        "functions": [
            "mock_setup_logging",
            "strategy",
            "test_validate_api_credentials_success",
            "test_validate_api_credentials_missing",
            "test_login_success",
            "test_login_failure_email",
            "test_login_failure_password",
            "test_post_content_success",
            "test_post_content_with_media",
            "test_post_content_failure",
            "test_scrape_mentions_success",
            "test_scrape_mentions_with_since",
            "test_scrape_mentions_empty",
            "test_post_reply_success",
            "test_analyze_post_sentiment",
            "test_calculate_engagement_reward",
            "test_render_post_template"
        ],
        "classes": {
            "TestFacebookStrategy": {
                "methods": [
                    "strategy",
                    "test_validate_api_credentials_success",
                    "test_validate_api_credentials_missing",
                    "test_login_success",
                    "test_login_failure_email",
                    "test_login_failure_password",
                    "test_post_content_success",
                    "test_post_content_with_media",
                    "test_post_content_failure",
                    "test_scrape_mentions_success",
                    "test_scrape_mentions_with_since",
                    "test_scrape_mentions_empty",
                    "test_post_reply_success",
                    "test_analyze_post_sentiment",
                    "test_calculate_engagement_reward",
                    "test_render_post_template"
                ],
                "docstring": "Test cases for FacebookStrategy.",
                "base_classes": [
                    "BaseStrategyTest"
                ]
            }
        },
        "routes": [],
        "complexity": 33
    },
    "social\\tests\\strategies\\test_linkedin_strategy.py": {
        "language": ".py",
        "functions": [
            "mock_driver",
            "mock_wait",
            "strategy",
            "test_initialize_success",
            "test_initialize_failure",
            "test_login_success",
            "test_login_without_init",
            "test_login_failure",
            "test_post_update_success",
            "test_post_update_not_logged_in",
            "test_post_update_with_media",
            "test_post_update_failure",
            "test_close",
            "test_close_with_error",
            "test_context_manager",
            "strategy",
            "test_validate_api_credentials_success",
            "test_validate_api_credentials_missing",
            "test_login_success",
            "test_login_failure_username",
            "test_login_failure_password",
            "test_post_content_success",
            "test_post_content_with_media",
            "test_post_content_failure",
            "test_scrape_mentions_success",
            "test_scrape_mentions_with_since",
            "test_scrape_mentions_empty",
            "test_gather_post_metrics_success",
            "test_gather_post_metrics_failure",
            "test_track_connection_growth_success",
            "test_track_connection_growth_threshold",
            "test_analyze_post_sentiment",
            "test_render_post_template"
        ],
        "classes": {
            "TestLinkedInStrategy": {
                "methods": [
                    "strategy",
                    "test_validate_api_credentials_success",
                    "test_validate_api_credentials_missing",
                    "test_login_success",
                    "test_login_failure_username",
                    "test_login_failure_password",
                    "test_post_content_success",
                    "test_post_content_with_media",
                    "test_post_content_failure",
                    "test_scrape_mentions_success",
                    "test_scrape_mentions_with_since",
                    "test_scrape_mentions_empty",
                    "test_gather_post_metrics_success",
                    "test_gather_post_metrics_failure",
                    "test_track_connection_growth_success",
                    "test_track_connection_growth_threshold",
                    "test_analyze_post_sentiment",
                    "test_render_post_template"
                ],
                "docstring": "Test cases for LinkedInStrategy.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 51
    },
    "social\\tests\\strategies\\test_sentiment_analysis.py": {
        "language": ".py",
        "functions": [
            "setUp",
            "test_direct_sentiment_analysis_benchmarks",
            "test_twitter_strategy_sentiment_integration",
            "find_element_side_effect"
        ],
        "classes": {
            "TestSentimentAnalysisIntegration": {
                "methods": [
                    "setUp",
                    "test_direct_sentiment_analysis_benchmarks",
                    "test_twitter_strategy_sentiment_integration"
                ],
                "docstring": null,
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 7
    },
    "social\\tests\\strategies\\test_twitter_strategy.py": {
        "language": ".py",
        "functions": [
            "strategy",
            "test_validate_api_credentials_success",
            "test_validate_api_credentials_missing",
            "test_login_success",
            "test_login_failure_username",
            "test_login_failure_password",
            "test_post_content_success",
            "test_post_content_with_media",
            "test_post_content_rate_limit",
            "test_scrape_mentions_success",
            "test_scrape_mentions_with_since",
            "test_scrape_mentions_empty",
            "test_post_reply_success",
            "test_analyze_tweet_sentiment",
            "test_detect_and_handle_intermediate_screens",
            "test_render_tweet_template"
        ],
        "classes": {
            "TestTwitterStrategy": {
                "methods": [
                    "strategy",
                    "test_validate_api_credentials_success",
                    "test_validate_api_credentials_missing",
                    "test_login_success",
                    "test_login_failure_username",
                    "test_login_failure_password",
                    "test_post_content_success",
                    "test_post_content_with_media",
                    "test_post_content_rate_limit",
                    "test_scrape_mentions_success",
                    "test_scrape_mentions_with_since",
                    "test_scrape_mentions_empty",
                    "test_post_reply_success",
                    "test_analyze_tweet_sentiment",
                    "test_detect_and_handle_intermediate_screens",
                    "test_render_tweet_template"
                ],
                "docstring": "Test cases for TwitterStrategy.",
                "base_classes": [
                    "BaseStrategyTest"
                ]
            }
        },
        "routes": [],
        "complexity": 32
    },
    "social\\tests\\strategies\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "social\\tests\\tools\\test_chat_cursor_bridge.py": {
        "language": ".py",
        "functions": [
            "mock_config_manager",
            "tearDown",
            "test_write_to_cursor_input_success",
            "test_write_to_cursor_input_failure",
            "test_read_from_cursor_output_success",
            "test_read_from_cursor_output_file_not_found",
            "test_read_from_cursor_output_empty_file",
            "test_read_from_cursor_output_invalid_json"
        ],
        "classes": {
            "TestCursorBridgeFunctions": {
                "methods": [
                    "tearDown",
                    "test_write_to_cursor_input_success",
                    "test_write_to_cursor_input_failure",
                    "test_read_from_cursor_output_success",
                    "test_read_from_cursor_output_file_not_found",
                    "test_read_from_cursor_output_empty_file",
                    "test_read_from_cursor_output_invalid_json"
                ],
                "docstring": null,
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 15
    },
    "social\\tests\\tools\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "social\\tests\\utils\\test_browser_utils.py": {
        "language": ".py",
        "functions": [
            "mock_uc",
            "mock_options",
            "test_get_undetected_driver_headless",
            "test_get_undetected_driver_with_proxy",
            "test_get_undetected_driver_with_user_agent",
            "test_get_undetected_driver_all_options",
            "test_get_undetected_driver_import_error",
            "test_get_undetected_driver_chrome_error",
            "test_get_undetected_driver_options_error"
        ],
        "classes": {},
        "routes": [],
        "complexity": 9
    },
    "social\\tests\\utils\\test_chatgpt_scraper.py": {
        "language": ".py",
        "functions": [
            "mock_driver",
            "mock_webdriver",
            "temp_cookie_file",
            "valid_cookies",
            "test_initialization",
            "test_context_manager",
            "test_setup_browser_success",
            "test_setup_browser_failure",
            "test_cleanup_success",
            "test_cleanup_failure",
            "test_save_cookies_success",
            "test_save_cookies_failure",
            "test_load_cookies_success",
            "test_load_cookies_missing_file",
            "test_inject_jquery_success",
            "test_inject_jquery_failure",
            "test_scroll_and_capture_chats_success",
            "test_scroll_and_capture_chats_empty",
            "test_run_scraper_success",
            "test_run_scraper_navigation_error",
            "test_integration_full_workflow"
        ],
        "classes": {
            "TestChatGPTScraper": {
                "methods": [
                    "test_initialization",
                    "test_context_manager",
                    "test_setup_browser_success",
                    "test_setup_browser_failure",
                    "test_cleanup_success",
                    "test_cleanup_failure",
                    "test_save_cookies_success",
                    "test_save_cookies_failure",
                    "test_load_cookies_success",
                    "test_load_cookies_missing_file",
                    "test_inject_jquery_success",
                    "test_inject_jquery_failure",
                    "test_scroll_and_capture_chats_success",
                    "test_scroll_and_capture_chats_empty",
                    "test_run_scraper_success",
                    "test_run_scraper_navigation_error",
                    "test_integration_full_workflow"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 38
    },
    "social\\tests\\utils\\test_cursor_utils.py": {
        "language": ".py",
        "functions": [
            "valid_prompt_payload",
            "temp_cursor_dir",
            "test_export_prompt_success",
            "test_export_prompt_invalid_payload",
            "test_export_prompt_none_payload",
            "test_export_prompt_directory_creation",
            "test_export_prompt_os_error",
            "test_export_prompt_json_error",
            "test_export_prompt_write_error",
            "test_export_prompt_filename_generation",
            "test_export_prompt_special_chars_in_id",
            "test_export_prompt_no_prompt_id",
            "test_integration_file_persistence"
        ],
        "classes": {
            "TestCursorUtils": {
                "methods": [
                    "test_export_prompt_success",
                    "test_export_prompt_invalid_payload",
                    "test_export_prompt_none_payload",
                    "test_export_prompt_directory_creation",
                    "test_export_prompt_os_error",
                    "test_export_prompt_json_error",
                    "test_export_prompt_write_error",
                    "test_export_prompt_filename_generation",
                    "test_export_prompt_special_chars_in_id",
                    "test_export_prompt_no_prompt_id",
                    "test_integration_file_persistence"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 24
    },
    "social\\tests\\utils\\test_devlog_analyzer.py": {
        "language": ".py",
        "functions": [
            "create_sample_data",
            "test_track_post_with_publish_time",
            "test_get_best_posting_times_no_data"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "social\\tests\\utils\\test_mailbox_handler.py": {
        "language": ".py",
        "functions": [
            "mailbox_dirs",
            "test_mailbox_init_creates_dirs",
            "test_check_for_messages_empty_inbox",
            "test_check_for_messages_valid_message",
            "test_check_for_messages_invalid_json",
            "test_check_for_messages_not_dict",
            "test_check_for_messages_inbox_not_found",
            "test_send_message_success",
            "test_send_message_write_fails",
            "mock_logging",
            "test_init_dir_creation_fails",
            "test_check_messages_read_io_error",
            "test_move_file_fails",
            "test_check_messages_empty_file",
            "test_check_messages_file_disappears_before_open",
            "setUp",
            "tearDown",
            "test_01_initialization_creates_directories",
            "test_02_send_message_creates_file",
            "test_03_check_messages_empty_inbox",
            "test_04_check_messages_valid_json",
            "test_05_check_messages_invalid_json",
            "test_06_check_messages_non_dict_json",
            "test_07_check_messages_non_json_file",
            "test_08_check_messages_mixed_files"
        ],
        "classes": {
            "TestMailboxHandler": {
                "methods": [
                    "setUp",
                    "tearDown",
                    "test_01_initialization_creates_directories",
                    "test_02_send_message_creates_file",
                    "test_03_check_messages_empty_inbox",
                    "test_04_check_messages_valid_json",
                    "test_05_check_messages_invalid_json",
                    "test_06_check_messages_non_dict_json",
                    "test_07_check_messages_non_json_file",
                    "test_08_check_messages_mixed_files"
                ],
                "docstring": null,
                "base_classes": [
                    "unittest.TestCase"
                ]
            },
            "TestMailboxHandlerUnittestStyle": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 35
    },
    "social\\tests\\utils\\test_performance_logger.py": {
        "language": ".py",
        "functions": [
            "test_log_successful_outcome",
            "test_log_failed_outcome",
            "test_log_file_write_error"
        ],
        "classes": {
            "TestPerformanceLogger": {
                "methods": [
                    "test_log_successful_outcome",
                    "test_log_failed_outcome",
                    "test_log_file_write_error"
                ],
                "docstring": null,
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 6
    },
    "social\\tests\\utils\\test_retry_utils.py": {
        "language": ".py",
        "functions": [
            "test_successful_execution_no_retry",
            "test_retry_on_timeout_exception",
            "test_retry_on_stale_element",
            "test_retry_on_element_intercepted",
            "test_max_retries_exceeded",
            "test_custom_retry_parameters",
            "test_exponential_backoff",
            "test_preserve_function_metadata",
            "test_mixed_exceptions",
            "test_args_kwargs_passing",
            "test_integration_with_selenium",
            "test_func",
            "click_element",
            "__init__",
            "click"
        ],
        "classes": {
            "TestRetryUtils": {
                "methods": [
                    "test_successful_execution_no_retry",
                    "test_retry_on_timeout_exception",
                    "test_retry_on_stale_element",
                    "test_retry_on_element_intercepted",
                    "test_max_retries_exceeded",
                    "test_custom_retry_parameters",
                    "test_exponential_backoff",
                    "test_preserve_function_metadata",
                    "test_mixed_exceptions",
                    "test_args_kwargs_passing",
                    "test_integration_with_selenium"
                ],
                "docstring": null,
                "base_classes": []
            },
            "MockWebElement": {
                "methods": [
                    "__init__",
                    "click"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 28
    },
    "social\\tests\\utils\\test_utils.py": {
        "language": ".py",
        "functions": [
            "create_mock_strategy_config",
            "simulate_timeout_exception",
            "setup_driver",
            "create_mock_agent_config",
            "initialize_mock_strategy",
            "__init__",
            "get",
            "find_element",
            "find_elements",
            "add_mock_element",
            "clear_mock_elements",
            "quit",
            "__init__",
            "click",
            "send_keys",
            "is_displayed",
            "get_attribute",
            "clear",
            "__init__",
            "json",
            "raise_for_status",
            "__init__",
            "_log_call",
            "login",
            "create_post",
            "get_analytics",
            "check_login_status",
            "upload_media",
            "add_tags",
            "schedule_post",
            "set_mock_login",
            "set_mock_create_post",
            "set_mock_analytics",
            "reset_call_log",
            "get_call_log"
        ],
        "classes": {
            "MockWebDriver": {
                "methods": [
                    "__init__",
                    "get",
                    "find_element",
                    "find_elements",
                    "add_mock_element",
                    "clear_mock_elements",
                    "quit"
                ],
                "docstring": "Mock Selenium WebDriver for testing.",
                "base_classes": []
            },
            "MockElement": {
                "methods": [
                    "__init__",
                    "click",
                    "send_keys",
                    "is_displayed",
                    "get_attribute",
                    "clear"
                ],
                "docstring": "Mock Selenium WebElement for testing.",
                "base_classes": []
            },
            "MockResponse": {
                "methods": [
                    "__init__",
                    "json",
                    "raise_for_status"
                ],
                "docstring": "Mock requests.Response for testing.",
                "base_classes": []
            },
            "MockBaseSocialStrategy": {
                "methods": [
                    "__init__",
                    "_log_call",
                    "login",
                    "create_post",
                    "get_analytics",
                    "check_login_status",
                    "upload_media",
                    "add_tags",
                    "schedule_post",
                    "set_mock_login",
                    "set_mock_create_post",
                    "set_mock_analytics",
                    "reset_call_log",
                    "get_call_log"
                ],
                "docstring": "Mock implementation of BaseSocialStrategy for testing purposes.",
                "base_classes": [
                    "BaseSocialStrategy"
                ]
            }
        },
        "routes": [],
        "complexity": 65
    },
    "social\\tests\\utils\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "social\\utils\\chatgpt_scraper.py": {
        "language": ".py",
        "functions": [
            "main",
            "__init__",
            "__enter__",
            "__exit__",
            "setup_browser",
            "cleanup",
            "save_cookies",
            "load_cookies",
            "_perform_login",
            "scrape_single_chat",
            "write_json"
        ],
        "classes": {
            "ChatGPTScraper": {
                "methods": [
                    "__init__",
                    "__enter__",
                    "__exit__",
                    "setup_browser",
                    "cleanup",
                    "save_cookies",
                    "load_cookies",
                    "_perform_login",
                    "scrape_single_chat"
                ],
                "docstring": "Manages ChatGPT web scraping operations with session persistence.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 20
    },
    "social\\utils\\common.py": {
        "language": ".py",
        "functions": [
            "retry_on_exception",
            "decorator",
            "sync_wrapper"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "social\\utils\\cursor.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "update_context",
            "add_to_history",
            "set_current_file",
            "record_command",
            "get_file_context",
            "clear_history",
            "_save_state",
            "_load_state",
            "__init__",
            "add_message",
            "get_context",
            "clear"
        ],
        "classes": {
            "CursorState": {
                "methods": [
                    "__init__",
                    "update_context",
                    "add_to_history",
                    "set_current_file",
                    "record_command",
                    "get_file_context",
                    "clear_history",
                    "_save_state",
                    "_load_state"
                ],
                "docstring": "Manages cursor state and context for chat interactions.",
                "base_classes": []
            },
            "ChatContext": {
                "methods": [
                    "__init__",
                    "add_message",
                    "get_context",
                    "clear"
                ],
                "docstring": "Manages chat context and history for conversations.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 26
    },
    "social\\utils\\devlog_analyzer.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_get_connection",
            "_init_db",
            "track_post",
            "update_metrics",
            "get_best_posting_times",
            "get_top_performing_tags",
            "get_content_insights"
        ],
        "classes": {
            "DevLogAnalyzer": {
                "methods": [
                    "__init__",
                    "_get_connection",
                    "_init_db",
                    "track_post",
                    "update_metrics",
                    "get_best_posting_times",
                    "get_top_performing_tags",
                    "get_content_insights"
                ],
                "docstring": "Analyzes post performance and provides optimization insights.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 16
    },
    "social\\utils\\devlog_dispatcher.py": {
        "language": ".py",
        "functions": [
            "main",
            "__init__",
            "on_created",
            "__init__",
            "_initialize_strategies",
            "start",
            "handle_new_blog_post",
            "handle_new_social_content",
            "schedule_post",
            "_generate_post_id",
            "_extract_tags",
            "_get_next_optimal_time",
            "publish_job"
        ],
        "classes": {
            "ContentHandler": {
                "methods": [
                    "__init__",
                    "on_created"
                ],
                "docstring": "Handles file system events for new content.",
                "base_classes": [
                    "FileSystemEventHandler"
                ]
            },
            "DevLogDispatcher": {
                "methods": [
                    "__init__",
                    "_initialize_strategies",
                    "start",
                    "handle_new_blog_post",
                    "handle_new_social_content",
                    "schedule_post",
                    "_generate_post_id",
                    "_extract_tags",
                    "_get_next_optimal_time"
                ],
                "docstring": "Autonomous agent that watches for new content and publishes it\nto appropriate platforms using configured strategies.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 24
    },
    "social\\utils\\devlog_generator.py": {
        "language": ".py",
        "functions": [
            "initialize_strategies",
            "main",
            "__init__",
            "process_conversation",
            "_process_message",
            "generate_blog_post",
            "generate_social_content",
            "_generate_title",
            "_generate_description",
            "_extract_tags",
            "_detect_language",
            "_extract_metadata",
            "auto_publish"
        ],
        "classes": {
            "ContentBlock": {
                "methods": [],
                "docstring": "Represents a block of content from the conversation.",
                "base_classes": []
            },
            "DevLogPost": {
                "methods": [],
                "docstring": "Represents a structured blog post from a conversation.",
                "base_classes": []
            },
            "DevLogGenerator": {
                "methods": [
                    "__init__",
                    "process_conversation",
                    "_process_message",
                    "generate_blog_post",
                    "generate_social_content",
                    "_generate_title",
                    "_generate_description",
                    "_extract_tags",
                    "_detect_language",
                    "_extract_metadata",
                    "auto_publish"
                ],
                "docstring": "Transforms ChatGPT conversations into various content formats.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 24
    },
    "social\\utils\\feedback_processor.py": {
        "language": ".py",
        "functions": [
            "_extract_potential_suggestions",
            "_create_task_message",
            "process_feedback",
            "log_event",
            "__init__",
            "send_message"
        ],
        "classes": {
            "DummyMailboxHandler": {
                "methods": [
                    "__init__",
                    "send_message"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 8
    },
    "social\\utils\\logging_utils.py": {
        "language": ".py",
        "functions": [
            "log_event",
            "get_logger"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "social\\utils\\selenium_utils.py": {
        "language": ".py",
        "functions": [
            "wait_for_element",
            "safe_click",
            "safe_send_keys",
            "navigate_to"
        ],
        "classes": {},
        "routes": [],
        "complexity": 4
    },
    "social\\utils\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "tests\\conftest.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "social\\utils\\content\\post_context_generator.py": {
        "language": ".py",
        "functions": [
            "generate_context_from_governance"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "tests\\test_apply_proposals.py": {
        "language": ".py",
        "functions": [
            "temp_rulebook",
            "temp_proposals_file",
            "test_get_existing_rule_ids_success",
            "test_get_existing_rule_ids_empty",
            "test_get_existing_rule_ids_no_file",
            "test_parse_proposal_valid",
            "test_parse_proposal_already_accepted",
            "test_parse_proposal_already_rejected",
            "test_parse_proposal_bad_yaml",
            "test_parse_proposal_no_yaml",
            "test_parse_proposal_invalid_structure",
            "test_parse_proposal_missing_id",
            "test_update_proposal_block_status_add_accepted",
            "test_update_proposal_block_status_add_rejected",
            "test_update_proposal_block_status_replace_status",
            "empty_rulebook_path",
            "test_append_rule_creates_header",
            "test_append_rule_uses_existing_header",
            "test_main_logic"
        ],
        "classes": {},
        "routes": [],
        "complexity": 19
    },
    "tests\\test_cli.py": {
        "language": ".py",
        "functions": [
            "test_cli_help",
            "test_run_missing_config"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "tests\\test_context_planner.py": {
        "language": ".py",
        "functions": [
            "test_parse_context_structure",
            "test_extract_entities_v3_basic",
            "test_extract_entities_v3_empty",
            "test_generate_context_plan_v3_returns_list",
            "test_generate_context_plan_v3_empty_plan",
            "test_create_plan_step_defaults",
            "test_create_plan_step_with_store"
        ],
        "classes": {},
        "routes": [],
        "complexity": 7
    },
    "tests\\test_fragment_forge_tab.py": {
        "language": ".py",
        "functions": [
            "test_init_requires_managers",
            "test_init_success"
        ],
        "classes": {
            "DummyMemoryManager": {
                "methods": [],
                "docstring": null,
                "base_classes": []
            },
            "DummyTemplateEngine": {
                "methods": [],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 2
    },
    "tests\\test_emotion_detector.py": {
        "language": ".py",
        "functions": [
            "detector",
            "test_detect_frustration",
            "test_detect_insight",
            "test_detect_inspiration",
            "test_detect_neutral"
        ],
        "classes": {},
        "routes": [],
        "complexity": 5
    },
    "tests\\test_governance_memory_engine.py": {
        "language": ".py",
        "functions": [
            "setUp",
            "tearDown",
            "test_log_single_event",
            "test_log_multiple_events",
            "test_log_event_error_handling"
        ],
        "classes": {
            "TestGovernanceMemoryEngine": {
                "methods": [
                    "setUp",
                    "tearDown",
                    "test_log_single_event",
                    "test_log_multiple_events",
                    "test_log_event_error_handling"
                ],
                "docstring": null,
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 10
    },
    "tests\\test_governance_scraper.py": {
        "language": ".py",
        "functions": [
            "setUp",
            "tearDown",
            "test_load_recent_governance_events",
            "test_load_recent_reflections",
            "test_load_proposals_proposed",
            "test_load_proposals_all",
            "test_get_rulebook_summary",
            "test_generate_governance_data"
        ],
        "classes": {
            "TestGovernanceScraper": {
                "methods": [
                    "setUp",
                    "tearDown",
                    "test_load_recent_governance_events",
                    "test_load_recent_reflections",
                    "test_load_proposals_proposed",
                    "test_load_proposals_all",
                    "test_get_rulebook_summary",
                    "test_generate_governance_data"
                ],
                "docstring": null,
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 16
    },
    "tests\\test_gpt_command_router.py": {
        "language": ".py",
        "functions": [
            "setUp",
            "tearDown",
            "test_parse_accept_command",
            "test_parse_reject_command_with_reason",
            "test_parse_multiple_commands",
            "test_parse_no_commands",
            "test_parse_case_insensitivity",
            "test_update_status_accept",
            "test_update_status_reject_with_reason",
            "test_update_status_proposal_not_found",
            "test_update_status_file_not_found",
            "test_update_status_bad_format_proposal",
            "test_execute_accept_command",
            "test_execute_reject_command",
            "test_main_flow"
        ],
        "classes": {
            "TestGptCommandRouter": {
                "methods": [
                    "setUp",
                    "tearDown",
                    "test_parse_accept_command",
                    "test_parse_reject_command_with_reason",
                    "test_parse_multiple_commands",
                    "test_parse_no_commands",
                    "test_parse_case_insensitivity",
                    "test_update_status_accept",
                    "test_update_status_reject_with_reason",
                    "test_update_status_proposal_not_found",
                    "test_update_status_file_not_found",
                    "test_update_status_bad_format_proposal",
                    "test_execute_accept_command",
                    "test_execute_reject_command",
                    "test_main_flow"
                ],
                "docstring": null,
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 30
    },
    "tests\\test_monitor_analyzer.py": {
        "language": ".py",
        "functions": [
            "temp_rulebook_for_monitor",
            "temp_task_pool_empty",
            "temp_logs_path",
            "temp_agent_dirs_root",
            "temp_proposals_path",
            "test_load_rules",
            "test_load_tasks_file_not_found",
            "sample_rules",
            "test_halt_unnecessary_keyword_match",
            "test_halt_necessary_no_match",
            "test_halt_agent_specific_match",
            "test_halt_agent_specific_no_match",
            "test_log_unnecessary_halt",
            "test_broadcast_alert",
            "test_request_rulebook_update",
            "test_halt_status_handler"
        ],
        "classes": {},
        "routes": [],
        "complexity": 16
    },
    "tests\\test_prompt_router.py": {
        "language": ".py",
        "functions": [
            "test_routing_roundtrip"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "tests\\test_reflection_agent.py": {
        "language": ".py",
        "functions": [
            "setUp",
            "tearDown",
            "test_parse_md_file",
            "test_decide_response_disagree_rule",
            "test_decide_response_disagree_monitor_halt",
            "test_decide_response_disagree_monitor_valid",
            "test_decide_response_agree",
            "test_process_alert_file_success",
            "test_process_alert_file_no_alert_id"
        ],
        "classes": {
            "TestReflectionAgent": {
                "methods": [
                    "setUp",
                    "tearDown",
                    "test_parse_md_file",
                    "test_decide_response_disagree_rule",
                    "test_decide_response_disagree_monitor_halt",
                    "test_decide_response_disagree_monitor_valid",
                    "test_decide_response_agree",
                    "test_process_alert_file_success",
                    "test_process_alert_file_no_alert_id"
                ],
                "docstring": null,
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 18
    },
    "tests\\test_saga_orchestrator.py": {
        "language": ".py",
        "functions": [
            "patch_dependencies",
            "test_orchestrator_run",
            "__init__",
            "run",
            "__init__",
            "start",
            "get",
            "set"
        ],
        "classes": {
            "DummyReflectionAgent": {
                "methods": [
                    "__init__",
                    "run"
                ],
                "docstring": null,
                "base_classes": []
            },
            "DummySagaWorker": {
                "methods": [
                    "__init__",
                    "start"
                ],
                "docstring": null,
                "base_classes": []
            },
            "FakeMemoryManager": {
                "methods": [
                    "get",
                    "set"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 14
    },
    "tests\\test_task_visualizer_app.py": {
        "language": ".py",
        "functions": [
            "temp_empty_file",
            "temp_invalid_json",
            "temp_valid_tasks",
            "test_read_tasks_empty",
            "test_read_tasks_invalid",
            "test_read_tasks_valid",
            "test_load_task_data_empty",
            "test_load_task_data_valid",
            "error"
        ],
        "classes": {
            "DummySt": {
                "methods": [
                    "error"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 10
    },
    "tests\\test_template_engine.py": {
        "language": ".py",
        "functions": [
            "setUpClass",
            "tearDownClass",
            "test_render_valid_template",
            "test_render_with_tojson_filter",
            "test_render_template_not_found",
            "test_render_with_missing_variable"
        ],
        "classes": {
            "TestTemplateEngine": {
                "methods": [
                    "setUpClass",
                    "tearDownClass",
                    "test_render_valid_template",
                    "test_render_with_tojson_filter",
                    "test_render_template_not_found",
                    "test_render_with_missing_variable"
                ],
                "docstring": null,
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 12
    },
    "tests\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "tests\\adapters\\test_registry.py": {
        "language": ".py",
        "functions": [
            "test_registry_contains_adapters",
            "test_openai_adapter_instantiation",
            "test_cursor_rpc_adapter_instantiation",
            "test_discord_adapter_instantiation",
            "test_invalid_adapter_name",
            "test_crew_agent_uses_default_adapter",
            "__init__",
            "execute"
        ],
        "classes": {
            "DummyAdapter": {
                "methods": [
                    "__init__",
                    "execute"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 10
    },
    "tests\\coordination\\cursor\\test_cursor_chat_coordinator.py": {
        "language": ".py",
        "functions": [
            "setUp",
            "test_interpret_response_code_block",
            "test_interpret_response_accept_prompt",
            "test_interpret_response_task_complete",
            "test_interpret_response_no_action"
        ],
        "classes": {
            "TestCursorChatCoordinator": {
                "methods": [
                    "setUp",
                    "test_interpret_response_code_block",
                    "test_interpret_response_accept_prompt",
                    "test_interpret_response_task_complete",
                    "test_interpret_response_no_action"
                ],
                "docstring": null,
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 10
    },
    "tests\\core\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "tests\\core\\chat_engine\\test_feedback_engine_v2.py": {
        "language": ".py",
        "functions": [
            "clear_openai_api_key",
            "test_analyze_failures_success",
            "test_analyze_failures_handles_exception",
            "test_save_analysis_writes_file",
            "__init__",
            "get_failures",
            "__init__",
            "fake_create"
        ],
        "classes": {
            "DummyArchiveService": {
                "methods": [
                    "__init__",
                    "get_failures"
                ],
                "docstring": null,
                "base_classes": []
            },
            "DummyResponse": {
                "methods": [
                    "__init__"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 11
    },
    "tests\\core\\coordination\\test_base_dispatcher.py": {
        "language": ".py",
        "functions": [
            "test_base_dispatcher_initialization",
            "test_add_task",
            "test_run_dispatcher_loop",
            "test_stop_dispatcher",
            "test_get_status",
            "__init__",
            "execute_task"
        ],
        "classes": {
            "MockDispatcher": {
                "methods": [
                    "__init__",
                    "execute_task"
                ],
                "docstring": "Mock dispatcher for testing.",
                "base_classes": [
                    "BaseDispatcher"
                ]
            }
        },
        "routes": [],
        "complexity": 9
    },
    "tests\\core\\gui\\main_window.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "tests\\core\\gui\\test_main_window_state.py": {
        "language": ".py",
        "functions": [
            "get_tasks",
            "get_events",
            "log_event",
            "__init__",
            "add_tab",
            "widget",
            "tabText",
            "count",
            "get_tab_by_name",
            "__init__",
            "get_state",
            "restore_state",
            "prepare_for_shutdown",
            "setUpClass",
            "setUp",
            "tearDown",
            "test_01_save_state_creates_file",
            "test_02_load_state_restores_tabs",
            "test_03_load_state_no_file",
            "test_04_load_state_corrupt_file",
            "test_05_manual_save_state",
            "test_06_auto_save_state"
        ],
        "classes": {
            "MockTaskManager": {
                "methods": [
                    "get_tasks"
                ],
                "docstring": null,
                "base_classes": []
            },
            "MockFeedbackEngine": {
                "methods": [
                    "get_events",
                    "log_event"
                ],
                "docstring": null,
                "base_classes": []
            },
            "MockTabManager": {
                "methods": [
                    "__init__",
                    "add_tab",
                    "widget",
                    "tabText",
                    "count",
                    "get_tab_by_name"
                ],
                "docstring": null,
                "base_classes": [
                    "QTabWidget"
                ]
            },
            "MockTab": {
                "methods": [
                    "__init__",
                    "get_state",
                    "restore_state",
                    "prepare_for_shutdown"
                ],
                "docstring": null,
                "base_classes": []
            },
            "TestMainWindowState": {
                "methods": [
                    "setUpClass",
                    "setUp",
                    "tearDown",
                    "test_01_save_state_creates_file",
                    "test_02_load_state_restores_tabs",
                    "test_03_load_state_no_file",
                    "test_04_load_state_corrupt_file",
                    "test_05_manual_save_state",
                    "test_06_auto_save_state"
                ],
                "docstring": null,
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 44
    },
    "tests\\core\\gui\\test_tab_system_shutdown.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "log_event",
            "__init__",
            "get_state",
            "prepare_for_shutdown",
            "setUp",
            "tearDown",
            "test_01_initiate_shutdown_happy_path",
            "test_02_shutdown_with_failing_prepare",
            "test_03_shutdown_persisted_state_error",
            "test_04_handle_shutdown_error_logging"
        ],
        "classes": {
            "MockFeedbackEngine": {
                "methods": [
                    "__init__",
                    "log_event"
                ],
                "docstring": null,
                "base_classes": []
            },
            "MockTab": {
                "methods": [
                    "__init__",
                    "get_state",
                    "prepare_for_shutdown"
                ],
                "docstring": null,
                "base_classes": []
            },
            "TestTabSystemShutdown": {
                "methods": [
                    "setUp",
                    "tearDown",
                    "test_01_initiate_shutdown_happy_path",
                    "test_02_shutdown_with_failing_prepare",
                    "test_03_shutdown_persisted_state_error",
                    "test_04_handle_shutdown_error_logging"
                ],
                "docstring": null,
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 22
    },
    "tests\\core\\monitoring\\test_prompt_execution_monitor.py": {
        "language": ".py",
        "functions": [
            "make_monitor",
            "test_success_removes_from_tracking",
            "test_duplicate_failure_not_archived_twice",
            "test_recovery_requeues_prompt",
            "test_monitor_timeout_triggers_failure",
            "fake_sleep",
            "__init__",
            "save_fragment",
            "load_fragment",
            "__init__",
            "queue_prompt",
            "__init__",
            "get_by_prompt_id",
            "log_failure"
        ],
        "classes": {
            "DummyMemory": {
                "methods": [
                    "__init__",
                    "save_fragment",
                    "load_fragment"
                ],
                "docstring": null,
                "base_classes": []
            },
            "DummyDispatcher": {
                "methods": [
                    "__init__",
                    "queue_prompt"
                ],
                "docstring": null,
                "base_classes": []
            },
            "DummyArchive": {
                "methods": [
                    "__init__",
                    "get_by_prompt_id",
                    "log_failure"
                ],
                "docstring": null,
                "base_classes": []
            },
            "Done": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "Exception"
                ]
            }
        },
        "routes": [],
        "complexity": 22
    },
    "tests\\monitors\\test_mailbox_monitor_agent.py": {
        "language": ".py",
        "functions": [
            "no_lock",
            "test_process_unread_messages_creates_task",
            "fake_acquire",
            "fake_release"
        ],
        "classes": {},
        "routes": [],
        "complexity": 4
    },
    "tests\\scripts\\test_run_qa.py": {
        "language": ".py",
        "functions": [
            "setUp",
            "test_generate_markdown_report_structure",
            "test_generate_markdown_report_cat_one_table",
            "test_generate_markdown_report_cat_two_table",
            "test_generate_markdown_report_summary_table",
            "test_generate_markdown_report_empty_checklist",
            "test_list_items_default_formatting",
            "test_list_items_filtering",
            "test_update_item_status_success",
            "test_update_item_status_not_found",
            "generate_markdown_report",
            "load_checklist",
            "save_checklist",
            "update_item_status",
            "list_items",
            "show_summary",
            "main"
        ],
        "classes": {
            "TestRunQAScript": {
                "methods": [
                    "setUp",
                    "test_generate_markdown_report_structure",
                    "test_generate_markdown_report_cat_one_table",
                    "test_generate_markdown_report_cat_two_table",
                    "test_generate_markdown_report_summary_table",
                    "test_generate_markdown_report_empty_checklist",
                    "test_list_items_default_formatting",
                    "test_list_items_filtering",
                    "test_update_item_status_success",
                    "test_update_item_status_not_found"
                ],
                "docstring": null,
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 27
    },
    "tests\\task_nexus\\test_task_nexus.py": {
        "language": ".py",
        "functions": [
            "temp_task_file",
            "test_add_and_load_task",
            "test_get_next_task_marks_claimed",
            "test_get_next_task_filters_by_type",
            "test_update_task_status",
            "test_stats_summary"
        ],
        "classes": {},
        "routes": [],
        "complexity": 6
    },
    "tests\\tools\\test_code_applicator.py": {
        "language": ".py",
        "functions": [
            "write_file",
            "temp_file",
            "backup_file",
            "test_overwrite_mode",
            "test_append_mode",
            "test_replace_markers_mode",
            "test_backup_creation"
        ],
        "classes": {},
        "routes": [],
        "complexity": 7
    },
    "tests\\tools\\test_compile_lore.py": {
        "language": ".py",
        "functions": [
            "create_file",
            "translation_yaml",
            "tasks_json",
            "test_compile_lore_cli"
        ],
        "classes": {},
        "routes": [],
        "complexity": 4
    },
    "tests\\tools\\test_compile_lore_cli.py": {
        "language": ".py",
        "functions": [
            "translation_yaml",
            "tasks_json",
            "test_compile_lore_cli"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "tools\\code_applicator.py": {
        "language": ".py",
        "functions": [
            "apply_code"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "tools\\dreamscape_chronicle.py": {
        "language": ".py",
        "functions": [
            "generate_chronicle",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "tools\\onboarding_splitter.py": {
        "language": ".py",
        "functions": [
            "split_onboarding",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "tools\\thea_strategist.py": {
        "language": ".py",
        "functions": [
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "typer\\testing.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "invoke",
            "__init__"
        ],
        "classes": {
            "CliRunner": {
                "methods": [
                    "__init__",
                    "invoke"
                ],
                "docstring": null,
                "base_classes": []
            },
            "Result": {
                "methods": [
                    "__init__"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 6
    },
    "typer\\__init__.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "__init__",
            "__init__",
            "command",
            "__call__",
            "decorator"
        ],
        "classes": {
            "Exit": {
                "methods": [
                    "__init__"
                ],
                "docstring": null,
                "base_classes": [
                    "SystemExit"
                ]
            },
            "Option": {
                "methods": [
                    "__init__"
                ],
                "docstring": null,
                "base_classes": []
            },
            "Typer": {
                "methods": [
                    "__init__",
                    "command",
                    "__call__"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 11
    },
    "ui\\fragment_forge_tab.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_init_ui",
            "_connect_signals",
            "_populate_fragment_list",
            "_on_fragment_selected",
            "_update_preview",
            "_gather_fragment_data",
            "_save_fragment",
            "_delete_fragment",
            "_clear_form",
            "_attach_file_dialog",
            "_attach_file_voice",
            "_attach_file_bgm",
            "load_fragment"
        ],
        "classes": {
            "FragmentForgeTab": {
                "methods": [
                    "__init__",
                    "_init_ui",
                    "_connect_signals",
                    "_populate_fragment_list",
                    "_on_fragment_selected",
                    "_update_preview",
                    "_gather_fragment_data",
                    "_save_fragment",
                    "_delete_fragment",
                    "_clear_form",
                    "_attach_file_dialog",
                    "_attach_file_voice",
                    "_attach_file_bgm",
                    "load_fragment"
                ],
                "docstring": "GUI Tab Widget for interacting with the Dream Fragment Forge.",
                "base_classes": [
                    "QWidget"
                ]
            },
            "QWidget": {
                "methods": [],
                "docstring": null,
                "base_classes": []
            },
            "QVBoxLayout": {
                "methods": [],
                "docstring": null,
                "base_classes": []
            },
            "QHBoxLayout": {
                "methods": [],
                "docstring": null,
                "base_classes": []
            },
            "QLabel": {
                "methods": [],
                "docstring": null,
                "base_classes": []
            },
            "QLineEdit": {
                "methods": [],
                "docstring": null,
                "base_classes": []
            },
            "QTextEdit": {
                "methods": [],
                "docstring": null,
                "base_classes": []
            },
            "QPushButton": {
                "methods": [],
                "docstring": null,
                "base_classes": []
            },
            "QComboBox": {
                "methods": [],
                "docstring": null,
                "base_classes": []
            },
            "QFormLayout": {
                "methods": [],
                "docstring": null,
                "base_classes": []
            },
            "QSizePolicy": {
                "methods": [],
                "docstring": null,
                "base_classes": []
            },
            "QFileDialog": {
                "methods": [],
                "docstring": null,
                "base_classes": []
            },
            "QCompleter": {
                "methods": [],
                "docstring": null,
                "base_classes": []
            },
            "QGroupBox": {
                "methods": [],
                "docstring": null,
                "base_classes": []
            },
            "QSpinBox": {
                "methods": [],
                "docstring": null,
                "base_classes": []
            },
            "QListWidget": {
                "methods": [],
                "docstring": null,
                "base_classes": []
            },
            "QListWidgetItem": {
                "methods": [],
                "docstring": null,
                "base_classes": []
            },
            "QStringListModel": {
                "methods": [],
                "docstring": null,
                "base_classes": []
            },
            "Qt": {
                "methods": [],
                "docstring": null,
                "base_classes": []
            },
            "QFont": {
                "methods": [],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 28
    },
    "ui\\main_window.py": {
        "language": ".py",
        "functions": [
            "add_task",
            "__init__",
            "_create_navigation",
            "add_navigation_item",
            "get_sidebar_items",
            "log_event",
            "notify_mailbox",
            "sync_event_with_board",
            "save_state",
            "_append_task_to_list",
            "load_state_fallback",
            "closeEvent",
            "cleanup_resources"
        ],
        "classes": {
            "DummyTaskManager": {
                "methods": [
                    "add_task"
                ],
                "docstring": null,
                "base_classes": []
            },
            "DreamOSMainWindow": {
                "methods": [
                    "__init__",
                    "_create_navigation",
                    "add_navigation_item",
                    "get_sidebar_items",
                    "log_event",
                    "notify_mailbox",
                    "sync_event_with_board",
                    "save_state",
                    "_append_task_to_list",
                    "load_state_fallback",
                    "closeEvent",
                    "cleanup_resources"
                ],
                "docstring": "Main application window for Dream.OS using Sidebar Navigation.",
                "base_classes": [
                    "QMainWindow"
                ]
            }
        },
        "routes": [],
        "complexity": 26
    },
    "ui\\task_visualizer_app.py": {
        "language": ".py",
        "functions": [
            "read_tasks_from_json",
            "load_task_data"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "ui\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "_agent_coordination\\config.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "_agent_coordination\\quorum_web_simulation.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "__init__",
            "__init__"
        ],
        "classes": {
            "WebAgent": {
                "methods": [
                    "__init__"
                ],
                "docstring": null,
                "base_classes": []
            },
            "OllamaAgent": {
                "methods": [
                    "__init__"
                ],
                "docstring": null,
                "base_classes": []
            },
            "CouncilManager": {
                "methods": [
                    "__init__"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 6
    },
    "_agent_coordination\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "_agent_coordination\\agents\\feedback_monitor_agent.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "run"
        ],
        "classes": {
            "FeedbackMonitorAgent": {
                "methods": [
                    "__init__",
                    "run"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 4
    },
    "_agent_coordination\\archive\\temp_test_registry.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "_agent_coordination\\dispatchers\\task_dispatcher.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_dispatch_message_to_agent",
            "handle_task",
            "process_pending_tasks",
            "run",
            "read_tasks",
            "write_tasks",
            "update_task_status"
        ],
        "classes": {
            "TaskDispatcher": {
                "methods": [
                    "__init__",
                    "_dispatch_message_to_agent",
                    "handle_task",
                    "process_pending_tasks",
                    "run"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 13
    },
    "_agent_coordination\\examples\\onboarding_message_injector.py": {
        "language": ".py",
        "functions": [
            "inject_initial_onboarding_message"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "_agent_coordination\\coordinators\\cursor_chat_coordinator.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "interpret_response"
        ],
        "classes": {
            "CursorChatCoordinator": {
                "methods": [
                    "__init__",
                    "interpret_response"
                ],
                "docstring": "Agent responsible for managing high-level conversational task execution inside a Cursor instance.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 4
    },
    "_agent_coordination\\examples\\reflection_agent.py": {
        "language": ".py",
        "functions": [
            "load_rules_from_rulebook",
            "generate_reflection",
            "save_reflection",
            "submit_proposal",
            "start_monitoring",
            "__init__",
            "on_created"
        ],
        "classes": {
            "AlertHandler": {
                "methods": [
                    "__init__",
                    "on_created"
                ],
                "docstring": "Handles new alert files in the inbox directory.",
                "base_classes": [
                    "FileSystemEventHandler"
                ]
            }
        },
        "routes": [],
        "complexity": 9
    },
    "_agent_coordination\\examples\\stubs\\agent_1_stub.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_handle_plan"
        ],
        "classes": {
            "Agent1Stub": {
                "methods": [
                    "__init__",
                    "_handle_plan"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 4
    },
    "_agent_coordination\\monitors\\mailbox_monitor_agent.py": {
        "language": ".py",
        "functions": [
            "acquire_lock",
            "release_lock",
            "__init__",
            "_read_mailbox_file",
            "_write_mailbox",
            "_add_task_to_list",
            "_get_mailbox_files",
            "_process_unread_messages",
            "_transform_message_to_task",
            "stop"
        ],
        "classes": {
            "MailboxMonitorAgent": {
                "methods": [
                    "__init__",
                    "_read_mailbox_file",
                    "_write_mailbox",
                    "_add_task_to_list",
                    "_get_mailbox_files",
                    "_process_unread_messages",
                    "_transform_message_to_task",
                    "stop"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 18
    },
    "_agent_coordination\\runtime\\agent_entrypoint.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "_agent_coordination\\state_machines\\task_execution_state_machine.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "can_advance",
            "advance_state",
            "is_terminal",
            "as_dict"
        ],
        "classes": {
            "TaskState": {
                "methods": [],
                "docstring": "Enumerated task lifecycle states.",
                "base_classes": [
                    "Enum"
                ]
            },
            "TaskExecutionStateMachine": {
                "methods": [
                    "__init__",
                    "can_advance",
                    "advance_state",
                    "is_terminal",
                    "as_dict"
                ],
                "docstring": "State machine to manage task lifecycle.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 10
    },
    "_agent_coordination\\state_machines\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "_agent_coordination\\supervisor_tools\\apply_proposals.py": {
        "language": ".py",
        "functions": [
            "parse_proposals",
            "apply_proposal_to_rulebook",
            "update_proposal_status"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "_agent_coordination\\supervisor_tools\\send_shared_mailbox_message.py": {
        "language": ".py",
        "functions": [
            "file_lock",
            "send_shared_message"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "_agent_coordination\\supervisor_tools\\project_scanner\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "_agent_coordination\\supervisor_tools\\project_scanner\\project_scanner.py": {
        "language": ".py",
        "functions": [
            "main",
            "log_security_finding",
            "scan_proposal_block",
            "__init__",
            "_init_tree_sitter_language",
            "analyze_file",
            "_analyze_python",
            "_analyze_rust",
            "_analyze_javascript",
            "__init__",
            "run",
            "__init__",
            "add_task",
            "wait_for_completion",
            "stop_workers",
            "__init__",
            "hash_file",
            "should_exclude",
            "process_file",
            "__init__",
            "load_existing_report",
            "save_report",
            "generate_init_files",
            "load_existing_chatgpt_context",
            "export_chatgpt_context",
            "__init__",
            "load_cache",
            "save_cache",
            "scan_project",
            "_process_file",
            "generate_init_files",
            "export_chatgpt_context",
            "categorize_agents",
            "_maturity_level",
            "_agent_type",
            "_traverse",
            "get_node_text",
            "_traverse"
        ],
        "classes": {
            "LanguageAnalyzer": {
                "methods": [
                    "__init__",
                    "_init_tree_sitter_language",
                    "analyze_file",
                    "_analyze_python",
                    "_analyze_rust",
                    "_analyze_javascript"
                ],
                "docstring": "Handles language-specific code analysis for different programming languages.",
                "base_classes": []
            },
            "BotWorker": {
                "methods": [
                    "__init__",
                    "run"
                ],
                "docstring": "A background worker that pulls file tasks from a queue,\nprocesses them, and appends results to results_list.",
                "base_classes": [
                    "threading.Thread"
                ]
            },
            "MultibotManager": {
                "methods": [
                    "__init__",
                    "add_task",
                    "wait_for_completion",
                    "stop_workers"
                ],
                "docstring": "Manages a pool of BotWorker threads.",
                "base_classes": []
            },
            "FileProcessor": {
                "methods": [
                    "__init__",
                    "hash_file",
                    "should_exclude",
                    "process_file"
                ],
                "docstring": "Handles file hashing, ignoring, caching checks, etc.",
                "base_classes": []
            },
            "ReportGenerator": {
                "methods": [
                    "__init__",
                    "load_existing_report",
                    "save_report",
                    "generate_init_files",
                    "load_existing_chatgpt_context",
                    "export_chatgpt_context"
                ],
                "docstring": "Handles merging new analysis into existing project_analysis.json and chatgpt context.",
                "base_classes": []
            },
            "ProjectScanner": {
                "methods": [
                    "__init__",
                    "load_cache",
                    "save_cache",
                    "scan_project",
                    "_process_file",
                    "generate_init_files",
                    "export_chatgpt_context",
                    "categorize_agents",
                    "_maturity_level",
                    "_agent_type"
                ],
                "docstring": "A universal project scanner that:\n  - Identifies Python, Rust, JS, TS files.\n  - Extracts functions, classes, routes, complexity.\n  - Caches file hashes to skip unchanged files.\n  - Detects moved files by matching file hashes.\n  - Merges new analysis into existing project_analysis.json (preserving old entries).\n  - Exports a merged ChatGPT context if requested (preserving old context data).\n  - Processes files asynchronously with BotWorker threads.\n  - Auto-generates __init__.py files for Python packages.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 70
    },
    "_agent_coordination\\tasks\\organize_task_pool_v1.py": {
        "language": ".py",
        "functions": [
            "is_output_file",
            "load_tasks_from_file",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "_agent_coordination\\supervisor_tools\\project_scanner\\cli\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "_agent_coordination\\tasks\\consolidate_tasks.py": {
        "language": ".py",
        "functions": [
            "load_all_tasks",
            "dedupe_tasks",
            "split_and_write",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 4
    },
    "_agent_coordination\\tasks\\deduplicate_tasks.py": {
        "language": ".py",
        "functions": [
            "deduplicate_by_description"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "_agent_coordination\\tests\\test_agent_registry.py": {
        "language": ".py",
        "functions": [
            "clear_registry_before_each",
            "test_reflection_agent_registered",
            "test_get_agent_class",
            "test_get_unknown_agent_class",
            "test_agent_instantiation_and_run_smoke",
            "test_duplicate_registration_error"
        ],
        "classes": {},
        "routes": [],
        "complexity": 6
    },
    "_agent_coordination\\tests\\test_apply_proposals.py": {
        "language": ".py",
        "functions": [
            "temp_dirs",
            "sample_rulebook_content",
            "sample_proposals_content",
            "run_apply_proposals",
            "test_apply_proposal_unlocked_rule",
            "test_apply_proposal_locked_rule_blocked",
            "test_apply_proposal_locked_rule_override",
            "test_apply_proposal_only_accepted_status",
            "setUp",
            "test_apply_proposal_to_existing_rule",
            "test_append_new_rule",
            "test_update_proposal_status"
        ],
        "classes": {
            "TestApplyProposals": {
                "methods": [
                    "setUp",
                    "test_apply_proposal_to_existing_rule",
                    "test_append_new_rule",
                    "test_update_proposal_status"
                ],
                "docstring": null,
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 16
    },
    "_agent_coordination\\tests\\test_common_utils.py": {
        "language": ".py",
        "functions": [
            "log_event",
            "valid_proposal_args",
            "mock_config",
            "test_add_proposal_valid",
            "test_add_proposal_invalid_category",
            "test_add_proposal_invalid_priority",
            "test_add_proposal_file_creation",
            "test_add_proposal_file_append",
            "test_add_proposal_file_error",
            "test_add_proposal_minimal"
        ],
        "classes": {},
        "routes": [],
        "complexity": 10
    },
    "_agent_coordination\\tests\\test_config.py": {
        "language": ".py",
        "functions": [
            "log_event",
            "test_workspace_root_exists",
            "test_directory_paths",
            "test_file_paths",
            "test_log_file_paths",
            "test_mailbox_subdirs",
            "test_message_format",
            "test_status_constants"
        ],
        "classes": {},
        "routes": [],
        "complexity": 8
    },
    "_agent_coordination\\tests\\test_cursor_dispatcher.py": {
        "language": ".py",
        "functions": [
            "log_event",
            "sample_context",
            "test_generate_cursor_prompt_basic",
            "test_generate_cursor_prompt_missing_fields",
            "test_generate_cursor_prompt_empty_context",
            "context_file",
            "test_dispatch_to_cursor_file_not_found",
            "test_dispatch_to_cursor_invalid_json",
            "test_dispatch_to_cursor_success",
            "test_dispatch_to_cursor_cursor_not_found",
            "test_dispatch_to_cursor_pyperclip_import_error",
            "test_dispatch_to_cursor_gui_automation_error"
        ],
        "classes": {},
        "routes": [],
        "complexity": 12
    },
    "_agent_coordination\\tests\\test_cursor_sync_loop.py": {
        "language": ".py",
        "functions": [
            "setup_test_environment",
            "create_test_prompt",
            "start_listener_subprocess",
            "stop_listener_subprocess",
            "test_full_sync_loop"
        ],
        "classes": {},
        "routes": [],
        "complexity": 5
    },
    "_agent_coordination\\tests\\test_mailbox_utils.py": {
        "language": ".py",
        "functions": [
            "log_event",
            "test_dirs",
            "create_test_file",
            "test_directory_creation",
            "test_successful_processing",
            "test_failed_processing",
            "test_process_func_exception",
            "test_wrong_file_suffix",
            "test_stop_event_handling",
            "process_func",
            "process_func",
            "process_func",
            "process_func",
            "process_func"
        ],
        "classes": {},
        "routes": [],
        "complexity": 14
    },
    "_agent_coordination\\tests\\test_reflection_agent.py": {
        "language": ".py",
        "functions": [
            "temp_rulebook_for_reflection",
            "temp_proposals_path",
            "test_dirs",
            "alert_data_no_rule",
            "alert_data_rule_found",
            "alert_data_ambiguous",
            "test_generate_reflection_no_proposal",
            "test_generate_reflection_proposes_on_no_rule",
            "test_generate_reflection_proposes_on_ambiguity",
            "test_save_reflection",
            "test_submit_proposal",
            "test_submit_proposal_no_content",
            "test_alert_handler_integration"
        ],
        "classes": {},
        "routes": [],
        "complexity": 13
    },
    "_agent_coordination\\tests\\test_template_engine.py": {
        "language": ".py",
        "functions": [
            "log_event",
            "mock_template_env",
            "setup_env",
            "test_render_valid_template",
            "test_render_missing_template",
            "test_render_invalid_context",
            "test_generate_twitter_post",
            "test_generate_post_invalid_platform",
            "test_env_initialization_no_template_dirs",
            "test_template_whitespace_handling",
            "test_variable_detection_simple",
            "test_variable_detection_with_filters",
            "test_variable_detection_nested",
            "test_malformed_template"
        ],
        "classes": {},
        "routes": [],
        "complexity": 14
    },
    "_agent_coordination\\tests\\agents\\test_stall_recovery_agent.py": {
        "language": ".py",
        "functions": [
            "temp_project",
            "recovery_agent",
            "test_stall_detection_and_context",
            "test_recovery_task_injection",
            "test_stall_logging",
            "test_task_fields_populated",
            "test_specific_stall_category_no_input"
        ],
        "classes": {},
        "routes": [],
        "complexity": 7
    },
    "_agent_coordination\\tests\\core\\test_agent_bus.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "_agent_coordination\\tests\\core\\test_base_utils.py": {
        "language": ".py",
        "functions": [
            "test_singleton",
            "test_generate_id",
            "test_json_file_operations",
            "test_validation",
            "__init__"
        ],
        "classes": {
            "TestSingleton": {
                "methods": [
                    "__init__"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 6
    },
    "_agent_coordination\\tests\\core\\test_config_service.py": {
        "language": ".py",
        "functions": [
            "config_dir",
            "config_service",
            "sample_configs",
            "test_config_source_creation",
            "test_add_source",
            "test_load_json_config",
            "test_load_yaml_config",
            "test_load_env_config",
            "test_config_namespaces",
            "test_config_save",
            "test_missing_required_config",
            "test_missing_optional_config",
            "test_get_with_default"
        ],
        "classes": {},
        "routes": [],
        "complexity": 13
    },
    "_agent_coordination\\tests\\core\\test_dispatcher.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "_agent_coordination\\tests\\core\\test_logging.py": {
        "language": ".py",
        "functions": [
            "log_dir",
            "log_manager",
            "test_log_formatter",
            "test_log_formatter_with_exception",
            "test_log_manager_configuration",
            "test_get_logger_with_component",
            "test_get_logger_without_component",
            "test_log_manager_singleton",
            "test_logging_output",
            "test_set_level",
            "test_log_rotation"
        ],
        "classes": {},
        "routes": [],
        "complexity": 11
    },
    "_agent_coordination\\tests\\core\\test_metrics.py": {
        "language": ".py",
        "functions": [
            "metric_collector",
            "test_timing_stats",
            "failing_collector"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "_agent_coordination\\tests\\core\\test_path_manager.py": {
        "language": ".py",
        "functions": [
            "temp_dir",
            "path_manager",
            "test_init",
            "test_get_file_type",
            "test_create_node",
            "test_scan",
            "test_find",
            "test_walk",
            "test_path_conversion",
            "test_cache_operations",
            "test_watch_operations"
        ],
        "classes": {},
        "routes": [],
        "complexity": 11
    },
    "_agent_coordination\\tests\\core\\test_system.py": {
        "language": ".py",
        "functions": [
            "temp_dir",
            "command_executor",
            "directory_monitor",
            "file_manager",
            "__init__"
        ],
        "classes": {
            "TestDirectoryMonitor": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Test implementation of DirectoryMonitor.",
                "base_classes": [
                    "DirectoryMonitor"
                ]
            },
            "ErrorMonitor": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "DirectoryMonitor"
                ]
            }
        },
        "routes": [],
        "complexity": 6
    },
    "_agent_coordination\\tests\\social\\utils\\test_chatgpt_scraper.py": {
        "language": ".py",
        "functions": [
            "mock_session",
            "scraper",
            "test_initialization",
            "test_login_success",
            "test_login_failure",
            "test_verify_session",
            "test_get_conversation_history",
            "test_get_conversation_messages",
            "test_send_message",
            "test_rate_limit_handling",
            "test_error_response_handling",
            "test_retry_mechanism",
            "test_cleanup"
        ],
        "classes": {
            "TestChatGPTScraper": {
                "methods": [
                    "test_initialization",
                    "test_login_success",
                    "test_login_failure",
                    "test_verify_session",
                    "test_get_conversation_history",
                    "test_get_conversation_messages",
                    "test_send_message",
                    "test_rate_limit_handling",
                    "test_error_response_handling",
                    "test_retry_mechanism",
                    "test_cleanup"
                ],
                "docstring": "Test suite for ChatGPT scraping functionality.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 24
    },
    "_agent_coordination\\tests\\social\\utils\\test_chatgpt_templating.py": {
        "language": ".py",
        "functions": [
            "mock_session",
            "scraper",
            "sample_dev_log_entry",
            "test_template_rendering",
            "test_template_with_multiple_variables",
            "test_register_custom_template",
            "test_parse_dev_log_response",
            "test_export_dev_log_markdown",
            "test_export_dev_log_json",
            "test_invalid_export_format"
        ],
        "classes": {
            "TestPromptTemplate": {
                "methods": [
                    "test_template_rendering",
                    "test_template_with_multiple_variables"
                ],
                "docstring": "Test suite for prompt template functionality.",
                "base_classes": []
            },
            "TestDevLogGeneration": {
                "methods": [
                    "test_register_custom_template",
                    "test_parse_dev_log_response",
                    "test_export_dev_log_markdown",
                    "test_export_dev_log_json",
                    "test_invalid_export_format"
                ],
                "docstring": "Test suite for dev log generation functionality.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 17
    },
    "_agent_coordination\\tests\\tools\\test_cursor_metrics.py": {
        "language": ".py",
        "functions": [
            "mock_directories",
            "clean_registry",
            "test_execution_metrics_success",
            "test_execution_metrics_failure",
            "test_error_metrics",
            "test_queue_metrics",
            "test_processing_time_tracking",
            "test_multiple_error_types",
            "test_queue_metrics_error_handling",
            "test_execution_metrics_default_agent",
            "test_concurrent_metric_updates",
            "random_update"
        ],
        "classes": {
            "TestCursorMetrics": {
                "methods": [
                    "test_execution_metrics_success",
                    "test_execution_metrics_failure",
                    "test_error_metrics",
                    "test_queue_metrics",
                    "test_processing_time_tracking",
                    "test_multiple_error_types",
                    "test_queue_metrics_error_handling",
                    "test_execution_metrics_default_agent",
                    "test_concurrent_metric_updates"
                ],
                "docstring": "Test suite for cursor metrics functionality.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 21
    },
    "_agent_coordination\\tests\\tools\\test_cursor_result_listener.py": {
        "language": ".py",
        "functions": [
            "mock_config_service",
            "mock_log_event",
            "test_dirs",
            "listener",
            "sample_prompt_file",
            "test_listener_initialization",
            "test_metrics_registration",
            "test_update_queue_metrics",
            "test_production_config_validation",
            "test_cli_entrypoint"
        ],
        "classes": {},
        "routes": [],
        "complexity": 10
    },
    "_agent_coordination\\tests\\tools\\test_event_bus.py": {
        "language": ".py",
        "functions": [
            "test_publish_subscribe",
            "test_acknowledgment_success",
            "test_acknowledgment_timeout",
            "callback",
            "callback_ack",
            "callback_no_ack"
        ],
        "classes": {},
        "routes": [],
        "complexity": 6
    },
    "_agent_coordination\\tests\\tools\\test_monitoring_stack.py": {
        "language": ".py",
        "functions": [
            "monitoring_stack",
            "_check_services_health",
            "test_prometheus_metrics",
            "test_grafana_datasource",
            "test_grafana_dashboard",
            "is_service_ready",
            "test_prometheus_ready",
            "test_grafana_healthy",
            "test_prometheus_metrics_endpoint",
            "test_grafana_datasource",
            "test_dashboard_provisioned",
            "test_metric_exists"
        ],
        "classes": {
            "TestMonitoringStack": {
                "methods": [
                    "test_prometheus_ready",
                    "test_grafana_healthy",
                    "test_prometheus_metrics_endpoint",
                    "test_grafana_datasource",
                    "test_dashboard_provisioned",
                    "test_metric_exists"
                ],
                "docstring": "Test suite for monitoring stack functionality.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 18
    },
    "_agent_coordination\\tests\\unit\\test_agent_command_handler.py": {
        "language": ".py",
        "functions": [
            "setUp",
            "test_handle_terminate_sets_flag_and_reason",
            "test_handle_terminate_default_reason",
            "test_handle_terminate_handles_delay_param"
        ],
        "classes": {
            "TestAgentCommandHandlerTerminate": {
                "methods": [
                    "setUp",
                    "test_handle_terminate_sets_flag_and_reason",
                    "test_handle_terminate_default_reason",
                    "test_handle_terminate_handles_delay_param"
                ],
                "docstring": null,
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 8
    },
    "_agent_coordination\\tools\\auto_task_claimer.py": {
        "language": ".py",
        "functions": [
            "claim_next_task",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "_agent_coordination\\tools\\brainstorm_tank.py": {
        "language": ".py",
        "functions": [
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "_agent_coordination\\tools\\broadcast_directive.py": {
        "language": ".py",
        "functions": [
            "broadcast_to_mailboxes"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "_agent_coordination\\tools\\check_confirmation_state.py": {
        "language": ".py",
        "functions": [
            "check_confirmation"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "_agent_coordination\\tools\\code_applicator.py": {
        "language": ".py",
        "functions": [
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "_agent_coordination\\tools\\compile_lore.py": {
        "language": ".py",
        "functions": [
            "load_translation",
            "load_tasks",
            "compile_lore",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 4
    },
    "_agent_coordination\\tools\\consolidate_master_tasks.py": {
        "language": ".py",
        "functions": [
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "_agent_coordination\\tools\\context_planner.py": {
        "language": ".py",
        "functions": [
            "parse_context",
            "extract_entities_v3",
            "create_plan_step",
            "generate_context_plan_v3",
            "find_entity"
        ],
        "classes": {},
        "routes": [],
        "complexity": 5
    },
    "_agent_coordination\\tools\\demo_local_channel.py": {
        "language": ".py",
        "functions": [
            "worker",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "_agent_coordination\\tools\\diagnostics.py": {
        "language": ".py",
        "functions": [
            "check_directory_exists",
            "check_file_exists",
            "check_json_file",
            "run_diagnostics"
        ],
        "classes": {},
        "routes": [],
        "complexity": 4
    },
    "_agent_coordination\\tools\\dreamctl.py": {
        "language": ".py",
        "functions": [
            "status",
            "pause",
            "resume",
            "claim",
            "release",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 6
    },
    "_agent_coordination\\tools\\event_bus.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "subscribe",
            "publish"
        ],
        "classes": {
            "EventBus": {
                "methods": [
                    "__init__",
                    "subscribe",
                    "publish"
                ],
                "docstring": "Lightweight in-memory pub/sub broker with ack support.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 6
    },
    "_agent_coordination\\tools\\file_lock_manager.py": {
        "language": ".py",
        "functions": [
            "read_json",
            "write_json",
            "__init__",
            "acquire",
            "release",
            "__enter__",
            "__exit__"
        ],
        "classes": {
            "FileLock": {
                "methods": [
                    "__init__",
                    "acquire",
                    "release",
                    "__enter__",
                    "__exit__"
                ],
                "docstring": "Context manager that provides exclusive file lock for a given file path.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 12
    },
    "_agent_coordination\\tools\\find_potential_scripts.py": {
        "language": ".py",
        "functions": [
            "is_excluded",
            "file_contains_keywords",
            "find_scripts"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "_agent_coordination\\tools\\log_analyzer.py": {
        "language": ".py",
        "functions": [
            "load_logs",
            "analyze"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "_agent_coordination\\tools\\monitor_console.py": {
        "language": ".py",
        "functions": [
            "count_json_files",
            "monitor_loop"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "_agent_coordination\\tools\\parse_feedback_stats.py": {
        "language": ".py",
        "functions": [
            "load_latest_stats",
            "load_feedback",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "_agent_coordination\\tools\\project_context_producer.py": {
        "language": ".py",
        "functions": [
            "extract_paths_from_log",
            "find_python_files",
            "produce_project_context",
            "main"
        ],
        "classes": {
            "ContextConfig": {
                "methods": [],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 4
    },
    "_agent_coordination\\tools\\proposal_security_scanner.py": {
        "language": ".py",
        "functions": [
            "log_security_finding",
            "scan_proposal_block",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "_agent_coordination\\tools\\reload_agent_context.py": {
        "language": ".py",
        "functions": [
            "reload_context"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "_agent_coordination\\tools\\reset_tasks.py": {
        "language": ".py",
        "functions": [
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "_agent_coordination\\tools\\run_agent.py": {
        "language": ".py",
        "functions": [
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "_agent_coordination\\tools\\run_qa.py": {
        "language": ".py",
        "functions": [
            "load_checklist",
            "save_checklist",
            "find_item",
            "list_items",
            "update_item_status",
            "show_summary",
            "generate_markdown_report",
            "save_report",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 9
    },
    "_agent_coordination\\tools\\set_project.py": {
        "language": ".py",
        "functions": [
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "_agent_coordination\\tools\\supervisor_task_consolidator.py": {
        "language": ".py",
        "functions": [
            "load_all_tasks",
            "split_and_write",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "_agent_coordination\\tools\\swarm_orchestrator.py": {
        "language": ".py",
        "functions": [
            "load_json",
            "save_json",
            "log_to_mailboxes",
            "assign_tasks",
            "collect_results",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 6
    },
    "_agent_coordination\\utils\\agent_registry.py": {
        "language": ".py",
        "functions": [
            "register_agent",
            "get_agent_class",
            "get_registered_agents"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "_agent_coordination\\utils\\common_utils.py": {
        "language": ".py",
        "functions": [
            "add_proposal"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "_agent_coordination\\utils\\emotion_detector.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "detect_emotion"
        ],
        "classes": {
            "EmotionCueDetector": {
                "methods": [
                    "__init__",
                    "detect_emotion"
                ],
                "docstring": "Detects emotional cues in reflection text using simple keyword heuristics.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 4
    },
    "_agent_coordination\\utils\\mailbox_utils.py": {
        "language": ".py",
        "functions": [
            "process_directory_loop"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "_agent_coordination\\utils\\task_utils.py": {
        "language": ".py",
        "functions": [
            "read_tasks",
            "write_tasks",
            "update_task_status"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "_agent_coordination\\utils\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "_archive\\visual_cursor_control\\coordination\\cursor\\bridge_adapter.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "translate_goal_to_plan",
            "_build_refactor_plan",
            "_build_generate_tests_plan",
            "_build_execute_prompt_plan",
            "_build_type_text_plan"
        ],
        "classes": {
            "CursorGoal": {
                "methods": [],
                "docstring": null,
                "base_classes": []
            },
            "CursorBridgeAdapter": {
                "methods": [
                    "__init__",
                    "translate_goal_to_plan",
                    "_build_refactor_plan",
                    "_build_generate_tests_plan",
                    "_build_execute_prompt_plan",
                    "_build_type_text_plan"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 12
    },
    "_archive\\visual_cursor_control\\coordination\\cursor\\cursor_instance_controller.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "capture",
            "__init__",
            "_init_instances",
            "get_available_instance",
            "get_instance_states",
            "chain_commands",
            "get_instance_by_id"
        ],
        "classes": {
            "CursorInstance": {
                "methods": [
                    "__init__",
                    "capture"
                ],
                "docstring": "Controls a single Cursor window instance.",
                "base_classes": []
            },
            "CursorInstanceController": {
                "methods": [
                    "__init__",
                    "_init_instances",
                    "get_available_instance",
                    "get_instance_states",
                    "chain_commands",
                    "get_instance_by_id"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 16
    },
    "_archive\\visual_cursor_control\\coordination\\cursor\\task_execution_state_machine.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_step_to_commands"
        ],
        "classes": {
            "StepState": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "Enum"
                ]
            },
            "TaskStep": {
                "methods": [],
                "docstring": null,
                "base_classes": []
            },
            "TaskExecutionPlan": {
                "methods": [],
                "docstring": null,
                "base_classes": []
            },
            "TaskExecutionStateMachine": {
                "methods": [
                    "__init__",
                    "_step_to_commands"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 4
    },
    "_core\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "_core\\coordination\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "_core\\coordination\\cursor\\cursor_chat_coordinator.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "interpret_response"
        ],
        "classes": {
            "CursorChatCoordinator": {
                "methods": [
                    "__init__",
                    "interpret_response"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 4
    },
    "_core\\coordination\\cursor\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    }
}