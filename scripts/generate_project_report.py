import os
import subprocess
from pathlib import Path
from datetime import datetime

from core.conversation_stats_updater import ConversationStatsUpdater
from core.memory_manager import MemoryManager

REPORT_DIR = Path("outputs/reports")
REPORT_DIR.mkdir(parents=True, exist_ok=True)


def _git_short_sha() -> str:
    try:
        return (
            subprocess.check_output(["git", "rev-parse", "--short", "HEAD"], text=True)
            .strip()
        )
    except Exception:
        return "unknown"


def build_report() -> str:
    """Return a markdown project status report string."""
    mm = MemoryManager()
    stats = ConversationStatsUpdater(mm).get_conversation_stats_summary(trend=True)

    now = datetime.now().strftime("%Y-%m-%d %H:%M")
    sha = _git_short_sha()

    report_lines = [
        f"# üõ∞Ô∏è Dream.OS Status Report ({now})",
        "",
        f"Git commit: `{sha}`",
        "",
        "## Database Stats",
        f"* Total conversations: **{stats['total_conversations']:,}**",
        f"* Messages (table): **{stats['actual_messages_in_table']:,}**",
        f"* Words: **{stats['total_words']:,}**",
        f"* Daily convos: **{stats.get('daily_conversations', 0):,}**",
        f"* Weekly convos: **{stats.get('weekly_conversations', 0):,}**",
        f"* Monthly convos: **{stats.get('monthly_conversations', 0):,}**",
        "",
        "## Trend (30-day) Avg",
        f"* Messages / Convo: **{stats.get('avg_messages_per_conversation_last_30_days', 0):.1f}**",
        "",
        "---",
        "This report was auto-generated by `scripts/generate_project_report.py`.",
    ]
    return "\n".join(report_lines)


def main():
    md = build_report()
    out_path = REPORT_DIR / f"PROJECT_STATUS_AUTO_{datetime.now().strftime('%Y%m%d_%H%M')}.md"
    out_path.write_text(md, encoding="utf-8")
    print(f"Report written to {out_path}")


if __name__ == "__main__":
    main() 